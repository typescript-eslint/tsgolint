
// Code generated by tools/gen_shims. DO NOT EDIT.

package binder

import "github.com/microsoft/typescript-go/internal/ast"
import "github.com/microsoft/typescript-go/internal/binder"
import "github.com/microsoft/typescript-go/internal/core"
import _ "unsafe"

type ActiveLabel = binder.ActiveLabel
//go:linkname BindSourceFile github.com/microsoft/typescript-go/internal/binder.BindSourceFile
func BindSourceFile(file *ast.SourceFile, options *core.CompilerOptions)
type Binder = binder.Binder
type ContainerFlags = binder.ContainerFlags
const ContainerFlagsHasLocals = binder.ContainerFlagsHasLocals
const ContainerFlagsIsBlockScopedContainer = binder.ContainerFlagsIsBlockScopedContainer
const ContainerFlagsIsContainer = binder.ContainerFlagsIsContainer
const ContainerFlagsIsControlFlowContainer = binder.ContainerFlagsIsControlFlowContainer
const ContainerFlagsIsFunctionExpression = binder.ContainerFlagsIsFunctionExpression
const ContainerFlagsIsFunctionLike = binder.ContainerFlagsIsFunctionLike
const ContainerFlagsIsInterface = binder.ContainerFlagsIsInterface
const ContainerFlagsIsObjectLiteralOrClassExpressionMethodOrAccessor = binder.ContainerFlagsIsObjectLiteralOrClassExpressionMethodOrAccessor
const ContainerFlagsNone = binder.ContainerFlagsNone
//go:linkname FindUseStrictPrologue github.com/microsoft/typescript-go/internal/binder.FindUseStrictPrologue
func FindUseStrictPrologue(sourceFile *ast.SourceFile, statements []*ast.Node) *ast.Node
//go:linkname GetContainerFlags github.com/microsoft/typescript-go/internal/binder.GetContainerFlags
func GetContainerFlags(node *ast.Node) binder.ContainerFlags
//go:linkname GetErrorRangeForNode github.com/microsoft/typescript-go/internal/binder.GetErrorRangeForNode
func GetErrorRangeForNode(sourceFile *ast.SourceFile, node *ast.Node) core.TextRange
//go:linkname GetSymbolNameForPrivateIdentifier github.com/microsoft/typescript-go/internal/binder.GetSymbolNameForPrivateIdentifier
func GetSymbolNameForPrivateIdentifier(containingClassSymbol *ast.Symbol, description string) string
type NameResolver = binder.NameResolver
//go:linkname NewReferenceResolver github.com/microsoft/typescript-go/internal/binder.NewReferenceResolver
func NewReferenceResolver(options *core.CompilerOptions, hooks binder.ReferenceResolverHooks) binder.ReferenceResolver
type ReferenceResolver = binder.ReferenceResolver
type ReferenceResolverHooks = binder.ReferenceResolverHooks
//go:linkname SetValueDeclaration github.com/microsoft/typescript-go/internal/binder.SetValueDeclaration
func SetValueDeclaration(symbol *ast.Symbol, node *ast.Node)
