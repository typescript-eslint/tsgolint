import * as os from 'node:os'
import * as fs from 'node:fs'
import * as path from 'node:path'
import * as child_process from 'node:child_process'
import { CodeBlockWriter } from 'ts-morph'
import { eslintCompatPkgPath } from './shared.ts'
import type { RuleTester } from 'eslint'

const tmpdir = path.join(os.tmpdir(), 'tsgolint-eslint-core-rules')

if (!fs.existsSync(tmpdir)) {
  child_process.spawnSync(
    'git',
    [
      'clone',
      '--single-branch',
      '--depth',
      '1',
      '--branch',
      'v9.25.0',
      'https://github.com/eslint/eslint',
      tmpdir,
    ],
    {
      stdio: 'inherit',
    },
  )
  child_process.spawnSync('npm', ['install', '--ignore-scripts'], {
    cwd: tmpdir,
    stdio: 'inherit',
  })
}

function renderCode(code: string): string {
  // go doesn't allow raw BOM in the middle of source text
  if (!code.includes('\ufeff')) {
    if (!code.includes('`')) {
      return '`' + code.replaceAll('\r', '` + "\\r" + `') + '`'
    }

    if (!code.includes('"') && !code.includes('\n')) {
      return JSON.stringify(code.replaceAll('\r', '\\r'))
    }
  }

  return (
    '`' +
    code
      .replaceAll('`', '` + "`" + `')
      .replaceAll('\ufeff', '` + "\\xef\\xbb\\xbf" + `')
      .replaceAll('\r', '` + "\\r" + `') +
    '`'
  )
}

const extractCoreRuleTestsPath = path.join(tmpdir, 'extract-core-rule-tests.js')
fs.writeFileSync(
  extractCoreRuleTestsPath,
  `
const fs = require('node:fs')
const path = require('node:path')
const { RuleTester } = require('./lib/api')

const collected = []

RuleTester.prototype.run = function (name, rule, {valid, invalid}) {
	collected.push({ name, testerConfig: this.testerConfig[1], valid, invalid })
}

for (const p of fs.globSync(path.join(__dirname, './tests/lib/rules/*.js'))) { 
  require(p)
}

module.exports = {
	collected,
}
`,
  'utf8',
)

const {
  collected,
}: {
  collected: {
    name: string
    testerConfig: unknown
    valid: (RuleTester.ValidTestCase | string)[]
    invalid: RuleTester.InvalidTestCase[]
  }[]
} = await import(extractCoreRuleTestsPath)

const coreRuleTestsDir = path.join(eslintCompatPkgPath, './core_rule_tests')

for (const { name, testerConfig, valid, invalid } of collected) {
  const writer = new CodeBlockWriter({ useTabs: true })
  function writeCode(code: string, withComma: boolean): void {
    const before = writer.getIndentationLevel()
    writer.setIndentationLevel(0)
    writer.write(renderCode(code) + (withComma ? ',\n' : ''))
    writer.setIndentationLevel(before)
  }
  writer.writeLine(
    '\n// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.\n',
  )
  writer.writeLine('package core_rule_tests\n')
  writer.writeLine('import (')
  writer.indent(() => {
    writer.writeLine('"testing"')
  })
  writer.writeLine(')')
  writer.blankLine()

  const parts = name.split('-')
  const pascal = parts.map((p) => p[0].toUpperCase() + p.slice(1)).join('')
  const snake = parts.join('_')

  writer.writeLine(`func Test${pascal}Rule(t *testing.T) {`)
  writer.setIndentationLevel(1)
  writer.writeLine(
    `RunRuleTester(t, ${JSON.stringify(JSON.stringify(testerConfig || {}))}, ${JSON.stringify(name)}, []ValidTestCase{`,
  )
  writer.indent(() => {
    for (const v of valid) {
      if (typeof v === 'string') {
        writer.write('{Code: ')
        writeCode(v, false)
        writer.write('},\n')
        continue
      }

      writer.writeLine('{')
      writer.indent(() => {
        writer.write('Code: ')
        writeCode(v.code, true)
        if (v.options) {
          writer.writeLine(
            `Options: ${JSON.stringify(JSON.stringify(v.options))},`,
          )
        }
        if (v.languageOptions) {
          writer.writeLine(
            `LanguageOptions: ${JSON.stringify(JSON.stringify(v.languageOptions))},`,
          )
        }
      })
      writer.writeLine('},')
    }
  })
  writer.writeLine('}, []InvalidTestCase{')
  writer.indent(() => {
    for (const i of invalid) {
      writer.writeLine('{')
      writer.indent(() => {
        writer.write('Code: ')
        writeCode(i.code, true)
        if (i.output) {
          writer.write('Output: ')
          writeCode(i.output, true)
        }
        if (i.options) {
          writer.writeLine(
            `Options: ${JSON.stringify(JSON.stringify(i.options))},`,
          )
        }
        if (i.languageOptions) {
          writer.writeLine(
            `LanguageOptions: ${JSON.stringify(JSON.stringify(i.languageOptions))},`,
          )
        }
        writer.writeLine('Errors: []InvalidTestCaseError{')
        writer.indent(() => {
          if (typeof i.errors === 'number') {
            for (let j = 0; j < i.errors; j++) {
              writer.writeLine('{},')
            }
            return
          }

          for (const err of i.errors) {
            if (typeof err === 'string') {
              writer.writeLine(`{MessageDescription: ${JSON.stringify(err)}},`)
              continue
            }
            writer.writeLine('{')
            writer.indent(() => {
              if (err.messageId != null) {
                writer.writeLine(`MessageId: ${JSON.stringify(err.messageId)},`)
              }
              if (err.message != null) {
                writer.writeLine(
                  `MessageDescription: ${JSON.stringify(err.message)},`,
                )
              }
              if (err.line != null) {
                writer.writeLine(`Line: ${err.line},`)
              }
              if (err.column != null) {
                writer.writeLine(`Column: ${err.column},`)
              }
              if (err.endLine != null) {
                writer.writeLine(`EndLine: ${err.endLine},`)
              }
              if (err.endColumn != null) {
                writer.writeLine(`EndColumn: ${err.endColumn},`)
              }
              if (err.suggestions != null) {
                writer.writeLine('Suggestions: []InvalidTestCaseSuggestion{')
                writer.indent(() => {
                  for (const s of err.suggestions!) {
                    writer.writeLine('{')
                    writer.indent(() => {
                      if (s.messageId != null) {
                        writer.writeLine(
                          `MessageId: ${JSON.stringify(s.messageId)},`,
                        )
                      }
                      writer.write('Output: ')
                      writeCode(s.output, true)
                    })
                    writer.writeLine('},')
                  }
                })
                writer.writeLine('},')
              }
            })
            writer.writeLine('},')
          }
        })
        writer.writeLine('},')
      })
      writer.writeLine('},')
    }
  })
  writer.writeLine('})')
  writer.setIndentationLevel(0)
  writer.writeLine('}')

  fs.writeFileSync(
    path.join(coreRuleTestsDir, `${snake}_test.go`),
    writer.toString(),
    'utf8',
  )
}
