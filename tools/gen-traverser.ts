import * as process from 'node:process'
import * as path from 'node:path'
import * as fs from 'node:fs'
import { visitorKeys } from '@typescript-eslint/visitor-keys'
import { collectConvertableAstNodes, estreePkgPath } from './shared.ts'
import { CodeBlockWriter } from 'ts-morph'

const writer = new CodeBlockWriter({ useTabs: true })
writer.writeLine('\n// Code generated by gen-traverser.ts. DO NOT EDIT.\n')
writer.writeLine('package estree\n')
writer.writeLine('func (t *traverser) traverseInner(node NodeWithRange) {')
writer.setIndentationLevel(1)
writer.writeLine('switch node.GetType() {')

const decls = Object.fromEntries(
  collectConvertableAstNodes().map(({ interfaceName, decl }) => [
    interfaceName,
    decl,
  ]),
)

function capitalize(s: string): string {
  return s[0].toUpperCase() + s.slice(1)
}

for (const [type, keys] of Object.entries(visitorKeys)) {
  if (
    ['ExperimentalRestProperty', 'ExperimentalSpreadProperty'].includes(type) ||
    typeof keys === 'undefined' ||
    keys.length === 0
  ) {
    continue
  }

  const decl = decls[type]
  if (decl == null) {
    console.error(`Couldn't find ${type} decl`)
    process.exit(1)
  }

  const declType = decl.getType()
  writer.writeLine(`case ESTreeKind${type}:`)
  writer.indent(() => {
    for (const key of keys) {
      const property = declType.getPropertyOrThrow(key)
      const propertyType = property.getTypeAtLocation(
        property.getValueDeclarationOrThrow(),
      )

      const p = `node.(*${type}).${capitalize(key)}`

      writer.writeLine(`if ${p} != nil {`)
      writer.indent(() => {
        if (propertyType.isArray()) {
          writer.writeLine(`for _, child := range ${p} {`)
          writer.indent(() => {
            writer.writeLine('t.traverse(child, node)')
          })
          writer.writeLine('}')
        } else {
          writer.writeLine(`t.traverse(${p}, node)`)
        }
      })
      writer.writeLine('}')
    }
  })
}

writer.writeLine('}')
writer.setIndentationLevel(0)
writer.writeLine('}')

fs.writeFileSync(
  path.join(estreePkgPath, './traverser.go'),
  writer.toString(),
  'utf8',
)
