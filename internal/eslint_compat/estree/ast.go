// Code generated by ast-spec-converter.ts. DO NOT EDIT.

package estree

type AccessorProperty struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.AccessorProperty;
	Computed       bool              // computed: true;
	Key            any               // key: PropertyNameComputed;
	Accessibility  any               // accessibility: Accessibility | undefined;
	Declare        bool              // declare: boolean;
	Decorators     []*Decorator      // decorators: Decorator[];
	Definite       bool              // definite: boolean;
	Optional       bool              // optional: boolean;
	Override       bool              // override: boolean;
	Readonly       bool              // readonly: boolean;
	Static         bool              // static: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Value          any               // value: Expression | null;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *AccessorProperty) GetType() ESTreeKind {
	return d.Type
}
func (d *AccessorProperty) GetRange() Range {
	return d.Range
}
func (d *AccessorProperty) setRange(r Range) {
	d.Range = r
}
func (d *AccessorProperty) GetLoc() SourceLocation {
	return d.Loc
}
func (d *AccessorProperty) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *AccessorProperty) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *AccessorProperty) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "accessibility":
		return d.Accessibility
	case "declare":
		return d.Declare
	case "decorators":
		return d.Decorators
	case "definite":
		return d.Definite
	case "optional":
		return d.Optional
	case "override":
		return d.Override
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "typeAnnotation":
		return d.TypeAnnotation
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ArrayExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.ArrayExpression;
	Elements []any          // elements: (Expression | SpreadElement | null)[];
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *ArrayExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ArrayExpression) GetRange() Range {
	return d.Range
}
func (d *ArrayExpression) setRange(r Range) {
	d.Range = r
}
func (d *ArrayExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ArrayExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ArrayExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ArrayExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "elements":
		return d.Elements
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ArrayPattern struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.ArrayPattern;
	Decorators     []*Decorator      // decorators: Decorator[];
	Elements       []any             // elements: (DestructuringPattern | null)[];
	Optional       bool              // optional: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *ArrayPattern) GetType() ESTreeKind {
	return d.Type
}
func (d *ArrayPattern) GetRange() Range {
	return d.Range
}
func (d *ArrayPattern) setRange(r Range) {
	d.Range = r
}
func (d *ArrayPattern) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ArrayPattern) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ArrayPattern) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ArrayPattern) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "decorators":
		return d.Decorators
	case "elements":
		return d.Elements
	case "optional":
		return d.Optional
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ArrowFunctionExpression struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.ArrowFunctionExpression;
	Async          bool                        // async: boolean;
	Body           any                         // body: BlockStatement | Expression;
	Expression     bool                        // expression: boolean;
	Generator      bool                        // generator: boolean;
	Id             any                         // id: null;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *ArrowFunctionExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ArrowFunctionExpression) GetRange() Range {
	return d.Range
}
func (d *ArrowFunctionExpression) setRange(r Range) {
	d.Range = r
}
func (d *ArrowFunctionExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ArrowFunctionExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ArrowFunctionExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ArrowFunctionExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "async":
		return d.Async
	case "body":
		return d.Body
	case "expression":
		return d.Expression
	case "generator":
		return d.Generator
	case "id":
		return d.Id
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type AssignmentExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.AssignmentExpression;
	Left     any            // left: Expression;
	Operator string         // operator: ValueOf<AssignmentOperatorToText>;
	Right    any            // right: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *AssignmentExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *AssignmentExpression) GetRange() Range {
	return d.Range
}
func (d *AssignmentExpression) setRange(r Range) {
	d.Range = r
}
func (d *AssignmentExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *AssignmentExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *AssignmentExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *AssignmentExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "left":
		return d.Left
	case "operator":
		return d.Operator
	case "right":
		return d.Right
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type AssignmentPattern struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.AssignmentPattern;
	Decorators     []*Decorator      // decorators: Decorator[];
	Left           any               // left: BindingName;
	Optional       bool              // optional: boolean;
	Right          any               // right: Expression;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *AssignmentPattern) GetType() ESTreeKind {
	return d.Type
}
func (d *AssignmentPattern) GetRange() Range {
	return d.Range
}
func (d *AssignmentPattern) setRange(r Range) {
	d.Range = r
}
func (d *AssignmentPattern) GetLoc() SourceLocation {
	return d.Loc
}
func (d *AssignmentPattern) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *AssignmentPattern) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *AssignmentPattern) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "decorators":
		return d.Decorators
	case "left":
		return d.Left
	case "optional":
		return d.Optional
	case "right":
		return d.Right
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type AwaitExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.AwaitExpression;
	Argument any            // argument: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *AwaitExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *AwaitExpression) GetRange() Range {
	return d.Range
}
func (d *AwaitExpression) setRange(r Range) {
	d.Range = r
}
func (d *AwaitExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *AwaitExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *AwaitExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *AwaitExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BaseNode struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BaseNode) GetType() ESTreeKind {
	return d.Type
}
func (d *BaseNode) GetRange() Range {
	return d.Range
}
func (d *BaseNode) setRange(r Range) {
	d.Range = r
}
func (d *BaseNode) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BaseNode) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BaseNode) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BaseNode) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BaseToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BaseToken) GetType() ESTreeKind {
	return d.Type
}
func (d *BaseToken) GetRange() Range {
	return d.Range
}
func (d *BaseToken) setRange(r Range) {
	d.Range = r
}
func (d *BaseToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BaseToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BaseToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BaseToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BigIntLiteral struct {
	Bigint string         // bigint: string;
	Value  any            // value: bigint | null;
	Type   ESTreeKind     // type: AST_NODE_TYPES.Literal;
	Raw    string         // raw: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BigIntLiteral) GetType() ESTreeKind {
	return d.Type
}
func (d *BigIntLiteral) GetRange() Range {
	return d.Range
}
func (d *BigIntLiteral) setRange(r Range) {
	d.Range = r
}
func (d *BigIntLiteral) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BigIntLiteral) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BigIntLiteral) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BigIntLiteral) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "bigint":
		return d.Bigint
	case "value":
		return d.Value
	case "type":
		return d.Type
	case "raw":
		return d.Raw
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BinaryExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.BinaryExpression;
	Left     any            // left: Expression | PrivateIdentifier;
	Operator string         // operator: ValueOf<BinaryOperatorToText>;
	Right    any            // right: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *BinaryExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *BinaryExpression) GetRange() Range {
	return d.Range
}
func (d *BinaryExpression) setRange(r Range) {
	d.Range = r
}
func (d *BinaryExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BinaryExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BinaryExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BinaryExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "left":
		return d.Left
	case "operator":
		return d.Operator
	case "right":
		return d.Right
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BlockComment struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Block;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BlockComment) GetType() ESTreeKind {
	return d.Type
}
func (d *BlockComment) GetRange() Range {
	return d.Range
}
func (d *BlockComment) setRange(r Range) {
	d.Range = r
}
func (d *BlockComment) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BlockComment) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BlockComment) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BlockComment) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BlockStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.BlockStatement;
	Body   []any          // body: Statement[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BlockStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *BlockStatement) GetRange() Range {
	return d.Range
}
func (d *BlockStatement) setRange(r Range) {
	d.Range = r
}
func (d *BlockStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BlockStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BlockStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BlockStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BooleanToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Boolean;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BooleanToken) GetType() ESTreeKind {
	return d.Type
}
func (d *BooleanToken) GetRange() Range {
	return d.Range
}
func (d *BooleanToken) setRange(r Range) {
	d.Range = r
}
func (d *BooleanToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BooleanToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BooleanToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BooleanToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type BreakStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.BreakStatement;
	Label  *Identifier    // label: Identifier | null;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *BreakStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *BreakStatement) GetRange() Range {
	return d.Range
}
func (d *BreakStatement) setRange(r Range) {
	d.Range = r
}
func (d *BreakStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *BreakStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *BreakStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *BreakStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "label":
		return d.Label
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type CallExpression struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.CallExpression;
	Arguments     []any                         // arguments: CallExpressionArgument[];
	Callee        any                           // callee: Expression;
	Optional      bool                          // optional: boolean;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *CallExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *CallExpression) GetRange() Range {
	return d.Range
}
func (d *CallExpression) setRange(r Range) {
	d.Range = r
}
func (d *CallExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *CallExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *CallExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *CallExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "arguments":
		return d.Arguments
	case "callee":
		return d.Callee
	case "optional":
		return d.Optional
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type CatchClause struct {
	Type   ESTreeKind      // type: AST_NODE_TYPES.CatchClause;
	Body   *BlockStatement // body: BlockStatement;
	Param  any             // param: BindingName | null;
	Loc    SourceLocation  // loc: SourceLocation;
	Range  Range           // range: Range;
	Parent NodeWithRange
}

func (d *CatchClause) GetType() ESTreeKind {
	return d.Type
}
func (d *CatchClause) GetRange() Range {
	return d.Range
}
func (d *CatchClause) setRange(r Range) {
	d.Range = r
}
func (d *CatchClause) GetLoc() SourceLocation {
	return d.Loc
}
func (d *CatchClause) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *CatchClause) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *CatchClause) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "param":
		return d.Param
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ChainExpression struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ChainExpression;
	Expression any            // expression: ChainElement;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ChainExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ChainExpression) GetRange() Range {
	return d.Range
}
func (d *ChainExpression) setRange(r Range) {
	d.Range = r
}
func (d *ChainExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ChainExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ChainExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ChainExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Class struct {
	Abstract           bool                          // abstract: boolean;
	Body               *ClassBody                    // body: ClassBody;
	Declare            bool                          // declare: boolean;
	Decorators         []*Decorator                  // decorators: Decorator[];
	Id                 *Identifier                   // id: Identifier | null;
	Implements         []*TSClassImplements          // implements: TSClassImplements[];
	SuperClass         any                           // superClass: LeftHandSideExpression | null;
	SuperTypeArguments *TSTypeParameterInstantiation // superTypeArguments: TSTypeParameterInstantiation | undefined;
	TypeParameters     *TSTypeParameterDeclaration   // typeParameters: TSTypeParameterDeclaration | undefined;
	Type               ESTreeKind                    // type: AST_NODE_TYPES;
	Loc                SourceLocation                // loc: SourceLocation;
	Range              Range                         // range: Range;
	Parent             NodeWithRange
}

func (d *Class) GetType() ESTreeKind {
	return d.Type
}
func (d *Class) GetRange() Range {
	return d.Range
}
func (d *Class) setRange(r Range) {
	d.Range = r
}
func (d *Class) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Class) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Class) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Class) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "abstract":
		return d.Abstract
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "decorators":
		return d.Decorators
	case "id":
		return d.Id
	case "implements":
		return d.Implements
	case "superClass":
		return d.SuperClass
	case "superTypeArguments":
		return d.SuperTypeArguments
	case "typeParameters":
		return d.TypeParameters
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ClassBody struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ClassBody;
	Body   []any          // body: ClassElement[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ClassBody) GetType() ESTreeKind {
	return d.Type
}
func (d *ClassBody) GetRange() Range {
	return d.Range
}
func (d *ClassBody) setRange(r Range) {
	d.Range = r
}
func (d *ClassBody) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ClassBody) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ClassBody) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ClassBody) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ClassDeclaration struct {
	Type               ESTreeKind                    // type: AST_NODE_TYPES.ClassDeclaration;
	Abstract           bool                          // abstract: boolean;
	Body               *ClassBody                    // body: ClassBody;
	Declare            bool                          // declare: boolean;
	Decorators         []*Decorator                  // decorators: Decorator[];
	Id                 *Identifier                   // id: Identifier | null;
	Implements         []*TSClassImplements          // implements: TSClassImplements[];
	SuperClass         any                           // superClass: LeftHandSideExpression | null;
	SuperTypeArguments *TSTypeParameterInstantiation // superTypeArguments: TSTypeParameterInstantiation | undefined;
	TypeParameters     *TSTypeParameterDeclaration   // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc                SourceLocation                // loc: SourceLocation;
	Range              Range                         // range: Range;
	Parent             NodeWithRange
}

func (d *ClassDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *ClassDeclaration) GetRange() Range {
	return d.Range
}
func (d *ClassDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *ClassDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ClassDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ClassDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ClassDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "abstract":
		return d.Abstract
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "decorators":
		return d.Decorators
	case "id":
		return d.Id
	case "implements":
		return d.Implements
	case "superClass":
		return d.SuperClass
	case "superTypeArguments":
		return d.SuperTypeArguments
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ClassExpression struct {
	Type               ESTreeKind                    // type: AST_NODE_TYPES.ClassExpression;
	Abstract           bool                          // abstract: false;
	Declare            bool                          // declare: false;
	Body               *ClassBody                    // body: ClassBody;
	Decorators         []*Decorator                  // decorators: Decorator[];
	Id                 *Identifier                   // id: Identifier | null;
	Implements         []*TSClassImplements          // implements: TSClassImplements[];
	SuperClass         any                           // superClass: LeftHandSideExpression | null;
	SuperTypeArguments *TSTypeParameterInstantiation // superTypeArguments: TSTypeParameterInstantiation | undefined;
	TypeParameters     *TSTypeParameterDeclaration   // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc                SourceLocation                // loc: SourceLocation;
	Range              Range                         // range: Range;
	Parent             NodeWithRange
}

func (d *ClassExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ClassExpression) GetRange() Range {
	return d.Range
}
func (d *ClassExpression) setRange(r Range) {
	d.Range = r
}
func (d *ClassExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ClassExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ClassExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ClassExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "abstract":
		return d.Abstract
	case "declare":
		return d.Declare
	case "body":
		return d.Body
	case "decorators":
		return d.Decorators
	case "id":
		return d.Id
	case "implements":
		return d.Implements
	case "superClass":
		return d.SuperClass
	case "superTypeArguments":
		return d.SuperTypeArguments
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ConditionalExpression struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ConditionalExpression;
	Alternate  any            // alternate: Expression;
	Consequent any            // consequent: Expression;
	Test       any            // test: Expression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ConditionalExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ConditionalExpression) GetRange() Range {
	return d.Range
}
func (d *ConditionalExpression) setRange(r Range) {
	d.Range = r
}
func (d *ConditionalExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ConditionalExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ConditionalExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ConditionalExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "alternate":
		return d.Alternate
	case "consequent":
		return d.Consequent
	case "test":
		return d.Test
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ContinueStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ContinueStatement;
	Label  *Identifier    // label: Identifier | null;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ContinueStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ContinueStatement) GetRange() Range {
	return d.Range
}
func (d *ContinueStatement) setRange(r Range) {
	d.Range = r
}
func (d *ContinueStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ContinueStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ContinueStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ContinueStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "label":
		return d.Label
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type DebuggerStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.DebuggerStatement;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *DebuggerStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *DebuggerStatement) GetRange() Range {
	return d.Range
}
func (d *DebuggerStatement) setRange(r Range) {
	d.Range = r
}
func (d *DebuggerStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *DebuggerStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *DebuggerStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *DebuggerStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Decorator struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.Decorator;
	Expression any            // expression: LeftHandSideExpression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *Decorator) GetType() ESTreeKind {
	return d.Type
}
func (d *Decorator) GetRange() Range {
	return d.Range
}
func (d *Decorator) setRange(r Range) {
	d.Range = r
}
func (d *Decorator) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Decorator) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Decorator) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Decorator) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type DoWhileStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.DoWhileStatement;
	Body   any            // body: Statement;
	Test   any            // test: Expression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *DoWhileStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *DoWhileStatement) GetRange() Range {
	return d.Range
}
func (d *DoWhileStatement) setRange(r Range) {
	d.Range = r
}
func (d *DoWhileStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *DoWhileStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *DoWhileStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *DoWhileStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "test":
		return d.Test
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type EmptyStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.EmptyStatement;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *EmptyStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *EmptyStatement) GetRange() Range {
	return d.Range
}
func (d *EmptyStatement) setRange(r Range) {
	d.Range = r
}
func (d *EmptyStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *EmptyStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *EmptyStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *EmptyStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ExportAllDeclaration struct {
	Type       ESTreeKind         // type: AST_NODE_TYPES.ExportAllDeclaration;
	Attributes []*ImportAttribute // attributes: ImportAttribute[];
	Exported   any                // exported: Identifier | null;
	ExportKind any                // exportKind: ExportKind;
	Source     *Literal           // source: StringLiteral;
	Loc        SourceLocation     // loc: SourceLocation;
	Range      Range              // range: Range;
	Parent     NodeWithRange
}

func (d *ExportAllDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *ExportAllDeclaration) GetRange() Range {
	return d.Range
}
func (d *ExportAllDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *ExportAllDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ExportAllDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ExportAllDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ExportAllDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "attributes":
		return d.Attributes
	case "exported":
		return d.Exported
	case "exportKind":
		return d.ExportKind
	case "source":
		return d.Source
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ExportDefaultDeclaration struct {
	Type        ESTreeKind     // type: AST_NODE_TYPES.ExportDefaultDeclaration;
	Declaration any            // declaration: DefaultExportDeclarations;
	ExportKind  string         // exportKind: 'value';
	Loc         SourceLocation // loc: SourceLocation;
	Range       Range          // range: Range;
	Parent      NodeWithRange
}

func (d *ExportDefaultDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *ExportDefaultDeclaration) GetRange() Range {
	return d.Range
}
func (d *ExportDefaultDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *ExportDefaultDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ExportDefaultDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ExportDefaultDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ExportDefaultDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "declaration":
		return d.Declaration
	case "exportKind":
		return d.ExportKind
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ExportNamedDeclaration struct {
	Type        ESTreeKind         // type: AST_NODE_TYPES.ExportNamedDeclaration;
	Attributes  []*ImportAttribute // attributes: ImportAttribute[];
	Declaration any                // declaration: NamedExportDeclarations | null;
	ExportKind  any                // exportKind: ExportKind;
	Source      *Literal           // source: StringLiteral | null;
	Specifiers  []any              // specifiers: ExportSpecifier[];
	Loc         SourceLocation     // loc: SourceLocation;
	Range       Range              // range: Range;
	Parent      NodeWithRange
}

func (d *ExportNamedDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *ExportNamedDeclaration) GetRange() Range {
	return d.Range
}
func (d *ExportNamedDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *ExportNamedDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ExportNamedDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ExportNamedDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ExportNamedDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "attributes":
		return d.Attributes
	case "declaration":
		return d.Declaration
	case "exportKind":
		return d.ExportKind
	case "source":
		return d.Source
	case "specifiers":
		return d.Specifiers
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ExportSpecifier struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ExportSpecifier;
	Exported   any            // exported: Identifier | StringLiteral;
	ExportKind any            // exportKind: ExportKind;
	Local      any            // local: Identifier | StringLiteral;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ExportSpecifier) GetType() ESTreeKind {
	return d.Type
}
func (d *ExportSpecifier) GetRange() Range {
	return d.Range
}
func (d *ExportSpecifier) setRange(r Range) {
	d.Range = r
}
func (d *ExportSpecifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ExportSpecifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ExportSpecifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ExportSpecifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "exported":
		return d.Exported
	case "exportKind":
		return d.ExportKind
	case "local":
		return d.Local
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ExpressionStatement struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ExpressionStatement;
	Directive  any            // directive: string | undefined;
	Expression any            // expression: Expression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ExpressionStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ExpressionStatement) GetRange() Range {
	return d.Range
}
func (d *ExpressionStatement) setRange(r Range) {
	d.Range = r
}
func (d *ExpressionStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ExpressionStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ExpressionStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ExpressionStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "directive":
		return d.Directive
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ForInStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ForInStatement;
	Body   any            // body: Statement;
	Left   any            // left: ForInitialiser;
	Right  any            // right: Expression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ForInStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ForInStatement) GetRange() Range {
	return d.Range
}
func (d *ForInStatement) setRange(r Range) {
	d.Range = r
}
func (d *ForInStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ForInStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ForInStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ForInStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "left":
		return d.Left
	case "right":
		return d.Right
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ForOfStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ForOfStatement;
	Await  bool           // await: boolean;
	Body   any            // body: Statement;
	Left   any            // left: ForOfInitialiser;
	Right  any            // right: Expression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ForOfStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ForOfStatement) GetRange() Range {
	return d.Range
}
func (d *ForOfStatement) setRange(r Range) {
	d.Range = r
}
func (d *ForOfStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ForOfStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ForOfStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ForOfStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "await":
		return d.Await
	case "body":
		return d.Body
	case "left":
		return d.Left
	case "right":
		return d.Right
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ForStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ForStatement;
	Body   any            // body: Statement;
	Init   any            // init: Expression | ForInitialiser | null;
	Test   any            // test: Expression | null;
	Update any            // update: Expression | null;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ForStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ForStatement) GetRange() Range {
	return d.Range
}
func (d *ForStatement) setRange(r Range) {
	d.Range = r
}
func (d *ForStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ForStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ForStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ForStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "init":
		return d.Init
	case "test":
		return d.Test
	case "update":
		return d.Update
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Function struct {
	Async          bool                        // async: boolean;
	Body           any                         // body: BlockStatement | Expression | null | undefined;
	Declare        bool                        // declare: boolean;
	Expression     bool                        // expression: boolean;
	Generator      bool                        // generator: boolean;
	Id             *Identifier                 // id: Identifier | null;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Type           ESTreeKind                  // type: AST_NODE_TYPES;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *Function) GetType() ESTreeKind {
	return d.Type
}
func (d *Function) GetRange() Range {
	return d.Range
}
func (d *Function) setRange(r Range) {
	d.Range = r
}
func (d *Function) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Function) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Function) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Function) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "async":
		return d.Async
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "expression":
		return d.Expression
	case "generator":
		return d.Generator
	case "id":
		return d.Id
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type FunctionDeclaration struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.FunctionDeclaration;
	Body           *BlockStatement             // body: BlockStatement;
	Declare        bool                        // declare: false;
	Expression     bool                        // expression: false;
	Async          bool                        // async: boolean;
	Generator      bool                        // generator: boolean;
	Id             *Identifier                 // id: Identifier | null;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *FunctionDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *FunctionDeclaration) GetRange() Range {
	return d.Range
}
func (d *FunctionDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *FunctionDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *FunctionDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *FunctionDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *FunctionDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "expression":
		return d.Expression
	case "async":
		return d.Async
	case "generator":
		return d.Generator
	case "id":
		return d.Id
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type FunctionExpression struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.FunctionExpression;
	Body           *BlockStatement             // body: BlockStatement;
	Expression     bool                        // expression: false;
	Async          bool                        // async: boolean;
	Declare        bool                        // declare: boolean;
	Generator      bool                        // generator: boolean;
	Id             *Identifier                 // id: Identifier | null;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *FunctionExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *FunctionExpression) GetRange() Range {
	return d.Range
}
func (d *FunctionExpression) setRange(r Range) {
	d.Range = r
}
func (d *FunctionExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *FunctionExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *FunctionExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *FunctionExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "expression":
		return d.Expression
	case "async":
		return d.Async
	case "declare":
		return d.Declare
	case "generator":
		return d.Generator
	case "id":
		return d.Id
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Identifier struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.Identifier;
	Decorators     []*Decorator      // decorators: Decorator[];
	Name           string            // name: string;
	Optional       bool              // optional: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *Identifier) GetType() ESTreeKind {
	return d.Type
}
func (d *Identifier) GetRange() Range {
	return d.Range
}
func (d *Identifier) setRange(r Range) {
	d.Range = r
}
func (d *Identifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Identifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Identifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Identifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "decorators":
		return d.Decorators
	case "name":
		return d.Name
	case "optional":
		return d.Optional
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type IdentifierToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Identifier;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *IdentifierToken) GetType() ESTreeKind {
	return d.Type
}
func (d *IdentifierToken) GetRange() Range {
	return d.Range
}
func (d *IdentifierToken) setRange(r Range) {
	d.Range = r
}
func (d *IdentifierToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *IdentifierToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *IdentifierToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *IdentifierToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type IfStatement struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.IfStatement;
	Alternate  any            // alternate: Statement | null;
	Consequent any            // consequent: Statement;
	Test       any            // test: Expression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *IfStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *IfStatement) GetRange() Range {
	return d.Range
}
func (d *IfStatement) setRange(r Range) {
	d.Range = r
}
func (d *IfStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *IfStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *IfStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *IfStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "alternate":
		return d.Alternate
	case "consequent":
		return d.Consequent
	case "test":
		return d.Test
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ImportAttribute struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ImportAttribute;
	Key    any            // key: Identifier | Literal;
	Value  any            // value: Literal;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ImportAttribute) GetType() ESTreeKind {
	return d.Type
}
func (d *ImportAttribute) GetRange() Range {
	return d.Range
}
func (d *ImportAttribute) setRange(r Range) {
	d.Range = r
}
func (d *ImportAttribute) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ImportAttribute) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ImportAttribute) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ImportAttribute) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "key":
		return d.Key
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ImportDeclaration struct {
	Type       ESTreeKind         // type: AST_NODE_TYPES.ImportDeclaration;
	Attributes []*ImportAttribute // attributes: ImportAttribute[];
	ImportKind any                // importKind: ImportKind;
	Source     *Literal           // source: StringLiteral;
	Specifiers []any              // specifiers: ImportClause[];
	Loc        SourceLocation     // loc: SourceLocation;
	Range      Range              // range: Range;
	Parent     NodeWithRange
}

func (d *ImportDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *ImportDeclaration) GetRange() Range {
	return d.Range
}
func (d *ImportDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *ImportDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ImportDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ImportDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ImportDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "attributes":
		return d.Attributes
	case "importKind":
		return d.ImportKind
	case "source":
		return d.Source
	case "specifiers":
		return d.Specifiers
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ImportDefaultSpecifier struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ImportDefaultSpecifier;
	Local  *Identifier    // local: Identifier;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ImportDefaultSpecifier) GetType() ESTreeKind {
	return d.Type
}
func (d *ImportDefaultSpecifier) GetRange() Range {
	return d.Range
}
func (d *ImportDefaultSpecifier) setRange(r Range) {
	d.Range = r
}
func (d *ImportDefaultSpecifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ImportDefaultSpecifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ImportDefaultSpecifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ImportDefaultSpecifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "local":
		return d.Local
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ImportExpression struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ImportExpression;
	Attributes any            // attributes: Expression | null;
	Options    any            // options: Expression | null;
	Source     any            // source: Expression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ImportExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ImportExpression) GetRange() Range {
	return d.Range
}
func (d *ImportExpression) setRange(r Range) {
	d.Range = r
}
func (d *ImportExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ImportExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ImportExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ImportExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "attributes":
		return d.Attributes
	case "options":
		return d.Options
	case "source":
		return d.Source
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ImportNamespaceSpecifier struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ImportNamespaceSpecifier;
	Local  *Identifier    // local: Identifier;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ImportNamespaceSpecifier) GetType() ESTreeKind {
	return d.Type
}
func (d *ImportNamespaceSpecifier) GetRange() Range {
	return d.Range
}
func (d *ImportNamespaceSpecifier) setRange(r Range) {
	d.Range = r
}
func (d *ImportNamespaceSpecifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ImportNamespaceSpecifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ImportNamespaceSpecifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ImportNamespaceSpecifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "local":
		return d.Local
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ImportSpecifier struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ImportSpecifier;
	Imported   any            // imported: Identifier | StringLiteral;
	ImportKind any            // importKind: ImportKind;
	Local      *Identifier    // local: Identifier;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ImportSpecifier) GetType() ESTreeKind {
	return d.Type
}
func (d *ImportSpecifier) GetRange() Range {
	return d.Range
}
func (d *ImportSpecifier) setRange(r Range) {
	d.Range = r
}
func (d *ImportSpecifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ImportSpecifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ImportSpecifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ImportSpecifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "imported":
		return d.Imported
	case "importKind":
		return d.ImportKind
	case "local":
		return d.Local
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXAttribute struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXAttribute;
	Name   any            // name: JSXIdentifier | JSXNamespacedName;
	Value  any            // value: JSXElement | JSXExpression | Literal | null;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXAttribute) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXAttribute) GetRange() Range {
	return d.Range
}
func (d *JSXAttribute) setRange(r Range) {
	d.Range = r
}
func (d *JSXAttribute) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXAttribute) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXAttribute) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXAttribute) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "name":
		return d.Name
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXClosingElement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXClosingElement;
	Name   any            // name: JSXTagNameExpression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXClosingElement) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXClosingElement) GetRange() Range {
	return d.Range
}
func (d *JSXClosingElement) setRange(r Range) {
	d.Range = r
}
func (d *JSXClosingElement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXClosingElement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXClosingElement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXClosingElement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "name":
		return d.Name
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXClosingFragment struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXClosingFragment;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXClosingFragment) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXClosingFragment) GetRange() Range {
	return d.Range
}
func (d *JSXClosingFragment) setRange(r Range) {
	d.Range = r
}
func (d *JSXClosingFragment) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXClosingFragment) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXClosingFragment) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXClosingFragment) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXElement struct {
	Type           ESTreeKind         // type: AST_NODE_TYPES.JSXElement;
	Children       []any              // children: JSXChild[];
	ClosingElement *JSXClosingElement // closingElement: JSXClosingElement | null;
	OpeningElement *JSXOpeningElement // openingElement: JSXOpeningElement;
	Loc            SourceLocation     // loc: SourceLocation;
	Range          Range              // range: Range;
	Parent         NodeWithRange
}

func (d *JSXElement) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXElement) GetRange() Range {
	return d.Range
}
func (d *JSXElement) setRange(r Range) {
	d.Range = r
}
func (d *JSXElement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXElement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXElement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXElement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "children":
		return d.Children
	case "closingElement":
		return d.ClosingElement
	case "openingElement":
		return d.OpeningElement
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXEmptyExpression struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXEmptyExpression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXEmptyExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXEmptyExpression) GetRange() Range {
	return d.Range
}
func (d *JSXEmptyExpression) setRange(r Range) {
	d.Range = r
}
func (d *JSXEmptyExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXEmptyExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXEmptyExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXEmptyExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXExpressionContainer struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.JSXExpressionContainer;
	Expression any            // expression: Expression | JSXEmptyExpression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *JSXExpressionContainer) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXExpressionContainer) GetRange() Range {
	return d.Range
}
func (d *JSXExpressionContainer) setRange(r Range) {
	d.Range = r
}
func (d *JSXExpressionContainer) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXExpressionContainer) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXExpressionContainer) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXExpressionContainer) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXFragment struct {
	Type            ESTreeKind          // type: AST_NODE_TYPES.JSXFragment;
	Children        []any               // children: JSXChild[];
	ClosingFragment *JSXClosingFragment // closingFragment: JSXClosingFragment;
	OpeningFragment *JSXOpeningFragment // openingFragment: JSXOpeningFragment;
	Loc             SourceLocation      // loc: SourceLocation;
	Range           Range               // range: Range;
	Parent          NodeWithRange
}

func (d *JSXFragment) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXFragment) GetRange() Range {
	return d.Range
}
func (d *JSXFragment) setRange(r Range) {
	d.Range = r
}
func (d *JSXFragment) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXFragment) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXFragment) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXFragment) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "children":
		return d.Children
	case "closingFragment":
		return d.ClosingFragment
	case "openingFragment":
		return d.OpeningFragment
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXIdentifier struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXIdentifier;
	Name   string         // name: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXIdentifier) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXIdentifier) GetRange() Range {
	return d.Range
}
func (d *JSXIdentifier) setRange(r Range) {
	d.Range = r
}
func (d *JSXIdentifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXIdentifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXIdentifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXIdentifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "name":
		return d.Name
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXIdentifierToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.JSXIdentifier;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXIdentifierToken) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXIdentifierToken) GetRange() Range {
	return d.Range
}
func (d *JSXIdentifierToken) setRange(r Range) {
	d.Range = r
}
func (d *JSXIdentifierToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXIdentifierToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXIdentifierToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXIdentifierToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXMemberExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.JSXMemberExpression;
	Object   any            // object: JSXTagNameExpression;
	Property *JSXIdentifier // property: JSXIdentifier;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *JSXMemberExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXMemberExpression) GetRange() Range {
	return d.Range
}
func (d *JSXMemberExpression) setRange(r Range) {
	d.Range = r
}
func (d *JSXMemberExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXMemberExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXMemberExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXMemberExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "object":
		return d.Object
	case "property":
		return d.Property
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXNamespacedName struct {
	Type      ESTreeKind     // type: AST_NODE_TYPES.JSXNamespacedName;
	Name      *JSXIdentifier // name: JSXIdentifier;
	Namespace *JSXIdentifier // namespace: JSXIdentifier;
	Loc       SourceLocation // loc: SourceLocation;
	Range     Range          // range: Range;
	Parent    NodeWithRange
}

func (d *JSXNamespacedName) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXNamespacedName) GetRange() Range {
	return d.Range
}
func (d *JSXNamespacedName) setRange(r Range) {
	d.Range = r
}
func (d *JSXNamespacedName) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXNamespacedName) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXNamespacedName) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXNamespacedName) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "name":
		return d.Name
	case "namespace":
		return d.Namespace
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXOpeningElement struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.JSXOpeningElement;
	Attributes    []any                         // attributes: (JSXAttribute | JSXSpreadAttribute)[];
	Name          any                           // name: JSXTagNameExpression;
	SelfClosing   bool                          // selfClosing: boolean;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *JSXOpeningElement) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXOpeningElement) GetRange() Range {
	return d.Range
}
func (d *JSXOpeningElement) setRange(r Range) {
	d.Range = r
}
func (d *JSXOpeningElement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXOpeningElement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXOpeningElement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXOpeningElement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "attributes":
		return d.Attributes
	case "name":
		return d.Name
	case "selfClosing":
		return d.SelfClosing
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXOpeningFragment struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXOpeningFragment;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXOpeningFragment) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXOpeningFragment) GetRange() Range {
	return d.Range
}
func (d *JSXOpeningFragment) setRange(r Range) {
	d.Range = r
}
func (d *JSXOpeningFragment) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXOpeningFragment) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXOpeningFragment) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXOpeningFragment) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXSpreadAttribute struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.JSXSpreadAttribute;
	Argument any            // argument: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *JSXSpreadAttribute) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXSpreadAttribute) GetRange() Range {
	return d.Range
}
func (d *JSXSpreadAttribute) setRange(r Range) {
	d.Range = r
}
func (d *JSXSpreadAttribute) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXSpreadAttribute) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXSpreadAttribute) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXSpreadAttribute) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXSpreadChild struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.JSXSpreadChild;
	Expression any            // expression: Expression | JSXEmptyExpression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *JSXSpreadChild) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXSpreadChild) GetRange() Range {
	return d.Range
}
func (d *JSXSpreadChild) setRange(r Range) {
	d.Range = r
}
func (d *JSXSpreadChild) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXSpreadChild) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXSpreadChild) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXSpreadChild) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXText struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.JSXText;
	Raw    string         // raw: string;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXText) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXText) GetRange() Range {
	return d.Range
}
func (d *JSXText) setRange(r Range) {
	d.Range = r
}
func (d *JSXText) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXText) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXText) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXText) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "raw":
		return d.Raw
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type JSXTextToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.JSXText;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *JSXTextToken) GetType() ESTreeKind {
	return d.Type
}
func (d *JSXTextToken) GetRange() Range {
	return d.Range
}
func (d *JSXTextToken) setRange(r Range) {
	d.Range = r
}
func (d *JSXTextToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *JSXTextToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *JSXTextToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *JSXTextToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type KeywordToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Keyword;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *KeywordToken) GetType() ESTreeKind {
	return d.Type
}
func (d *KeywordToken) GetRange() Range {
	return d.Range
}
func (d *KeywordToken) setRange(r Range) {
	d.Range = r
}
func (d *KeywordToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *KeywordToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *KeywordToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *KeywordToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type LabeledStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.LabeledStatement;
	Body   any            // body: Statement;
	Label  *Identifier    // label: Identifier;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *LabeledStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *LabeledStatement) GetRange() Range {
	return d.Range
}
func (d *LabeledStatement) setRange(r Range) {
	d.Range = r
}
func (d *LabeledStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *LabeledStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *LabeledStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *LabeledStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "label":
		return d.Label
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type VariableDeclaration struct {
	Type         ESTreeKind     // type: AST_NODE_TYPES.VariableDeclaration;
	Declarations []any          // declarations: LetOrConstOrVarDeclarator[];
	Declare      bool           // declare: boolean;
	Kind         string         // kind: 'const' | 'let' | 'var';
	Loc          SourceLocation // loc: SourceLocation;
	Range        Range          // range: Range;
	Parent       NodeWithRange
}

func (d *VariableDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *VariableDeclaration) GetRange() Range {
	return d.Range
}
func (d *VariableDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *VariableDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *VariableDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *VariableDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *VariableDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "declarations":
		return d.Declarations
	case "declare":
		return d.Declare
	case "kind":
		return d.Kind
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type LineComment struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Line;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *LineComment) GetType() ESTreeKind {
	return d.Type
}
func (d *LineComment) GetRange() Range {
	return d.Range
}
func (d *LineComment) setRange(r Range) {
	d.Range = r
}
func (d *LineComment) GetLoc() SourceLocation {
	return d.Loc
}
func (d *LineComment) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *LineComment) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *LineComment) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Literal struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.Literal;
	Raw    string         // raw: string;
	Value  any            // value: bigint | boolean | number | string | RegExp | null;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *Literal) GetType() ESTreeKind {
	return d.Type
}
func (d *Literal) GetRange() Range {
	return d.Range
}
func (d *Literal) setRange(r Range) {
	d.Range = r
}
func (d *Literal) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Literal) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Literal) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Literal) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "raw":
		return d.Raw
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type LogicalExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.LogicalExpression;
	Left     any            // left: Expression;
	Operator string         // operator: '&&' | '??' | '||';
	Right    any            // right: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *LogicalExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *LogicalExpression) GetRange() Range {
	return d.Range
}
func (d *LogicalExpression) setRange(r Range) {
	d.Range = r
}
func (d *LogicalExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *LogicalExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *LogicalExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *LogicalExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "left":
		return d.Left
	case "operator":
		return d.Operator
	case "right":
		return d.Right
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type MemberExpression struct {
	Computed bool           // computed: boolean;
	Object   any            // object: Expression;
	Optional bool           // optional: boolean;
	Property any            // property: Expression | Identifier | PrivateIdentifier;
	Type     ESTreeKind     // type: AST_NODE_TYPES;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *MemberExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *MemberExpression) GetRange() Range {
	return d.Range
}
func (d *MemberExpression) setRange(r Range) {
	d.Range = r
}
func (d *MemberExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *MemberExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *MemberExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *MemberExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "computed":
		return d.Computed
	case "object":
		return d.Object
	case "optional":
		return d.Optional
	case "property":
		return d.Property
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type MemberExpressionComputedName struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.MemberExpression;
	Computed bool           // computed: true;
	Property any            // property: Expression;
	Object   any            // object: Expression;
	Optional bool           // optional: boolean;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *MemberExpressionComputedName) GetType() ESTreeKind {
	return d.Type
}
func (d *MemberExpressionComputedName) GetRange() Range {
	return d.Range
}
func (d *MemberExpressionComputedName) setRange(r Range) {
	d.Range = r
}
func (d *MemberExpressionComputedName) GetLoc() SourceLocation {
	return d.Loc
}
func (d *MemberExpressionComputedName) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *MemberExpressionComputedName) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *MemberExpressionComputedName) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "computed":
		return d.Computed
	case "property":
		return d.Property
	case "object":
		return d.Object
	case "optional":
		return d.Optional
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type MemberExpressionNonComputedName struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.MemberExpression;
	Computed bool           // computed: false;
	Property any            // property: Identifier | PrivateIdentifier;
	Object   any            // object: Expression;
	Optional bool           // optional: boolean;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *MemberExpressionNonComputedName) GetType() ESTreeKind {
	return d.Type
}
func (d *MemberExpressionNonComputedName) GetRange() Range {
	return d.Range
}
func (d *MemberExpressionNonComputedName) setRange(r Range) {
	d.Range = r
}
func (d *MemberExpressionNonComputedName) GetLoc() SourceLocation {
	return d.Loc
}
func (d *MemberExpressionNonComputedName) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *MemberExpressionNonComputedName) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *MemberExpressionNonComputedName) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "computed":
		return d.Computed
	case "property":
		return d.Property
	case "object":
		return d.Object
	case "optional":
		return d.Optional
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type MetaProperty struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.MetaProperty;
	Meta     *Identifier    // meta: Identifier;
	Property *Identifier    // property: Identifier;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *MetaProperty) GetType() ESTreeKind {
	return d.Type
}
func (d *MetaProperty) GetRange() Range {
	return d.Range
}
func (d *MetaProperty) setRange(r Range) {
	d.Range = r
}
func (d *MetaProperty) GetLoc() SourceLocation {
	return d.Loc
}
func (d *MetaProperty) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *MetaProperty) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *MetaProperty) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "meta":
		return d.Meta
	case "property":
		return d.Property
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type MethodDefinition struct {
	Accessibility any            // accessibility: Accessibility | undefined;
	Computed      bool           // computed: boolean;
	Decorators    []*Decorator   // decorators: Decorator[];
	Key           any            // key: PropertyName;
	Kind          string         // kind: 'constructor' | 'get' | 'method' | 'set';
	Optional      bool           // optional: boolean;
	Override      bool           // override: boolean;
	Static        bool           // static: boolean;
	Value         any            // value: FunctionExpression | TSEmptyBodyFunctionExpression;
	Type          ESTreeKind     // type: AST_NODE_TYPES;
	Loc           SourceLocation // loc: SourceLocation;
	Range         Range          // range: Range;
	Parent        NodeWithRange
}

func (d *MethodDefinition) GetType() ESTreeKind {
	return d.Type
}
func (d *MethodDefinition) GetRange() Range {
	return d.Range
}
func (d *MethodDefinition) setRange(r Range) {
	d.Range = r
}
func (d *MethodDefinition) GetLoc() SourceLocation {
	return d.Loc
}
func (d *MethodDefinition) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *MethodDefinition) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *MethodDefinition) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "accessibility":
		return d.Accessibility
	case "computed":
		return d.Computed
	case "decorators":
		return d.Decorators
	case "key":
		return d.Key
	case "kind":
		return d.Kind
	case "optional":
		return d.Optional
	case "override":
		return d.Override
	case "static":
		return d.Static
	case "value":
		return d.Value
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type NewExpression struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.NewExpression;
	Arguments     []any                         // arguments: CallExpressionArgument[];
	Callee        any                           // callee: Expression;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *NewExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *NewExpression) GetRange() Range {
	return d.Range
}
func (d *NewExpression) setRange(r Range) {
	d.Range = r
}
func (d *NewExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *NewExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *NewExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *NewExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "arguments":
		return d.Arguments
	case "callee":
		return d.Callee
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type NullToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Null;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *NullToken) GetType() ESTreeKind {
	return d.Type
}
func (d *NullToken) GetRange() Range {
	return d.Range
}
func (d *NullToken) setRange(r Range) {
	d.Range = r
}
func (d *NullToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *NullToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *NullToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *NullToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type NumericToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Numeric;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *NumericToken) GetType() ESTreeKind {
	return d.Type
}
func (d *NumericToken) GetRange() Range {
	return d.Range
}
func (d *NumericToken) setRange(r Range) {
	d.Range = r
}
func (d *NumericToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *NumericToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *NumericToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *NumericToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ObjectExpression struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.ObjectExpression;
	Properties []any          // properties: ObjectLiteralElement[];
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *ObjectExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ObjectExpression) GetRange() Range {
	return d.Range
}
func (d *ObjectExpression) setRange(r Range) {
	d.Range = r
}
func (d *ObjectExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ObjectExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ObjectExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ObjectExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "properties":
		return d.Properties
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ObjectPattern struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.ObjectPattern;
	Decorators     []*Decorator      // decorators: Decorator[];
	Optional       bool              // optional: boolean;
	Properties     []any             // properties: (Property | RestElement)[];
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *ObjectPattern) GetType() ESTreeKind {
	return d.Type
}
func (d *ObjectPattern) GetRange() Range {
	return d.Range
}
func (d *ObjectPattern) setRange(r Range) {
	d.Range = r
}
func (d *ObjectPattern) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ObjectPattern) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ObjectPattern) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ObjectPattern) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "decorators":
		return d.Decorators
	case "optional":
		return d.Optional
	case "properties":
		return d.Properties
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type PrivateIdentifier struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.PrivateIdentifier;
	Name   string         // name: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *PrivateIdentifier) GetType() ESTreeKind {
	return d.Type
}
func (d *PrivateIdentifier) GetRange() Range {
	return d.Range
}
func (d *PrivateIdentifier) setRange(r Range) {
	d.Range = r
}
func (d *PrivateIdentifier) GetLoc() SourceLocation {
	return d.Loc
}
func (d *PrivateIdentifier) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *PrivateIdentifier) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *PrivateIdentifier) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "name":
		return d.Name
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type PrivateIdentifierToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.PrivateIdentifier;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *PrivateIdentifierToken) GetType() ESTreeKind {
	return d.Type
}
func (d *PrivateIdentifierToken) GetRange() Range {
	return d.Range
}
func (d *PrivateIdentifierToken) setRange(r Range) {
	d.Range = r
}
func (d *PrivateIdentifierToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *PrivateIdentifierToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *PrivateIdentifierToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *PrivateIdentifierToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Program struct {
	Type       ESTreeKind      // type: AST_NODE_TYPES.Program;
	Body       []any           // body: ProgramStatement[];
	Comments   []NodeWithRange // comments: Comment[] | undefined;
	SourceType string          // sourceType: 'module' | 'script';
	Tokens     []NodeWithRange // tokens: Token[] | undefined;
	Loc        SourceLocation  // loc: SourceLocation;
	Range      Range           // range: Range;
}

func (p *Program) SetSourceType(t string) {
	p.SourceType = t
}

func (d *Program) GetType() ESTreeKind {
	return d.Type
}
func (d *Program) GetRange() Range {
	return d.Range
}
func (d *Program) setRange(r Range) {
	d.Range = r
}
func (d *Program) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Program) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Program) SetParent(parent NodeWithRange) {

}
func (d *Program) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "comments":
		return d.Comments
	case "sourceType":
		return d.SourceType
	case "tokens":
		return d.Tokens
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "setSourceType":
		return d.SetSourceType
	default:
		return nil
	}
}

type Property struct {
	Type      ESTreeKind     // type: AST_NODE_TYPES.Property;
	Computed  bool           // computed: boolean;
	Key       any            // key: PropertyName;
	Kind      string         // kind: 'get' | 'init' | 'set';
	Method    bool           // method: boolean;
	Optional  bool           // optional: boolean;
	Shorthand bool           // shorthand: boolean;
	Value     any            // value: AssignmentPattern | BindingName | Expression | TSEmptyBodyFunctionExpression;
	Loc       SourceLocation // loc: SourceLocation;
	Range     Range          // range: Range;
	Parent    NodeWithRange
}

func (d *Property) GetType() ESTreeKind {
	return d.Type
}
func (d *Property) GetRange() Range {
	return d.Range
}
func (d *Property) setRange(r Range) {
	d.Range = r
}
func (d *Property) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Property) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Property) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Property) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "kind":
		return d.Kind
	case "method":
		return d.Method
	case "optional":
		return d.Optional
	case "shorthand":
		return d.Shorthand
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type PropertyDefinition struct {
	Accessibility  any               // accessibility: Accessibility | undefined;
	Computed       bool              // computed: boolean;
	Declare        bool              // declare: boolean;
	Decorators     []*Decorator      // decorators: Decorator[];
	Definite       bool              // definite: boolean;
	Key            any               // key: PropertyName;
	Optional       bool              // optional: boolean;
	Override       bool              // override: boolean;
	Readonly       bool              // readonly: boolean;
	Static         bool              // static: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Value          any               // value: Expression | null;
	Type           ESTreeKind        // type: AST_NODE_TYPES;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *PropertyDefinition) GetType() ESTreeKind {
	return d.Type
}
func (d *PropertyDefinition) GetRange() Range {
	return d.Range
}
func (d *PropertyDefinition) setRange(r Range) {
	d.Range = r
}
func (d *PropertyDefinition) GetLoc() SourceLocation {
	return d.Loc
}
func (d *PropertyDefinition) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *PropertyDefinition) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *PropertyDefinition) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "accessibility":
		return d.Accessibility
	case "computed":
		return d.Computed
	case "declare":
		return d.Declare
	case "decorators":
		return d.Decorators
	case "definite":
		return d.Definite
	case "key":
		return d.Key
	case "optional":
		return d.Optional
	case "override":
		return d.Override
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "typeAnnotation":
		return d.TypeAnnotation
	case "value":
		return d.Value
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type PunctuatorToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Punctuator;
	Value  string         // value: ValueOf<PunctuatorTokenToText>;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *PunctuatorToken) GetType() ESTreeKind {
	return d.Type
}
func (d *PunctuatorToken) GetRange() Range {
	return d.Range
}
func (d *PunctuatorToken) setRange(r Range) {
	d.Range = r
}
func (d *PunctuatorToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *PunctuatorToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *PunctuatorToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *PunctuatorToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type RegExpLiteral struct {
	Regex any /* regex: {
	    flags: string;
	    pattern: string;
	}; */
	Value  any            // value: RegExp | null;
	Type   ESTreeKind     // type: AST_NODE_TYPES.Literal;
	Raw    string         // raw: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *RegExpLiteral) GetType() ESTreeKind {
	return d.Type
}
func (d *RegExpLiteral) GetRange() Range {
	return d.Range
}
func (d *RegExpLiteral) setRange(r Range) {
	d.Range = r
}
func (d *RegExpLiteral) GetLoc() SourceLocation {
	return d.Loc
}
func (d *RegExpLiteral) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *RegExpLiteral) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *RegExpLiteral) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "regex":
		return d.Regex
	case "value":
		return d.Value
	case "type":
		return d.Type
	case "raw":
		return d.Raw
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type RegularExpressionToken struct {
	Type  ESTreeKind // type: AST_TOKEN_TYPES.RegularExpression;
	Regex any        /* regex: {
	    flags: string;
	    pattern: string;
	}; */
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *RegularExpressionToken) GetType() ESTreeKind {
	return d.Type
}
func (d *RegularExpressionToken) GetRange() Range {
	return d.Range
}
func (d *RegularExpressionToken) setRange(r Range) {
	d.Range = r
}
func (d *RegularExpressionToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *RegularExpressionToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *RegularExpressionToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *RegularExpressionToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "regex":
		return d.Regex
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type RestElement struct {
	Type           ESTreeKind         // type: AST_NODE_TYPES.RestElement;
	Argument       any                // argument: DestructuringPattern;
	Decorators     []*Decorator       // decorators: Decorator[];
	Optional       bool               // optional: boolean;
	TypeAnnotation *TSTypeAnnotation  // typeAnnotation: TSTypeAnnotation | undefined;
	Value          *AssignmentPattern // value: AssignmentPattern | undefined;
	Loc            SourceLocation     // loc: SourceLocation;
	Range          Range              // range: Range;
	Parent         NodeWithRange
}

func (d *RestElement) GetType() ESTreeKind {
	return d.Type
}
func (d *RestElement) GetRange() Range {
	return d.Range
}
func (d *RestElement) setRange(r Range) {
	d.Range = r
}
func (d *RestElement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *RestElement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *RestElement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *RestElement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "decorators":
		return d.Decorators
	case "optional":
		return d.Optional
	case "typeAnnotation":
		return d.TypeAnnotation
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ReturnStatement struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.ReturnStatement;
	Argument any            // argument: Expression | null;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *ReturnStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ReturnStatement) GetRange() Range {
	return d.Range
}
func (d *ReturnStatement) setRange(r Range) {
	d.Range = r
}
func (d *ReturnStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ReturnStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ReturnStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ReturnStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type SequenceExpression struct {
	Type        ESTreeKind     // type: AST_NODE_TYPES.SequenceExpression;
	Expressions []any          // expressions: Expression[];
	Loc         SourceLocation // loc: SourceLocation;
	Range       Range          // range: Range;
	Parent      NodeWithRange
}

func (d *SequenceExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *SequenceExpression) GetRange() Range {
	return d.Range
}
func (d *SequenceExpression) setRange(r Range) {
	d.Range = r
}
func (d *SequenceExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *SequenceExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *SequenceExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *SequenceExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expressions":
		return d.Expressions
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type SpreadElement struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.SpreadElement;
	Argument any            // argument: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *SpreadElement) GetType() ESTreeKind {
	return d.Type
}
func (d *SpreadElement) GetRange() Range {
	return d.Range
}
func (d *SpreadElement) setRange(r Range) {
	d.Range = r
}
func (d *SpreadElement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *SpreadElement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *SpreadElement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *SpreadElement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type StaticBlock struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.StaticBlock;
	Body   []any          // body: Statement[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *StaticBlock) GetType() ESTreeKind {
	return d.Type
}
func (d *StaticBlock) GetRange() Range {
	return d.Range
}
func (d *StaticBlock) setRange(r Range) {
	d.Range = r
}
func (d *StaticBlock) GetLoc() SourceLocation {
	return d.Loc
}
func (d *StaticBlock) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *StaticBlock) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *StaticBlock) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type StringToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.String;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *StringToken) GetType() ESTreeKind {
	return d.Type
}
func (d *StringToken) GetRange() Range {
	return d.Range
}
func (d *StringToken) setRange(r Range) {
	d.Range = r
}
func (d *StringToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *StringToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *StringToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *StringToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type Super struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.Super;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *Super) GetType() ESTreeKind {
	return d.Type
}
func (d *Super) GetRange() Range {
	return d.Range
}
func (d *Super) setRange(r Range) {
	d.Range = r
}
func (d *Super) GetLoc() SourceLocation {
	return d.Loc
}
func (d *Super) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *Super) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *Super) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type SwitchCase struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.SwitchCase;
	Consequent []any          // consequent: Statement[];
	Test       any            // test: Expression | null;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *SwitchCase) GetType() ESTreeKind {
	return d.Type
}
func (d *SwitchCase) GetRange() Range {
	return d.Range
}
func (d *SwitchCase) setRange(r Range) {
	d.Range = r
}
func (d *SwitchCase) GetLoc() SourceLocation {
	return d.Loc
}
func (d *SwitchCase) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *SwitchCase) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *SwitchCase) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "consequent":
		return d.Consequent
	case "test":
		return d.Test
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type SwitchStatement struct {
	Type         ESTreeKind     // type: AST_NODE_TYPES.SwitchStatement;
	Cases        []*SwitchCase  // cases: SwitchCase[];
	Discriminant any            // discriminant: Expression;
	Loc          SourceLocation // loc: SourceLocation;
	Range        Range          // range: Range;
	Parent       NodeWithRange
}

func (d *SwitchStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *SwitchStatement) GetRange() Range {
	return d.Range
}
func (d *SwitchStatement) setRange(r Range) {
	d.Range = r
}
func (d *SwitchStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *SwitchStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *SwitchStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *SwitchStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "cases":
		return d.Cases
	case "discriminant":
		return d.Discriminant
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TaggedTemplateExpression struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TaggedTemplateExpression;
	Quasi         *TemplateLiteral              // quasi: TemplateLiteral;
	Tag           any                           // tag: Expression;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TaggedTemplateExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *TaggedTemplateExpression) GetRange() Range {
	return d.Range
}
func (d *TaggedTemplateExpression) setRange(r Range) {
	d.Range = r
}
func (d *TaggedTemplateExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TaggedTemplateExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TaggedTemplateExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TaggedTemplateExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "quasi":
		return d.Quasi
	case "tag":
		return d.Tag
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TemplateElement struct {
	Type  ESTreeKind // type: AST_NODE_TYPES.TemplateElement;
	Tail  bool       // tail: boolean;
	Value any        /* value: {
	    cooked: string;
	    raw: string;
	}; */
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TemplateElement) GetType() ESTreeKind {
	return d.Type
}
func (d *TemplateElement) GetRange() Range {
	return d.Range
}
func (d *TemplateElement) setRange(r Range) {
	d.Range = r
}
func (d *TemplateElement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TemplateElement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TemplateElement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TemplateElement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "tail":
		return d.Tail
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TemplateLiteral struct {
	Type        ESTreeKind         // type: AST_NODE_TYPES.TemplateLiteral;
	Expressions []any              // expressions: Expression[];
	Quasis      []*TemplateElement // quasis: TemplateElement[];
	Loc         SourceLocation     // loc: SourceLocation;
	Range       Range              // range: Range;
	Parent      NodeWithRange
}

func (d *TemplateLiteral) GetType() ESTreeKind {
	return d.Type
}
func (d *TemplateLiteral) GetRange() Range {
	return d.Range
}
func (d *TemplateLiteral) setRange(r Range) {
	d.Range = r
}
func (d *TemplateLiteral) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TemplateLiteral) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TemplateLiteral) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TemplateLiteral) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expressions":
		return d.Expressions
	case "quasis":
		return d.Quasis
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TemplateToken struct {
	Type   ESTreeKind     // type: AST_TOKEN_TYPES.Template;
	Value  string         // value: string;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TemplateToken) GetType() ESTreeKind {
	return d.Type
}
func (d *TemplateToken) GetRange() Range {
	return d.Range
}
func (d *TemplateToken) setRange(r Range) {
	d.Range = r
}
func (d *TemplateToken) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TemplateToken) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TemplateToken) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TemplateToken) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ThisExpression struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.ThisExpression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *ThisExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *ThisExpression) GetRange() Range {
	return d.Range
}
func (d *ThisExpression) setRange(r Range) {
	d.Range = r
}
func (d *ThisExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ThisExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ThisExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ThisExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type ThrowStatement struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.ThrowStatement;
	Argument any            // argument: Expression;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *ThrowStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *ThrowStatement) GetRange() Range {
	return d.Range
}
func (d *ThrowStatement) setRange(r Range) {
	d.Range = r
}
func (d *ThrowStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *ThrowStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *ThrowStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *ThrowStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TryStatement struct {
	Type      ESTreeKind      // type: AST_NODE_TYPES.TryStatement;
	Block     *BlockStatement // block: BlockStatement;
	Finalizer *BlockStatement // finalizer: BlockStatement | null;
	Handler   *CatchClause    // handler: CatchClause | null;
	Loc       SourceLocation  // loc: SourceLocation;
	Range     Range           // range: Range;
	Parent    NodeWithRange
}

func (d *TryStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *TryStatement) GetRange() Range {
	return d.Range
}
func (d *TryStatement) setRange(r Range) {
	d.Range = r
}
func (d *TryStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TryStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TryStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TryStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "block":
		return d.Block
	case "finalizer":
		return d.Finalizer
	case "handler":
		return d.Handler
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAbstractAccessorProperty struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.TSAbstractAccessorProperty;
	Value          any               // value: null;
	Computed       bool              // computed: true;
	Key            any               // key: PropertyNameComputed;
	Accessibility  any               // accessibility: Accessibility | undefined;
	Declare        bool              // declare: boolean;
	Decorators     []*Decorator      // decorators: Decorator[];
	Definite       bool              // definite: boolean;
	Optional       bool              // optional: boolean;
	Override       bool              // override: boolean;
	Readonly       bool              // readonly: boolean;
	Static         bool              // static: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *TSAbstractAccessorProperty) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAbstractAccessorProperty) GetRange() Range {
	return d.Range
}
func (d *TSAbstractAccessorProperty) setRange(r Range) {
	d.Range = r
}
func (d *TSAbstractAccessorProperty) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAbstractAccessorProperty) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAbstractAccessorProperty) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAbstractAccessorProperty) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "accessibility":
		return d.Accessibility
	case "declare":
		return d.Declare
	case "decorators":
		return d.Decorators
	case "definite":
		return d.Definite
	case "optional":
		return d.Optional
	case "override":
		return d.Override
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAbstractKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSAbstractKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSAbstractKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAbstractKeyword) GetRange() Range {
	return d.Range
}
func (d *TSAbstractKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSAbstractKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAbstractKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAbstractKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAbstractKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAbstractMethodDefinition struct {
	Type          ESTreeKind     // type: AST_NODE_TYPES.TSAbstractMethodDefinition;
	Computed      bool           // computed: true;
	Key           any            // key: PropertyNameComputed;
	Accessibility any            // accessibility: Accessibility | undefined;
	Decorators    []*Decorator   // decorators: Decorator[];
	Kind          string         // kind: 'constructor' | 'get' | 'method' | 'set';
	Optional      bool           // optional: boolean;
	Override      bool           // override: boolean;
	Static        bool           // static: boolean;
	Value         any            // value: FunctionExpression | TSEmptyBodyFunctionExpression;
	Loc           SourceLocation // loc: SourceLocation;
	Range         Range          // range: Range;
	Parent        NodeWithRange
}

func (d *TSAbstractMethodDefinition) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAbstractMethodDefinition) GetRange() Range {
	return d.Range
}
func (d *TSAbstractMethodDefinition) setRange(r Range) {
	d.Range = r
}
func (d *TSAbstractMethodDefinition) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAbstractMethodDefinition) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAbstractMethodDefinition) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAbstractMethodDefinition) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "accessibility":
		return d.Accessibility
	case "decorators":
		return d.Decorators
	case "kind":
		return d.Kind
	case "optional":
		return d.Optional
	case "override":
		return d.Override
	case "static":
		return d.Static
	case "value":
		return d.Value
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAbstractPropertyDefinition struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.TSAbstractPropertyDefinition;
	Value          any               // value: null;
	Computed       bool              // computed: true;
	Key            any               // key: PropertyNameComputed;
	Accessibility  any               // accessibility: Accessibility | undefined;
	Declare        bool              // declare: boolean;
	Decorators     []*Decorator      // decorators: Decorator[];
	Definite       bool              // definite: boolean;
	Optional       bool              // optional: boolean;
	Override       bool              // override: boolean;
	Readonly       bool              // readonly: boolean;
	Static         bool              // static: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *TSAbstractPropertyDefinition) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAbstractPropertyDefinition) GetRange() Range {
	return d.Range
}
func (d *TSAbstractPropertyDefinition) setRange(r Range) {
	d.Range = r
}
func (d *TSAbstractPropertyDefinition) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAbstractPropertyDefinition) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAbstractPropertyDefinition) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAbstractPropertyDefinition) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "value":
		return d.Value
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "accessibility":
		return d.Accessibility
	case "declare":
		return d.Declare
	case "decorators":
		return d.Decorators
	case "definite":
		return d.Definite
	case "optional":
		return d.Optional
	case "override":
		return d.Override
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAnyKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSAnyKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSAnyKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAnyKeyword) GetRange() Range {
	return d.Range
}
func (d *TSAnyKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSAnyKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAnyKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAnyKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAnyKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSArrayType struct {
	Type        ESTreeKind     // type: AST_NODE_TYPES.TSArrayType;
	ElementType any            // elementType: TypeNode;
	Loc         SourceLocation // loc: SourceLocation;
	Range       Range          // range: Range;
	Parent      NodeWithRange
}

func (d *TSArrayType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSArrayType) GetRange() Range {
	return d.Range
}
func (d *TSArrayType) setRange(r Range) {
	d.Range = r
}
func (d *TSArrayType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSArrayType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSArrayType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSArrayType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "elementType":
		return d.ElementType
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAsExpression struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSAsExpression;
	Expression     any            // expression: Expression;
	TypeAnnotation any            // typeAnnotation: TypeNode;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSAsExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAsExpression) GetRange() Range {
	return d.Range
}
func (d *TSAsExpression) setRange(r Range) {
	d.Range = r
}
func (d *TSAsExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAsExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAsExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAsExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSAsyncKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSAsyncKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSAsyncKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSAsyncKeyword) GetRange() Range {
	return d.Range
}
func (d *TSAsyncKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSAsyncKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSAsyncKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSAsyncKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSAsyncKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSBigIntKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSBigIntKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSBigIntKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSBigIntKeyword) GetRange() Range {
	return d.Range
}
func (d *TSBigIntKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSBigIntKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSBigIntKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSBigIntKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSBigIntKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSBooleanKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSBooleanKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSBooleanKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSBooleanKeyword) GetRange() Range {
	return d.Range
}
func (d *TSBooleanKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSBooleanKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSBooleanKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSBooleanKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSBooleanKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSCallSignatureDeclaration struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSCallSignatureDeclaration;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSCallSignatureDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSCallSignatureDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSCallSignatureDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSCallSignatureDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSCallSignatureDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSCallSignatureDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSCallSignatureDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSClassImplements struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TSClassImplements;
	Expression    any                           // expression: Expression;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSClassImplements) GetType() ESTreeKind {
	return d.Type
}
func (d *TSClassImplements) GetRange() Range {
	return d.Range
}
func (d *TSClassImplements) setRange(r Range) {
	d.Range = r
}
func (d *TSClassImplements) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSClassImplements) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSClassImplements) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSClassImplements) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSConditionalType struct {
	Type        ESTreeKind     // type: AST_NODE_TYPES.TSConditionalType;
	CheckType   any            // checkType: TypeNode;
	ExtendsType any            // extendsType: TypeNode;
	FalseType   any            // falseType: TypeNode;
	TrueType    any            // trueType: TypeNode;
	Loc         SourceLocation // loc: SourceLocation;
	Range       Range          // range: Range;
	Parent      NodeWithRange
}

func (d *TSConditionalType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSConditionalType) GetRange() Range {
	return d.Range
}
func (d *TSConditionalType) setRange(r Range) {
	d.Range = r
}
func (d *TSConditionalType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSConditionalType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSConditionalType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSConditionalType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "checkType":
		return d.CheckType
	case "extendsType":
		return d.ExtendsType
	case "falseType":
		return d.FalseType
	case "trueType":
		return d.TrueType
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSConstructorType struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSConstructorType;
	Abstract       bool                        // abstract: boolean;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSConstructorType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSConstructorType) GetRange() Range {
	return d.Range
}
func (d *TSConstructorType) setRange(r Range) {
	d.Range = r
}
func (d *TSConstructorType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSConstructorType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSConstructorType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSConstructorType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "abstract":
		return d.Abstract
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSConstructSignatureDeclaration struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSConstructSignatureDeclaration;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSConstructSignatureDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSConstructSignatureDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSConstructSignatureDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSConstructSignatureDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSConstructSignatureDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSConstructSignatureDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSConstructSignatureDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSDeclareFunction struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSDeclareFunction;
	Body           any                         // body: undefined;
	Declare        bool                        // declare: boolean;
	Expression     bool                        // expression: false;
	Async          bool                        // async: boolean;
	Generator      bool                        // generator: boolean;
	Id             *Identifier                 // id: Identifier | null;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSDeclareFunction) GetType() ESTreeKind {
	return d.Type
}
func (d *TSDeclareFunction) GetRange() Range {
	return d.Range
}
func (d *TSDeclareFunction) setRange(r Range) {
	d.Range = r
}
func (d *TSDeclareFunction) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSDeclareFunction) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSDeclareFunction) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSDeclareFunction) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "expression":
		return d.Expression
	case "async":
		return d.Async
	case "generator":
		return d.Generator
	case "id":
		return d.Id
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSDeclareKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSDeclareKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSDeclareKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSDeclareKeyword) GetRange() Range {
	return d.Range
}
func (d *TSDeclareKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSDeclareKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSDeclareKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSDeclareKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSDeclareKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSEmptyBodyFunctionExpression struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSEmptyBodyFunctionExpression;
	Body           any                         // body: null;
	Id             any                         // id: null;
	Async          bool                        // async: boolean;
	Declare        bool                        // declare: boolean;
	Expression     bool                        // expression: boolean;
	Generator      bool                        // generator: boolean;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSEmptyBodyFunctionExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *TSEmptyBodyFunctionExpression) GetRange() Range {
	return d.Range
}
func (d *TSEmptyBodyFunctionExpression) setRange(r Range) {
	d.Range = r
}
func (d *TSEmptyBodyFunctionExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSEmptyBodyFunctionExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSEmptyBodyFunctionExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSEmptyBodyFunctionExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "id":
		return d.Id
	case "async":
		return d.Async
	case "declare":
		return d.Declare
	case "expression":
		return d.Expression
	case "generator":
		return d.Generator
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSEnumBody struct {
	Type    ESTreeKind     // type: AST_NODE_TYPES.TSEnumBody;
	Members []any          // members: TSEnumMember[];
	Loc     SourceLocation // loc: SourceLocation;
	Range   Range          // range: Range;
	Parent  NodeWithRange
}

func (d *TSEnumBody) GetType() ESTreeKind {
	return d.Type
}
func (d *TSEnumBody) GetRange() Range {
	return d.Range
}
func (d *TSEnumBody) setRange(r Range) {
	d.Range = r
}
func (d *TSEnumBody) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSEnumBody) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSEnumBody) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSEnumBody) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "members":
		return d.Members
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSEnumDeclaration struct {
	Type    ESTreeKind     // type: AST_NODE_TYPES.TSEnumDeclaration;
	Body    *TSEnumBody    // body: TSEnumBody;
	Const   bool           // const: boolean;
	Declare bool           // declare: boolean;
	Id      *Identifier    // id: Identifier;
	Loc     SourceLocation // loc: SourceLocation;
	Range   Range          // range: Range;
	Parent  NodeWithRange
}

func (d *TSEnumDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSEnumDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSEnumDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSEnumDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSEnumDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSEnumDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSEnumDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "const":
		return d.Const
	case "declare":
		return d.Declare
	case "id":
		return d.Id
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSEnumMember struct {
	Type        ESTreeKind     // type: AST_NODE_TYPES.TSEnumMember;
	Computed    bool           // computed: boolean;
	Id          any            // id: PropertyNameComputed | PropertyNameNonComputed;
	Initializer any            // initializer: Expression | undefined;
	Loc         SourceLocation // loc: SourceLocation;
	Range       Range          // range: Range;
	Parent      NodeWithRange
}

func (d *TSEnumMember) GetType() ESTreeKind {
	return d.Type
}
func (d *TSEnumMember) GetRange() Range {
	return d.Range
}
func (d *TSEnumMember) setRange(r Range) {
	d.Range = r
}
func (d *TSEnumMember) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSEnumMember) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSEnumMember) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSEnumMember) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "computed":
		return d.Computed
	case "id":
		return d.Id
	case "initializer":
		return d.Initializer
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSExportAssignment struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.TSExportAssignment;
	Expression any            // expression: Expression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *TSExportAssignment) GetType() ESTreeKind {
	return d.Type
}
func (d *TSExportAssignment) GetRange() Range {
	return d.Range
}
func (d *TSExportAssignment) setRange(r Range) {
	d.Range = r
}
func (d *TSExportAssignment) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSExportAssignment) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSExportAssignment) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSExportAssignment) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSExportKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSExportKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSExportKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSExportKeyword) GetRange() Range {
	return d.Range
}
func (d *TSExportKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSExportKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSExportKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSExportKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSExportKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSExternalModuleReference struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.TSExternalModuleReference;
	Expression *Literal       // expression: StringLiteral;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *TSExternalModuleReference) GetType() ESTreeKind {
	return d.Type
}
func (d *TSExternalModuleReference) GetRange() Range {
	return d.Range
}
func (d *TSExternalModuleReference) setRange(r Range) {
	d.Range = r
}
func (d *TSExternalModuleReference) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSExternalModuleReference) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSExternalModuleReference) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSExternalModuleReference) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSFunctionSignature struct {
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Type           ESTreeKind                  // type: AST_NODE_TYPES;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSFunctionSignature) GetType() ESTreeKind {
	return d.Type
}
func (d *TSFunctionSignature) GetRange() Range {
	return d.Range
}
func (d *TSFunctionSignature) setRange(r Range) {
	d.Range = r
}
func (d *TSFunctionSignature) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSFunctionSignature) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSFunctionSignature) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSFunctionSignature) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSFunctionType struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSFunctionType;
	Params         []any                       // params: Parameter[];
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSFunctionType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSFunctionType) GetRange() Range {
	return d.Range
}
func (d *TSFunctionType) setRange(r Range) {
	d.Range = r
}
func (d *TSFunctionType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSFunctionType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSFunctionType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSFunctionType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "params":
		return d.Params
	case "returnType":
		return d.ReturnType
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSHeritage struct {
	Expression    any                           // expression: Expression;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Type          ESTreeKind                    // type: AST_NODE_TYPES;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSHeritage) GetType() ESTreeKind {
	return d.Type
}
func (d *TSHeritage) GetRange() Range {
	return d.Range
}
func (d *TSHeritage) setRange(r Range) {
	d.Range = r
}
func (d *TSHeritage) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSHeritage) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSHeritage) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSHeritage) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "expression":
		return d.Expression
	case "typeArguments":
		return d.TypeArguments
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSImportEqualsDeclaration struct {
	Type            ESTreeKind     // type: AST_NODE_TYPES.TSImportEqualsDeclaration;
	Id              *Identifier    // id: Identifier;
	ImportKind      any            // importKind: ImportKind;
	ModuleReference any            // moduleReference: Identifier | TSExternalModuleReference | TSQualifiedName;
	Loc             SourceLocation // loc: SourceLocation;
	Range           Range          // range: Range;
	Parent          NodeWithRange
}

func (d *TSImportEqualsDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSImportEqualsDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSImportEqualsDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSImportEqualsDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSImportEqualsDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSImportEqualsDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSImportEqualsDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "id":
		return d.Id
	case "importKind":
		return d.ImportKind
	case "moduleReference":
		return d.ModuleReference
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSImportType struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TSImportType;
	Argument      any                           // argument: TypeNode;
	Options       *ObjectExpression             // options: ObjectExpression | null;
	Qualifier     any                           // qualifier: EntityName | null;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | null;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSImportType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSImportType) GetRange() Range {
	return d.Range
}
func (d *TSImportType) setRange(r Range) {
	d.Range = r
}
func (d *TSImportType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSImportType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSImportType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSImportType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "options":
		return d.Options
	case "qualifier":
		return d.Qualifier
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSIndexedAccessType struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.TSIndexedAccessType;
	IndexType  any            // indexType: TypeNode;
	ObjectType any            // objectType: TypeNode;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *TSIndexedAccessType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSIndexedAccessType) GetRange() Range {
	return d.Range
}
func (d *TSIndexedAccessType) setRange(r Range) {
	d.Range = r
}
func (d *TSIndexedAccessType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSIndexedAccessType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSIndexedAccessType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSIndexedAccessType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "indexType":
		return d.IndexType
	case "objectType":
		return d.ObjectType
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSIndexSignature struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.TSIndexSignature;
	Accessibility  any               // accessibility: Accessibility | undefined;
	Parameters     []any             // parameters: Parameter[];
	Readonly       bool              // readonly: boolean;
	Static         bool              // static: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *TSIndexSignature) GetType() ESTreeKind {
	return d.Type
}
func (d *TSIndexSignature) GetRange() Range {
	return d.Range
}
func (d *TSIndexSignature) setRange(r Range) {
	d.Range = r
}
func (d *TSIndexSignature) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSIndexSignature) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSIndexSignature) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSIndexSignature) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "accessibility":
		return d.Accessibility
	case "parameters":
		return d.Parameters
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSInferType struct {
	Type          ESTreeKind       // type: AST_NODE_TYPES.TSInferType;
	TypeParameter *TSTypeParameter // typeParameter: TSTypeParameter;
	Loc           SourceLocation   // loc: SourceLocation;
	Range         Range            // range: Range;
	Parent        NodeWithRange
}

func (d *TSInferType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSInferType) GetRange() Range {
	return d.Range
}
func (d *TSInferType) setRange(r Range) {
	d.Range = r
}
func (d *TSInferType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSInferType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSInferType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSInferType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "typeParameter":
		return d.TypeParameter
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSInstantiationExpression struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TSInstantiationExpression;
	Expression    any                           // expression: Expression;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSInstantiationExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *TSInstantiationExpression) GetRange() Range {
	return d.Range
}
func (d *TSInstantiationExpression) setRange(r Range) {
	d.Range = r
}
func (d *TSInstantiationExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSInstantiationExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSInstantiationExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSInstantiationExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSInterfaceBody struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSInterfaceBody;
	Body   []any          // body: TypeElement[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSInterfaceBody) GetType() ESTreeKind {
	return d.Type
}
func (d *TSInterfaceBody) GetRange() Range {
	return d.Range
}
func (d *TSInterfaceBody) setRange(r Range) {
	d.Range = r
}
func (d *TSInterfaceBody) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSInterfaceBody) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSInterfaceBody) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSInterfaceBody) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSInterfaceDeclaration struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSInterfaceDeclaration;
	Body           *TSInterfaceBody            // body: TSInterfaceBody;
	Declare        bool                        // declare: boolean;
	Extends        []*TSInterfaceHeritage      // extends: TSInterfaceHeritage[];
	Id             *Identifier                 // id: Identifier;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSInterfaceDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSInterfaceDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSInterfaceDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSInterfaceDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSInterfaceDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSInterfaceDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSInterfaceDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "extends":
		return d.Extends
	case "id":
		return d.Id
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSInterfaceHeritage struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TSInterfaceHeritage;
	Expression    any                           // expression: Expression;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSInterfaceHeritage) GetType() ESTreeKind {
	return d.Type
}
func (d *TSInterfaceHeritage) GetRange() Range {
	return d.Range
}
func (d *TSInterfaceHeritage) setRange(r Range) {
	d.Range = r
}
func (d *TSInterfaceHeritage) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSInterfaceHeritage) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSInterfaceHeritage) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSInterfaceHeritage) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSIntersectionType struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSIntersectionType;
	Types  []any          // types: TypeNode[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSIntersectionType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSIntersectionType) GetRange() Range {
	return d.Range
}
func (d *TSIntersectionType) setRange(r Range) {
	d.Range = r
}
func (d *TSIntersectionType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSIntersectionType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSIntersectionType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSIntersectionType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "types":
		return d.Types
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSIntrinsicKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSIntrinsicKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSIntrinsicKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSIntrinsicKeyword) GetRange() Range {
	return d.Range
}
func (d *TSIntrinsicKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSIntrinsicKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSIntrinsicKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSIntrinsicKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSIntrinsicKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSLiteralType struct {
	Type    ESTreeKind     // type: AST_NODE_TYPES.TSLiteralType;
	Literal any            // literal: LiteralExpression | UnaryExpression | UpdateExpression;
	Loc     SourceLocation // loc: SourceLocation;
	Range   Range          // range: Range;
	Parent  NodeWithRange
}

func (d *TSLiteralType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSLiteralType) GetRange() Range {
	return d.Range
}
func (d *TSLiteralType) setRange(r Range) {
	d.Range = r
}
func (d *TSLiteralType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSLiteralType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSLiteralType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSLiteralType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "literal":
		return d.Literal
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSMappedType struct {
	Type           ESTreeKind       // type: AST_NODE_TYPES.TSMappedType;
	Constraint     any              // constraint: TypeNode;
	Key            *Identifier      // key: Identifier;
	NameType       any              // nameType: TypeNode | null;
	Optional       any              // optional: boolean | '+' | '-' | undefined;
	Readonly       any              // readonly: boolean | '+' | '-' | undefined;
	TypeAnnotation any              // typeAnnotation: TypeNode | undefined;
	TypeParameter  *TSTypeParameter // typeParameter: TSTypeParameter;
	Loc            SourceLocation   // loc: SourceLocation;
	Range          Range            // range: Range;
	Parent         NodeWithRange
}

func (d *TSMappedType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSMappedType) GetRange() Range {
	return d.Range
}
func (d *TSMappedType) setRange(r Range) {
	d.Range = r
}
func (d *TSMappedType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSMappedType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSMappedType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSMappedType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "constraint":
		return d.Constraint
	case "key":
		return d.Key
	case "nameType":
		return d.NameType
	case "optional":
		return d.Optional
	case "readonly":
		return d.Readonly
	case "typeAnnotation":
		return d.TypeAnnotation
	case "typeParameter":
		return d.TypeParameter
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSMethodSignature struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSMethodSignature;
	Accessibility  any                         // accessibility: Accessibility | undefined;
	Computed       bool                        // computed: boolean;
	Key            any                         // key: PropertyName;
	Kind           string                      // kind: 'get' | 'method' | 'set';
	Optional       bool                        // optional: boolean;
	Params         []any                       // params: Parameter[];
	Readonly       bool                        // readonly: boolean;
	ReturnType     *TSTypeAnnotation           // returnType: TSTypeAnnotation | undefined;
	Static         bool                        // static: boolean;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSMethodSignature) GetType() ESTreeKind {
	return d.Type
}
func (d *TSMethodSignature) GetRange() Range {
	return d.Range
}
func (d *TSMethodSignature) setRange(r Range) {
	d.Range = r
}
func (d *TSMethodSignature) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSMethodSignature) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSMethodSignature) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSMethodSignature) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "accessibility":
		return d.Accessibility
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "kind":
		return d.Kind
	case "optional":
		return d.Optional
	case "params":
		return d.Params
	case "readonly":
		return d.Readonly
	case "returnType":
		return d.ReturnType
	case "static":
		return d.Static
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSModuleBlock struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSModuleBlock;
	Body   []any          // body: ProgramStatement[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSModuleBlock) GetType() ESTreeKind {
	return d.Type
}
func (d *TSModuleBlock) GetRange() Range {
	return d.Range
}
func (d *TSModuleBlock) setRange(r Range) {
	d.Range = r
}
func (d *TSModuleBlock) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSModuleBlock) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSModuleBlock) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSModuleBlock) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSModuleDeclaration struct {
	Type    ESTreeKind     // type: AST_NODE_TYPES.TSModuleDeclaration;
	Body    *TSModuleBlock // body?: TSModuleBlock;
	Declare bool           // declare: boolean;
	Global  bool           // global: boolean;
	Id      any            // id: Identifier | Literal | TSQualifiedName;
	Kind    any            // kind: TSModuleDeclarationKind;
	Loc     SourceLocation // loc: SourceLocation;
	Range   Range          // range: Range;
	Parent  NodeWithRange
}

func (d *TSModuleDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSModuleDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSModuleDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSModuleDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSModuleDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSModuleDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSModuleDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "declare":
		return d.Declare
	case "global":
		return d.Global
	case "id":
		return d.Id
	case "kind":
		return d.Kind
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSNamedTupleMember struct {
	Type        ESTreeKind     // type: AST_NODE_TYPES.TSNamedTupleMember;
	ElementType any            // elementType: TypeNode;
	Label       *Identifier    // label: Identifier;
	Optional    bool           // optional: boolean;
	Loc         SourceLocation // loc: SourceLocation;
	Range       Range          // range: Range;
	Parent      NodeWithRange
}

func (d *TSNamedTupleMember) GetType() ESTreeKind {
	return d.Type
}
func (d *TSNamedTupleMember) GetRange() Range {
	return d.Range
}
func (d *TSNamedTupleMember) setRange(r Range) {
	d.Range = r
}
func (d *TSNamedTupleMember) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSNamedTupleMember) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSNamedTupleMember) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSNamedTupleMember) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "elementType":
		return d.ElementType
	case "label":
		return d.Label
	case "optional":
		return d.Optional
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSNamespaceExportDeclaration struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSNamespaceExportDeclaration;
	Id     *Identifier    // id: Identifier;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSNamespaceExportDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSNamespaceExportDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSNamespaceExportDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSNamespaceExportDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSNamespaceExportDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSNamespaceExportDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSNamespaceExportDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "id":
		return d.Id
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSNeverKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSNeverKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSNeverKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSNeverKeyword) GetRange() Range {
	return d.Range
}
func (d *TSNeverKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSNeverKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSNeverKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSNeverKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSNeverKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSNonNullExpression struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.TSNonNullExpression;
	Expression any            // expression: Expression;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *TSNonNullExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *TSNonNullExpression) GetRange() Range {
	return d.Range
}
func (d *TSNonNullExpression) setRange(r Range) {
	d.Range = r
}
func (d *TSNonNullExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSNonNullExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSNonNullExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSNonNullExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSNullKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSNullKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSNullKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSNullKeyword) GetRange() Range {
	return d.Range
}
func (d *TSNullKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSNullKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSNullKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSNullKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSNullKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSNumberKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSNumberKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSNumberKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSNumberKeyword) GetRange() Range {
	return d.Range
}
func (d *TSNumberKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSNumberKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSNumberKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSNumberKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSNumberKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSObjectKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSObjectKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSObjectKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSObjectKeyword) GetRange() Range {
	return d.Range
}
func (d *TSObjectKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSObjectKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSObjectKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSObjectKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSObjectKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSOptionalType struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSOptionalType;
	TypeAnnotation any            // typeAnnotation: TypeNode;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSOptionalType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSOptionalType) GetRange() Range {
	return d.Range
}
func (d *TSOptionalType) setRange(r Range) {
	d.Range = r
}
func (d *TSOptionalType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSOptionalType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSOptionalType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSOptionalType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSParameterProperty struct {
	Type          ESTreeKind     // type: AST_NODE_TYPES.TSParameterProperty;
	Accessibility any            // accessibility: Accessibility | undefined;
	Decorators    []*Decorator   // decorators: Decorator[];
	Override      bool           // override: boolean;
	Parameter     any            // parameter: AssignmentPattern | BindingName | RestElement;
	Readonly      bool           // readonly: boolean;
	Static        bool           // static: boolean;
	Loc           SourceLocation // loc: SourceLocation;
	Range         Range          // range: Range;
	Parent        NodeWithRange
}

func (d *TSParameterProperty) GetType() ESTreeKind {
	return d.Type
}
func (d *TSParameterProperty) GetRange() Range {
	return d.Range
}
func (d *TSParameterProperty) setRange(r Range) {
	d.Range = r
}
func (d *TSParameterProperty) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSParameterProperty) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSParameterProperty) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSParameterProperty) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "accessibility":
		return d.Accessibility
	case "decorators":
		return d.Decorators
	case "override":
		return d.Override
	case "parameter":
		return d.Parameter
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSPrivateKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSPrivateKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSPrivateKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSPrivateKeyword) GetRange() Range {
	return d.Range
}
func (d *TSPrivateKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSPrivateKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSPrivateKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSPrivateKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSPrivateKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSPropertySignature struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.TSPropertySignature;
	Accessibility  any               // accessibility: Accessibility | undefined;
	Computed       bool              // computed: boolean;
	Key            any               // key: PropertyName;
	Optional       bool              // optional: boolean;
	Readonly       bool              // readonly: boolean;
	Static         bool              // static: boolean;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | undefined;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *TSPropertySignature) GetType() ESTreeKind {
	return d.Type
}
func (d *TSPropertySignature) GetRange() Range {
	return d.Range
}
func (d *TSPropertySignature) setRange(r Range) {
	d.Range = r
}
func (d *TSPropertySignature) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSPropertySignature) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSPropertySignature) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSPropertySignature) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "accessibility":
		return d.Accessibility
	case "computed":
		return d.Computed
	case "key":
		return d.Key
	case "optional":
		return d.Optional
	case "readonly":
		return d.Readonly
	case "static":
		return d.Static
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSProtectedKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSProtectedKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSProtectedKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSProtectedKeyword) GetRange() Range {
	return d.Range
}
func (d *TSProtectedKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSProtectedKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSProtectedKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSProtectedKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSProtectedKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSPublicKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSPublicKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSPublicKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSPublicKeyword) GetRange() Range {
	return d.Range
}
func (d *TSPublicKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSPublicKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSPublicKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSPublicKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSPublicKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSQualifiedName struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSQualifiedName;
	Left   any            // left: EntityName;
	Right  *Identifier    // right: Identifier;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSQualifiedName) GetType() ESTreeKind {
	return d.Type
}
func (d *TSQualifiedName) GetRange() Range {
	return d.Range
}
func (d *TSQualifiedName) setRange(r Range) {
	d.Range = r
}
func (d *TSQualifiedName) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSQualifiedName) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSQualifiedName) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSQualifiedName) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "left":
		return d.Left
	case "right":
		return d.Right
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSReadonlyKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSReadonlyKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSReadonlyKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSReadonlyKeyword) GetRange() Range {
	return d.Range
}
func (d *TSReadonlyKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSReadonlyKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSReadonlyKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSReadonlyKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSReadonlyKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSRestType struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSRestType;
	TypeAnnotation any            // typeAnnotation: TypeNode;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSRestType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSRestType) GetRange() Range {
	return d.Range
}
func (d *TSRestType) setRange(r Range) {
	d.Range = r
}
func (d *TSRestType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSRestType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSRestType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSRestType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSSatisfiesExpression struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSSatisfiesExpression;
	Expression     any            // expression: Expression;
	TypeAnnotation any            // typeAnnotation: TypeNode;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSSatisfiesExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *TSSatisfiesExpression) GetRange() Range {
	return d.Range
}
func (d *TSSatisfiesExpression) setRange(r Range) {
	d.Range = r
}
func (d *TSSatisfiesExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSSatisfiesExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSSatisfiesExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSSatisfiesExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSStaticKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSStaticKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSStaticKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSStaticKeyword) GetRange() Range {
	return d.Range
}
func (d *TSStaticKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSStaticKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSStaticKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSStaticKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSStaticKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSStringKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSStringKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSStringKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSStringKeyword) GetRange() Range {
	return d.Range
}
func (d *TSStringKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSStringKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSStringKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSStringKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSStringKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSSymbolKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSSymbolKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSSymbolKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSSymbolKeyword) GetRange() Range {
	return d.Range
}
func (d *TSSymbolKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSSymbolKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSSymbolKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSSymbolKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSSymbolKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTemplateLiteralType struct {
	Type   ESTreeKind         // type: AST_NODE_TYPES.TSTemplateLiteralType;
	Quasis []*TemplateElement // quasis: TemplateElement[];
	Types  []any              // types: TypeNode[];
	Loc    SourceLocation     // loc: SourceLocation;
	Range  Range              // range: Range;
	Parent NodeWithRange
}

func (d *TSTemplateLiteralType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTemplateLiteralType) GetRange() Range {
	return d.Range
}
func (d *TSTemplateLiteralType) setRange(r Range) {
	d.Range = r
}
func (d *TSTemplateLiteralType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTemplateLiteralType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTemplateLiteralType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTemplateLiteralType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "quasis":
		return d.Quasis
	case "types":
		return d.Types
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSThisType struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSThisType;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSThisType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSThisType) GetRange() Range {
	return d.Range
}
func (d *TSThisType) setRange(r Range) {
	d.Range = r
}
func (d *TSThisType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSThisType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSThisType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSThisType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTupleType struct {
	Type         ESTreeKind     // type: AST_NODE_TYPES.TSTupleType;
	ElementTypes []any          // elementTypes: TypeNode[];
	Loc          SourceLocation // loc: SourceLocation;
	Range        Range          // range: Range;
	Parent       NodeWithRange
}

func (d *TSTupleType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTupleType) GetRange() Range {
	return d.Range
}
func (d *TSTupleType) setRange(r Range) {
	d.Range = r
}
func (d *TSTupleType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTupleType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTupleType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTupleType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "elementTypes":
		return d.ElementTypes
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeAliasDeclaration struct {
	Type           ESTreeKind                  // type: AST_NODE_TYPES.TSTypeAliasDeclaration;
	Declare        bool                        // declare: boolean;
	Id             *Identifier                 // id: Identifier;
	TypeAnnotation any                         // typeAnnotation: TypeNode;
	TypeParameters *TSTypeParameterDeclaration // typeParameters: TSTypeParameterDeclaration | undefined;
	Loc            SourceLocation              // loc: SourceLocation;
	Range          Range                       // range: Range;
	Parent         NodeWithRange
}

func (d *TSTypeAliasDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeAliasDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSTypeAliasDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeAliasDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeAliasDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeAliasDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeAliasDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "declare":
		return d.Declare
	case "id":
		return d.Id
	case "typeAnnotation":
		return d.TypeAnnotation
	case "typeParameters":
		return d.TypeParameters
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeAnnotation struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSTypeAnnotation;
	TypeAnnotation any            // typeAnnotation: TypeNode;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSTypeAnnotation) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeAnnotation) GetRange() Range {
	return d.Range
}
func (d *TSTypeAnnotation) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeAnnotation) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeAnnotation) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeAnnotation) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeAnnotation) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeAssertion struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSTypeAssertion;
	Expression     any            // expression: Expression;
	TypeAnnotation any            // typeAnnotation: TypeNode;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSTypeAssertion) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeAssertion) GetRange() Range {
	return d.Range
}
func (d *TSTypeAssertion) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeAssertion) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeAssertion) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeAssertion) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeAssertion) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "expression":
		return d.Expression
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeLiteral struct {
	Type    ESTreeKind     // type: AST_NODE_TYPES.TSTypeLiteral;
	Members []any          // members: TypeElement[];
	Loc     SourceLocation // loc: SourceLocation;
	Range   Range          // range: Range;
	Parent  NodeWithRange
}

func (d *TSTypeLiteral) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeLiteral) GetRange() Range {
	return d.Range
}
func (d *TSTypeLiteral) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeLiteral) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeLiteral) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeLiteral) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeLiteral) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "members":
		return d.Members
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeOperator struct {
	Type           ESTreeKind     // type: AST_NODE_TYPES.TSTypeOperator;
	Operator       string         // operator: 'keyof' | 'readonly' | 'unique';
	TypeAnnotation any            // typeAnnotation: TypeNode | undefined;
	Loc            SourceLocation // loc: SourceLocation;
	Range          Range          // range: Range;
	Parent         NodeWithRange
}

func (d *TSTypeOperator) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeOperator) GetRange() Range {
	return d.Range
}
func (d *TSTypeOperator) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeOperator) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeOperator) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeOperator) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeOperator) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "operator":
		return d.Operator
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeParameter struct {
	Type       ESTreeKind     // type: AST_NODE_TYPES.TSTypeParameter;
	Const      bool           // const: boolean;
	Constraint any            // constraint: TypeNode | undefined;
	Default    any            // default: TypeNode | undefined;
	In         bool           // in: boolean;
	Name       *Identifier    // name: Identifier;
	Out        bool           // out: boolean;
	Loc        SourceLocation // loc: SourceLocation;
	Range      Range          // range: Range;
	Parent     NodeWithRange
}

func (d *TSTypeParameter) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeParameter) GetRange() Range {
	return d.Range
}
func (d *TSTypeParameter) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeParameter) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeParameter) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeParameter) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeParameter) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "const":
		return d.Const
	case "constraint":
		return d.Constraint
	case "default":
		return d.Default
	case "in":
		return d.In
	case "name":
		return d.Name
	case "out":
		return d.Out
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeParameterDeclaration struct {
	Type   ESTreeKind         // type: AST_NODE_TYPES.TSTypeParameterDeclaration;
	Params []*TSTypeParameter // params: TSTypeParameter[];
	Loc    SourceLocation     // loc: SourceLocation;
	Range  Range              // range: Range;
	Parent NodeWithRange
}

func (d *TSTypeParameterDeclaration) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeParameterDeclaration) GetRange() Range {
	return d.Range
}
func (d *TSTypeParameterDeclaration) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeParameterDeclaration) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeParameterDeclaration) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeParameterDeclaration) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeParameterDeclaration) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "params":
		return d.Params
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeParameterInstantiation struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSTypeParameterInstantiation;
	Params []any          // params: TypeNode[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSTypeParameterInstantiation) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeParameterInstantiation) GetRange() Range {
	return d.Range
}
func (d *TSTypeParameterInstantiation) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeParameterInstantiation) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeParameterInstantiation) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeParameterInstantiation) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeParameterInstantiation) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "params":
		return d.Params
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypePredicate struct {
	Type           ESTreeKind        // type: AST_NODE_TYPES.TSTypePredicate;
	Asserts        bool              // asserts: boolean;
	ParameterName  any               // parameterName: Identifier | TSThisType;
	TypeAnnotation *TSTypeAnnotation // typeAnnotation: TSTypeAnnotation | null;
	Loc            SourceLocation    // loc: SourceLocation;
	Range          Range             // range: Range;
	Parent         NodeWithRange
}

func (d *TSTypePredicate) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypePredicate) GetRange() Range {
	return d.Range
}
func (d *TSTypePredicate) setRange(r Range) {
	d.Range = r
}
func (d *TSTypePredicate) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypePredicate) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypePredicate) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypePredicate) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "asserts":
		return d.Asserts
	case "parameterName":
		return d.ParameterName
	case "typeAnnotation":
		return d.TypeAnnotation
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeQuery struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TSTypeQuery;
	ExprName      any                           // exprName: EntityName | TSImportType;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSTypeQuery) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeQuery) GetRange() Range {
	return d.Range
}
func (d *TSTypeQuery) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeQuery) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeQuery) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeQuery) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeQuery) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "exprName":
		return d.ExprName
	case "typeArguments":
		return d.TypeArguments
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSTypeReference struct {
	Type          ESTreeKind                    // type: AST_NODE_TYPES.TSTypeReference;
	TypeArguments *TSTypeParameterInstantiation // typeArguments: TSTypeParameterInstantiation | undefined;
	TypeName      any                           // typeName: EntityName;
	Loc           SourceLocation                // loc: SourceLocation;
	Range         Range                         // range: Range;
	Parent        NodeWithRange
}

func (d *TSTypeReference) GetType() ESTreeKind {
	return d.Type
}
func (d *TSTypeReference) GetRange() Range {
	return d.Range
}
func (d *TSTypeReference) setRange(r Range) {
	d.Range = r
}
func (d *TSTypeReference) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSTypeReference) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSTypeReference) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSTypeReference) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "typeArguments":
		return d.TypeArguments
	case "typeName":
		return d.TypeName
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSUndefinedKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSUndefinedKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSUndefinedKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSUndefinedKeyword) GetRange() Range {
	return d.Range
}
func (d *TSUndefinedKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSUndefinedKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSUndefinedKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSUndefinedKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSUndefinedKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSUnionType struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSUnionType;
	Types  []any          // types: TypeNode[];
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSUnionType) GetType() ESTreeKind {
	return d.Type
}
func (d *TSUnionType) GetRange() Range {
	return d.Range
}
func (d *TSUnionType) setRange(r Range) {
	d.Range = r
}
func (d *TSUnionType) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSUnionType) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSUnionType) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSUnionType) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "types":
		return d.Types
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSUnknownKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSUnknownKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSUnknownKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSUnknownKeyword) GetRange() Range {
	return d.Range
}
func (d *TSUnknownKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSUnknownKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSUnknownKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSUnknownKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSUnknownKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type TSVoidKeyword struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.TSVoidKeyword;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *TSVoidKeyword) GetType() ESTreeKind {
	return d.Type
}
func (d *TSVoidKeyword) GetRange() Range {
	return d.Range
}
func (d *TSVoidKeyword) setRange(r Range) {
	d.Range = r
}
func (d *TSVoidKeyword) GetLoc() SourceLocation {
	return d.Loc
}
func (d *TSVoidKeyword) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *TSVoidKeyword) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *TSVoidKeyword) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type UnaryExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.UnaryExpression;
	Operator string         // operator: '!' | '+' | '~' | '-' | 'delete' | 'typeof' | 'void';
	Argument any            // argument: Expression;
	Prefix   bool           // prefix: boolean;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *UnaryExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *UnaryExpression) GetRange() Range {
	return d.Range
}
func (d *UnaryExpression) setRange(r Range) {
	d.Range = r
}
func (d *UnaryExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *UnaryExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *UnaryExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *UnaryExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "operator":
		return d.Operator
	case "argument":
		return d.Argument
	case "prefix":
		return d.Prefix
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type UpdateExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.UpdateExpression;
	Operator string         // operator: '++' | '--';
	Argument any            // argument: Expression;
	Prefix   bool           // prefix: boolean;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *UpdateExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *UpdateExpression) GetRange() Range {
	return d.Range
}
func (d *UpdateExpression) setRange(r Range) {
	d.Range = r
}
func (d *UpdateExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *UpdateExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *UpdateExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *UpdateExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "operator":
		return d.Operator
	case "argument":
		return d.Argument
	case "prefix":
		return d.Prefix
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type VariableDeclarator struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.VariableDeclarator;
	Definite bool           // definite: boolean;
	Id       any            // id: BindingName;
	Init     any            // init: Expression | null;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *VariableDeclarator) GetType() ESTreeKind {
	return d.Type
}
func (d *VariableDeclarator) GetRange() Range {
	return d.Range
}
func (d *VariableDeclarator) setRange(r Range) {
	d.Range = r
}
func (d *VariableDeclarator) GetLoc() SourceLocation {
	return d.Loc
}
func (d *VariableDeclarator) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *VariableDeclarator) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *VariableDeclarator) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "definite":
		return d.Definite
	case "id":
		return d.Id
	case "init":
		return d.Init
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type WhileStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.WhileStatement;
	Body   any            // body: Statement;
	Test   any            // test: Expression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *WhileStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *WhileStatement) GetRange() Range {
	return d.Range
}
func (d *WhileStatement) setRange(r Range) {
	d.Range = r
}
func (d *WhileStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *WhileStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *WhileStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *WhileStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "test":
		return d.Test
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type WithStatement struct {
	Type   ESTreeKind     // type: AST_NODE_TYPES.WithStatement;
	Body   any            // body: Statement;
	Object any            // object: Expression;
	Loc    SourceLocation // loc: SourceLocation;
	Range  Range          // range: Range;
	Parent NodeWithRange
}

func (d *WithStatement) GetType() ESTreeKind {
	return d.Type
}
func (d *WithStatement) GetRange() Range {
	return d.Range
}
func (d *WithStatement) setRange(r Range) {
	d.Range = r
}
func (d *WithStatement) GetLoc() SourceLocation {
	return d.Loc
}
func (d *WithStatement) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *WithStatement) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *WithStatement) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "body":
		return d.Body
	case "object":
		return d.Object
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}

type YieldExpression struct {
	Type     ESTreeKind     // type: AST_NODE_TYPES.YieldExpression;
	Argument any            // argument: Expression | null;
	Delegate bool           // delegate: boolean;
	Loc      SourceLocation // loc: SourceLocation;
	Range    Range          // range: Range;
	Parent   NodeWithRange
}

func (d *YieldExpression) GetType() ESTreeKind {
	return d.Type
}
func (d *YieldExpression) GetRange() Range {
	return d.Range
}
func (d *YieldExpression) setRange(r Range) {
	d.Range = r
}
func (d *YieldExpression) GetLoc() SourceLocation {
	return d.Loc
}
func (d *YieldExpression) setLoc(l SourceLocation) {
	d.Loc = l
}
func (d *YieldExpression) SetParent(parent NodeWithRange) {
	d.Parent = parent
}
func (d *YieldExpression) JsInterop(prop string) any {
	switch prop {
	case "setParent":
		return d.SetParent
	case "type":
		return d.Type
	case "argument":
		return d.Argument
	case "delegate":
		return d.Delegate
	case "loc":
		return d.Loc
	case "range":
		return d.Range
	case "parent":
		return d.Parent
	default:
		return nil
	}
}
