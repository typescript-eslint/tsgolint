// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnreachableRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-unreachable", []ValidTestCase{
		{Code: `function foo() { function bar() { return 1; } return bar(); }`},
		{Code: `function foo() { return bar(); function bar() { return 1; } }`},
		{Code: `function foo() { return x; var x; }`},
		{Code: `function foo() { var x = 1; var y = 2; }`},
		{Code: `function foo() { var x = 1; var y = 2; return; }`},
		{Code: `while (true) { switch (foo) { case 1: x = 1; x = 2;} }`},
		{Code: `while (true) { break; var x; }`},
		{Code: `while (true) { continue; var x, y; }`},
		{Code: `while (true) { throw 'message'; var x; }`},
		{Code: `while (true) { if (true) break; var x = 1; }`},
		{Code: `while (true) continue;`},
		{Code: `switch (foo) { case 1: break; var x; }`},
		{Code: `switch (foo) { case 1: break; var x; default: throw true; };`},
		{
			Code:            `const arrow_direction = arrow => {  switch (arrow) { default: throw new Error();  };}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var x = 1; y = 2; throw 'uh oh'; var y;`},
		{Code: `function foo() { var x = 1; if (x) { return; } x = 2; }`},
		{Code: `function foo() { var x = 1; if (x) { } else { return; } x = 2; }`},
		{Code: `function foo() { var x = 1; switch (x) { case 0: break; default: return; } x = 2; }`},
		{Code: `function foo() { var x = 1; while (x) { return; } x = 2; }`},
		{Code: `function foo() { var x = 1; for (x in {}) { return; } x = 2; }`},
		{Code: `function foo() { var x = 1; try { return; } finally { x = 2; } }`},
		{Code: `function foo() { var x = 1; for (;;) { if (x) break; } x = 2; }`},
		{Code: `A: { break A; } foo()`},
		{
			Code:            `function* foo() { try { yield 1; return; } catch (err) { return err; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo() { try { bar(); return; } catch (err) { return err; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo() { try { a.b.c = 1; return; } catch (err) { return err; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { foo = reachable; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo = reachable; constructor() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C extends B { foo = reachable; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C extends B { foo = reachable; constructor() { super(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C extends B { static foo = reachable; constructor() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `function foo() { return x; var x = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { return x; var x, y = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `while (true) { continue; var x = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { return; x = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { throw error; x = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `while (true) { break; x = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `while (true) { continue; x = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { switch (foo) { case 1: return; x = 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { switch (foo) { case 1: throw e; x = 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `while (true) { switch (foo) { case 1: break; x = 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `while (true) { switch (foo) { case 1: continue; x = 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `var x = 1; throw 'uh oh'; var y = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; if (x) { return; } else { throw e; } x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; if (x) return; else throw -1; x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; try { return; } finally {} x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; try { } finally { return; } x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; do { return; } while (x); x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; while (x) { if (x) break; else continue; x = 2; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; for (;;) { if (x) continue; } x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code: `function foo() { var x = 1; while (true) { } x = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
				},
			},
		},
		{
			Code:            `const arrow_direction = arrow => {  switch (arrow) { default: throw new Error();  }; g() }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      1,
					Column:    86,
					EndLine:   1,
					EndColumn: 89,
				},
			},
		},
		{
			Code: `
                function foo() {
                    return;

                    a();  // ← ERROR: Unreachable code. (no-unreachable)

                    b()   // ↑ ';' token is included in the unreachable code, so this statement will be merged.
                    // comment
                    c();  // ↑ ')' token is included in the unreachable code, so this statement will be merged.
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    21,
					EndLine:   9,
					EndColumn: 25,
				},
			},
		},
		{
			Code: `
                function foo() {
                    return;

                    a();

                    if (b()) {
                        c()
                    } else {
                        d()
                    }
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    21,
					EndLine:   11,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `
                function foo() {
                    if (a) {
                        return
                        b();
                        c();
                    } else {
                        throw err
                        d();
                    }
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    25,
					EndLine:   6,
					EndColumn: 29,
				},
				{
					MessageId: "unreachableCode",
					Line:      9,
					Column:    25,
					EndLine:   9,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `
                function foo() {
                    if (a) {
                        return
                        b();
                        c();
                    } else {
                        throw err
                        d();
                    }
                    e();
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    25,
					EndLine:   6,
					EndColumn: 29,
				},
				{
					MessageId: "unreachableCode",
					Line:      9,
					Column:    25,
					EndLine:   9,
					EndColumn: 29,
				},
				{
					MessageId: "unreachableCode",
					Line:      11,
					Column:    21,
					EndLine:   11,
					EndColumn: 25,
				},
			},
		},
		{
			Code: `
                function* foo() {
                    try {
                        return;
                    } catch (err) {
                        return err;
                    }
                }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    35,
					EndLine:   7,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `
                function foo() {
                    try {
                        return;
                    } catch (err) {
                        return err;
                    }
                }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    35,
					EndLine:   7,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `
                function foo() {
                    try {
                        return;
                        let a = 1;
                    } catch (err) {
                        return err;
                    }
                }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Line:      5,
					Column:    25,
					EndLine:   5,
					EndColumn: 35,
				},
				{
					MessageId: "unreachableCode",
					Line:      6,
					Column:    35,
					EndLine:   8,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `class C extends B { foo; constructor() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    21,
					EndColumn: 25,
				},
			},
		},
		{
			Code:            `class C extends B { foo = unreachable + code; constructor() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    21,
					EndColumn: 46,
				},
			},
		},
		{
			Code:            `class C extends B { foo; bar; constructor() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    21,
					EndColumn: 30,
				},
			},
		},
		{
			Code:            `class C extends B { foo; constructor() {} bar; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    21,
					EndColumn: 25,
				},
				{
					MessageId: "unreachableCode",
					Column:    43,
					EndColumn: 47,
				},
			},
		},
		{
			Code:            `(class extends B { foo; constructor() {} bar; })`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    20,
					EndColumn: 24,
				},
				{
					MessageId: "unreachableCode",
					Column:    42,
					EndColumn: 46,
				},
			},
		},
		{
			Code:            `class B extends A { x; constructor() { class C extends D { [super().x]; constructor() {} } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    60,
					EndColumn: 72,
				},
			},
		},
		{
			Code:            `class B extends A { x; constructor() { class C extends super().x { y; constructor() {} } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    68,
					EndColumn: 70,
				},
			},
		},
		{
			Code:            `class B extends A { x; static y; z; static q; constructor() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unreachableCode",
					Column:    21,
					EndColumn: 23,
				},
				{
					MessageId: "unreachableCode",
					Column:    34,
					EndColumn: 36,
				},
			},
		},
	})
}
