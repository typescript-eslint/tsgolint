// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoImplicitCoercionRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-implicit-coercion", []ValidTestCase{
		{Code: `Boolean(foo)`},
		{Code: `foo.indexOf(1) !== -1`},
		{Code: `Number(foo)`},
		{Code: `parseInt(foo)`},
		{Code: `parseFloat(foo)`},
		{Code: `String(foo)`},
		{Code: `!foo`},
		{Code: `~foo`},
		{Code: `-foo`},
		{Code: `+1234`},
		{Code: `-1234`},
		{Code: `- -1234`},
		{Code: `+Number(lol)`},
		{Code: `-parseFloat(lol)`},
		{Code: `2 * foo`},
		{Code: `1 * 1234`},
		{Code: `123 - 0`},
		{Code: `1 * Number(foo)`},
		{Code: `1 * parseInt(foo)`},
		{Code: `1 * parseFloat(foo)`},
		{Code: `Number(foo) * 1`},
		{Code: `Number(foo) - 0`},
		{Code: `parseInt(foo) * 1`},
		{Code: `parseFloat(foo) * 1`},
		{Code: `- -Number(foo)`},
		{Code: `1 * 1234 * 678 * Number(foo)`},
		{Code: `1 * 1234 * 678 * parseInt(foo)`},
		{Code: `(1 - 0) * parseInt(foo)`},
		{Code: `1234 * 1 * 678 * Number(foo)`},
		{Code: `1234 * 1 * Number(foo) * Number(bar)`},
		{Code: `1234 * 1 * Number(foo) * parseInt(bar)`},
		{Code: `1234 * 1 * Number(foo) * parseFloat(bar)`},
		{Code: `1234 * 1 * parseInt(foo) * parseFloat(bar)`},
		{Code: `1234 * 1 * parseInt(foo) * Number(bar)`},
		{Code: `1234 * 1 * parseFloat(foo) * Number(bar)`},
		{Code: `1234 * Number(foo) * 1 * Number(bar)`},
		{Code: `1234 * parseInt(foo) * 1 * Number(bar)`},
		{Code: `1234 * parseFloat(foo) * 1 * parseInt(bar)`},
		{Code: `1234 * parseFloat(foo) * 1 * Number(bar)`},
		{Code: `(- -1234) * (parseFloat(foo) - 0) * (Number(bar) - 0)`},
		{Code: `1234*foo*1`},
		{Code: `1234*1*foo`},
		{Code: `1234*bar*1*foo`},
		{Code: `1234*1*foo*bar`},
		{Code: `1234*1*foo*Number(bar)`},
		{Code: `1234*1*Number(foo)*bar`},
		{Code: `1234*1*parseInt(foo)*bar`},
		{Code: `0 + foo`},
		{Code: `~foo.bar()`},
		{Code: `foo + 'bar'`},
		{
			Code:            "foo + `${bar}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `!!foo`,
			Options: "[{\"boolean\":false}]",
		},
		{
			Code:    `~foo.indexOf(1)`,
			Options: "[{\"boolean\":false}]",
		},
		{
			Code:    `+foo`,
			Options: "[{\"number\":false}]",
		},
		{
			Code:    `-(-foo)`,
			Options: "[{\"number\":false}]",
		},
		{
			Code:    `foo - 0`,
			Options: "[{\"number\":false}]",
		},
		{
			Code:    `1*foo`,
			Options: "[{\"number\":false}]",
		},
		{
			Code:    `""+foo`,
			Options: "[{\"string\":false}]",
		},
		{
			Code:    `foo += ""`,
			Options: "[{\"string\":false}]",
		},
		{
			Code:    `var a = !!foo`,
			Options: "[{\"boolean\":true,\"allow\":[\"!!\"]}]",
		},
		{
			Code:    `var a = ~foo.indexOf(1)`,
			Options: "[{\"boolean\":true,\"allow\":[\"~\"]}]",
		},
		{
			Code:    `var a = ~foo`,
			Options: "[{\"boolean\":true}]",
		},
		{
			Code:    `var a = 1 * foo`,
			Options: "[{\"boolean\":true,\"allow\":[\"*\"]}]",
		},
		{
			Code:    `- -foo`,
			Options: "[{\"number\":true,\"allow\":[\"- -\"]}]",
		},
		{
			Code:    `foo - 0`,
			Options: "[{\"number\":true,\"allow\":[\"-\"]}]",
		},
		{
			Code:    `var a = +foo`,
			Options: "[{\"boolean\":true,\"allow\":[\"+\"]}]",
		},
		{
			Code:    `var a = "" + foo`,
			Options: "[{\"boolean\":true,\"string\":true,\"allow\":[\"+\"]}]",
		},
		{Code: `'' + 'foo'`},
		{
			Code:            "`` + 'foo'",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "'' + `${foo}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `'foo' + ''`},
		{
			Code:            "'foo' + ``",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${foo}` + ''",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `foo += 'bar'`},
		{
			Code:            "foo += `${bar}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`a${foo}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${foo}b`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${foo}${bar}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "tag`${foo}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${foo}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${foo}`",
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${foo}`",
			Options:         "[{\"disallowTemplateShorthand\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `+42`},
		{Code: `'' + String(foo)`},
		{Code: `String(foo) + ''`},
		{
			Code:            "`` + String(foo)",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "String(foo) + ``",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${'foo'}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${`foo`}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${String(foo)}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `console.log(Math.PI * 1/4)`},
		{Code: `a * 1 / 2`},
		{Code: `a * 1 / b`},
	}, []InvalidTestCase{
		{
			Code:   `!!foo`,
			Output: `Boolean(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code:   `!!(foo + bar)`,
			Output: `Boolean(foo + bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code: `!!(foo + bar); var Boolean = null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Boolean(foo + bar); var Boolean = null`,
						},
					},
				},
			},
		},
		{
			Code:            `!!(foo + bar)`,
			LanguageOptions: "{\"globals\":{\"Boolean\":\"off\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Boolean(foo + bar)`,
						},
					},
				},
			},
		},
		{
			Code: `~foo.indexOf(1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code: `~foo.bar.indexOf(2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code: `+foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `-(-foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `+foo.bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code: `1*foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `foo*1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `1*foo.bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code: `foo.bar-0`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code: `""+foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code:            "``+foo",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `foo+""`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code:            "foo+``",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `""+foo.bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code:            "``+foo.bar",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code: `foo.bar+""`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code:            "foo.bar+``",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo.bar)`,
						},
					},
				},
			},
		},
		{
			Code:            "`${foo}`",
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `` + "`" + `\
${foo}` + "`" + ``,
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `` + "`" + `${foo}\
` + "`" + ``,
			Options:         "[{\"disallowTemplateShorthand\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `String(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `foo += ""`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `foo = String(foo)`,
						},
					},
				},
			},
		},
		{
			Code:            "foo += ``",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `foo = String(foo)`,
						},
					},
				},
			},
		},
		{
			Code:    `var a = !!foo`,
			Output:  `var a = Boolean(foo)`,
			Options: "[{\"boolean\":true,\"allow\":[\"~\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code:    `var a = ~foo.indexOf(1)`,
			Options: "[{\"boolean\":true,\"allow\":[\"!!\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code:    `var a = 1 * foo`,
			Options: "[{\"boolean\":true,\"allow\":[\"+\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `var a = Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code:    `var a = +foo`,
			Options: "[{\"boolean\":true,\"allow\":[\"*\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `var a = Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code:    `var a = "" + foo`,
			Options: "[{\"boolean\":true,\"allow\":[\"*\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `var a = String(foo)`,
						},
					},
				},
			},
		},
		{
			Code:            "var a = `` + foo",
			Options:         "[{\"boolean\":true,\"allow\":[\"*\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `var a = String(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `typeof+foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `typeof Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code: `typeof +foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `typeof Number(foo)`,
						},
					},
				},
			},
		},
		{
			Code:            `let x ='' + 1n;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `let x =String(1n);`,
						},
					},
				},
			},
		},
		{
			Code:            `~foo?.indexOf(1)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code:            `~(foo?.indexOf)(1)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
				},
			},
		},
		{
			Code: `1 * a / 2`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(a) / 2`,
						},
					},
				},
			},
		},
		{
			Code: `(a * 1) / 2`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `(Number(a)) / 2`,
						},
					},
				},
			},
		},
		{
			Code: `a * 1 / (b * 1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `a * 1 / (Number(b))`,
						},
					},
				},
			},
		},
		{
			Code: `a * 1 + 2`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "implicitCoercion",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useRecommendation",
							Output:    `Number(a) + 2`,
						},
					},
				},
			},
		},
	})
}
