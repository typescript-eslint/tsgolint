// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoElseReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-else-return", []ValidTestCase{
		{Code: `function foo() { if (true) { if (false) { return x; } } else { return y; } }`},
		{Code: `function foo() { if (true) { return x; } return y; }`},
		{Code: `function foo() { if (true) { for (;;) { return x; } } else { return y; } }`},
		{Code: `function foo() { var x = true; if (x) { return x; } else if (x === false) { return false; } }`},
		{Code: `function foo() { if (true) notAReturn(); else return y; }`},
		{Code: `function foo() {if (x) { notAReturn(); } else if (y) { return true; } else { notAReturn(); } }`},
		{Code: `function foo() {if (x) { return true; } else if (y) { notAReturn() } else { notAReturn(); } }`},
		{Code: `if (0) { if (0) {} else {} } else {}`},
		{Code: `
            function foo() {
                if (foo)
                    if (bar) return;
                    else baz;
                else qux;
            }
        `},
		{Code: `
            function foo() {
                while (foo)
                    if (bar) return;
                    else baz;
            }
        `},
		{
			Code:    `function foo19() { if (true) { return x; } else if (false) { return y; } }`,
			Options: "[{\"allowElseIf\":true}]",
		},
		{
			Code:    `function foo20() {if (x) { return true; } else if (y) { notAReturn() } else { notAReturn(); } }`,
			Options: "[{\"allowElseIf\":true}]",
		},
		{
			Code:    `function foo21() { var x = true; if (x) { return x; } else if (x === false) { return false; } }`,
			Options: "[{\"allowElseIf\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `function foo1() { if (true) { return x; } else { return y; } }`,
			Output: `function foo1() { if (true) { return x; }  return y;  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo2() { if (true) { var x = bar; return x; } else { var y = baz; return y; } }`,
			Output: `function foo2() { if (true) { var x = bar; return x; }  var y = baz; return y;  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo3() { if (true) return x; else return y; }`,
			Output: `function foo3() { if (true) return x; return y; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo4() { if (true) { if (false) return x; else return y; } else { return z; } }`,
			Output: `function foo4() { if (true) { if (false) return x; return y; } else { return z; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo5() { if (true) { if (false) { if (true) return x; else { w = y; } } else { w = x; } } else { return z; } }`,
			Output: `function foo5() { if (true) { if (false) { if (true) return x;  w = y;  } else { w = x; } } else { return z; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo6() { if (true) { if (false) { if (true) return x; else return y; } } else { return z; } }`,
			Output: `function foo6() { if (true) { if (false) { if (true) return x; return y; } } else { return z; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo7() { if (true) { if (false) { if (true) return x; else return y; } return w; } else { return z; } }`,
			Output: `function foo7() { if (true) { if (false) { if (true) return x; return y; } return w; } else { return z; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo8() { if (true) { if (false) { if (true) return x; else return y; } else { w = x; } } else { return z; } }`,
			Output: `function foo8() { if (true) { if (false) { if (true) return x; return y; } else { w = x; } } else { return z; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo9() {if (x) { return true; } else if (y) { return true; } else { notAReturn(); } }`,
			Output: `function foo9() {if (x) { return true; } else if (y) { return true; }  notAReturn();  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo9a() {if (x) { return true; } else if (y) { return true; } else { notAReturn(); } }`,
			Output:  `function foo9a() {if (x) { return true; } if (y) { return true; } else { notAReturn(); } }`,
			Options: "[{\"allowElseIf\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo9b() {if (x) { return true; } if (y) { return true; } else { notAReturn(); } }`,
			Output:  `function foo9b() {if (x) { return true; } if (y) { return true; }  notAReturn();  }`,
			Options: "[{\"allowElseIf\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo10() { if (foo) return bar; else (foo).bar(); }`,
			Output: `function foo10() { if (foo) return bar; (foo).bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo11() { if (foo) return bar 
else { [1, 2, 3].map(foo) } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo12() { if (foo) return bar 
else { baz() } 
[1, 2, 3].map(foo) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo13() { if (foo) return bar; 
else { [1, 2, 3].map(foo) } }`,
			Output: `function foo13() { if (foo) return bar; 
 [1, 2, 3].map(foo)  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo14() { if (foo) return bar 
else { baz(); } 
[1, 2, 3].map(foo) }`,
			Output: `function foo14() { if (foo) return bar 
 baz();  
[1, 2, 3].map(foo) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo15() { if (foo) return bar; else { baz() } qaz() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo16() { if (foo) return bar 
else { baz() } qaz() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo17() { if (foo) return bar 
else { baz() } 
qaz() }`,
			Output: `function foo17() { if (foo) return bar 
 baz()  
qaz() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo18() { if (foo) return function() {} 
else [1, 2, 3].map(bar) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo19() { if (true) { return x; } else if (false) { return y; } }`,
			Output:  `function foo19() { if (true) { return x; } if (false) { return y; } }`,
			Options: "[{\"allowElseIf\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo20() {if (x) { return true; } else if (y) { notAReturn() } else { notAReturn(); } }`,
			Output:  `function foo20() {if (x) { return true; } if (y) { notAReturn() } else { notAReturn(); } }`,
			Options: "[{\"allowElseIf\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo21() { var x = true; if (x) { return x; } else if (x === false) { return false; } }`,
			Output:  `function foo21() { var x = true; if (x) { return x; } if (x === false) { return false; } }`,
			Options: "[{\"allowElseIf\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo() { var a; if (bar) { return true; } else { var a; } }`,
			Output: `function foo() { var a; if (bar) { return true; }  var a;  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo() { if (bar) { var a; if (baz) { return true; } else { var a; } } }`,
			Output: `function foo() { if (bar) { var a; if (baz) { return true; }  var a;  } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { var a; if (bar) { return true; } else { var a; } }`,
			Output:          `function foo() { var a; if (bar) { return true; }  var a;  }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { var a; if (baz) { return true; } else { var a; } } }`,
			Output:          `function foo() { if (bar) { var a; if (baz) { return true; }  var a;  } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { let a; if (bar) { return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { bar() { let a; if (baz) { return true; } else { let a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { let a; if (baz) { return true; } else { let a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() {let a; if (bar) { if (baz) { return true; } else { let a; } } }`,
			Output:          `function foo() {let a; if (bar) { if (baz) { return true; }  let a;  } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { const a = 1; if (bar) { return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { const a = 1; if (baz) { return true; } else { let a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { let a; if (bar) { return true; } else { const a = 1 } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { let a; if (baz) { return true; } else { const a = 1; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { class a {}; if (bar) { return true; } else { const a = 1; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { class a {}; if (baz) { return true; } else { const a = 1; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { const a = 1; if (bar) { return true; } else { class a {} } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { const a = 1; if (baz) { return true; } else { class a {} } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { var a; if (bar) { return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { var a; return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let a; }  while (baz) { var a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a) { if (bar) { return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a = 1) { if (bar) { return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a, b = a) { if (bar) { return true; } else { let a; }  if (bar) { return true; } else { let b; }}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(...args) { if (bar) { return true; } else { let args; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { try {} catch (a) { if (bar) { return true; } else { let a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { try {} catch (a) { if (bar) { if (baz) { return true; } else { let a; } } } }`,
			Output:          `function foo() { try {} catch (a) { if (bar) { if (baz) { return true; }  let a;  } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { try {} catch ({bar, a = 1}) { if (baz) { return true; } else { let a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let arguments; } }`,
			Output:          `function foo() { if (bar) { return true; }  let arguments;  }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let arguments; } return arguments[0]; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let arguments; } if (baz) { return arguments[0]; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let arguments; } } }`,
			Output:          `function foo() { if (bar) { if (baz) { return true; }  let arguments;  } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let a; } a; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let a; } if (baz) { a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } } a; }`,
			Output:          `function foo() { if (bar) { if (baz) { return true; }  let a;  } a; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } if (quux) { a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function a() { if (foo) { return true; } else { let a; } a(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function a() { if (a) { return true; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function a() { if (foo) { return a; } else { let a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let a; } function baz() { a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } (() => a) } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let a; } var a; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } var a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } var { a } = {}; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } if (quux) { var a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } } if (quux) { var a; } }`,
			Output:          `function foo() { if (bar) { if (baz) { return true; }  let a;  } if (quux) { var a; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (quux) { var a; } if (bar) { if (baz) { return true; } else { let a; } } }`,
			Output:          `function foo() { if (quux) { var a; } if (bar) { if (baz) { return true; }  let a;  } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { return true; } else { let a; } function a(){} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (baz) { if (bar) { return true; } else { let a; } function a(){} } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } } if (quux) { function a(){}  } }`,
			Output:          `function foo() { if (bar) { if (baz) { return true; }  let a;  } if (quux) { function a(){}  } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { if (bar) { if (baz) { return true; } else { let a; } } function a(){} }`,
			Output:          `function foo() { if (bar) { if (baz) { return true; }  let a;  } function a(){} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { let a; if (bar) { return true; } else { function a(){} } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { var a; if (bar) { return true; } else { function a(){} } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() { if (bar) { return true; } else function baz() {} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if (foo) { return true; } else { let a; }`,
			Output:          `if (foo) { return true; }  let a; `,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"commonjs\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `let a; if (foo) { return true; } else { let a; }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"commonjs\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
