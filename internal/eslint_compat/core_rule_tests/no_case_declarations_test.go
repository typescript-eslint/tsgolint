// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoCaseDeclarationsRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-case-declarations", []ValidTestCase{
		{
			Code:            `switch (a) { case 1: { let x = 1; break; } default: { let x = 2; break; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `switch (a) { case 1: { const x = 1; break; } default: { const x = 2; break; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `switch (a) { case 1: { function f() {} break; } default: { function f() {} break; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `switch (a) { case 1: { class C {} break; } default: { class C {} break; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `
            switch (a) {
                case 1:
                case 2: {}
            }
        `},
		{Code: `
            switch (a) {
                case 1: var x;
            }
        `},
	}, []InvalidTestCase{
		{
			Code: `
                switch (a) {
                    case 1:
                        {}
                        function f() {}
                        break;
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch (a) {
                    case 1:
                        { {}
                        function f() {}
                        break; }
                }
            `,
						},
					},
				},
			},
		},
		{
			Code: `
                switch (a) {
                    case 1:
                    case 2:
                        let x;
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch (a) {
                    case 1:
                    case 2:
                        { let x; }
                }
            `,
						},
					},
				},
			},
		},
		{
			Code: `
                switch (a) {
                    case 1:
                        let x;
                    case 2:
                        let y;
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch (a) {
                    case 1:
                        { let x; }
                    case 2:
                        let y;
                }
            `,
						},
					},
				},
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch (a) {
                    case 1:
                        let x;
                    case 2:
                        { let y; }
                }
            `,
						},
					},
				},
			},
		},
		{
			Code: `
                switch (a) {
                    case 1:
                        let x;
                    default:
                        let y;
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch (a) {
                    case 1:
                        { let x; }
                    default:
                        let y;
                }
            `,
						},
					},
				},
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch (a) {
                    case 1:
                        let x;
                    default:
                        { let y; }
                }
            `,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { case 1: let x = 1; break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { case 1: { let x = 1; break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { default: let x = 2; break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { default: { let x = 2; break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { case 1: const x = 1; break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { case 1: { const x = 1; break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { default: const x = 2; break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { default: { const x = 2; break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { case 1: function f() {} break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { case 1: { function f() {} break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { default: function f() {} break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { default: { function f() {} break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { case 1: class C {} break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { case 1: { class C {} break; } }`,
						},
					},
				},
			},
		},
		{
			Code:            `switch (a) { default: class C {} break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output:    `switch (a) { default: { class C {} break; } }`,
						},
					},
				},
			},
		},
		{
			Code: `
                switch ("foo") {
                    case "bar":
                        function baz() { }
                        break;
                    default:
                        baz();
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addBrackets",
							Output: `
                switch ("foo") {
                    case "bar":
                        { function baz() { }
                        break; }
                    default:
                        baz();
                }
            `,
						},
					},
				},
			},
		},
	})
}
