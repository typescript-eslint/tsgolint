// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestConstructorSuperRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021}}", "constructor-super", []ValidTestCase{
		{Code: `class A { }`},
		{Code: `class A { constructor() { } }`},
		{Code: `class A extends null { }`},
		{Code: `class A extends B { }`},
		{Code: `class A extends B { constructor() { super(); } }`},
		{Code: `class A extends B { constructor() { if (true) { super(); } else { super(); } } }`},
		{Code: `class A extends (class B {}) { constructor() { super(); } }`},
		{Code: `class A extends (B = C) { constructor() { super(); } }`},
		{Code: `class A extends (B &&= C) { constructor() { super(); } }`},
		{Code: `class A extends (B ||= C) { constructor() { super(); } }`},
		{Code: `class A extends (B ??= C) { constructor() { super(); } }`},
		{Code: `class A extends (B ||= 5) { constructor() { super(); } }`},
		{Code: `class A extends (B ??= 5) { constructor() { super(); } }`},
		{Code: `class A extends (B || C) { constructor() { super(); } }`},
		{Code: `class A extends (5 && B) { constructor() { super(); } }`},
		{Code: `class A extends (false && B) { constructor() { super(); } }`},
		{Code: `class A extends (B || 5) { constructor() { super(); } }`},
		{Code: `class A extends (B ?? 5) { constructor() { super(); } }`},
		{Code: `class A extends (a ? B : C) { constructor() { super(); } }`},
		{Code: `class A extends (B, C) { constructor() { super(); } }`},
		{Code: `class A { constructor() { class B extends C { constructor() { super(); } } } }`},
		{Code: `class A extends B { constructor() { super(); class C extends D { constructor() { super(); } } } }`},
		{Code: `class A extends B { constructor() { super(); class C { constructor() { } } } }`},
		{Code: `class A extends B { constructor() { a ? super() : super(); } }`},
		{Code: `class A extends B { constructor() { if (a) super(); else super(); } }`},
		{Code: `class A extends B { constructor() { switch (a) { case 0: super(); break; default: super(); } } }`},
		{Code: `class A extends B { constructor() { try {} finally { super(); } } }`},
		{Code: `class A extends B { constructor() { if (a) throw Error(); super(); } }`},
		{Code: `class A extends B { constructor() { if (true) return a; super(); } }`},
		{Code: `class A extends null { constructor() { return a; } }`},
		{Code: `class A { constructor() { return a; } }`},
		{Code: `class A extends B { constructor(a) { super(); for (const b of a) { this.a(); } } }`},
		{Code: `class A extends B { constructor(a) { super(); for (b in a) ( foo(b) ); } }`},
		{Code: `class Foo extends Object { constructor(method) { super(); this.method = method || function() {}; } }`},
		{Code: `class A extends Object {
    constructor() {
        super();
        for (let i = 0; i < 0; i++);
    }
}`},
		{Code: `class A extends Object {
    constructor() {
        super();
        for (; i < 0; i++);
    }
}`},
		{Code: `class A extends Object {
    constructor() {
        super();
        for (let i = 0;; i++) {
            if (foo) break;
        }
    }
}`},
		{Code: `class A extends Object {
    constructor() {
        super();
        for (let i = 0; i < 0;);
    }
}`},
		{Code: `class A extends Object {
    constructor() {
        super();
        for (let i = 0;;) {
            if (foo) break;
        }
    }
}`},
		{Code: `
            class A extends B {
                constructor(props) {
                    super(props);

                    try {
                        let arr = [];
                        for (let a of arr) {
                        }
                    } catch (err) {
                    }
                }
            }
        `},
		{Code: `class A extends obj?.prop { constructor() { super(); } }`},
		{Code: `
            class A extends Base {
                constructor(list) {
                    for (const a of list) {
                        if (a.foo) {
                            super(a);
                            return;
                        }
                    }
                    super();
                }
            }
        `},
	}, []InvalidTestCase{
		{
			Code: `class A extends null { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends null { constructor() { } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class A extends 100 { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends 'test' { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B = 5) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B && 5) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B &&= 5) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B += C) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B -= C) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B **= C) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B |= C) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends (B &= C) { constructor() { super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { for (var a of b) super.foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { for (var i = 1; i < 10; i++) super.foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { var c = class extends D { constructor() { super(); } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { var c = () => super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { class C extends D { constructor() { super(); } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
					Column:    21,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { var C = class extends D { constructor() { super(); } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
					Column:    21,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super(); class C extends D { constructor() { } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
					Column:    66,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super(); var C = class extends D { constructor() { } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
					Column:    72,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { if (a) super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { if (a); else super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { a && super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { switch (a) { case 0: super(); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { switch (a) { case 0: break; default: super(); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { try { super(); } catch (err) {} } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { try { a; } catch (err) { super(); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { if (a) return; super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super(); super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "duplicate",
					Column:    46,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super() || super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "duplicate",
					Column:    48,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { if (a) super(); super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "duplicate",
					Column:    53,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { switch (a) { case 0: super(); default: super(); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "duplicate",
					Column:    76,
				},
			},
		},
		{
			Code: `class A extends B { constructor(a) { while (a) super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
				{
					MessageId: "duplicate",
					Column:    48,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { return; super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class Foo extends Bar {
                constructor() {
                    for (a in b) for (c in d);
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class C extends D {

                constructor() {
                    do {
                        something();
                    } while (foo);
                }

            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class C extends D {

                constructor() {
                    for (let i = 1;;i++) {
                        if (bar) {
                            break;
                        }
                    }
                }

            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAll",
				},
			},
		},
		{
			Code: `class C extends D {

                constructor() {
                    do {
                        super();
                    } while (foo);
                }

            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "duplicate",
				},
			},
		},
		{
			Code: `class C extends D {

                constructor() {
                    while (foo) {
                        if (bar) {
                            super();
                            break;
                        }
                    }
                }

            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSome",
				},
			},
		},
	})
}
