// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnusedLabelsRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-unused-labels", []ValidTestCase{
		{Code: `A: break A;`},
		{Code: `A: { foo(); break A; bar(); }`},
		{Code: `A: if (a) { foo(); if (b) break A; bar(); }`},
		{Code: `A: for (var i = 0; i < 10; ++i) { foo(); if (a) break A; bar(); }`},
		{Code: `A: for (var i = 0; i < 10; ++i) { foo(); if (a) continue A; bar(); }`},
		{Code: `A: { B: break B; C: for (var i = 0; i < 10; ++i) { foo(); if (a) break A; if (c) continue C; bar(); } }`},
		{Code: `A: { var A = 0; console.log(A); break A; console.log(A); }`},
	}, []InvalidTestCase{
		{
			Code:   `A: var foo = 0;`,
			Output: `var foo = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: { foo(); bar(); }`,
			Output: `{ foo(); bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: if (a) { foo(); bar(); }`,
			Output: `if (a) { foo(); bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: for (var i = 0; i < 10; ++i) { foo(); if (a) break; bar(); }`,
			Output: `for (var i = 0; i < 10; ++i) { foo(); if (a) break; bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: for (var i = 0; i < 10; ++i) { foo(); if (a) continue; bar(); }`,
			Output: `for (var i = 0; i < 10; ++i) { foo(); if (a) continue; bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: for (var i = 0; i < 10; ++i) { B: break A; }`,
			Output: `A: for (var i = 0; i < 10; ++i) { break A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: { var A = 0; console.log(A); }`,
			Output: `{ var A = 0; console.log(A); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code: `A: /* comment */ foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code: `A /* comment */: foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code: `A: "use strict"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code: `"use strict"; foo: "bar"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code: `A: ("use strict")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:            "A: `use strict`",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `if (foo) { bar: 'baz' }`,
			Output: `if (foo) { 'baz' }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: B: 'foo'`,
			Output: `B: 'foo'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: B: C: 'foo'`,
			Output: `B: C: 'foo'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: B: C: D: 'foo'`,
			Output: `B: D: 'foo'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: B: C: D: E: 'foo'`,
			Output: `B: D: E: 'foo'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
				{
					MessageId: "unused",
				},
			},
		},
		{
			Code:   `A: 42`,
			Output: `42`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unused",
				},
			},
		},
	})
}
