// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCamelcaseRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "camelcase", []ValidTestCase{
		{Code: `firstName = "Nicholas"`},
		{Code: `FIRST_NAME = "Nicholas"`},
		{Code: `__myPrivateVariable = "Patrick"`},
		{Code: `myPrivateVariable_ = "Patrick"`},
		{Code: `function doSomething(){}`},
		{Code: `do_something()`},
		{Code: `new do_something`},
		{Code: `new do_something()`},
		{Code: `foo.do_something()`},
		{Code: `var foo = bar.baz_boom;`},
		{Code: `var foo = bar.baz_boom.something;`},
		{Code: `foo.boom_pow.qux = bar.baz_boom.something;`},
		{Code: `if (bar.baz_boom) {}`},
		{Code: `var obj = { key: foo.bar_baz };`},
		{Code: `var arr = [foo.bar_baz];`},
		{Code: `[foo.bar_baz]`},
		{Code: `var arr = [foo.bar_baz.qux];`},
		{Code: `[foo.bar_baz.nesting]`},
		{Code: `if (foo.bar_baz === boom.bam_pow) { [foo.baz_boom] }`},
		{
			Code:    `var o = {key: 1}`,
			Options: "[{\"properties\":\"always\"}]",
		},
		{
			Code:    `var o = {_leading: 1}`,
			Options: "[{\"properties\":\"always\"}]",
		},
		{
			Code:    `var o = {trailing_: 1}`,
			Options: "[{\"properties\":\"always\"}]",
		},
		{
			Code:    `var o = {bar_baz: 1}`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:    `var o = {_leading: 1}`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:    `var o = {trailing_: 1}`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:    `obj.a_b = 2;`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:    `obj._a = 2;`,
			Options: "[{\"properties\":\"always\"}]",
		},
		{
			Code:    `obj.a_ = 2;`,
			Options: "[{\"properties\":\"always\"}]",
		},
		{
			Code:    `obj._a = 2;`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:    `obj.a_ = 2;`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code: `var obj = {
 a_a: 1 
};
 obj.a_b = 2;`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:    `obj.foo_bar = function(){};`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:            `const { ['foo']: _foo } = obj;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const { [_foo_]: foo } = obj;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id: category_id } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id = 1 } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { [{category_id} = query]: categoryId } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id: category } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { _leading } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { trailing_ } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import { camelCased } from "external module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { _leading } from "external module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { trailing_ } from "external module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { no_camelcased as camelCased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { no_camelcased as _leading } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { no_camelcased as trailing_ } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { no_camelcased as camelCased, anotherCamelCased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { snake_cased } from 'mod'`,
			Options:         "[{\"ignoreImports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { snake_cased as snake_cased } from 'mod'`,
			Options:         "[{\"ignoreImports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { 'snake_cased' as snake_cased } from 'mod'`,
			Options:         "[{\"ignoreImports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { camelCased } from 'mod'`,
			Options:         "[{\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { a as 'snake_cased' } from 'mod'`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as 'snake_cased' from 'mod'`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var _camelCased = aGlobalVariable`,
			Options:         "[{\"ignoreGlobals\":false}]",
			LanguageOptions: "{\"globals\":{\"aGlobalVariable\":\"readonly\"}}",
		},
		{
			Code:            `var camelCased = _aGlobalVariable`,
			Options:         "[{\"ignoreGlobals\":false}]",
			LanguageOptions: "{\"globals\":{\"_aGlobalVariable\":\"readonly\"}}",
		},
		{
			Code:            `var camelCased = a_global_variable`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `a_global_variable.foo()`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `a_global_variable[undefined]`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `var foo = a_global_variable.bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `a_global_variable.foo = bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `( { foo: a_global_variable.bar } = baz )`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `a_global_variable = foo`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"writable\"}}",
		},
		{
			Code:            `a_global_variable = foo`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `({ a_global_variable } = foo)`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
		},
		{
			Code:            `({ snake_cased: a_global_variable } = foo)`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
		},
		{
			Code:            `({ snake_cased: a_global_variable = foo } = bar)`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
		},
		{
			Code:            `[a_global_variable] = bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
		},
		{
			Code:            `[a_global_variable = foo] = bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
		},
		{
			Code:            `foo[a_global_variable] = bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `var foo = { [a_global_variable]: bar }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `var { [a_global_variable]: foo } = bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"readonly\"}}",
		},
		{
			Code:            `function foo({ no_camelcased: camelCased }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ no_camelcased: _leading }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ no_camelcased: trailing_ }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ camelCased = 'default value' }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ _leading = 'default value' }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ trailing_ = 'default value' }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ camelCased }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ _leading }) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ trailing_ }) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `ignored_foo = 0;`,
			Options: "[{\"allow\":[\"ignored_foo\"]}]",
		},
		{
			Code:    `ignored_foo = 0; ignored_bar = 1;`,
			Options: "[{\"allow\":[\"ignored_foo\",\"ignored_bar\"]}]",
		},
		{
			Code:    `user_id = 0;`,
			Options: "[{\"allow\":[\"_id$\"]}]",
		},
		{
			Code:    `__option_foo__ = 0;`,
			Options: "[{\"allow\":[\"__option_foo__\"]}]",
		},
		{
			Code:    `__option_foo__ = 0; user_id = 0; foo = 1`,
			Options: "[{\"allow\":[\"__option_foo__\",\"_id$\"]}]",
		},
		{
			Code:    `fo_o = 0;`,
			Options: "[{\"allow\":[\"__option_foo__\",\"fo_o\"]}]",
		},
		{
			Code:    `user = 0;`,
			Options: "[{\"allow\":[]}]",
		},
		{
			Code:            `foo = { [computedBar]: 0 };`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: obj.fo_o } = bar);`,
			Options:         "[{\"allow\":[\"fo_o\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: obj.foo } = bar);`,
			Options:         "[{\"allow\":[\"fo_o\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: obj.fo_o } = bar);`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: obj.fo_o.b_ar } = bar);`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: { b: obj.fo_o } } = bar);`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `([obj.fo_o] = bar);`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ c: [ob.fo_o]} = bar);`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `([obj.fo_o.b_ar] = bar);`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({obj} = baz.fo_o);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `([obj] = baz.fo_o);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `([obj.foo = obj.fo_o] = bar);`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { camelCase; #camelCase; #camelCase2() {} }`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { snake_case; #snake_case; #snake_case2() {} }`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            const { some_property } = obj;

            const bar = { some_property };

            obj.some_property = 10;

            const xyz = { some_property: obj.some_property };

            const foo = ({ some_property }) => {
                console.log(some_property)
            };
            `,
			Options:         "[{\"properties\":\"never\",\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            const { some_property } = obj;
            doSomething({ some_property });
            `,
			Options:         "[{\"properties\":\"never\",\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `import foo from 'foo.json' with { my_type: 'json' }`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * from 'foo.json' with { my_type: 'json' }`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { default } from 'foo.json' with { my_type: 'json' }`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import('foo.json', { my_with: { my_type: 'json' } })`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { 'with': { my_type: 'json' } })`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { my_with: { my_type } })`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { my_with: { my_type } })`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"globals\":{\"my_type\":true}}",
		},
	}, []InvalidTestCase{
		{
			Code: `first_name = "Nicholas"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `__private_first_name = "Patrick"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `function foo_bar(){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `obj.foo_bar = function(){};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `bar_baz.foo = function(){};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `[foo_bar.baz]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `if (foo.bar_baz === boom.bam_pow) { [foo_bar.baz] }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `foo.bar_baz = boom.bam_pow`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `var foo = { bar_baz: boom.bam_pow }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `var foo = { bar_baz: boom.bam_pow }`,
			Options: "[{\"ignoreDestructuring\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code: `foo.qux.boom_pow = { bar: boom.bam_pow }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `var o = {bar_baz: 1}`,
			Options: "[{\"properties\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `obj.a_b = 2;`,
			Options: "[{\"properties\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { category_id: category_alias } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { category_id: category_alias } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { [category_id]: categoryId } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { [category_id]: categoryId } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { category_id: categoryId, ...other_props } = query;`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { category_id } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { category_id: category_id } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { category_id = 1 } = query;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import no_camelcased from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import * as no_camelcased from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { no_camelcased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { no_camelcased as no_camel_cased } from "external module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { camelCased as no_camel_cased } from "external module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { 'snake_cased' as snake_cased } from 'mod'`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { 'snake_cased' as another_snake_cased } from 'mod'`,
			Options:         "[{\"ignoreImports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { camelCased, no_camelcased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import { no_camelcased as camelCased, another_no_camelcased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import camelCased, { no_camelcased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import no_camelcased, { another_no_camelcased as camelCased } from "external-module";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import snake_cased from 'mod'`,
			Options:         "[{\"ignoreImports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import * as snake_cased from 'mod'`,
			Options:         "[{\"ignoreImports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import snake_cased from 'mod'`,
			Options:         "[{\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import * as snake_cased from 'mod'`,
			Options:         "[{\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var camelCased = snake_cased`,
			Options:         "[{\"ignoreGlobals\":false}]",
			LanguageOptions: "{\"globals\":{\"snake_cased\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `a_global_variable.foo()`,
			Options:         "[{\"ignoreGlobals\":false}]",
			LanguageOptions: "{\"globals\":{\"snake_cased\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `a_global_variable[undefined]`,
			Options:         "[{\"ignoreGlobals\":false}]",
			LanguageOptions: "{\"globals\":{\"snake_cased\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var camelCased = snake_cased`,
			LanguageOptions: "{\"globals\":{\"snake_cased\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var camelCased = snake_cased`,
			Options:         "[{}]",
			LanguageOptions: "{\"globals\":{\"snake_cased\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `foo.a_global_variable = bar`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var foo = { a_global_variable: bar }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var foo = { a_global_variable: a_global_variable }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Column:    13,
				},
			},
		},
		{
			Code:            `var foo = { a_global_variable() {} }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `class Foo { a_global_variable() {} }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `a_global_variable: for (;;);`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `if (foo) { let a_global_variable; a_global_variable = bar; }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Column:    16,
				},
				{
					MessageId: "notCamelCase",
					Column:    35,
				},
			},
		},
		{
			Code:            `function foo(a_global_variable) { foo = a_global_variable; }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Column:    14,
				},
				{
					MessageId: "notCamelCase",
					Column:    41,
				},
			},
		},
		{
			Code:            `var a_global_variable`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `function a_global_variable () {}`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `const a_global_variable = foo; bar = a_global_variable`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Column:    7,
				},
				{
					MessageId: "notCamelCase",
					Column:    38,
				},
			},
		},
		{
			Code:            `bar = a_global_variable; var a_global_variable;`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Column:    7,
				},
				{
					MessageId: "notCamelCase",
					Column:    30,
				},
			},
		},
		{
			Code:            `var foo = { a_global_variable }`,
			Options:         "[{\"ignoreGlobals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"a_global_variable\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `undefined_variable;`,
			Options: "[{\"ignoreGlobals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `implicit_global = 1;`,
			Options: "[{\"ignoreGlobals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `export * as snake_cased from 'mod'`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `function foo({ no_camelcased }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `function foo({ no_camelcased = 'default value' }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `const no_camelcased = 0; function foo({ camelcased_value = no_camelcased}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `const { bar: no_camelcased } = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `function foo({ value_1: my_default }) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `function foo({ isCamelcased: no_camelcased }) {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `var { foo: bar_baz = 1 } = quz;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `const { no_camelcased = false } = bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `const { no_camelcased = foo_bar } = bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `not_ignored_foo = 0;`,
			Options: "[{\"allow\":[\"ignored_bar\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:    `not_ignored_foo = 0;`,
			Options: "[{\"allow\":[\"_id$\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `foo = { [computed_bar]: 0 };`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: obj.fo_o } = bar);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: obj.fo_o } = bar);`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: obj.fo_o.b_ar } = baz);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: { b: { c: obj.fo_o } } } = bar);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: { b: { c: obj.fo_o.b_ar } } } = baz);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `([obj.fo_o] = bar);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `([obj.fo_o] = bar);`,
			Options:         "[{\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `([obj.fo_o = 1] = bar);`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: [obj.fo_o] } = bar);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({ a: { b: [obj.fo_o] } } = bar);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `([obj.fo_o.ba_r] = baz);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({...obj.fo_o} = baz);`,
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({...obj.fo_o.ba_r} = baz);`,
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `({c: {...obj.fo_o }} = baz);`,
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `obj.o_k.non_camelcase = 0`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `(obj?.o_k).non_camelcase = 0`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `class C { snake_case; }`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `class C { #snake_case; foo() { this.#snake_case; } }`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCasePrivate",
					Column:    11,
				},
			},
		},
		{
			Code:            `class C { #snake_case() {} }`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCasePrivate",
				},
			},
		},
		{
			Code: `
            const { some_property } = obj;
            doSomething({ some_property });
            `,
			Options:         "[{\"properties\":\"always\",\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Line:      3,
					Column:    27,
				},
			},
		},
		{
			Code: `
            const { some_property } = obj;
            doSomething({ some_property });
            doSomething({ [some_property]: "bar" });
            `,
			Options:         "[{\"properties\":\"never\",\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Line:      4,
					Column:    28,
				},
			},
		},
		{
			Code: `
            const { some_property } = obj;

            const bar = { some_property };

            obj.some_property = 10;

            const xyz = { some_property: obj.some_property };

            const foo = ({ some_property }) => {
                console.log(some_property)
            };
            `,
			Options:         "[{\"properties\":\"always\",\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
					Line:      4,
					Column:    27,
				},
				{
					MessageId: "notCamelCase",
					Line:      6,
					Column:    17,
				},
				{
					MessageId: "notCamelCase",
					Line:      8,
					Column:    27,
				},
			},
		},
		{
			Code:            `import('foo.json', { my_with: { [my_type]: 'json' } })`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
		{
			Code:            `import('foo.json', { my_with: { my_type: my_json } })`,
			Options:         "[{\"properties\":\"always\",\"ignoreImports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notCamelCase",
				},
			},
		},
	})
}
