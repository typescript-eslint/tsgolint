// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoFallthroughRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-fallthrough", []ValidTestCase{
		{Code: `switch(foo) { case 0: a(); /* falls through */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: a()
 /* falls through */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: a(); /* fall through */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: a(); /* fallthrough */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: a(); /* FALLS THROUGH */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a(); /* falls through */ } case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a()
 /* falls through */ } case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a(); /* fall through */ } case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a(); /* fallthrough */ } case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a(); /* FALLS THROUGH */ } case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a(); } /* falls through */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: { a(); /* falls through */ } /* comment */ case 1: b(); }`},
		{Code: `switch(foo) { case 0: { /* falls through */ } case 1: b(); }`},
		{Code: `function foo() { switch(foo) { case 0: a(); return; case 1: b(); }; }`},
		{Code: `switch(foo) { case 0: a(); throw 'foo'; case 1: b(); }`},
		{Code: `while (a) { switch(foo) { case 0: a(); continue; case 1: b(); } }`},
		{Code: `switch(foo) { case 0: a(); break; case 1: b(); }`},
		{Code: `switch(foo) { case 0: case 1: a(); break; case 2: b(); }`},
		{Code: `switch(foo) { case 0: case 1: break; case 2: b(); }`},
		{Code: `switch(foo) { case 0: case 1: break; default: b(); }`},
		{Code: `switch(foo) { case 0: case 1: a(); }`},
		{Code: `switch(foo) { case 0: case 1: a(); break; }`},
		{Code: `switch(foo) { case 0: case 1: break; }`},
		{Code: `switch(foo) { case 0:
 case 1: break; }`},
		{Code: `switch(foo) { case 0: // comment
 case 1: break; }`},
		{Code: `function foo() { switch(foo) { case 0: case 1: return; } }`},
		{Code: `function foo() { switch(foo) { case 0: {return;}
 case 1: {return;} } }`},
		{Code: `switch(foo) { case 0: case 1: {break;} }`},
		{Code: `switch(foo) { }`},
		{Code: `switch(foo) { case 0: switch(bar) { case 2: break; } /* falls through */ case 1: break; }`},
		{Code: `function foo() { switch(foo) { case 1: return a; a++; }}`},
		{Code: `switch (foo) { case 0: a(); /* falls through */ default:  b(); /* comment */ }`},
		{Code: `switch (foo) { case 0: a(); /* falls through */ default: /* comment */ b(); }`},
		{Code: `switch (foo) { case 0: if (a) { break; } else { throw 0; } default: b(); }`},
		{Code: `switch (foo) { case 0: try { break; } finally {} default: b(); }`},
		{Code: `switch (foo) { case 0: try {} finally { break; } default: b(); }`},
		{Code: `switch (foo) { case 0: try { throw 0; } catch (err) { break; } default: b(); }`},
		{Code: `switch (foo) { case 0: do { throw 0; } while(a); default: b(); }`},
		{Code: `switch (foo) { case 0: a(); 
// eslint-disable-next-line rule-to-test/no-fallthrough
 case 1: }`},
		{Code: `
            switch (foo) {
                case 0:
                    a();
                    break;
                    /* falls through */
                case 1:
                    b();
            }
        `},
		{Code: `
            switch (foo) {
                case 0:
                    a();
                    break;
                    // eslint-disable-next-line rule-to-test/no-fallthrough
                    /* falls through */
                case 1:
                    b();
            }
        `},
		{
			Code:    `switch(foo) { case 0: a(); /* no break */ case 1: b(); }`,
			Options: "[{\"commentPattern\":\"no break\"}]",
		},
		{
			Code:    `switch(foo) { case 0: a(); /* no break: need to execute b() */ case 1: b(); }`,
			Options: "[{\"commentPattern\":\"no break:\\\\s?\\\\w+\"}]",
		},
		{
			Code: `switch(foo) { case 0: a();
// need to execute b(), so
// falling through
 case 1: b(); }`,
			Options: "[{\"commentPattern\":\"falling through\"}]",
		},
		{
			Code:    `switch(foo) { case 0: a(); /* break omitted */ default:  b(); /* comment */ }`,
			Options: "[{\"commentPattern\":\"break omitted\"}]",
		},
		{
			Code:    `switch(foo) { case 0: a(); /* caution: break is omitted intentionally */ case 1: b(); /* break omitted */ default: c(); }`,
			Options: "[{\"commentPattern\":\"break[\\\\s\\\\w]+omitted\"}]",
		},
		{
			Code: `switch(foo) { case 0: 


 case 1: b(); }`,
			Options: "[{\"allowEmptyCase\":true}]",
		},
		{
			Code: `switch(foo) { case 0: 
 /* with comments */  
 case 1: b(); }`,
			Options: "[{\"allowEmptyCase\":true}]",
		},
		{
			Code: `switch (a) {
 case 1: ; break; 
 case 3: }`,
			Options: "[{\"allowEmptyCase\":true}]",
		},
		{
			Code: `switch (a) {
 case 1: ; break; 
 case 3: }`,
			Options: "[{\"allowEmptyCase\":false}]",
		},
		{Code: `
switch (foo) {
    case 0:
        a();
}
switch (bar) {
    case 1:
        b();
}
            `},
		{
			Code: `
switch (foo) {
    case 0:
        a();
        break;
        // falls through
}
switch (bar) {
    case 1:
        b();
}
            `,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
		},
		{
			Code: `
switch (foo) {
    case 0:
        a();
        break;
        /* falls through */
}
switch (bar) {
    case 1:
        b();
}
            `,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
		},
		{
			Code: `
switch(foo){
    case 1:
        doSomething();
        break;
    // just a comment
    case 2: doSomething();
}
          `,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
		},
		{
			Code: `
switch(foo){
    case 1:
        doSomething();
        break;
}

function f() {
    switch(foo){
        // falls through comment should not false positive
        case 1:
            if (a) {
                throw new Error();
            } else if (b) {
                break;
            } else {
                return;
            }
        case 2:
            break;
    }
}
            `,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
		},
		{
			Code: `
switch(foo){
    case 1:
        doSomething();
        break;
}

function f() {
    switch(foo){
        /* falls through comment should not false positive */
        case 1:
            if (a) {
                throw new Error();
            } else if (b) {
                break;
            } else {
                return;
            }
        case 2:
            break;
    }
}
            `,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
		},
		{
			Code: `
switch(foo){
    case 1:
        doSomething();
        // falls through
    case 2: doSomething();
}
          `,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `switch(foo) { case 0: a();
case 1: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0: a();
default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0: a(); default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: if (a) { break; } default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: try { throw 0; } catch (err) {} default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: while (a) { break; } default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: do { break; } while (a); default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0:

 default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: {} default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: a(); { /* falls through */ } default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: { /* falls through */ } a(); default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: if (a) { /* falls through */ } default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: { { /* falls through */ } } default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: { /* comment */ } default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0:
 // comment
 default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: a(); /* falling through */ default: b() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
				},
			},
		},
		{
			Code: `switch(foo) { case 0: a();
/* no break */
case 1: b(); }`,
			Options: "[{\"commentPattern\":\"break omitted\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0: a();
/* no break */
/* todo: fix readability */
default: b() }`,
			Options: "[{\"commentPattern\":\"no break\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0: { a();
/* no break */
/* todo: fix readability */ }
default: b() }`,
			Options: "[{\"commentPattern\":\"no break\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "default",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0: 
 /* with comments */  
case 1: b(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0:

case 1: b(); }`,
			Options: "[{\"allowEmptyCase\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case 0:

case 1: b(); }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `switch (a) { case 1: 
 ; case 2:  }`,
			Options: "[{\"allowEmptyCase\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      2,
					Column:    4,
				},
			},
		},
		{
			Code:    `switch (a) { case 1: ; case 2: ; case 3: }`,
			Options: "[{\"allowEmptyCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      1,
					Column:    24,
				},
				{
					MessageId: "case",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code: `switch (foo) { case 0: a(); 
// eslint-enable no-fallthrough
 case 1: }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "case",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `
switch (foo) {
    case 0:
        a();
        break;
    /* falls through */
    case 1:
        b();
}`,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedFallthroughComment",
					Line:      6,
				},
			},
		},
		{
			Code: `
switch (foo) {
    default:
        a();
        break;
    /* falls through */
    case 1:
        b();
}`,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedFallthroughComment",
					Line:      6,
				},
			},
		},
		{
			Code: `
switch(foo){
    case 1:
        doSomething();
        break;
    // falls through
    case 2: doSomething();
}`,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedFallthroughComment",
					Line:      6,
				},
			},
		},
		{
			Code: `
function f() {
    switch(foo){
        case 1:
            if (a) {
                throw new Error();
            } else if (b) {
                break;
            } else {
                return;
            }
        // falls through
        case 2:
            break;
    }
}`,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedFallthroughComment",
					Line:      12,
				},
			},
		},
		{
			Code: `
switch (foo) {
    case 0: {
        a();
        break;
        // falls through
    }
    case 1:
        b();
}`,
			Options: "[{\"reportUnusedFallthroughComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedFallthroughComment",
					Line:      6,
				},
			},
		},
	})
}
