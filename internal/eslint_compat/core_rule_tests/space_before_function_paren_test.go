// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSpaceBeforeFunctionParenRule(t *testing.T) {
	RunRuleTester(t, "{}", "space-before-function-paren", []ValidTestCase{
		{Code: `function foo () {}`},
		{Code: `var foo = function () {}`},
		{Code: `var bar = function foo () {}`},
		{Code: `var bar = function foo/**/ () {}`},
		{Code: `var bar = function foo /**/() {}`},
		{Code: `var bar = function foo/**/
() {}`},
		{Code: `var bar = function foo
/**/() {}`},
		{Code: `var bar = function foo//
() {}`},
		{Code: `var obj = { get foo () {}, set foo (val) {} };`},
		{
			Code:            `var obj = { foo () {} };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo () {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = function *() {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function foo() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = function() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = function/**/() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = function/* */() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = function/* *//*  */() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var bar = function foo() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = { get foo() {}, set foo(val) {} };`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var obj = { foo() {} };`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = function*() {};`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {}
var bar = function () {}
function* baz() {}
var bat = function*() {};
var obj = { get foo() {}, set foo(val) {}, bar() {} };`,
			Options:         "[{\"named\":\"never\",\"anonymous\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo () {}
var bar = function() {}
function* baz () {}
var bat = function* () {};
var obj = { get foo () {}, set foo (val) {}, bar () {} };`,
			Options:         "[{\"named\":\"always\",\"anonymous\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Foo { constructor() {} *method() {} }`,
			Options:         "[{\"named\":\"never\",\"anonymous\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Foo { constructor () {} *method () {} }`,
			Options:         "[{\"named\":\"always\",\"anonymous\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = function() {}`,
			Options: "[{\"named\":\"always\",\"anonymous\":\"ignore\"}]",
		},
		{
			Code:    `var foo = function () {}`,
			Options: "[{\"named\":\"always\",\"anonymous\":\"ignore\"}]",
		},
		{
			Code:    `var bar = function foo() {}`,
			Options: "[{\"named\":\"ignore\",\"anonymous\":\"always\"}]",
		},
		{
			Code:    `var bar = function foo () {}`,
			Options: "[{\"named\":\"ignore\",\"anonymous\":\"always\"}]",
		},
		{
			Code:            `type TransformFunction = (el: ASTElement, code: string) => string;`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `() => 1`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `async a => a`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async a => a`,
			Options:         "[{\"asyncArrow\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async a => a`,
			Options:         "[{\"asyncArrow\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => 1`,
			Options:         "[{\"asyncArrow\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async() => 1`,
			Options:         "[{\"asyncArrow\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => 1`,
			Options:         "[{\"asyncArrow\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async() => 1`,
			Options:         "[{\"asyncArrow\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => 1`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => 1`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async() => 1`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
	}, []InvalidTestCase{
		{
			Code:   `function foo() {}`,
			Output: `function foo () {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    13,
					EndColumn: 14,
				},
			},
		},
		{
			Code:   `function foo/* */() {}`,
			Output: `function foo /* */() {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    18,
					EndColumn: 19,
				},
			},
		},
		{
			Code:   `var foo = function() {}`,
			Output: `var foo = function () {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:   `var bar = function foo() {}`,
			Output: `var bar = function foo () {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:   `var obj = { get foo() {}, set foo(val) {} };`,
			Output: `var obj = { get foo () {}, set foo (val) {} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    20,
				},
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code:            `var obj = { foo() {} };`,
			Output:          `var obj = { foo () {} };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:            `function* foo() {}`,
			Output:          `function* foo () {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:    `function foo () {}`,
			Output:  `function foo() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
					EndColumn: 14,
				},
			},
		},
		{
			Code:    `function foo /* */ () {}`,
			Output:  `function foo/* */() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:    `function foo/* block comment */ () {}`,
			Output:  `function foo/* block comment */() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `function foo/* 1 */ /* 2 */ 
 /* 3 */
/* 4 */ () {}`,
			Output:  `function foo/* 1 *//* 2 *//* 3 *//* 4 */() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:    `function foo  () {}`,
			Output:  `function foo() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `function foo//
() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `function foo // line comment 
 () {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `function foo
//
() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:    `var foo = function () {}`,
			Output:  `var foo = function() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    19,
					EndColumn: 20,
				},
			},
		},
		{
			Code:    `var bar = function foo () {}`,
			Output:  `var bar = function foo() {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:    `var obj = { get foo () {}, set foo (val) {} };`,
			Output:  `var obj = { get foo() {}, set foo(val) {} };`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    20,
				},
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    35,
				},
			},
		},
		{
			Code:            `var obj = { foo () {} };`,
			Output:          `var obj = { foo() {} };`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:            `function* foo () {}`,
			Output:          `function* foo() {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `function foo () {}
var bar = function() {}
var obj = { get foo () {}, set foo (val) {}, bar () {} };`,
			Output: `function foo() {}
var bar = function () {}
var obj = { get foo() {}, set foo(val) {}, bar() {} };`,
			Options:         "[{\"named\":\"never\",\"anonymous\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    13,
				},
				{
					MessageId: "missingSpace",
					Line:      2,
					Column:    19,
				},
				{
					MessageId: "unexpectedSpace",
					Line:      3,
					Column:    20,
				},
				{
					MessageId: "unexpectedSpace",
					Line:      3,
					Column:    35,
				},
				{
					MessageId: "unexpectedSpace",
					Line:      3,
					Column:    49,
				},
			},
		},
		{
			Code:            `class Foo { constructor () {} *method () {} }`,
			Output:          `class Foo { constructor() {} *method() {} }`,
			Options:         "[{\"named\":\"never\",\"anonymous\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    24,
				},
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    38,
				},
			},
		},
		{
			Code:            `var foo = { bar () {} }`,
			Output:          `var foo = { bar() {} }`,
			Options:         "[{\"named\":\"never\",\"anonymous\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code: `function foo() {}
var bar = function () {}
var obj = { get foo() {}, set foo(val) {}, bar() {} };`,
			Output: `function foo () {}
var bar = function() {}
var obj = { get foo () {}, set foo (val) {}, bar () {} };`,
			Options:         "[{\"named\":\"always\",\"anonymous\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    13,
				},
				{
					MessageId: "unexpectedSpace",
					Line:      2,
					Column:    19,
				},
				{
					MessageId: "missingSpace",
					Line:      3,
					Column:    20,
				},
				{
					MessageId: "missingSpace",
					Line:      3,
					Column:    34,
				},
				{
					MessageId: "missingSpace",
					Line:      3,
					Column:    47,
				},
			},
		},
		{
			Code:    `var foo = function() {}`,
			Output:  `var foo = function () {}`,
			Options: "[{\"named\":\"ignore\",\"anonymous\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `var foo = function () {}`,
			Output:  `var foo = function() {}`,
			Options: "[{\"named\":\"ignore\",\"anonymous\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `var bar = function foo() {}`,
			Output:  `var bar = function foo () {}`,
			Options: "[{\"named\":\"always\",\"anonymous\":\"ignore\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:    `var bar = function foo () {}`,
			Output:  `var bar = function foo() {}`,
			Options: "[{\"named\":\"never\",\"anonymous\":\"ignore\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:            `async() => 1`,
			Output:          `async () => 1`,
			Options:         "[{\"asyncArrow\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Missing space before function parentheses."},
			},
		},
		{
			Code:            `async () => 1`,
			Output:          `async() => 1`,
			Options:         "[{\"asyncArrow\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Unexpected space before function parentheses."},
			},
		},
		{
			Code:            `async() => 1`,
			Output:          `async () => 1`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
				},
			},
		},
		{
			Code:            `async() => 1`,
			Output:          `async () => 1`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
				},
			},
		},
		{
			Code:            `async () => 1`,
			Output:          `async() => 1`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpace",
				},
			},
		},
	})
}
