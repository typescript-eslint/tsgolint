// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoMixedRequiresRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-mixed-requires", []ValidTestCase{
		{
			Code:    `var a, b = 42, c = doStuff()`,
			Options: "[false]",
		},
		{
			Code:    `var a = require(42), b = require(), c = require('y'), d = require(doStuff())`,
			Options: "[false]",
		},
		{
			Code:    `var fs = require('fs'), foo = require('foo')`,
			Options: "[false]",
		},
		{
			Code:    `var exec = require('child_process').exec, foo = require('foo')`,
			Options: "[false]",
		},
		{
			Code:    `var fs = require('fs'), foo = require('./foo')`,
			Options: "[false]",
		},
		{
			Code:    `var foo = require('foo'), foo2 = require('./foo')`,
			Options: "[false]",
		},
		{
			Code:    `var emitter = require('events').EventEmitter, fs = require('fs')`,
			Options: "[false]",
		},
		{
			Code:    `var foo = require(42), bar = require(getName())`,
			Options: "[false]",
		},
		{
			Code:    `var foo = require(42), bar = require(getName())`,
			Options: "[true]",
		},
		{
			Code:    `var fs = require('fs'), foo = require('./foo')`,
			Options: "[{\"grouping\":false}]",
		},
		{
			Code:    `var foo = require('foo'), bar = require(getName())`,
			Options: "[false]",
		},
		{
			Code:    `var a;`,
			Options: "[true]",
		},
		{
			Code:    `var async = require('async'), debug = require('diagnostics')('my-module')`,
			Options: "[{\"allowCall\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `var fs = require('fs'), foo = 42`,
			Options: "[false]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixRequire",
				},
			},
		},
		{
			Code:    `var fs = require('fs'), foo`,
			Options: "[false]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixRequire",
				},
			},
		},
		{
			Code:    `var a = require(42), b = require(), c = require('y'), d = require(doStuff())`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var fs = require('fs'), foo = require('foo')`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var fs = require('fs'), foo = require('foo')`,
			Options: "[{\"grouping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var exec = require('child_process').exec, foo = require('foo')`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var fs = require('fs'), foo = require('./foo')`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var foo = require('foo'), foo2 = require('./foo')`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var foo = require('foo'), bar = require(getName())`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixCoreModuleFileComputed",
				},
			},
		},
		{
			Code:    `var async = require('async'), debug = require('diagnostics').someFun('my-module')`,
			Options: "[{\"allowCall\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMixRequire",
				},
			},
		},
	})
}
