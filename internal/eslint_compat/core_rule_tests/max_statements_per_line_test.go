// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMaxStatementsPerLineRule(t *testing.T) {
	RunRuleTester(t, "{}", "max-statements-per-line", []ValidTestCase{
		{
			Code:    `{ }`,
			Options: "[{\"max\":1}]",
		},
		{Code: `var bar = 1;`},
		{
			Code:    `var bar = 1;`,
			Options: "[{\"max\":1}]",
		},
		{Code: `var bar = 1;;`},
		{Code: `;(function foo() {
})()`},
		{
			Code:    `if (condition) var bar = 1;`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `if (condition) { }`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `if (condition) { } else { }`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `if (condition) {
var bar = 1;
} else {
var bar = 1;
}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `for (var i = 0; i < length; ++i) { }`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `for (var i = 0; i < length; ++i) {
var bar  = 1;
}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `switch (discriminant) { default: }`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `switch (discriminant) {
default: break;
}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `function foo() { }`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `function foo() {
if (condition) var bar = 1;
}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `function foo() {
if (condition) {
var bar = 1;
}
}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `(function() { })();`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `(function() {
var bar = 1;
})();`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `var foo = function foo() { };`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `var foo = function foo() {
var bar = 1;
};`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:            `var foo = { prop: () => { } };`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var bar = 1; var baz = 2;`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `if (condition) { var bar = 1; }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `if (condition) {
var bar = 1; var baz = 2;
} else {
var bar = 1; var baz = 2;
}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `for (var i = 0; i < length; ++i) { var bar = 1; }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `for (var i = 0; i < length; ++i) {
var bar = 1; var baz = 2;
}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `switch (discriminant) { default: break; }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `switch (discriminant) {
case 'test': var bar = 1; break;
default: var bar = 1; break;
}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `function foo() { var bar = 1; }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `function foo() {
var bar = 1; var baz = 2;
}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `function foo() {
if (condition) { var bar = 1; }
}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `function foo() {
if (condition) {
var bar = 1; var baz = 2;
}
}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `(function() { var bar = 1; })();`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `(function() {
var bar = 1; var baz = 2;
})();`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `var foo = function foo() { var bar = 1; };`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `var foo = function foo() {
var bar = 1; var baz = 2;
};`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:            `var foo = { prop: () => { var bar = 1; } };`,
			Options:         "[{\"max\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var bar = 1; var baz = 2; var qux = 3;`,
			Options: "[{\"max\":3}]",
		},
		{
			Code:    `if (condition) { var bar = 1; var baz = 2; }`,
			Options: "[{\"max\":3}]",
		},
		{
			Code:    `if (condition) { var bar = 1; } else { var bar = 1; }`,
			Options: "[{\"max\":3}]",
		},
		{
			Code:    `switch (discriminant) { case 'test1': ; case 'test2': ; }`,
			Options: "[{\"max\":3}]",
		},
		{
			Code:            `let bar = bar => { a; }, baz = baz => { b; };`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({[bar => { a; }]: baz = qux => { b; }}) { }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `bar => { a; }, baz => { b; }, qux => { c; };`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[bar => { a; }, baz => { b; }, qux => { c; }];`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo(bar => { a; }, baz => { c; }, qux => { c; });`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ bar: bar => { a; }, baz: baz => { c; }, qux: qux => { ; }});`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(bar => { a; }) ? (baz => { b; }) : (qux => { c; });`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const name = 'ESLint'

;(function foo() {
})()`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `if (foo > 1)
    foo--;
else
    foo++;`},
		{
			Code:            `export default foo = 0;`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export default function foo() {
   console.log('test');
}`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export let foo = 0;`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export function foo() {
   console.log('test');
}`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
	}, []InvalidTestCase{
		{
			Code:    `var foo; var bar;`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var bar = 1; var foo = 3;`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `var bar = 1; var baz = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var bar = 1; var baz = 2;`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) var bar = 1; if (condition) var baz = 2;`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) var bar = 1; else var baz = 1;`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { } if (condition) { }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; } else { }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { } else { var bar = 1; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; } else { var bar = 1; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `for (var i = 0; i < length; ++i) { var bar = 1; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `switch (discriminant) { default: break; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var bar = 1; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { if (condition) var bar = 1; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { if (condition) { var bar = 1; } }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `(function() { var bar = 1; })();`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var foo = function foo() { var bar = 1; };`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `var foo = { prop: () => { var bar = 1; } };`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var bar = 1; var baz = 2; var qux = 3;`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; var baz = 2; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; } else { var bar = 1; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; var baz = 2; } else { var bar = 1; var baz = 2; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `for (var i = 0; i < length; ++i) { var bar = 1; var baz = 2; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `switch (discriminant) { case 'test': break; default: break; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var bar = 1; var baz = 2; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { if (condition) { var bar = 1; } }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `(function() { var bar = 1; var baz = 2; })();`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var foo = function foo() { var bar = 1; var baz = 2; };`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `var foo = { prop: () => { var bar = 1; var baz = 2; } };`,
			Options:         "[{\"max\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var bar = 1; var baz = 2; var qux = 3; var waldo = 4;`,
			Options: "[{\"max\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; var baz = 2; var qux = 3; }`,
			Options: "[{\"max\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `if (condition) { var bar = 1; var baz = 2; } else { var bar = 1; var baz = 2; }`,
			Options: "[{\"max\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `switch (discriminant) { case 'test': var bar = 1; break; default: var bar = 1; break; }`,
			Options: "[{\"max\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `let bar = bar => { a; }, baz = baz => { b; }, qux = qux => { c; };`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `(bar => { a; }) ? (baz => { b; }) : (qux => { c; });`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `bar => { a; }, baz => { b; }, qux => { c; }, quux => { d; };`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `[bar => { a; }, baz => { b; }, qux => { c; }, quux => { d; }];`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `foo(bar => { a; }, baz => { b; }, qux => { c; }, quux => { d; });`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `({ bar: bar => { a; }, baz: baz => { b; }, qux: qux => { c; }, quux: quux => { d; }});`,
			Options:         "[{\"max\":4}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `a; if (b) { c; d; }
z;`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `export default function foo() { console.log('test') }`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `export function foo() { console.log('test') }`,
			Options:         "[{\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
	})
}
