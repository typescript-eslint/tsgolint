// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestBlockScopedVarRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "block-scoped-var", []ValidTestCase{
		{
			Code:            `function f() { } f(); var exports = { f: f };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var f = () => {}; f(); var exports = { f: f };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{Code: `!function f(){ f; }`},
		{Code: `function f() { } f(); var exports = { f: f };`},
		{Code: `function f() { var a, b; { a = true; } b = a; }`},
		{Code: `var a; function f() { var b = a; }`},
		{Code: `function f(a) { }`},
		{Code: `!function(a) { };`},
		{Code: `!function f(a) { };`},
		{Code: `function f(a) { var b = a; }`},
		{Code: `!function f(a) { var b = a; };`},
		{Code: `function f() { var g = f; }`},
		{Code: `function f() { } function g() { var f = g; }`},
		{Code: `function f() { var hasOwnProperty; { hasOwnProperty; } }`},
		{Code: `function f(){ a; b; var a, b; }`},
		{Code: `function f(){ g(); function g(){} }`},
		{Code: `if (true) { var a = 1; a; }`},
		{Code: `var a; if (true) { a; }`},
		{Code: `for (var i = 0; i < 10; i++) { i; }`},
		{Code: `var i; for(i; i; i) { i; }`},
		{
			Code:            `function myFunc(foo) {  "use strict";  var { bar } = foo;  bar.hello();}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function myFunc(foo) {  "use strict";  var [ bar ]  = foo;  bar.hello();}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function myFunc(...foo) {  return foo;}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var f = () => { var g = f; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class Foo {}
export default Foo;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `new Date`,
			LanguageOptions: "{\"globals\":{\"Date\":false}}",
		},
		{
			Code:            `new Date`,
			LanguageOptions: "{\"globals\":{}}",
		},
		{
			Code:            `var eslint = require('eslint');`,
			LanguageOptions: "{\"globals\":{\"require\":false}}",
		},
		{
			Code:            `var fun = function({x}) {return x;};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var fun = function([,x]) {return x;};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function f(a) { return a.b; }`},
		{Code: `var a = { "foo": 3 };`},
		{Code: `var a = { foo: 3 };`},
		{Code: `var a = { foo: 3, bar: 5 };`},
		{Code: `var a = { set foo(a){}, get bar(){} };`},
		{Code: `function f(a) { return arguments[0]; }`},
		{Code: `function f() { }; var a = f;`},
		{Code: `var a = f; function f() { };`},
		{Code: `function f(){ for(var i; i; i) i; }`},
		{Code: `function f(){ for(var a=0, b=1; a; b) a, b; }`},
		{Code: `function f(){ for(var a in {}) a; }`},
		{Code: `function f(){ switch(2) { case 1: var b = 2; b; break; default: b; break;} }`},
		{Code: `a:;`},
		{Code: `foo: while (true) { bar: for (var i = 0; i < 13; ++i) {if (i === 7) break foo; } }`},
		{Code: `foo: while (true) { bar: for (var i = 0; i < 13; ++i) {if (i === 7) continue foo; } }`},
		{
			Code:            `const React = require("react/addons");const cx = React.addons.classSet;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\",\"globals\":{\"require\":false}}",
		},
		{
			Code:            `var v = 1;  function x() { return v; };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import * as y from "./other.js"; y();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import y from "./other.js"; y();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {x as y} from "./other.js"; y();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var x; export {x};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var x; export {x as v};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {x} from "./other.js";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {x as v} from "./other.js";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `class Test { myFunction() { return true; }}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Test { get flag() { return true; }}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var Test = class { myFunction() { return true; }}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var doStuff; let {x: y} = {x: 1}; doStuff(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({x: y}) { return y; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `!function f(){}; f`},
		{Code: `var f = function foo() { }; foo(); var exports = { f: foo };`},
		{
			Code:            `var f = () => { x; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function f(){ x; }`},
		{Code: `var eslint = require('eslint');`},
		{Code: `function f(a) { return a[b]; }`},
		{Code: `function f() { return b.a; }`},
		{Code: `var a = { foo: bar };`},
		{Code: `var a = { foo: foo };`},
		{Code: `var a = { bar: 7, foo: bar };`},
		{Code: `var a = arguments;`},
		{Code: `function x(){}; var a = arguments;`},
		{Code: `function z(b){}; var a = b;`},
		{Code: `function z(){var b;}; var a = b;`},
		{Code: `function f(){ try{}catch(e){} e }`},
		{Code: `a:b;`},
		{
			Code:            `/*global React*/ let {PropTypes, addons: {PureRenderMixin}} = React; let Test = React.createClass({mixins: [PureRenderMixin]});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `/*global prevState*/ const { virtualSize: prevVirtualSize = 0 } = prevState;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const { dummy: { data, isLoading }, auth: { isLoggedIn } } = this.props;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function a(n) { return n > 0 ? b(n - 1) : "a"; } function b(n) { return n > 0 ? a(n - 1) : "b"; }`},
		{Code: `(function () { foo(); })(); function foo() {}`},
		{
			Code:            `(function () { foo(); })(); function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `class C { static { var foo; foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo; var foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (bar) { foo; } var foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `var foo; class C { static { foo; } } `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo; } } var foo;`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `var foo; class C { static {} [foo]; } `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `foo; class C { static {} } var foo; `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `function f(){ x; { var x; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code: `function f(){ { var x; } x; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code: `function f() { var a; { var b = 0; } a = b; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    42,
				},
			},
		},
		{
			Code: `function f() { try { var a = 0; } catch (e) { var b = a; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    55,
				},
			},
		},
		{
			Code: `function a() { for(var b in {}) { var c = b; } c; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    48,
				},
			},
		},
		{
			Code:            `function a() { for(var b of {}) { var c = b; } c; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    48,
				},
			},
		},
		{
			Code: `function f(){ switch(2) { case 1: var b = 2; b; break; default: b; break;} b; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    76,
				},
			},
		},
		{
			Code: `for (var a = 0;;) {} a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code: `for (var a in []) {} a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:            `for (var a of []) {} a;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:            `{ var a = 0; } a;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code: `if (true) { var a; } a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code: `if (true) { var a = 1; } else { var a = 2; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    17,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    37,
				},
			},
		},
		{
			Code: `for (var i = 0;;) {} for(var i = 0;;) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    10,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:            `class C { static { if (bar) { var foo; } foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    42,
				},
			},
		},
		{
			Code: `{ var foo,
  bar; } bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      2,
					Column:    10,
				},
			},
		},
		{
			Code: `{ var { foo,
  bar } = baz; } bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      2,
					Column:    18,
				},
			},
		},
		{
			Code: `if (foo) { var a = 1; } else if (bar) { var a = 2; } else { var a = 3; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    16,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    16,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    45,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    45,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    65,
				},
				{
					MessageId: "outOfScope",
					Line:      1,
					Column:    65,
				},
			},
		},
	})
}
