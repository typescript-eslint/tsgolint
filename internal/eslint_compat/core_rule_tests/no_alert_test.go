// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoAlertRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-alert", []ValidTestCase{
		{Code: `a[o.k](1)`},
		{Code: `foo.alert(foo)`},
		{Code: `foo.confirm(foo)`},
		{Code: `foo.prompt(foo)`},
		{Code: `function alert() {} alert();`},
		{Code: `var alert = function() {}; alert();`},
		{Code: `function foo() { var alert = bar; alert(); }`},
		{Code: `function foo(alert) { alert(); }`},
		{Code: `var alert = function() {}; function test() { alert(); }`},
		{Code: `function foo() { var alert = function() {}; function test() { alert(); } }`},
		{Code: `function confirm() {} confirm();`},
		{Code: `function prompt() {} prompt();`},
		{Code: `window[alert]();`},
		{Code: `function foo() { this.alert(); }`},
		{Code: `function foo() { var window = bar; window.alert(); }`},
		{Code: `globalThis.alert();`},
		{
			Code:            `globalThis['alert']();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `globalThis.alert();`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `var globalThis = foo; globalThis.alert();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `function foo() { var globalThis = foo; globalThis.alert(); }`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
	}, []InvalidTestCase{
		{
			Code: `alert(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `window.alert(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `window['alert'](foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `confirm(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `window.confirm(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `window['confirm'](foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `prompt(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `window.prompt(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `window['prompt'](foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `function alert() {} window.alert(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `var alert = function() {};
window.alert(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `function foo(alert) { window.alert(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code: `function foo() { alert(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `function foo() { var alert = function() {}; }
alert();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `this.alert(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `this['alert'](foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `function foo() { var window = bar; window.alert(); }
window.alert();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:            `globalThis['alert'](foo)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:            `globalThis.alert();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `function foo() { var globalThis = bar; globalThis.alert(); }
globalThis.alert();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:            `window?.alert(foo)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(window?.alert)(foo)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
