// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnsafeFinallyRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-unsafe-finally", []ValidTestCase{
		{Code: `var foo = function() {
 try { 
 return 1; 
 } catch(err) { 
 return 2; 
 } finally { 
 console.log('hola!') 
 } 
 }`},
		{Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { console.log('hola!') } }`},
		{Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { function a(x) { return x } } }`},
		{Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { var a = function(x) { if(!x) { throw new Error() } } } }`},
		{Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { var a = function(x) { while(true) { if(x) { break } else { continue } } } } }`},
		{Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { var a = function(x) { label: while(true) { if(x) { break label; } else { continue } } } } }`},
		{Code: `var foo = function() { try {} finally { while (true) break; } }`},
		{Code: `var foo = function() { try {} finally { while (true) continue; } }`},
		{Code: `var foo = function() { try {} finally { switch (true) { case true: break; } } }`},
		{Code: `var foo = function() { try {} finally { do { break; } while (true) } }`},
		{
			Code:            `var foo = function() { try { return 1; } catch(err) { return 2; } finally { var bar = () => { throw new Error(); }; } };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = function() { try { return 1; } catch(err) { return 2 } finally { (x) => x } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = function() { try { return 1; } finally { class bar { constructor() {} static ehm() { return 'Hola!'; } } } };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo = function() { 
 try { 
 return 1; 
 } catch(err) { 
 return 2; 
 } finally { 
 return 3; 
 } 
 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      7,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { if(true) { return 3 } else { return 2 } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    86,
				},
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    104,
				},
			},
		},
		{
			Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { return 3 } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    75,
				},
			},
		},
		{
			Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { return function(x) { return y } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    75,
				},
			},
		},
		{
			Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { return { x: function(c) { return c } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    75,
				},
			},
		},
		{
			Code: `var foo = function() { try { return 1 } catch(err) { return 2 } finally { throw new Error() } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    75,
				},
			},
		},
		{
			Code: `var foo = function() { try { foo(); } finally { try { bar(); } finally { return; } } };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    74,
				},
			},
		},
		{
			Code: `var foo = function() { label: try { return 0; } finally { break label; } return 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    59,
				},
			},
		},
		{
			Code: `var foo = function() { 
 a: try { 
 return 1; 
 } catch(err) { 
 return 2; 
 } finally { 
 break a; 
 } 
 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      7,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = function() { while (true) try {} finally { break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    54,
				},
			},
		},
		{
			Code: `var foo = function() { while (true) try {} finally { continue; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    54,
				},
			},
		},
		{
			Code: `var foo = function() { switch (true) { case true: try {} finally { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    68,
				},
			},
		},
		{
			Code: `var foo = function() { a: while (true) try {} finally { switch (true) { case true: break a; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    84,
				},
			},
		},
		{
			Code: `var foo = function() { a: while (true) try {} finally { switch (true) { case true: continue; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    84,
				},
			},
		},
		{
			Code: `var foo = function() { a: switch (true) { case true: try {} finally { switch (true) { case true: break a; } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeUsage",
					Line:      1,
					Column:    98,
				},
			},
		},
	})
}
