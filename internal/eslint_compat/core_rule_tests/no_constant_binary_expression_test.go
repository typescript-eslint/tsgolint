// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoConstantBinaryExpressionRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021,\"sourceType\":\"script\",\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}}", "no-constant-binary-expression", []ValidTestCase{
		{Code: `<p /> && foo`},
		{Code: `<></> && foo`},
		{Code: `<p /> ?? foo`},
		{Code: `<></> ?? foo`},
		{Code: `arbitraryFunction(n) ?? foo`},
		{Code: `foo.Boolean(n) ?? foo`},
		{Code: `(x += 1) && foo`},
		{Code: "`${bar}` && foo"},
		{Code: `bar && foo`},
		{Code: `delete bar.baz && foo`},
		{Code: `true ? foo : bar`},
		{Code: `new Foo() == true`},
		{Code: `foo == true`},
		{Code: "`${foo}` == true"},
		{Code: "`${foo}${bar}` == true"},
		{Code: "`0${foo}` == true"},
		{Code: "`00000000${foo}` == true"},
		{Code: "`0${foo}.000` == true"},
		{Code: `[n] == true`},
		{Code: `delete bar.baz === true`},
		{Code: `foo.Boolean(true) && foo`},
		{Code: `function Boolean(n) { return n; }; Boolean(x) ?? foo`},
		{Code: `function String(n) { return n; }; String(x) ?? foo`},
		{Code: `function Number(n) { return n; }; Number(x) ?? foo`},
		{Code: `function Boolean(n) { return Math.random(); }; Boolean(x) === 1`},
		{Code: `function Boolean(n) { return Math.random(); }; Boolean(1) == true`},
		{Code: `new Foo() === x`},
		{Code: `x === new someObj.Promise()`},
		{Code: `Boolean(foo) === true`},
		{Code: `function foo(undefined) { undefined ?? bar;}`},
		{Code: `function foo(undefined) { undefined == true;}`},
		{Code: `function foo(undefined) { undefined === true;}`},
		{Code: `[...arr, 1] == true`},
		{Code: `[,,,] == true`},
		{
			Code:            `new Foo() === bar;`,
			LanguageOptions: "{\"globals\":{\"Foo\":\"writable\"}}",
		},
		{Code: `(foo && true) ?? bar`},
		{Code: `foo ?? null ?? bar`},
		{Code: `a ?? (doSomething(), undefined) ?? b`},
		{Code: `a ?? (something = null) ?? b`},
	}, []InvalidTestCase{
		{
			Code: `[] && greeting`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant truthiness on the left-hand side of a `&&` expression.",
				},
			},
		},
		{
			Code: `[] || greeting`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant truthiness on the left-hand side of a `||` expression.",
				},
			},
		},
		{
			Code: `[] ?? greeting`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant nullishness on the left-hand side of a `??` expression.",
				},
			},
		},
		{
			Code: `[] == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant binary expression. Compares constantly with the right-hand side of the `==`.",
				},
			},
		},
		{
			Code: `true == []`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant binary expression. Compares constantly with the left-hand side of the `==`.",
				},
			},
		},
		{
			Code: `[] != true`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant binary expression. Compares constantly with the right-hand side of the `!=`.",
				},
			},
		},
		{
			Code: `[] === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant binary expression. Compares constantly with the right-hand side of the `===`.",
				},
			},
		},
		{
			Code: `[] !== true`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Unexpected constant binary expression. Compares constantly with the right-hand side of the `!==`.",
				},
			},
		},
		{
			Code: `!foo == null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `!foo ?? bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a + b) / 2 ?? bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `String(foo.bar) ?? baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `"hello" + name ?? ""`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `[foo?.bar ?? ""] ?? []`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `true && hello`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `true || hello`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `true && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `'' && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `100 && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `+100 && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `-100 && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `~100 && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `/[a-z]/ && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `Boolean([]) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `Boolean() && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `Boolean([], n) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `({}) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `[] && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(() => {}) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(function() {}) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(class {}) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(class { valueOf() { return x; } }) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(class { [x]() { return x; } }) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `new Foo() && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `new Boolean(unknown) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(bar = false) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(bar.baz = false) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(bar[0] = false) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: "`hello ${hello}` && foo",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `void bar && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `!true && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `typeof bar && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(bar, baz, true) && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `undefined && foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `({}) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `([]) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(() => {}) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(function() {}) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(class {}) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `new Foo() ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `1 ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `/[a-z]/ ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: "`${''}` ?? foo",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a = true) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a += 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a -= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a *= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a /= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a %= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a <<= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a >>= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a >>>= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a |= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a ^= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(a &= 1) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `undefined ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `!bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `void bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `typeof bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `+bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `-bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `~bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `++bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `bar++ ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `--bar ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `bar-- ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(x == y) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(x + y) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(x / y) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(x instanceof String) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `(x in y) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `Boolean(x) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `String(x) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `Number(x) ?? foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `({}) != null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `null == ({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `undefined == ({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) != true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `([]) == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `([a, b]) == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(() => {}) == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(function() {}) == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `void foo == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `typeof foo == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `![] == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true == class {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true == 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `undefined == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true == undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: "`hello` == true",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `/[a-z]/ == true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == Boolean({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == Boolean()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == Boolean(() => {}, foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) !== true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) == !({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `([]) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(function() {}) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(() => {}) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `!{} === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `typeof n === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `void n === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `+n === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `-n === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `~n === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `1 === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `'hello' === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `/[a-z]/ === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `undefined === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a = {}) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a += 1) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a -= 1) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a *= 1) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a %= 1) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a ** b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a << b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a >> b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a >>> b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `--a === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `a-- === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `++a === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `a++ === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a + b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a - b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a * b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a / b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a % b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a | b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a ^ b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a & b) === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `Boolean(0) === Boolean(1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true === String(x)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true === Number(x)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `Boolean(0) == !({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) !== null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `([]) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(() => {}) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(function() {}) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(class {}) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `new Foo() === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: "`` === null",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `1 === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `'hello' === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `/[a-z]/ === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `null === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `a++ === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `++a === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `--a === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `a-- === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `!a === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `typeof a === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `delete a === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `void a === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `undefined === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(x = {}) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(x += y) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(x -= y) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a, b, {}) === null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) !== undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `({}) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `([]) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(() => {}) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(function() {}) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(class {}) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `new Foo() === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: "`` === undefined",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `1 === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `'hello' === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `/[a-z]/ === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `true === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `null === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `a++ === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `++a === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `--a === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `a-- === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `!a === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `typeof a === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `delete a === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `void a === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `undefined === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(x = {}) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(x += y) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(x -= y) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `(a, b, {}) === undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantBinaryOperand",
				},
			},
		},
		{
			Code: `[a] == [a]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "bothAlwaysNew",
				},
			},
		},
		{
			Code: `[a] != [a]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "bothAlwaysNew",
				},
			},
		},
		{
			Code: `({}) == []`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "bothAlwaysNew",
				},
			},
		},
		{
			Code: `x === {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x !== {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === []`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (() => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (class {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === new Boolean()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code:            `x === new Promise()`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code:            `x === new WeakSet()`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (foo, {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (y = {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (y ? {} : [])`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === /[a-z]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `x === (x = {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysNew",
				},
			},
		},
		{
			Code: `window.abc && false && anything`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `window.abc || true || anything`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
		{
			Code: `window.abc ?? 'non-nullish' ?? anything`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "constantShortCircuit",
				},
			},
		},
	})
}
