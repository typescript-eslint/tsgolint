// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestRequireAwaitRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018}}", "require-await", []ValidTestCase{
		{Code: `async function foo() { await doSomething() }`},
		{Code: `(async function() { await doSomething() })`},
		{Code: `async () => { await doSomething() }`},
		{Code: `async () => await doSomething()`},
		{Code: `({ async foo() { await doSomething() } })`},
		{Code: `class A { async foo() { await doSomething() } }`},
		{Code: `(class { async foo() { await doSomething() } })`},
		{Code: `async function foo() { await (async () => { await doSomething() }) }`},
		{Code: `async function foo() {}`},
		{Code: `async () => {}`},
		{Code: `function foo() { doSomething() }`},
		{Code: `async function foo() { for await (x of xs); }`},
		{
			Code:            `await foo()`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `
                for await (let num of asyncIterable) {
                    console.log(num);
                }
            `,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `async function* run() { yield * anotherAsyncGenerator() }`,
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
		{
			Code: `async function* run() {
                await new Promise(resolve => setTimeout(resolve, 100));
                yield 'Hello';
                console.log('World');
            }
            `,
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
		{
			Code:            `async function* run() { }`,
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
		{
			Code:            `const foo = async function *(){}`,
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
		{
			Code:            `const foo = async function *(){ console.log("bar") }`,
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
		{
			Code:            `async function* run() { console.log("bar") }`,
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
	}, []InvalidTestCase{
		{
			Code: `async function foo() { doSomething() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `function foo() { doSomething() }`,
						},
					},
				},
			},
		},
		{
			Code: `(async function() { doSomething() })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `(function() { doSomething() })`,
						},
					},
				},
			},
		},
		{
			Code: `async () => { doSomething() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `() => { doSomething() }`,
						},
					},
				},
			},
		},
		{
			Code: `async () => doSomething()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `() => doSomething()`,
						},
					},
				},
			},
		},
		{
			Code: `({ async foo() { doSomething() } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `({ foo() { doSomething() } })`,
						},
					},
				},
			},
		},
		{
			Code: `class A { async foo() { doSomething() } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `class A { foo() { doSomething() } }`,
						},
					},
				},
			},
		},
		{
			Code: `(class { async foo() { doSomething() } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `(class { foo() { doSomething() } })`,
						},
					},
				},
			},
		},
		{
			Code: `(class { async ''() { doSomething() } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `(class { ''() { doSomething() } })`,
						},
					},
				},
			},
		},
		{
			Code: `async function foo() { async () => { await doSomething() } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `function foo() { async () => { await doSomething() } }`,
						},
					},
				},
			},
		},
		{
			Code: `async function foo() { await (async () => { doSomething() }) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `async function foo() { await (() => { doSomething() }) }`,
						},
					},
				},
			},
		},
		{
			Code: `const obj = { async: async function foo() { bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `const obj = { async: function foo() { bar(); } }`,
						},
					},
				},
			},
		},
		{
			Code: `async    /* test */ function foo() { doSomething() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output:    `/* test */ function foo() { doSomething() }`,
						},
					},
				},
			},
		},
		{
			Code: `class A {
                a = 0
                async [b](){ return 0; }
            }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output: `class A {
                a = 0
                ;[b](){ return 0; }
            }`,
						},
					},
				},
			},
		},
		{
			Code: `foo
                async () => { return 0; }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output: `foo
                ;() => { return 0; }
            `,
						},
					},
				},
			},
		},
		{
			Code: `class A {
                foo() {}
                async [bar] () { baz; }
            }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAwait",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeAsync",
							Output: `class A {
                foo() {}
                [bar] () { baz; }
            }`,
						},
					},
				},
			},
		},
	})
}
