// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestImplicitArrowLinebreakRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "implicit-arrow-linebreak", []ValidTestCase{
		{Code: `(foo) => {
            bar
        }`},
		{Code: `() => bar;`},
		{Code: `() => (bar);`},
		{Code: `() => bar => baz;`},
		{Code: `() => ((((bar))));`},
		{Code: `(foo) => (
            bar
        )`},
		{Code: `(foo) => bar();`},
		{Code: `
        //comment
        foo => bar;
        `},
		{Code: `
        foo => (
            // comment
            bar => (
                // another comment
                baz
            )
        )
        `},
		{Code: `
        foo => (
            // comment
            bar => baz
        )
        `},
		{Code: `
        /* text */
        () => bar;
        `},
		{Code: `
        /* foo */
        const bar = () => baz;
        `},
		{Code: `
        (foo) => (
                //comment
                    bar
                )
        `},
		{Code: `
          [ // comment
            foo => 'bar'
          ]
        `},
		{Code: `
         /*
         One two three four
         Five six seven nine.
         */
         (foo) => bar
        `},
		{Code: `
        const foo = {
          id: 'bar',
          // comment
          prop: (foo1) => 'returning this string',
        }
        `},
		{Code: `
        // comment
         "foo".split('').map((char) => char
         )
        `},
		{
			Code: `
            async foo => () => bar;
            `,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `
            // comment
            async foo => 'string'
            `,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `
                (foo) =>
                    (
                        bar
                    )
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                () =>
                    ((((bar))));
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                () =>
                    bar();
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                () =>
                    (bar);
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                () =>
                    bar =>
                        baz;
            `,
			Options: "[\"below\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `
                (foo) =>
                    bar();
            `,
			Output: `
                (foo) => bar();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                () =>
                    (bar);
            `,
			Output: `
                () => (bar);
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                () =>
                    bar =>
                        baz;
            `,
			Output: `
                () => bar => baz;
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                () =>
                    ((((bar))));
            `,
			Output: `
                () => ((((bar))));
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                (foo) =>
                    (
                        bar
                    )
            `,
			Output: `
                (foo) => (
                        bar
                    )
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) =>
  // test comment
  bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `const foo = () =>
// comment
[]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                (foo) =>
                    (
                    //comment
                        bar
                    )
            `,
			Output: `
                (foo) => (
                    //comment
                        bar
                    )
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                (foo) =>
                    (
                        bar
                    //comment
                    )

            `,
			Output: `
                (foo) => (
                        bar
                    //comment
                    )

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) =>
 // comment
 // another comment
    bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) =>
// comment
(
// another comment
bar
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => // comment 
 bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) => //comment 
 bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) =>
  /* test comment */
  bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) =>
  // hi
     bar =>
       // there
         baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) =>
  // hi
     bar => (
       // there
         baz
     )`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `const foo = {
  id: 'bar',
  prop: (foo1) =>
    // comment
    'returning this string',
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `[ foo =>
  // comment
  'bar'
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `"foo".split('').map((char) =>
// comment
char
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) =>
    // comment
    resolve()
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() =>
/*
succinct
explanation
of code
*/
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `stepOne =>
    /*
    here is
    what is
    happening
    */
    stepTwo =>
        // then this happens
        stepThree`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() =>
    /*
    multi
    line
    */
    bar =>
        /*
        many
        lines
        */
        baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `foo('', boo =>
  // comment
  bar
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `async foo =>
    // comment
    'string'`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `async foo =>
    // comment
    // another
    bar;`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `async (foo) =>
    // comment
    'string'`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `const foo = 1,
  bar = 2,
  baz = () => // comment
    qux`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `const foo = () =>
  //comment
  qux,
  bar = 2,
  baz = 3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `const foo = () =>
    //two
    1,
    boo = () =>
    //comment
    2,
    bop = "what"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `start()
    .then(() =>
        /* If I put a comment here, eslint --fix breaks badly */
        process && typeof process.send === 'function' && process.send('ready')
    )
    .catch(err => {
    /* catch seems to be needed here */
    console.log('Error: ', err)
    })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `hello(response =>
    // comment
    response, param => param)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `start(
    arr =>
        // cometh
        bod => {
            // soon
            yyyy
        }
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo) => bar();`,
			Output: `(foo) => 
bar();`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(foo) => bar => baz;`,
			Output: `(foo) => 
bar => 
baz;`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(foo) => (bar);`,
			Output: `(foo) => 
(bar);`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(foo) => (((bar)));`,
			Output: `(foo) => 
(((bar)));`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `
                (foo) => (
                    bar
                )
            `,
			Output: `
                (foo) => 
(
                    bar
                )
            `,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
	})
}
