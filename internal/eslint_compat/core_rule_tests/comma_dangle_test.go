// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCommaDangleRule(t *testing.T) {
	RunRuleTester(t, "{\"plugins\":{\"custom\":{\"rules\":{\"add-named-import\":{\"meta\":{\"fixable\":\"code\"}}}}},\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "comma-dangle", []ValidTestCase{
		{Code: `var foo = { bar: 'baz' }`},
		{Code: `var foo = {
bar: 'baz'
}`},
		{Code: `var foo = [ 'baz' ]`},
		{Code: `var foo = [
'baz'
]`},
		{Code: `[,,]`},
		{Code: `[
,
,
]`},
		{Code: `[,]`},
		{Code: `[
,
]`},
		{Code: `[]`},
		{Code: `[
]`},
		{
			Code: `var foo = [
      (bar ? baz : qux),
    ];`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `var foo = { bar: 'baz' }`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = {
bar: 'baz'
}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [ 'baz' ]`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var { a, b } = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ a, b ] = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var { a,
 b, 
} = foo;`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [ a,
 b, 
] = foo;`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `[(1),]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var x = { foo: (1),};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = { bar: 'baz', }`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = {
bar: 'baz',
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = {
bar: 'baz'
,}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = [ 'baz', ]`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
'baz',
]`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
'baz'
,]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `[,,]`,
			Options: "[\"always\"]",
		},
		{
			Code: `[
,
,
]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `[,]`,
			Options: "[\"always\"]",
		},
		{
			Code: `[
,
]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `[]`,
			Options: "[\"always\"]",
		},
		{
			Code: `[
]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = { bar: 'baz' }`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `var foo = { bar: 'baz' }`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `var foo = {
bar: 'baz',
}`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `var foo = {
bar: 'baz',
}`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code:    `var foo = [ 'baz' ]`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `var foo = [ 'baz' ]`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `var foo = [
'baz',
]`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `var foo = [
'baz',
]`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `var foo = { bar:

'bar' }`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `var foo = { bar:

'bar' }`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code:    `var foo = {a: 1, b: 2, c: 3, d: 4}`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `var foo = {a: 1, b: 2, c: 3, d: 4}`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `var foo = {a: 1, b: 2,
 c: 3, d: 4}`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `var foo = {a: 1, b: 2,
 c: 3, d: 4}`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `var foo = {x: {
foo: 'bar',
}}`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `var foo = {x: {
foo: 'bar',
}}`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `var foo = new Map([
[key, {
a: 1,
b: 2,
c: 3,
}],
])`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `var foo = new Map([
[key, {
a: 1,
b: 2,
c: 3,
}],
])`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code:            `var [a, ...rest] = [];`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
    a,
    ...rest
] = [];`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
    a,
    ...rest
] = [];`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
    a,
    ...rest
] = [];`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[a, ...rest] = [];`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for ([a, ...rest] of []);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var a = [b, ...spread,];`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {foo, ...bar} = baz`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `import {foo,} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import foo from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import foo, {abc,} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as foo from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {foo,} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {foo} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import foo from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import foo, {abc} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as foo from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {foo} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {foo} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {foo} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {foo} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {foo} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
  foo,
} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
  foo,
} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export {
  foo,
} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export {
  foo,
} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {foo} from 
'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {foo} from 
'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:    `function foo(a) {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo(a)`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo(a) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `foo(a)`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo(a,
b) {}`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `foo(a,
b
)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `function foo(a,
b
) {}`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `foo(a,
b)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `function foo(a,
b) {}`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code: `foo(a,
b)`,
			Options: "[\"only-multiline\"]",
		},
		{
			Code:            `function foo(a) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code:            `function foo(a) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code: `function foo(a,
b) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code: `foo(a,
b)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code: `function foo(a,
b
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code: `foo(a,
b
)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code: `function foo(a,
b) {}`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code: `foo(a,
b)`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code:            `function foo(a) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a,) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a,)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `function foo(
a,
b,
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `foo(
a,b)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a,b) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a,b)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a,b) {}`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a,b)`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a) {} `,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a) {} `,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a,) {}`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function bar(a, ...b) {}`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a,)`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a,)`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":9}",
		},
		{
			Code:            `bar(...a,)`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a) {} `,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `function foo(
a,
b,
) {} `,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `function foo(
a,
...b
) {} `,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `foo(
a,
b,
)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `foo(
a,
...b,
)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo(a) {} `,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo(a)`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `function foo(
a,
b,
) {} `,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `foo(
a,
b,
)`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `function foo(
a,
b
) {} `,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `foo(
a,
b
)`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `function foo({a}: {a: string,}) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `function foo({a,}: {a: string}) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `function foo(a): {b: boolean,} {}`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `function foo(a,): {b: boolean} {}`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `function f(
 a,
 b
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":5,\"sourceType\":\"script\"}",
		},
		{
			Code: `f(
 a,
 b
);`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":5,\"sourceType\":\"script\"}",
		},
		{
			Code: `function f(
 a,
 b
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":2016}",
		},
		{
			Code: `f(
 a,
 b
);`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":2016}",
		},
	}, []InvalidTestCase{
		{
			Code:   `var foo = { bar: 'baz', }`,
			Output: `var foo = { bar: 'baz' }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    23,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var foo = {
bar: 'baz',
}`,
			Output: `var foo = {
bar: 'baz'
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    11,
					EndColumn: 12,
				},
			},
		},
		{
			Code:   `foo({ bar: 'baz', qux: 'quux', });`,
			Output: `foo({ bar: 'baz', qux: 'quux' });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code: `foo({
bar: 'baz',
qux: 'quux',
});`,
			Output: `foo({
bar: 'baz',
qux: 'quux'
});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
					Column:    12,
				},
			},
		},
		{
			Code:   `var foo = [ 'baz', ]`,
			Output: `var foo = [ 'baz' ]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `var foo = [ 'baz',
]`,
			Output: `var foo = [ 'baz'
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `var foo = { bar: 'bar'

, }`,
			Output: `var foo = { bar: 'bar'

 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code:    `var foo = { bar: 'baz', }`,
			Output:  `var foo = { bar: 'baz' }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:    `var foo = { bar: 'baz', }`,
			Output:  `var foo = { bar: 'baz' }`,
			Options: "[\"only-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code: `var foo = {
bar: 'baz',
}`,
			Output: `var foo = {
bar: 'baz'
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz', qux: 'quux', });`,
			Output:  `foo({ bar: 'baz', qux: 'quux' });`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz', qux: 'quux', });`,
			Output:  `foo({ bar: 'baz', qux: 'quux' });`,
			Options: "[\"only-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:    `var foo = { bar: 'baz' }`,
			Output:  `var foo = { bar: 'baz', }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var foo = {
bar: 'baz'
}`,
			Output: `var foo = {
bar: 'baz',
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    11,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var foo = {
bar: 'baz'` + "\r" + `
}`,
			Output: `var foo = {
bar: 'baz',` + "\r" + `
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    11,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz', qux: 'quux' });`,
			Output:  `foo({ bar: 'baz', qux: 'quux', });`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code: `foo({
bar: 'baz',
qux: 'quux'
});`,
			Output: `foo({
bar: 'baz',
qux: 'quux',
});`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    12,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `var foo = [ 'baz' ]`,
			Output:  `var foo = [ 'baz', ]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:    `var foo = ['baz']`,
			Output:  `var foo = ['baz',]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    17,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `var foo = [ 'baz'
]`,
			Output: `var foo = [ 'baz',
]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `var foo = { bar:

'bar' }`,
			Output: `var foo = { bar:

'bar', }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    6,
				},
			},
		},
		{
			Code: `var foo = {
bar: 'baz'
}`,
			Output: `var foo = {
bar: 'baz',
}`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code: `var foo = [
  bar,
  (
    baz
  )
];`,
			Output: `var foo = [
  bar,
  (
    baz
  ),
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      5,
					Column:    4,
				},
			},
		},
		{
			Code: `var foo = {
  foo: 'bar',
  baz: (
    qux
  )
};`,
			Output: `var foo = {
  foo: 'bar',
  baz: (
    qux
  ),
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      5,
					Column:    4,
				},
			},
		},
		{
			Code: `var foo = [
  (bar
    ? baz
    : qux
  )
];`,
			Output: `var foo = [
  (bar
    ? baz
    : qux
  ),
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      5,
					Column:    4,
				},
			},
		},
		{
			Code:    `var foo = { bar: 'baz', }`,
			Output:  `var foo = { bar: 'baz' }`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code: `foo({
bar: 'baz',
qux: 'quux'
});`,
			Output: `foo({
bar: 'baz',
qux: 'quux',
});`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    12,
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz', qux: 'quux', });`,
			Output:  `foo({ bar: 'baz', qux: 'quux' });`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code: `var foo = [
'baz'
]`,
			Output: `var foo = [
'baz',
]`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    6,
				},
			},
		},
		{
			Code:    `var foo = ['baz',]`,
			Output:  `var foo = ['baz']`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = ['baz',]`,
			Output:  `var foo = ['baz']`,
			Options: "[\"only-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = {x: {
foo: 'bar',
},}`,
			Output: `var foo = {x: {
foo: 'bar',
}}`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = {a: 1, b: 2,
c: 3, d: 4,}`,
			Output: `var foo = {a: 1, b: 2,
c: 3, d: 4}`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code: `var foo = {a: 1, b: 2,
c: 3, d: 4,}`,
			Output: `var foo = {a: 1, b: 2,
c: 3, d: 4}`,
			Options: "[\"only-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code: `var foo = [{
a: 1,
b: 2,
c: 3,
d: 4,
},]`,
			Output: `var foo = [{
a: 1,
b: 2,
c: 3,
d: 4,
}]`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      6,
					Column:    2,
				},
			},
		},
		{
			Code:            `var { a, b, } = foo;`,
			Output:          `var { a, b } = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:            `var { a, b, } = foo;`,
			Output:          `var { a, b } = foo;`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:            `var [ a, b, ] = foo;`,
			Output:          `var [ a, b ] = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:            `var [ a, b, ] = foo;`,
			Output:          `var [ a, b ] = foo;`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:    `[(1),]`,
			Output:  `[(1)]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `[(1),]`,
			Output:  `[(1)]`,
			Options: "[\"only-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `var x = { foo: (1),};`,
			Output:  `var x = { foo: (1)};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `var x = { foo: (1),};`,
			Output:  `var x = { foo: (1)};`,
			Options: "[\"only-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `import {foo} from 'foo';`,
			Output:          `import {foo,} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `import foo, {abc} from 'foo';`,
			Output:          `import foo, {abc,} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `export {foo} from 'foo';`,
			Output:          `export {foo,} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `import {foo,} from 'foo';`,
			Output:          `import {foo} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `import {foo,} from 'foo';`,
			Output:          `import {foo} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `import foo, {abc,} from 'foo';`,
			Output:          `import foo, {abc} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `import foo, {abc,} from 'foo';`,
			Output:          `import foo, {abc} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `export {foo,} from 'foo';`,
			Output:          `export {foo} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `export {foo,} from 'foo';`,
			Output:          `export {foo} from 'foo';`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `import {foo,} from 'foo';`,
			Output:          `import {foo} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `export {foo,} from 'foo';`,
			Output:          `export {foo} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `import {
  foo
} from 'foo';`,
			Output: `import {
  foo,
} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `export {
  foo
} from 'foo';`,
			Output: `export {
  foo,
} from 'foo';`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var foo = {a: (1)}`,
			Output:  `var foo = {a: (1),}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var foo = [(1)]`,
			Output:  `var foo = [(1),]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var foo = [
1,
(2)
]`,
			Output: `var foo = [
1,
(2),
]`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a,) {}`,
			Output:          `function foo(a) {}`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function foo(a,) {})`,
			Output:          `(function foo(a) {})`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a,) => a`,
			Output:          `(a) => a`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a,) => (a)`,
			Output:          `(a) => (a)`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({foo(a,) {}})`,
			Output:          `({foo(a) {}})`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class A {foo(a,) {}}`,
			Output:          `class A {foo(a) {}}`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(...a,)`,
			Output:          `foo(...a)`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a) {}`,
			Output:          `function foo(a,) {}`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `(function foo(a) {})`,
			Output:          `(function foo(a,) {})`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `(a) => a`,
			Output:          `(a,) => a`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `(a) => (a)`,
			Output:          `(a,) => (a)`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `({foo(a) {}})`,
			Output:          `({foo(a,) {}})`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `class A {foo(a) {}}`,
			Output:          `class A {foo(a,) {}}`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `foo(a)`,
			Output:          `foo(a,)`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `foo(...a)`,
			Output:          `foo(...a,)`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a,) {}`,
			Output:          `function foo(a) {}`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function foo(a,) {})`,
			Output:          `(function foo(a) {})`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(...a,)`,
			Output:          `foo(...a)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo(
a,
b
) {}`,
			Output: `function foo(
a,
b,
) {}`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `foo(
a,
b
)`,
			Output: `foo(
a,
b,
)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `foo(
...a,
...b
)`,
			Output: `foo(
...a,
...b,
)`,
			Options:         "[{\"functions\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a,) {}`,
			Output:          `function foo(a) {}`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function foo(a,) {})`,
			Output:          `(function foo(a) {})`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(...a,)`,
			Output:          `foo(...a)`,
			Options:         "[{\"functions\":\"only-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a,) {}`,
			Output:          `function foo(a) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function foo(a,) {})`,
			Output:          `(function foo(a) {})`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a,) => a`,
			Output:          `(a) => a`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a,) => (a)`,
			Output:          `(a) => (a)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({foo(a,) {}})`,
			Output:          `({foo(a) {}})`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class A {foo(a,) {}}`,
			Output:          `class A {foo(a) {}}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(...a,)`,
			Output:          `foo(...a)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a) {}`,
			Output:          `function foo(a,) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `(function foo(a) {})`,
			Output:          `(function foo(a,) {})`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `(a) => a`,
			Output:          `(a,) => a`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `(a) => (a)`,
			Output:          `(a,) => (a)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `({foo(a) {}})`,
			Output:          `({foo(a,) {},})`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `class A {foo(a) {}}`,
			Output:          `class A {foo(a,) {}}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `foo(a)`,
			Output:          `foo(a,)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `foo(...a)`,
			Output:          `foo(...a,)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a,) {}`,
			Output:          `function foo(a) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function foo(a,) {})`,
			Output:          `(function foo(a) {})`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(...a,)`,
			Output:          `foo(...a)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo(
a,
b
) {}`,
			Output: `function foo(
a,
b,
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `foo(
a,
b
)`,
			Output: `foo(
a,
b,
)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `foo(
...a,
...b
)`,
			Output: `foo(
...a,
...b,
)`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a,) {}`,
			Output:          `function foo(a) {}`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function foo(a,) {})`,
			Output:          `(function foo(a) {})`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(...a,)`,
			Output:          `foo(...a)`,
			Options:         "[\"only-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a) {}`,
			Output:          `function foo(a,) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Output: `let {a} = {a: 1};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Options:         "[{\"objects\":\"never\",\"arrays\":\"ignore\",\"imports\":\"ignore\",\"exports\":\"ignore\",\"functions\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Output: `let {a,} = {a: 1,};
let [b] = [1];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Options:         "[{\"objects\":\"ignore\",\"arrays\":\"never\",\"imports\":\"ignore\",\"exports\":\"ignore\",\"functions\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
				},
				{
					MessageId: "unexpected",
					Line:      2,
				},
			},
		},
		{
			Code: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Output: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Options:         "[{\"objects\":\"ignore\",\"arrays\":\"ignore\",\"imports\":\"never\",\"exports\":\"ignore\",\"functions\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
				},
			},
		},
		{
			Code: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Output: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d};
(function foo(e,) {})(f,);`,
			Options:         "[{\"objects\":\"ignore\",\"arrays\":\"ignore\",\"imports\":\"ignore\",\"exports\":\"never\",\"functions\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
				},
			},
		},
		{
			Code: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e,) {})(f,);`,
			Output: `let {a,} = {a: 1,};
let [b,] = [1,];
import {c,} from "foo";
let d = 0;export {d,};
(function foo(e) {})(f);`,
			Options:         "[{\"objects\":\"ignore\",\"arrays\":\"ignore\",\"imports\":\"ignore\",\"exports\":\"ignore\",\"functions\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      5,
				},
				{
					MessageId: "unexpected",
					Line:      5,
				},
			},
		},
		{
			Code:            `function foo({a}: {a: string,}) {}`,
			Output:          `function foo({a,}: {a: string,}) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo({a,}: {a: string}) {}`,
			Output:          `function foo({a}: {a: string}) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a): {b: boolean,} {}`,
			Output:          `function foo(a,): {b: boolean,} {}`,
			Options:         "[{\"functions\":\"always\"}]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a,): {b: boolean} {}`,
			Output:          `function foo(a): {b: boolean} {}`,
			Options:         "[{\"functions\":\"never\"}]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(a,)`,
			Output:          `foo(a)`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `/*eslint custom/add-named-import:1*/
import {
    StyleSheet,
    View,
    TextInput,
    ImageBackground,
    Image,
    TouchableOpacity,
    SafeAreaView
} from 'react-native';`,
			Output: `/*eslint custom/add-named-import:1*/
import {
    StyleSheet,
    View,
    TextInput,
    ImageBackground,
    Image,
    TouchableOpacity,
    SafeAreaView,
} from 'react-native';`,
			Options:         "[{\"imports\":\"always-multiline\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{},
				{},
			},
		},
		{
			Code: `/*eslint custom/add-named-import:1*/
import {
    StyleSheet,
    View,
    TextInput,
    ImageBackground,
    Image,
    TouchableOpacity,
    SafeAreaView,
} from 'react-native';`,
			Output: `/*eslint custom/add-named-import:1*/
import {
    StyleSheet,
    View,
    TextInput,
    ImageBackground,
    Image,
    TouchableOpacity,
    SafeAreaView
} from 'react-native';`,
			Options:         "[{\"imports\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{},
				{},
			},
		},
		{
			Code: `function f(
 a,
 b
) {}`,
			Output: `function f(
 a,
 b,
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `f(
 a,
 b
);`,
			Output: `f(
 a,
 b,
);`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `function f(
 a,
 b
) {}`,
			Output: `function f(
 a,
 b,
) {}`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `f(
 a,
 b
);`,
			Output: `f(
 a,
 b,
);`,
			Options:         "[\"always-multiline\"]",
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      3,
					Column:    3,
				},
			},
		},
	})
}
