// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoBitwiseRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-bitwise", []ValidTestCase{
		{Code: `a + b`},
		{Code: `!a`},
		{Code: `a && b`},
		{Code: `a || b`},
		{Code: `a += b`},
		{
			Code:            `a &&= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `a ||= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `a ??= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:    `~[1, 2, 3].indexOf(1)`,
			Options: "[{\"allow\":[\"~\"]}]",
		},
		{
			Code:    `~1<<2 === -8`,
			Options: "[{\"allow\":[\"~\",\"<<\"]}]",
		},
		{
			Code:    `a|0`,
			Options: "[{\"int32Hint\":true}]",
		},
		{
			Code:    `a|0`,
			Options: "[{\"allow\":[\"|\"],\"int32Hint\":false}]",
		},
	}, []InvalidTestCase{
		{
			Code: `a ^ b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a | b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a & b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a << b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a >> b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a >>> b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a|0`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `~a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a ^= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a |= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a &= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a <<= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a >>= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a >>>= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
