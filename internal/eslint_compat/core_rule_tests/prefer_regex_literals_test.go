// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferRegexLiteralsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022,\"sourceType\":\"script\"}}", "prefer-regex-literals", []ValidTestCase{
		{Code: `/abc/`},
		{Code: `/abc/g`},
		{Code: `new RegExp(pattern)`},
		{Code: "new RegExp('\\\\p{Emoji_Presentation}\\\\P{Script_Extensions=Latin}' + '', `ug`)"},
		{Code: `new RegExp('\\cA' + '')`},
		{Code: `RegExp(pattern, 'g')`},
		{Code: `new RegExp(f('a'))`},
		{Code: `RegExp(prefix + 'a')`},
		{Code: `new RegExp('a' + suffix)`},
		{Code: "RegExp(`a` + suffix);"},
		{Code: "new RegExp(String.raw`a` + suffix);"},
		{Code: `RegExp('a', flags)`},
		{Code: `const flags = 'gu';RegExp('a', flags)`},
		{Code: `RegExp('a', 'g' + flags)`},
		{Code: "new RegExp(String.raw`a`, flags);"},
		{Code: "RegExp(`${prefix}abc`)"},
		{Code: "new RegExp(`a${b}c`);"},
		{Code: "new RegExp(`a${''}c`);"},
		{Code: "new RegExp(String.raw`a${b}c`);"},
		{Code: "new RegExp(String.raw`a${''}c`);"},
		{Code: `new RegExp('a' + 'b')`},
		{Code: `RegExp(1)`},
		{Code: "new RegExp('(\\\\p{Emoji_Presentation})\\\\1' + '', `ug`)"},
		{Code: "RegExp(String.raw`\\78\\126` + '\\\\5934', '' + `g` + '')"},
		{Code: "func(new RegExp(String.raw`a${''}c\\d`, 'u'),new RegExp(String.raw`a${''}c\\d`, 'u'))"},
		{Code: `new RegExp('\\[' + "b\\]")`},
		{
			Code:    `new RegExp(/a/, flags);`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
		},
		{
			Code:    "new RegExp(/a/, `u${flags}`);",
			Options: "[{\"disallowRedundantWrapping\":true}]",
		},
		{
			Code:    `new RegExp(/a/);`,
			Options: "[{}]",
		},
		{
			Code:    `new RegExp(/a/);`,
			Options: "[{\"disallowRedundantWrapping\":false}]",
		},
		{Code: `new RegExp;`},
		{Code: `new RegExp();`},
		{Code: `RegExp();`},
		{Code: `new RegExp('a', 'g', 'b');`},
		{Code: `RegExp('a', 'g', 'b');`},
		{Code: "new RegExp(`a`, `g`, `b`);"},
		{Code: "RegExp(`a`, `g`, `b`);"},
		{Code: "new RegExp(String.raw`a`, String.raw`g`, String.raw`b`);"},
		{Code: "RegExp(String.raw`a`, String.raw`g`, String.raw`b`);"},
		{
			Code:    `new RegExp(/a/, 'u', 'foo');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
		},
		{Code: "new RegExp(String`a`);"},
		{Code: "RegExp(raw`a`);"},
		{Code: "new RegExp(f(String.raw)`a`);"},
		{Code: "RegExp(string.raw`a`);"},
		{Code: "new RegExp(String.Raw`a`);"},
		{Code: "new RegExp(String[raw]`a`);"},
		{Code: "RegExp(String.raw.foo`a`);"},
		{Code: "new RegExp(String.foo.raw`a`);"},
		{Code: "RegExp(foo.String.raw`a`);"},
		{Code: `new RegExp(String.raw);`},
		{Code: "let String; new RegExp(String.raw`a`);"},
		{Code: "function foo() { var String; new RegExp(String.raw`a`); }"},
		{Code: "function foo(String) { RegExp(String.raw`a`); }"},
		{Code: "if (foo) { const String = bar; RegExp(String.raw`a`); }"},
		{Code: "/* globals String:off */ new RegExp(String.raw`a`);"},
		{
			Code:            "RegExp('a', String.raw`g`);",
			LanguageOptions: "{\"globals\":{\"String\":\"off\"}}",
		},
		{Code: `new Regexp('abc');`},
		{Code: "Regexp(`a`);"},
		{Code: "new Regexp(String.raw`a`);"},
		{Code: `let RegExp; new RegExp('a');`},
		{Code: `function foo() { var RegExp; RegExp('a', 'g'); }`},
		{Code: "function foo(RegExp) { new RegExp(String.raw`a`); }"},
		{Code: `if (foo) { const RegExp = bar; RegExp('a'); }`},
		{Code: `/* globals RegExp:off */ new RegExp('a');`},
		{
			Code:            `RegExp('a');`,
			LanguageOptions: "{\"globals\":{\"RegExp\":\"off\"}}",
		},
		{
			Code:            `new globalThis.RegExp('a');`,
			LanguageOptions: "{\"ecmaVersion\":5}",
		},
		{
			Code:            `new globalThis.RegExp('a');`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `new globalThis.RegExp('a');`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{Code: `class C { #RegExp; foo() { globalThis.#RegExp('a'); } }`},
		{Code: `new RegExp('[[A--B]]' + a, 'v')`},
	}, []InvalidTestCase{
		{
			Code: `new RegExp('abc');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('abc');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('abc', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/g;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('abc', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/g;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(`abc`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp(`abc`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(`abc`, `g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/g;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp(`abc`, `g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/g;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String.raw`abc`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp(String.raw` + "`" + `abc
abc` + "`" + `);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc\nabc/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp(String.raw` + "`" + `	abc
abc` + "`" + `);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\tabc\nabc/;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp(String.raw`abc`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String.raw`abc`, String.raw`g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/g;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp(String.raw`abc`, String.raw`g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/g;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String['raw']`a`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/(?:)/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/(?:)/;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String.raw``);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/(?:)/;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp('a', `g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/g;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp(`a`, 'g');",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/g;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp(String.raw`a`, 'g');",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/g;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String.raw`\\d`, `g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\d/g;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String.raw`\\\\d`, `g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\\d/g;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(String['raw']`\\\\d`, `g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\\d/g;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp(String["raw"]` + "`" + `\\d` + "`" + `, ` + "`" + `g` + "`" + `);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\\d/g;`,
						},
					},
				},
			},
		},
		{
			Code: "RegExp('a', String.raw`g`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/g;`,
						},
					},
				},
			},
		},
		{
			Code:            `new globalThis.RegExp('a');`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/;`,
						},
					},
				},
			},
		},
		{
			Code:            `globalThis.RegExp('a');`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/);`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExp",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/, 'u');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/u;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/g, '');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/;`,
						},
						{
							MessageId: "replaceWithIntendedLiteralAndFlags",
							Output:    `/a/g;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/g, 'g');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/g;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/ig, 'g');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/g;`,
						},
						{
							MessageId: "replaceWithIntendedLiteralAndFlags",
							Output:    `/a/ig;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/g, 'ig');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/ig;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/i, 'g');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/g;`,
						},
						{
							MessageId: "replaceWithIntendedLiteralAndFlags",
							Output:    `/a/ig;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/i, 'i');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/i;`,
						},
					},
				},
			},
		},
		{
			Code:    "new RegExp(/a/, `u`);",
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/u;`,
						},
					},
				},
			},
		},
		{
			Code:    "new RegExp(/a/, `gi`);",
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/gi;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp('a');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/;`,
						},
					},
				},
			},
		},
		{
			Code:    "new RegExp(/a/, String.raw`u`);",
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/u;`,
						},
					},
				},
			},
		},
		{
			Code:    `new RegExp(/a/ /* comment */);`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExp",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:            `new RegExp(/a/, 'd');`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `(a)
new RegExp(/b/);`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExp",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `(a)
new RegExp(/b/, 'g');`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:    `a/RegExp(/foo/);`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExp",
					Line:      1,
					Column:    3,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `a/ /foo/;`,
						},
					},
				},
			},
		},
		{
			Code:    `RegExp(/foo/)in a;`,
			Options: "[{\"disallowRedundantWrapping\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExp",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/foo/ in a;`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp((String?.raw)`a`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/a/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('+');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `new RegExp('*');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('+');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('*');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `new RegExp('+', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `new RegExp('*', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('+', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('*', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `RegExp('abc', 'u');`,
			LanguageOptions: "{\"ecmaVersion\":3,\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `new RegExp('abc', 'd');`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `RegExp('abc', 'd');`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/abc/d;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\\\\', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\\/;`,
						},
					},
				},
			},
		},
		{
			Code:            `RegExp('\n', '');`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\n/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\n\n', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\n\n/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\t', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\t/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\t\t', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\t\t/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\r\n', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\r\n/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\u1234', 'g')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('\u{1234}', 'g')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('\u{11111}', 'g')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('\v', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\v/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\v\v', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\v\v/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\f', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\f/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\f\f', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\f\f/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\\b', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\b/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\\b\\b', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\b\b/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('\\B\\b', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\B\b/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\\w', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\w/;`,
						},
					},
				},
			},
		},
		{
			Code:            `new globalThis.RegExp('\\W', '');`,
			LanguageOptions: "{\"globals\":{\"globalThis\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\W/;`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('\\s', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\s/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('\\S', '')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\S/`,
						},
					},
				},
			},
		},
		{
			Code:            `globalThis.RegExp('\\d', '');`,
			LanguageOptions: "{\"globals\":{\"globalThis\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\d/;`,
						},
					},
				},
			},
		},
		{
			Code:            `globalThis.RegExp('\\D', '')`,
			LanguageOptions: "{\"globals\":{\"globalThis\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\D/`,
						},
					},
				},
			},
		},
		{
			Code:            `globalThis.RegExp('\\\\\\D', '')`,
			LanguageOptions: "{\"globals\":{\"globalThis\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\\\D/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('\\D\\D', '')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\D\D/`,
						},
					},
				},
			},
		},
		{
			Code:            `new globalThis.RegExp('\\0\\0', '');`,
			LanguageOptions: "{\"globals\":{\"globalThis\":\"writable\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\0\0/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('\\0\\0', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\0\0/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('\0\0', 'g');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `RegExp('\\0\\0\\0', '')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\0\0\0/`,
						},
					},
				},
			},
		},
		{
			Code:            `RegExp('\\78\\126\\5934', '')`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\78\126\5934/`,
						},
					},
				},
			},
		},
		{
			Code:            `new window['RegExp']('\\x56\\x78\\x45', '');`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\x56\x78\x45/;`,
						},
					},
				},
			},
		},
		{
			Code: `a in(RegExp('abc'))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `a in(/abc/)`,
						},
					},
				},
			},
		},
		{
			Code: `x = y
            RegExp("foo").test(x) ? bar() : baz()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: "func(new RegExp(String.raw`\\w{1, 2`, 'u'),new RegExp(String.raw`\\w{1, 2`, 'u'))",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `x = y;
            RegExp("foo").test(x) ? bar() : baz()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `x = y;
            /foo/.test(x) ? bar() : baz()`,
						},
					},
				},
			},
		},
		{
			Code: `typeof RegExp("foo")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `typeof /foo/`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp("foo") instanceof RegExp(String.raw` + "`" + `blahblah` + "`" + `, 'g') ? typeof new RegExp('(\\p{Emoji_Presentation})\\1', ` + "`" + `ug` + "`" + `) : false`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    "/foo/ instanceof RegExp(String.raw`blahblah`, 'g') ? typeof new RegExp('(\\\\p{Emoji_Presentation})\\\\1', `ug`) : false",
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `RegExp("foo") instanceof /blahblah/g ? typeof new RegExp('(\\p{Emoji_Presentation})\\1', ` + "`" + `ug` + "`" + `) : false`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `RegExp("foo") instanceof RegExp(String.raw` + "`" + `blahblah` + "`" + `, 'g') ? typeof /(\p{Emoji_Presentation})\1/ug : false`,
						},
					},
				},
			},
		},
		{
			Code: "[   new RegExp(`someregular`)]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `[   /someregular/]`,
						},
					},
				},
			},
		},
		{
			Code: `const totallyValidatesEmails = new RegExp("\\S+@(\\S+\\.)+\\S+")
            if (typeof totallyValidatesEmails === 'object') {
                runSomethingThatExists(Regexp('stuff'))
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `const totallyValidatesEmails = /\S+@(\S+\.)+\S+/
            if (typeof totallyValidatesEmails === 'object') {
                runSomethingThatExists(Regexp('stuff'))
            }`,
						},
					},
				},
			},
		},
		{
			Code: `!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~new RegExp('^Sup, ') || new RegExp('hi') + new RegExp('person') === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!/^Hey, /u && new RegExp('jk$') && ~new RegExp('^Sup, ') || new RegExp('hi') + new RegExp('person') === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!new RegExp('^Hey, ', 'u') && /jk$/ && ~new RegExp('^Sup, ') || new RegExp('hi') + new RegExp('person') === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~/^Sup, / || new RegExp('hi') + new RegExp('person') === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~new RegExp('^Sup, ') || /hi/ + new RegExp('person') === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~new RegExp('^Sup, ') || new RegExp('hi') + /person/ === -new RegExp('hi again') ? 5 * new RegExp('abc') : 'notregbutstring'`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~new RegExp('^Sup, ') || new RegExp('hi') + new RegExp('person') === -/hi again/ ? 5 * new RegExp('abc') : 'notregbutstring'`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `!new RegExp('^Hey, ', 'u') && new RegExp('jk$') && ~new RegExp('^Sup, ') || new RegExp('hi') + new RegExp('person') === -new RegExp('hi again') ? 5 * /abc/ : 'notregbutstring'`,
						},
					},
				},
			},
		},
		{
			Code: `#!/usr/bin/sh
            RegExp("foo")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `#!/usr/bin/sh
            /foo/`,
						},
					},
				},
			},
		},
		{
			Code:            `async function abc(){await new RegExp("foo")}`,
			LanguageOptions: "{\"ecmaVersion\":8,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `function* abc(){yield new RegExp("foo")}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `function* abc(){yield* new RegExp("foo")}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `function* abc(){yield* /foo/}`,
						},
					},
				},
			},
		},
		{
			Code: `console.log({ ...new RegExp('a') })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `console.log({ .../a/ })`,
						},
					},
				},
			},
		},
		{
			Code: `delete RegExp('a');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `delete /a/;`,
						},
					},
				},
			},
		},
		{
			Code: `void RegExp('a');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `void /a/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\\S+@(\\S+\\.)+\\S+")**RegExp('a')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\S+@(\S+\.)+\S+/**RegExp('a')`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `new RegExp("\\S+@(\\S+\\.)+\\S+")**/a/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\\S+@(\\S+\\.)+\\S+")%RegExp('a')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\S+@(\S+\.)+\S+/%RegExp('a')`,
						},
					},
				},
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `new RegExp("\\S+@(\\S+\\.)+\\S+")%/a/`,
						},
					},
				},
			},
		},
		{
			Code: `a in RegExp('abc')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `a in /abc/`,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ == new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ == /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ === new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ === /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ != new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ != /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ !== new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ !== /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ > new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ > /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ < new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ < /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ >= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ >= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ <= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ <= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ << new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ << /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ >> new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ >> /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ >>> new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ >>> /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ ^ new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ ^ /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ & new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ & /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            /abc/ | new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            /abc/ | /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            null ?? new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            null ?? /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc *= new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc *= /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            console.log({a: new RegExp('sup')})
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            console.log({a: /sup/})
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            console.log(() => {new RegExp('sup')})
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            console.log(() => {/sup/})
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            function abc() {new RegExp('sup')}
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            function abc() {/sup/}
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            function abc() {return new RegExp('sup')}
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            function abc() {return /sup/}
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc <<= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc <<= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc >>= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc >>= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc >>>= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc >>>= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc ^= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc ^= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc &= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc &= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc |= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc |= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc ??= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc ??= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc &&= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc &&= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc ||= new RegExp('cba');
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc ||= /cba/;
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc **= new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc **= /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc /= new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc /= /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc += new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc += /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc -= new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc -= /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            abc %= new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            abc %= /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `
            () => new RegExp('blah')
            `,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            () => /blah/
            `,
						},
					},
				},
			},
		},
		{
			Code: `a/RegExp("foo")in b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `a/ /foo/ in b`,
						},
					},
				},
			},
		},
		{
			Code: `a/RegExp("foo")instanceof b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `a/ /foo/ instanceof b`,
						},
					},
				},
			},
		},
		{
			Code: `do RegExp("foo")
while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `do /foo/
while (true);`,
						},
					},
				},
			},
		},
		{
			Code: `for(let i;i<5;i++) { break
new RegExp('search')}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `for(let i;i<5;i++) { break
/search/}`,
						},
					},
				},
			},
		},
		{
			Code: `for(let i;i<5;i++) { continue
new RegExp('search')}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `for(let i;i<5;i++) { continue
/search/}`,
						},
					},
				},
			},
		},
		{
			Code: `
            switch (value) {
                case "possibility":
                    console.log('possibility matched')
                case RegExp('myReg').toString():
                    console.log('matches a regexp\' toString value')
                    break;
            }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `
            switch (value) {
                case "possibility":
                    console.log('possibility matched')
                case /myReg/.toString():
                    console.log('matches a regexp\' toString value')
                    break;
            }
            `,
						},
					},
				},
			},
		},
		{
			Code: `throw new RegExp('abcdefg') // fail with a regular expression`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `throw /abcdefg/ // fail with a regular expression`,
						},
					},
				},
			},
		},
		{
			Code: `for (value of new RegExp('something being searched')) { console.log(value) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `(async function(){for await (value of new RegExp('something being searched')) { console.log(value) }})()`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `for (value in new RegExp('something being searched')) { console.log(value) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `for (value in /something being searched/) { console.log(value) }`,
						},
					},
				},
			},
		},
		{
			Code: `if (condition1 && condition2) new RegExp('avalue').test(str);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code: `debugger
new RegExp('myReg')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output: `debugger
/myReg/`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp("\\\n")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\n/`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp("\\\t")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\t/`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp("\\\f")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\f/`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp("\\\v")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\v/`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp("\\\r")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\r/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("	")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\t/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("/")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\//`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\.")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/./`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\\.")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\./`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\\\n\\\n")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\n\n/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\\\n\\\f\\\n")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\n\f\n/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp("\u000A\u000A");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/\n\n/;`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('mysafereg' /* comment explaining its safety */)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `new RegExp('[[A--B]]', 'v')`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/[[A--B]]/v`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp('[[A--B]]', 'v')`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `new RegExp('[[A&&&]]', 'v')`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `new RegExp('a', 'uv')`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `new RegExp(/a/, 'v')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/v`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp(/a/, 'v')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
				},
			},
		},
		{
			Code:            `new RegExp(/a/g, 'v')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/v`,
						},
						{
							MessageId: "replaceWithIntendedLiteralAndFlags",
							Output:    `/a/gv`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp(/[[A--B]]/v, 'g')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIntendedLiteralAndFlags",
							Output:    `/[[A--B]]/vg`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp(/a/u, 'v')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/v`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp(/a/v, 'u')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteralAndFlags",
							Output:    `/a/u`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp(/[[A--B]]/v, 'u')`,
			Options:         "[{\"disallowRedundantWrapping\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRedundantRegExpWithFlags",
				},
			},
		},
		{
			Code:            `new RegExp('(?i:foo)bar')`,
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `/(?i:foo)bar/`,
						},
					},
				},
			},
		},
		{
			Code:            `new RegExp('(?i:foo)bar')`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
				},
			},
		},
		{
			Code:            `var regex = new RegExp('foo', 'u');`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedRegExp",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithLiteral",
							Output:    `var regex = /foo/u;`,
						},
					},
				},
			},
		},
	})
}
