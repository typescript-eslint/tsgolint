// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestComputedPropertySpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "computed-property-spacing", []ValidTestCase{
		{Code: `obj[foo]`},
		{Code: `obj['foo']`},
		{
			Code:            `var x = {[b]: a}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `obj[ foo ]`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj[
foo
]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[ 'foo' ]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[ 'foo' + 'bar' ]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[ obj2[ foo ] ]`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj.map(function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj[ 'map' ](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj[ 'for' + 'Each' ](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = obj[ 1 ]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = obj[ 'foo' ];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = obj[ [1, 1] ];`,
			Options: "[\"always\"]",
		},
		{
			Code:            `var x = {[ "a" ]: a}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var y = {[ x ]: a}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = {[ "a" ]() {}}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var y = {[ x ]() {}}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[foo]`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj['foo']`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj['foo' + 'bar']`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj['foo'+'bar']`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj[obj2[foo]]`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj.map(function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj['map'](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj['for' + 'Each'](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj[
foo]`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj[foo
]`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = obj[1]`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = obj['foo'];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = obj[[ 1, 1 ]];`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var x = {["a"]: a}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var y = {[x]: a}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = {["a"]() {}}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var y = {[x]() {}}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = {};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"never\"]",
		},
		{
			Code:            `class A { [ a ](){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { [a](){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [a](){} get [b](){} set [b](foo){} static [c](){} static get [d](){} static set [d](bar){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [ a ]; }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { [a]; }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `A = class { [a](){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [a] ( ) { } }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `A = class { [ 
 a 
 ](){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [a](){} get [b](){} set [b](foo){} static [c](){} static get [d](){} static set [d](bar){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [ a ](){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [ a ](){}[ b ](){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `A = class { [
a
](){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { [a]; static [a]; [a] = 0; static [a] = 0; }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `A = class { [ a ]; static [ a ]; [ a ] = 0; static [ a ] = 0; }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a ( ) { } get b(){} set b ( foo ){} static c (){} static get d() {} static set d( bar ) {} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class {a(){}get b(){}set b(foo){}static c(){}static get d(){}static set d(bar){}}`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { foo; #a; static #b; #c = 0; static #d = 0; }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `A = class { foo; #a; static #b; #c = 0; static #d = 0; }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `const foo = {
  [ (a) ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [ ( a ) ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [( a )]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [ /**/ a /**/ ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [/**/ a /**/]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [ a[ b ] ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [a[b]]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [ a[ /**/ b ]/**/ ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = {
  [/**/a[b /**/] /**/]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const { [a]: someProp } = obj;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ [a]: someProp } = obj);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const { [ a ]: someProp } = obj;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ [ a ]: someProp } = obj);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code:    `var foo = obj[ 1];`,
			Output:  `var foo = obj[ 1 ];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:    `var foo = obj[1 ];`,
			Output:  `var foo = obj[ 1 ];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:    `var foo = obj[ 1];`,
			Output:  `var foo = obj[1];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:    `var foo = obj[1 ];`,
			Output:  `var foo = obj[1];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `obj[ foo ]`,
			Output:  `obj[foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `obj[foo ]`,
			Output:  `obj[foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `obj[ foo]`,
			Output:  `obj[foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code:    `var foo = obj[1]`,
			Output:  `var foo = obj[ 1 ]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `obj[    foo]`,
			Output:  `obj[foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `obj[  foo  ]`,
			Output:  `obj[foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `obj[   foo ]`,
			Output:  `obj[foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 8,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `obj[ foo + 
  bar   ]`,
			Output: `obj[foo + 
  bar]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    6,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `obj[
 foo  ]`,
			Output: `obj[
 foo]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    5,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code:            `var x = {[a]: b}`,
			Output:          `var x = {[ a ]: b}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `var x = {[a ]: b}`,
			Output:          `var x = {[ a ]: b}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `var x = {[ a]: b}`,
			Output:          `var x = {[ a ]: b}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `var x = {[ a ]: b}`,
			Output:          `var x = {[a]: b}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `var x = {[a ]: b}`,
			Output:          `var x = {[a]: b}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `var x = {[ a]: b}`,
			Output:          `var x = {[a]: b}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `var x = {[ a
]: b}`,
			Output: `var x = {[a
]: b}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `class A { [ a ](){} }`,
			Output:          `class A { [a](){} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `class A { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Output:          `class A { [a](){} get [b](){} set [c](foo){} static [d](){} static get [e](){} static set [f](bar){} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    28,
					EndLine:   1,
					EndColumn: 29,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    40,
					EndLine:   1,
					EndColumn: 41,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    42,
					EndLine:   1,
					EndColumn: 43,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    60,
					EndLine:   1,
					EndColumn: 61,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    62,
					EndLine:   1,
					EndColumn: 63,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    81,
					EndLine:   1,
					EndColumn: 82,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    83,
					EndLine:   1,
					EndColumn: 84,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    102,
					EndLine:   1,
					EndColumn: 103,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    104,
					EndLine:   1,
					EndColumn: 105,
				},
			},
		},
		{
			Code:            `A = class { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Output:          `A = class { [a](){} get [b](){} set [c](foo){} static [d](){} static get [e](){} static set [f](bar){} }`,
			Options:         "[\"never\",{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    28,
					EndLine:   1,
					EndColumn: 29,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    42,
					EndLine:   1,
					EndColumn: 43,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    44,
					EndLine:   1,
					EndColumn: 45,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    62,
					EndLine:   1,
					EndColumn: 63,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    64,
					EndLine:   1,
					EndColumn: 65,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    83,
					EndLine:   1,
					EndColumn: 84,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    85,
					EndLine:   1,
					EndColumn: 86,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    104,
					EndLine:   1,
					EndColumn: 105,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    106,
					EndLine:   1,
					EndColumn: 107,
				},
			},
		},
		{
			Code:            `A = class { [a](){} }`,
			Output:          `A = class { [ a ](){} }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `A = class { [a](){} get [b](){} set [c](foo){} static [d](){} static get [e](){} static set [f](bar){} }`,
			Output:          `A = class { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 38,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    39,
					EndLine:   1,
					EndColumn: 40,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    55,
					EndLine:   1,
					EndColumn: 56,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    57,
					EndLine:   1,
					EndColumn: 58,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    74,
					EndLine:   1,
					EndColumn: 75,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    76,
					EndLine:   1,
					EndColumn: 77,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    93,
					EndLine:   1,
					EndColumn: 94,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    95,
					EndLine:   1,
					EndColumn: 96,
				},
			},
		},
		{
			Code:            `class A { [a](){} get [b](){} set [c](foo){} static [d](){} static get [e](){} static set [f](bar){} }`,
			Output:          `class A { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Options:         "[\"always\",{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    35,
					EndLine:   1,
					EndColumn: 36,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 38,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    53,
					EndLine:   1,
					EndColumn: 54,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    55,
					EndLine:   1,
					EndColumn: 56,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    72,
					EndLine:   1,
					EndColumn: 73,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    74,
					EndLine:   1,
					EndColumn: 75,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    91,
					EndLine:   1,
					EndColumn: 92,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    93,
					EndLine:   1,
					EndColumn: 94,
				},
			},
		},
		{
			Code:            `class A { [ a](){} }`,
			Output:          `class A { [a](){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `A = class { [a](){} b(){} static [c ](){} static [d](){}}`,
			Output:          `A = class { [a](){} b(){} static [c](){} static [d](){}}`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    36,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code:            `class A { get [a ](){} set [ a](foo){} get b(){} static set b(bar){} static get [ a](){} static set [a ](baz){} }`,
			Output:          `class A { get [a](){} set [a](foo){} get b(){} static set b(bar){} static get [a](){} static set [a](baz){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 30,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    82,
					EndLine:   1,
					EndColumn: 83,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    103,
					EndLine:   1,
					EndColumn: 104,
				},
			},
		},
		{
			Code:            `A = class { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Output:          `A = class { [a](){} get [b](){} set [c](foo){} static [d](){} static get [e](){} static set [f](bar){} }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    28,
					EndLine:   1,
					EndColumn: 29,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    42,
					EndLine:   1,
					EndColumn: 43,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    44,
					EndLine:   1,
					EndColumn: 45,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    62,
					EndLine:   1,
					EndColumn: 63,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    64,
					EndLine:   1,
					EndColumn: 65,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    83,
					EndLine:   1,
					EndColumn: 84,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    85,
					EndLine:   1,
					EndColumn: 86,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    104,
					EndLine:   1,
					EndColumn: 105,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    106,
					EndLine:   1,
					EndColumn: 107,
				},
			},
		},
		{
			Code:            `class A { [ a]; [b ]; [ c ]; [ a] = 0; [b ] = 0; [ c ] = 0; }`,
			Output:          `class A { [a]; [b]; [c]; [a] = 0; [b] = 0; [c] = 0; }`,
			Options:         "[\"never\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Column:    12,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Column:    19,
					EndColumn: 20,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Column:    24,
					EndColumn: 25,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Column:    26,
					EndColumn: 27,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Column:    31,
					EndColumn: 32,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Column:    42,
					EndColumn: 43,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Column:    51,
					EndColumn: 52,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Column:    53,
					EndColumn: 54,
				},
			},
		},
		{
			Code:            `class A { [ a](){} }`,
			Output:          `class A { [ a ](){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `A = class { [ a ](){} b(){} static [c ](){} static [ d ](){}}`,
			Output:          `A = class { [ a ](){} b(){} static [ c ](){} static [ d ](){}}`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    36,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code:            `class A { get [a ](){} set [ a](foo){} get b(){} static set b(bar){} static get [ a](){} static set [a ](baz){} }`,
			Output:          `class A { get [ a ](){} set [ a ](foo){} get b(){} static set b(bar){} static get [ a ](){} static set [ a ](baz){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    31,
					EndLine:   1,
					EndColumn: 32,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    84,
					EndLine:   1,
					EndColumn: 85,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    101,
					EndLine:   1,
					EndColumn: 102,
				},
			},
		},
		{
			Code:            `A = class { [a](){} get [b](){} set [c](foo){} static [d](){} static get [e](){} static set [f](bar){} }`,
			Output:          `A = class { [ a ](){} get [ b ](){} set [ c ](foo){} static [ d ](){} static get [ e ](){} static set [ f ](bar){} }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 38,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    39,
					EndLine:   1,
					EndColumn: 40,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    55,
					EndLine:   1,
					EndColumn: 56,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    57,
					EndLine:   1,
					EndColumn: 58,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    74,
					EndLine:   1,
					EndColumn: 75,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    76,
					EndLine:   1,
					EndColumn: 77,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    93,
					EndLine:   1,
					EndColumn: 94,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    95,
					EndLine:   1,
					EndColumn: 96,
				},
			},
		},
		{
			Code:            `class A { [ a]; [b ]; [c]; [ a] = 0; [b ] = 0; [c] = 0; }`,
			Output:          `class A { [ a ]; [ b ]; [ c ]; [ a ] = 0; [ b ] = 0; [ c ] = 0; }`,
			Options:         "[\"always\",{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceBefore",
					Column:    14,
					EndColumn: 15,
				},
				{
					MessageId: "missingSpaceAfter",
					Column:    17,
					EndColumn: 18,
				},
				{
					MessageId: "missingSpaceAfter",
					Column:    23,
					EndColumn: 24,
				},
				{
					MessageId: "missingSpaceBefore",
					Column:    25,
					EndColumn: 26,
				},
				{
					MessageId: "missingSpaceBefore",
					Column:    31,
					EndColumn: 32,
				},
				{
					MessageId: "missingSpaceAfter",
					Column:    38,
					EndColumn: 39,
				},
				{
					MessageId: "missingSpaceAfter",
					Column:    48,
					EndColumn: 49,
				},
				{
					MessageId: "missingSpaceBefore",
					Column:    50,
					EndColumn: 51,
				},
			},
		},
		{
			Code: `const foo = {
  [(a)]: 1
}`,
			Output: `const foo = {
  [ (a) ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      2,
					Column:    7,
					EndLine:   2,
					EndColumn: 8,
				},
			},
		},
		{
			Code: `const foo = {
  [( a )]: 1
}`,
			Output: `const foo = {
  [ ( a ) ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      2,
					Column:    9,
					EndLine:   2,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `const foo = {
  [ ( a ) ]: 1
}`,
			Output: `const foo = {
  [( a )]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    10,
					EndLine:   2,
					EndColumn: 11,
				},
			},
		},
		{
			Code: `const foo = {
  [/**/ a /**/]: 1
}`,
			Output: `const foo = {
  [ /**/ a /**/ ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      2,
					Column:    15,
					EndLine:   2,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `const foo = {
  [ /**/ a /**/ ]: 1
}`,
			Output: `const foo = {
  [/**/ a /**/]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    16,
					EndLine:   2,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `const foo = {
  [a[b]]: 1
}`,
			Output: `const foo = {
  [ a[ b ] ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    5,
					EndLine:   2,
					EndColumn: 6,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      2,
					Column:    7,
					EndLine:   2,
					EndColumn: 8,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `const foo = {
  [ a[ b ] ]: 1
}`,
			Output: `const foo = {
  [a[b]]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    7,
					EndLine:   2,
					EndColumn: 8,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    9,
					EndLine:   2,
					EndColumn: 10,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    11,
					EndLine:   2,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `const foo = {
  [a[/**/ b ]/**/]: 1
}`,
			Output: `const foo = {
  [ a[ /**/ b ]/**/ ]: 1
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
				{
					MessageId: "missingSpaceAfter",
					Line:      2,
					Column:    5,
					EndLine:   2,
					EndColumn: 6,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      2,
					Column:    18,
					EndLine:   2,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `const foo = {
  [ /**/a[ b /**/ ] /**/]: 1
}`,
			Output: `const foo = {
  [/**/a[b /**/] /**/]: 1
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    11,
					EndLine:   2,
					EndColumn: 12,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    18,
					EndLine:   2,
					EndColumn: 19,
				},
			},
		},
		{
			Code:            `obj?.[1];`,
			Output:          `obj?.[ 1 ];`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
				},
				{
					MessageId: "missingSpaceBefore",
				},
			},
		},
		{
			Code:            `obj?.[ 1 ];`,
			Output:          `obj?.[1];`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code:            `const { [ a]: someProp } = obj;`,
			Output:          `const { [a]: someProp } = obj;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
			},
		},
		{
			Code:            `const { [a ]: someProp } = obj;`,
			Output:          `const { [a]: someProp } = obj;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code:            `const { [ a ]: someProp } = obj;`,
			Output:          `const { [a]: someProp } = obj;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code:            `({ [ a ]: someProp } = obj);`,
			Output:          `({ [a]: someProp } = obj);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code:            `const { [a]: someProp } = obj;`,
			Output:          `const { [ a ]: someProp } = obj;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
				},
				{
					MessageId: "missingSpaceBefore",
				},
			},
		},
		{
			Code:            `({ [a]: someProp } = obj);`,
			Output:          `({ [ a ]: someProp } = obj);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
				},
				{
					MessageId: "missingSpaceBefore",
				},
			},
		},
	})
}
