// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoLoneBlocksRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-lone-blocks", []ValidTestCase{
		{Code: `if (foo) { if (bar) { baz(); } }`},
		{Code: `do { bar(); } while (foo)`},
		{Code: `function foo() { while (bar) { baz() } }`},
		{
			Code:            `{ let x = 1; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{ const x = 1; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `'use strict'; { function bar() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{ function bar() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"impliedStrict\":true}}}",
		},
		{
			Code:            `{ class Bar {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{ {let y = 1;} let x = 1; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `
          switch (foo) {
            case bar: {
              baz;
            }
          }
        `},
		{Code: `
          switch (foo) {
            case bar: {
              baz;
            }
            case qux: {
              boop;
            }
          }
        `},
		{Code: `
          switch (foo) {
            case bar:
            {
              baz;
            }
          }
        `},
		{
			Code:            `function foo() { { const x = 4 } const x = 3 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (foo) { block; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { lbl: { block; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { { let block; } something; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { something; { const block = 1; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { { function block(){} } something; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { something; { class block {}  } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
{
  using x = makeDisposable();
}`,
			LanguageOptions: "{\"parser\":{},\"ecmaVersion\":2022}",
		},
		{
			Code: `
{
  await using x = makeDisposable();
}`,
			LanguageOptions: "{\"parser\":{},\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `{}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
				},
			},
		},
		{
			Code: `{var x = 1;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
				},
			},
		},
		{
			Code: `foo(); {} bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
				},
			},
		},
		{
			Code: `if (foo) { bar(); {} baz(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
				},
			},
		},
		{
			Code: `{ 
{ } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
					Line:      1,
				},
				{
					MessageId: "redundantNestedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() { bar(); {} baz(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
				},
			},
		},
		{
			Code: `while (foo) { {} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
				},
			},
		},
		{
			Code:            `{ function bar() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
				},
			},
		},
		{
			Code:            `{var x = 1;}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
				},
			},
		},
		{
			Code: `{ 
{var x = 1;}
 let y = 2; } {let z = 1;}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `{ 
{let x = 1;}
 var y = 2; } {let z = 1;}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
					Line:      1,
				},
			},
		},
		{
			Code: `{ 
{var x = 1;}
 var y = 2; }
 {var z = 1;}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
					Line:      1,
				},
				{
					MessageId: "redundantNestedBlock",
					Line:      2,
				},
				{
					MessageId: "redundantBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              switch (foo) {
                case 1:
                    foo();
                    {
                        bar;
                    }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
					Line:      5,
				},
			},
		},
		{
			Code: `
              switch (foo) {
                case 1:
                {
                    bar;
                }
                foo();
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              function foo () {
                {
                  const x = 4;
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      3,
				},
			},
		},
		{
			Code: `
              function foo () {
                {
                  var x = 4;
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      3,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  if (foo) {
                    {
                        let block;
                    }
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      5,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  if (foo) {
                    {
                        block;
                    }
                    something;
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      5,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    block;
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    let block;
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    const block = 1;
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    function block() {}
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    class block {}
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    var block;
                  }
                  something;
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  something;
                  {
                    var block;
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      5,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  {
                    block;
                  }
                  something;
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      4,
				},
			},
		},
		{
			Code: `
              class C {
                static {
                  something;
                  {
                    block;
                  }
                }
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantNestedBlock",
					Line:      5,
				},
			},
		},
	})
}
