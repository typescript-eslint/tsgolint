// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoMagicNumbersRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-magic-numbers", []ValidTestCase{
		{Code: `var x = parseInt(y, 10);`},
		{Code: `var x = parseInt(y, -10);`},
		{Code: `var x = Number.parseInt(y, 10);`},
		{
			Code:            `const foo = 42;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = 42;`,
			Options:         "[{\"enforceConst\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var foo = -42;`},
		{
			Code:    `var foo = 0 + 1 - 2 + -2;`,
			Options: "[{\"ignore\":[0,1,2,-2]}]",
		},
		{
			Code:    `var foo = 0 + 1 + 2 + 3 + 4;`,
			Options: "[{\"ignore\":[0,1,2,3,4]}]",
		},
		{Code: `var foo = { bar:10 }`},
		{
			Code:    `setTimeout(function() {return 1;}, 0);`,
			Options: "[{\"ignore\":[0,1]}]",
		},
		{
			Code:    `var data = ['foo', 'bar', 'baz']; var third = data[3];`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[0]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[-0]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[100]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[200.00]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[3e4]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[1.23e2]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[230e-1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:            `foo[0b110]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `foo[0o71]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `foo[0xABC]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:            `foo[0123]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"sourceType\":\"script\"}",
		},
		{
			Code:    `foo[5.0000000000000001]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:    `foo[4294967294]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
		},
		{
			Code:            `foo[0n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `foo[-0n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `foo[1n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `foo[100n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `foo[0xABn]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `foo[4294967294n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var a = <input maxLength={10} />;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var a = <div objectProp={{ test: 1}}></div>;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `f(100n)`,
			Options:         "[{\"ignore\":[\"100n\"]}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `f(-100n)`,
			Options:         "[{\"ignore\":[\"-100n\"]}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `const { param = 123 } = sourceObject;`,
			Options:         "[{\"ignoreDefaultValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const func = (param = 123) => {}`,
			Options:         "[{\"ignoreDefaultValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const func = ({ param = 123 }) => {}`,
			Options:         "[{\"ignoreDefaultValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const [one = 1, two = 2] = []`,
			Options:         "[{\"ignoreDefaultValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var one, two; [one = 1, two = 2] = []`,
			Options:         "[{\"ignoreDefaultValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = parseInt?.(y, 10);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var x = Number?.parseInt(y, 10);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var x = (Number?.parseInt)(y, 10);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `foo?.[777]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `class C { foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo = -2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static #foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:            `var foo = 42`,
			Options:         "[{\"enforceConst\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `var foo = 0 + 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code:            `var foo = 42n`,
			Options:         "[{\"enforceConst\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `var foo = 0n + 1n;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `a = a + 5;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `a += 5;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `var foo = 0 + 1 + -2 + 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code:    `var foo = 0 + 1 + 2;`,
			Options: "[{\"ignore\":[0,1]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code:    `var foo = { bar:10 }`,
			Options: "[{\"detectObjects\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code:            `console.log(0x1A + 0x02); console.log(071);`,
			LanguageOptions: "{\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code:    `var stats = {avg: 42};`,
			Options: "[{\"detectObjects\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `var colors = {}; colors.RED = 2; colors.YELLOW = 3; colors.BLUE = 4 + 5;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `function getSecondsInMinute() {return 60;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `function getNegativeSecondsInMinute() {return -60;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
				},
			},
		},
		{
			Code: `var Promise = require('bluebird');
var MINUTE = 60;
var HOUR = 3600;
const DAY = 86400;
var configObject = {
key: 90,
another: 10 * 10,
10: 'an "integer" key'
};
function getSecondsInDay() {
 return 24 * HOUR;
}
function getMillisecondsInDay() {
return (getSecondsInDay() *
(1000)
);
}
function callSetTimeoutZero(func) {
setTimeout(func, 0);
}
function invokeInTen(func) {
setTimeout(func, 10);
}
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      7,
				},
				{
					MessageId: "noMagic",
					Line:      7,
				},
				{
					MessageId: "noMagic",
					Line:      11,
				},
				{
					MessageId: "noMagic",
					Line:      15,
				},
				{
					MessageId: "noMagic",
					Line:      19,
				},
				{
					MessageId: "noMagic",
					Line:      22,
				},
			},
		},
		{
			Code: `var data = ['foo', 'bar', 'baz']; var third = data[3];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `var data = ['foo', 'bar', 'baz']; var third = data[3];`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `var data = ['foo', 'bar', 'baz']; var third = data[3];`,
			Options: "[{\"ignoreArrayIndexes\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-100]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-1.5]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-0.1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[-0b110]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[-0o71]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-0x12]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[-012]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[0.1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[0.12e1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[1.5]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[1.678e2]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[56e-1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[5.000000000000001]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[100.9]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[4294967295]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[1e300]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[1e310]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-1e310]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[-1n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[-100n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[-0x12n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[4294967295n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[+0]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[+1]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `foo[-(-1)]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[+0n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[+1n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo[- -1n]`,
			Options:         "[{\"ignoreArrayIndexes\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `100 .toString()`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `200[100]`,
			Options: "[{\"ignoreArrayIndexes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `var a = <div arrayProp={[1,2,3]}></div>;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
				{
					MessageId: "noMagic",
					Line:      1,
				},
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `var min, max, mean; min = 1; max = 10; mean = 4;`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
				{
					MessageId: "noMagic",
					Line:      1,
				},
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `f(100n)`,
			Options:         "[{\"ignore\":[100]}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `f(-100n)`,
			Options:         "[{\"ignore\":[\"100n\"]}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `f(100n)`,
			Options:         "[{\"ignore\":[\"-100n\"]}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:    `f(100)`,
			Options: "[{\"ignore\":[\"100n\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `const func = (param = 123) => {}`,
			Options:         "[{\"ignoreDefaultValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `const { param = 123 } = sourceObject;`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `const { param = 123 } = sourceObject;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `const { param = 123 } = sourceObject;`,
			Options:         "[{\"ignoreDefaultValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `const [one = 1, two = 2] = []`,
			Options:         "[{\"ignoreDefaultValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `var one, two; [one = 1, two = 2] = []`,
			Options:         "[{\"ignoreDefaultValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
				},
				{
					MessageId: "noMagic",
					Line:      1,
				},
			},
		},
		{
			Code:            `class C { foo = 2; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:            `class C { foo = 2; }`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:            `class C { foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:            `class C { foo = -2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:            `class C { static foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `class C { #foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:            `class C { static #foo = 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:            `class C { foo = 2 + 3; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    17,
				},
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:            `class C { 2; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:            `class C { [2]; }`,
			Options:         "[{\"ignoreClassFieldInitialValues\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noMagic",
					Line:      1,
					Column:    12,
				},
			},
		},
	})
}
