// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestGetterReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "getter-return", []ValidTestCase{
		{Code: `var foo = { get bar(){return true;} };`},
		{
			Code:    `var foo = { get bar() {return;} };`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `var foo = { get bar(){return true;} };`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `var foo = { get bar(){if(bar) {return;} return true;} };`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{Code: `class foo { get bar(){return true;} }`},
		{Code: `class foo { get bar(){if(baz){return true;} else {return false;} } }`},
		{Code: `class foo { get(){return true;} }`},
		{
			Code:    `class foo { get bar(){return true;} }`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `class foo { get bar(){return;} }`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{Code: `Object.defineProperty(foo, "bar", { get: function () {return true;}});`},
		{Code: `Object.defineProperty(foo, "bar", { get: function () { ~function (){ return true; }();return true;}});`},
		{Code: `Object.defineProperties(foo, { bar: { get: function () {return true;}} });`},
		{Code: `Object.defineProperties(foo, { bar: { get: function () { ~function (){ return true; }(); return true;}} });`},
		{Code: `Reflect.defineProperty(foo, "bar", { get: function () {return true;}});`},
		{Code: `Reflect.defineProperty(foo, "bar", { get: function () { ~function (){ return true; }();return true;}});`},
		{Code: `Object.create(foo, { bar: { get() {return true;} } });`},
		{Code: `Object.create(foo, { bar: { get: function () {return true;} } });`},
		{Code: `Object.create(foo, { bar: { get: () => {return true;} } });`},
		{
			Code:    `Object.defineProperty(foo, "bar", { get: function () {return true;}});`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `Object.defineProperty(foo, "bar", { get: function (){return;}});`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { get: function () {return true;}} });`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { get: function () {return;}} });`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `Reflect.defineProperty(foo, "bar", { get: function () {return true;}});`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{Code: `var get = function(){};`},
		{Code: `var get = function(){ return true; };`},
		{Code: `var foo = { bar(){} };`},
		{Code: `var foo = { bar(){ return true; } };`},
		{Code: `var foo = { bar: function(){} };`},
		{Code: `var foo = { bar: function(){return;} };`},
		{Code: `var foo = { bar: function(){return true;} };`},
		{Code: `var foo = { get: function () {} }`},
		{Code: `var foo = { get: () => {}};`},
		{Code: `class C { get; foo() {} }`},
		{Code: `foo.defineProperty(null, { get() {} });`},
		{Code: `foo.defineProperties(null, { bar: { get() {} } });`},
		{Code: `foo.create(null, { bar: { get() {} } });`},
	}, []InvalidTestCase{
		{
			Code: `var foo = { get bar() {} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var foo = { get
 bar () {} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `var foo = { get bar(){if(baz) {return true;}} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAlways",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var foo = { get bar() { ~function () {return true;}} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var foo = { get bar() { return; } };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code:    `var foo = { get bar() {} };`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var foo = { get bar() {if (baz) {return;}} };`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAlways",
				},
			},
		},
		{
			Code: `class foo { get bar(){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var foo = class {
  static get
bar(){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `class foo { get bar(){ if (baz) { return true; }}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAlways",
				},
			},
		},
		{
			Code: `class foo { get bar(){ ~function () { return true; }()}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `class foo { get bar(){} }`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `class foo { get bar(){if (baz) {return true;} } }`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAlways",
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { get: function (){}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 51,
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { get: function getfoo (){}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 58,
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { get(){} });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { get: () => {}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    37,
					EndLine:   1,
					EndColumn: 42,
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, "bar", { get: function (){if(bar) {return true;}}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAlways",
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, "bar", { get: function (){ ~function () { return true; }()}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `Reflect.defineProperty(foo, 'bar', { get: function (){}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    38,
					EndLine:   1,
					EndColumn: 52,
				},
			},
		},
		{
			Code: `Object.create(foo, { bar: { get: function() {} } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 42,
				},
			},
		},
		{
			Code: `Object.create(foo, { bar: { get() {} } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code: `Object.create(foo, { bar: { get: () => {} } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 34,
				},
			},
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { get: function () {}} });`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { get: function (){if(bar) {return true;}}}});`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAlways",
				},
			},
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { get: function () {~function () { return true; }()}} });`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `Object.defineProperty(foo, "bar", { get: function (){}});`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `Object.create(foo, { bar: { get: function (){} } });`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `Reflect.defineProperty(foo, "bar", { get: function (){}});`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `Object?.defineProperty(foo, 'bar', { get: function (){} });`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `(Object?.defineProperty)(foo, 'bar', { get: function (){} });`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `Object?.defineProperty(foo, 'bar', { get: function (){} });`,
			Options:         "[{\"allowImplicit\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `(Object?.defineProperty)(foo, 'bar', { get: function (){} });`,
			Options:         "[{\"allowImplicit\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `(Object?.create)(foo, { bar: { get: function (){} } });`,
			Options:         "[{\"allowImplicit\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
	})
}
