// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoEmptyRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-empty", []ValidTestCase{
		{Code: `if (foo) { bar() }`},
		{Code: `while (foo) { bar() }`},
		{Code: `for (;foo;) { bar() }`},
		{Code: `try { foo() } catch (ex) { foo() }`},
		{Code: `switch(foo) {case 'foo': break;}`},
		{Code: `(function() { }())`},
		{
			Code:            `var foo = () => {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function foo() { }`},
		{Code: `if (foo) {/* empty */}`},
		{Code: `while (foo) {/* empty */}`},
		{Code: `for (;foo;) {/* empty */}`},
		{Code: `try { foo() } catch (ex) {/* empty */}`},
		{Code: `try { foo() } catch (ex) {// empty
}`},
		{Code: `try { foo() } finally {// empty
}`},
		{Code: `try { foo() } finally {// test
}`},
		{Code: `try { foo() } finally {
 
 // hi i am off no use
}`},
		{Code: `try { foo() } catch (ex) {/* test111 */}`},
		{Code: `if (foo) { bar() } else { // nothing in me 
}`},
		{Code: `if (foo) { bar() } else { /**/ 
}`},
		{Code: `if (foo) { bar() } else { // 
}`},
		{
			Code:    `try { foo(); } catch (ex) {}`,
			Options: "[{\"allowEmptyCatch\":true}]",
		},
		{
			Code:    `try { foo(); } catch (ex) {} finally { bar(); }`,
			Options: "[{\"allowEmptyCatch\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `try {} catch (ex) {throw ex}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { /* empty */ } catch (ex) {throw ex}`,
						},
					},
				},
			},
		},
		{
			Code: `try { foo() } catch (ex) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { foo() } catch (ex) { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code: `try { foo() } catch (ex) {throw ex} finally {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { foo() } catch (ex) {throw ex} finally { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code: `if (foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `if (foo) { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code: `while (foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `while (foo) { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code: `for (;foo;) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `for (;foo;) { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code: `switch(foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `switch (foo) { /* empty */ }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `try {} catch (ex) {}`,
			Options: "[{\"allowEmptyCatch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { /* empty */ } catch (ex) {}`,
						},
					},
				},
			},
		},
		{
			Code:    `try { foo(); } catch (ex) {} finally {}`,
			Options: "[{\"allowEmptyCatch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { foo(); } catch (ex) {} finally { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code:    `try {} catch (ex) {} finally {}`,
			Options: "[{\"allowEmptyCatch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { /* empty */ } catch (ex) {} finally {}`,
						},
					},
				},
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try {} catch (ex) {} finally { /* empty */ }`,
						},
					},
				},
			},
		},
		{
			Code: `try { foo(); } catch (ex) {} finally {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { foo(); } catch (ex) { /* empty */ } finally {}`,
						},
					},
				},
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestComment",
							Output:    `try { foo(); } catch (ex) {} finally { /* empty */ }`,
						},
					},
				},
			},
		},
	})
}
