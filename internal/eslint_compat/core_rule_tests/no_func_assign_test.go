// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoFuncAssignRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-func-assign", []ValidTestCase{
		{Code: `function foo() { var foo = bar; }`},
		{Code: `function foo(foo) { foo = bar; }`},
		{Code: `function foo() { var foo; foo = bar; }`},
		{
			Code:            `var foo = () => {}; foo = bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var foo = function() {}; foo = bar;`},
		{Code: `var foo = function() { foo = bar; };`},
		{
			Code:            `import bar from 'bar'; function foo() { var foo = bar; }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
	}, []InvalidTestCase{
		{
			Code: `function foo() {}; foo = bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code: `function foo() { foo = bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code: `foo = bar; function foo() { };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code:            `[foo] = bar; function foo() { };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code:            `({x: foo = 0} = bar); function foo() { };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code:            `function foo() { [foo] = bar; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code:            `(function() { ({x: foo = 0} = bar); function foo() { }; })();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
		{
			Code: `var a = function foo() { foo = 123; };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "isAFunction",
				},
			},
		},
	})
}
