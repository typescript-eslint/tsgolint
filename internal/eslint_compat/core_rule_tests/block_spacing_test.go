// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestBlockSpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "block-spacing", []ValidTestCase{
		{
			Code:    `{ foo(); }`,
			Options: "[\"always\"]",
		},
		{Code: `{ foo(); }`},
		{Code: `{ foo();
}`},
		{Code: `{
foo(); }`},
		{Code: `{` + "\r" + `
foo();` + "\r" + `
}`},
		{Code: `if (a) { foo(); }`},
		{Code: `if (a) {} else { foo(); }`},
		{Code: `switch (a) {}`},
		{Code: `switch (a) { case 0: foo(); }`},
		{Code: `while (a) { foo(); }`},
		{Code: `do { foo(); } while (a);`},
		{Code: `for (;;) { foo(); }`},
		{Code: `for (var a in b) { foo(); }`},
		{
			Code:            `for (var a of b) { foo(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `try { foo(); } catch (e) { foo(); }`},
		{Code: `function foo() { bar(); }`},
		{Code: `(function() { bar(); });`},
		{
			Code:            `(() => { bar(); });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `if (a) { /* comment */ foo(); /* comment */ }`},
		{Code: `if (a) { //comment
 foo(); }`},
		{
			Code:            `class C { static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { /* comment */foo;/* comment */ } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:    `{foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{foo();
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{` + "\r" + `
foo();` + "\r" + `
}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `if (a) {foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `if (a) {} else {foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `switch (a) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `switch (a) {case 0: foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `while (a) {foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `do {foo();} while (a);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `for (;;) {foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `for (var a in b) {foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:            `for (var a of b) {foo();}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `try {foo();} catch (e) {foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `function foo() {bar();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(function() {bar();});`,
			Options: "[\"never\"]",
		},
		{
			Code:            `(() => {bar();});`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `if (a) {/* comment */ foo(); /* comment */}`,
			Options: "[\"never\"]",
		},
		{
			Code: `if (a) { //comment
 foo();}`,
			Options: "[\"never\"]",
		},
		{
			Code:            `class C { static { } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static {foo;} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static {/* comment */ foo; /* comment */} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { // line comment is allowed
 foo;
} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static {
foo;
} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { 
 foo; 
 } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `{foo();}`,
			Output:  `{ foo(); }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:   `{foo();}`,
			Output: `{ foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:   `{ foo();}`,
			Output: `{ foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `{foo(); }`,
			Output: `{ foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `{
foo();}`,
			Output: `{
foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    7,
				},
			},
		},
		{
			Code: `{foo();
}`,
			Output: `{ foo();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `if (a) {foo();}`,
			Output: `if (a) { foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:   `if (a) {} else {foo();}`,
			Output: `if (a) {} else { foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    16,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:   `switch (a) {case 0: foo();}`,
			Output: `switch (a) { case 0: foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:   `while (a) {foo();}`,
			Output: `while (a) { foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:   `do {foo();} while (a);`,
			Output: `do { foo(); } while (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    4,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:   `for (;;) {foo();}`,
			Output: `for (;;) { foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    10,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:   `for (var a in b) {foo();}`,
			Output: `for (var a in b) { foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:            `for (var a of b) {foo();}`,
			Output:          `for (var a of b) { foo(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:   `try {foo();} catch (e) {foo();} finally {foo();}`,
			Output: `try { foo(); } catch (e) { foo(); } finally { foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    31,
					EndLine:   1,
					EndColumn: 32,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    41,
					EndLine:   1,
					EndColumn: 42,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    48,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
		{
			Code:   `function foo() {bar();}`,
			Output: `function foo() { bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    16,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:   `(function() {bar();});`,
			Output: `(function() { bar(); });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    13,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:            `(() => {bar();});`,
			Output:          `(() => { bar(); });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `if (a) {/* comment */ foo(); /* comment */}`,
			Output:          `if (a) { /* comment */ foo(); /* comment */ }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    43,
				},
			},
		},
		{
			Code: `if (a) {//comment
 foo(); }`,
			Output: `if (a) { //comment
 foo(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `class C { static {foo; } }`,
			Output:          `class C { static { foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code:            `class C { static { foo;} }`,
			Output:          `class C { static { foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:            `class C { static {foo;} }`,
			Output:          `class C { static { foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `class C { static {/* comment */} }`,
			Output:          `class C { static { /* comment */ } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    32,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code:            `class C { static {/* comment 1 */ foo; /* comment 2 */} }`,
			Output:          `class C { static { /* comment 1 */ foo; /* comment 2 */ } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
				{
					MessageId: "missing",
					Line:      1,
					Column:    55,
					EndLine:   1,
					EndColumn: 56,
				},
			},
		},
		{
			Code: `class C {
 static {foo()
bar()} }`,
			Output: `class C {
 static { foo()
bar() } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    9,
					EndLine:   2,
					EndColumn: 10,
				},
				{
					MessageId: "missing",
					Line:      3,
					Column:    6,
					EndLine:   3,
					EndColumn: 7,
				},
			},
		},
		{
			Code:    `{ foo(); }`,
			Output:  `{foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `{ foo();}`,
			Output:  `{foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code:    `{foo(); }`,
			Output:  `{foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `{
foo(); }`,
			Output: `{
foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      2,
					Column:    7,
					EndLine:   2,
					EndColumn: 8,
				},
			},
		},
		{
			Code: `{ foo();
}`,
			Output: `{foo();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code:    `if (a) { foo(); }`,
			Output:  `if (a) {foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `if (a) {} else { foo(); }`,
			Output:  `if (a) {} else {foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:    `switch (a) { case 0: foo(); }`,
			Output:  `switch (a) {case 0: foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    28,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code:    `while (a) { foo(); }`,
			Output:  `while (a) {foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:    `do { foo(); } while (a);`,
			Output:  `do {foo();} while (a);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `for (;;) { foo(); }`,
			Output:  `for (;;) {foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code:    `for (var a in b) { foo(); }`,
			Output:  `for (var a in b) {foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `for (var a of b) { foo(); }`,
			Output:          `for (var a of b) {foo();}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code:    `try { foo(); } catch (e) { foo(); } finally { foo(); }`,
			Output:  `try {foo();} catch (e) {foo();} finally {foo();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    34,
					EndLine:   1,
					EndColumn: 35,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    46,
					EndLine:   1,
					EndColumn: 47,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    53,
					EndLine:   1,
					EndColumn: 54,
				},
			},
		},
		{
			Code:    `function foo() { bar(); }`,
			Output:  `function foo() {bar();}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:    `(function() { bar(); });`,
			Output:  `(function() {bar();});`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `(() => { bar(); });`,
			Output:          `(() => {bar();});`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `if (a) { /* comment */ foo(); /* comment */ }`,
			Output:  `if (a) {/* comment */ foo(); /* comment */}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    44,
					EndLine:   1,
					EndColumn: 45,
				},
			},
		},
		{
			Code:            `(() => {   bar();});`,
			Output:          `(() => {bar();});`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `(() => {bar();   });`,
			Output:          `(() => {bar();});`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `(() => {   bar();   });`,
			Output:          `(() => {bar();});`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:            `class C { static { foo;} }`,
			Output:          `class C { static {foo;} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:            `class C { static {foo; } }`,
			Output:          `class C { static {foo;} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `class C { static { foo; } }`,
			Output:          `class C { static {foo;} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:            `class C { static { /* comment */ } }`,
			Output:          `class C { static {/* comment */} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    33,
					EndLine:   1,
					EndColumn: 34,
				},
			},
		},
		{
			Code:            `class C { static { /* comment 1 */ foo; /* comment 2 */ } }`,
			Output:          `class C { static {/* comment 1 */ foo; /* comment 2 */} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
				{
					MessageId: "extra",
					Line:      1,
					Column:    56,
					EndLine:   1,
					EndColumn: 57,
				},
			},
		},
		{
			Code: `class C { static
{   foo()
bar()  } }`,
			Output: `class C { static
{foo()
bar()} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extra",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 5,
				},
				{
					MessageId: "extra",
					Line:      3,
					Column:    6,
					EndLine:   3,
					EndColumn: 8,
				},
			},
		},
	})
}
