// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestOperatorLinebreakRule(t *testing.T) {
	RunRuleTester(t, "{}", "operator-linebreak", []ValidTestCase{
		{Code: `1 + 1`},
		{Code: `1 + 1 + 1`},
		{Code: `1 +
1`},
		{Code: `1 + (1 +
1)`},
		{Code: `f(1 +
1)`},
		{Code: `1 || 1`},
		{Code: `1 || 
1`},
		{Code: `a += 1`},
		{Code: `var a;`},
		{Code: `var o = 
something`},
		{Code: `o = 
something`},
		{Code: `'a\
' +
 'c'`},
		{Code: `'a' +
 'b\
'`},
		{Code: `(a
) + b`},
		{Code: `answer = everything 
?  42 
:  foo;`},
		{
			Code: `answer = everything ?
  42 :
  foo;`,
			Options: "[\"after\"]",
		},
		{
			Code: `a ? 1 + 1
:2`,
			Options: "[null,{\"overrides\":{\"?\":\"after\"}}]",
		},
		{
			Code: `a ?
1 +
 1
:2`,
			Options: "[null,{\"overrides\":{\"?\":\"after\"}}]",
		},
		{
			Code: `o = 1 
+ 1 - foo`,
			Options: "[null,{\"overrides\":{\"+\":\"before\"}}]",
		},
		{
			Code: `1
+ 1`,
			Options: "[\"before\"]",
		},
		{
			Code: `1 + 1
+ 1`,
			Options: "[\"before\"]",
		},
		{
			Code: `f(1
+ 1)`,
			Options: "[\"before\"]",
		},
		{
			Code: `1 
|| 1`,
			Options: "[\"before\"]",
		},
		{
			Code:    `a += 1`,
			Options: "[\"before\"]",
		},
		{
			Code: `answer = everything 
?  42 
:  foo;`,
			Options: "[\"before\"]",
		},
		{
			Code:    `1 + 1`,
			Options: "[\"none\"]",
		},
		{
			Code:    `1 + 1 + 1`,
			Options: "[\"none\"]",
		},
		{
			Code:    `1 || 1`,
			Options: "[\"none\"]",
		},
		{
			Code:    `a += 1`,
			Options: "[\"none\"]",
		},
		{
			Code:    `var a;`,
			Options: "[\"none\"]",
		},
		{
			Code: `
1 + 1`,
			Options: "[\"none\"]",
		},
		{
			Code: `1 + 1
`,
			Options: "[\"none\"]",
		},
		{
			Code:    `answer = everything ? 42 : foo;`,
			Options: "[\"none\"]",
		},
		{
			Code: `(a
) + (
b)`,
			Options: "[\"none\"]",
		},
		{
			Code: `answer = everything 
?
 42 : foo;`,
			Options: "[null,{\"overrides\":{\"?\":\"ignore\"}}]",
		},
		{
			Code: `answer = everything ? 42 
:
 foo;`,
			Options: "[null,{\"overrides\":{\":\":\"ignore\"}}]",
		},
		{
			Code: `a 
 &&= b`,
			Options:         "[\"after\",{\"overrides\":{\"&&=\":\"ignore\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a ??= 
 b`,
			Options:         "[\"before\",{\"overrides\":{\"??=\":\"ignore\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a ||= 
 b`,
			Options:         "[\"after\",{\"overrides\":{\"=\":\"before\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a 
 &&= b`,
			Options:         "[\"before\",{\"overrides\":{\"&=\":\"after\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a 
 ||= b`,
			Options:         "[\"before\",{\"overrides\":{\"|=\":\"after\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a &&= 
 b`,
			Options:         "[\"after\",{\"overrides\":{\"&&\":\"before\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a ||= 
 b`,
			Options:         "[\"after\",{\"overrides\":{\"||\":\"before\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `a ??= 
 b`,
			Options:         "[\"after\",{\"overrides\":{\"??\":\"before\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code: `class C { foo =
0 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
= 0 }`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo
]= 0 }`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo]
= 0 }`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo
]
= 0 }`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo
]= 0 }`,
			Options:         "[\"after\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo
]=
0 }`,
			Options:         "[\"after\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo
]= 0 }`,
			Options:         "[\"none\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
=
0 }`,
			Options:         "[\"none\",{\"overrides\":{\"=\":\"ignore\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `1
+ 1`,
			Output: `1 +
1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `1 + 2 
 + 3`,
			Output: `1 + 2 + 
 3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `1
+
1`,
			Output: `1+
1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `1 + (1
+ 1)`,
			Output: `1 + (1 +
1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `f(1
+ 1);`,
			Output: `f(1 +
1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `1 
 || 1`,
			Output: `1 || 
 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `a
 += 1`,
			Output: `a +=
 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `var a
 = 1`,
			Output: `var a =
 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `(b)
*
(c)`,
			Output: `(b)*
(c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `answer = everything ?
  42 :
  foo;`,
			Output: `answer = everything
  ? 42
  : foo;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
				{
					MessageId: "operatorAtBeginning",
					Line:      2,
					Column:    6,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `answer = everything 
?  42 
:  foo;`,
			Output: `answer = everything  ? 
42  : 
foo;`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "operatorAtEnd",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `1 +
1`,
			Output: `1
+ 1`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `f(1 +
1);`,
			Output: `f(1
+ 1);`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `1 || 
 1`,
			Output: `1 
 || 1`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `a += 
1`,
			Output: `a 
+= 1`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `var a = 
1`,
			Output: `var a 
= 1`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code: `answer = everything ?
  42 :
  foo;`,
			Output: `answer = everything
  ? 42
  : foo;`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
				{
					MessageId: "operatorAtBeginning",
					Line:      2,
					Column:    6,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `1 +
1`,
			Output:  `1 +1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `1
+1`,
			Output:  `1+1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `f(1 +
1);`,
			Output:  `f(1 +1);`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `f(1
+ 1);`,
			Output:  `f(1+ 1);`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `1 || 
 1`,
			Output:  `1 ||  1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `1 
 || 1`,
			Output:  `1  || 1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `a += 
1`,
			Output:  `a += 1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `a 
+= 1`,
			Output:  `a += 1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var a = 
1`,
			Output:  `var a = 1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code: `var a 
 = 1`,
			Output:  `var a  = 1`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `answer = everything ?
  42 
:  foo;`,
			Output:  `answer = everything ?  42 :  foo;`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
				{
					MessageId: "noLinebreak",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `answer = everything
?
42 + 43
:
foo;`,
			Output:  `answer = everything?42 + 43:foo;`,
			Options: "[\"none\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "badLinebreak",
					Line:      4,
					Column:    1,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a = b 
  >>> 
 c;`,
			Output: `a = b   >>> 
 c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `foo +=
42;
bar -=
12
+ 5;`,
			Output: `foo +=42;
bar -=
12
+ 5;`,
			Options: "[\"after\",{\"overrides\":{\"+=\":\"none\",\"+\":\"before\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `answer = everything
?
42
:
foo;`,
			Output: `answer = everything
?
42
:foo;`,
			Options: "[\"after\",{\"overrides\":{\"?\":\"ignore\",\":\":\"before\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      4,
					Column:    1,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `foo+
+bar`,
			Output: `foo
+ +bar`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `foo //comment
&& bar`,
			Output: `foo && //comment
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `foo//comment
+
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `foo
+//comment
bar`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "badLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `foo /* a */ 
+ /* b */ bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `foo /* a */ +
 /* b */ bar`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `foo ??
 bar`,
			Output: `foo
 ?? bar`,
			Options:         "[\"after\",{\"overrides\":{\"??\":\"before\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
				},
			},
		},
		{
			Code: `a 
  &&= b`,
			Output: `a &&= 
  b`,
			Options:         "[\"after\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `a ||=
 b`,
			Output: `a
 ||= b`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `a  ??=
 b`,
			Output:          `a  ??= b`,
			Options:         "[\"none\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `a 
  &&= b`,
			Output:          `a   &&= b`,
			Options:         "[\"before\",{\"overrides\":{\"&&=\":\"none\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `a ||=
b`,
			Output: `a
||= b`,
			Options:         "[\"after\",{\"overrides\":{\"||=\":\"before\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `a
??=b`,
			Output: `a??=
b`,
			Options:         "[\"none\",{\"overrides\":{\"??=\":\"after\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `class C { a
= 0; }`,
			Output: `class C { a =
0; }`,
			Options:         "[\"after\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `class C { a =
0; }`,
			Output: `class C { a
= 0; }`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `class C { a =
0; }`,
			Output:          `class C { a =0; }`,
			Options:         "[\"none\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `class C { [a]
= 0; }`,
			Output: `class C { [a] =
0; }`,
			Options:         "[\"after\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtEnd",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `class C { [a] =
0; }`,
			Output: `class C { [a]
= 0; }`,
			Options:         "[\"before\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operatorAtBeginning",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `class C { [a]
 =0; }`,
			Output:          `class C { [a] =0; }`,
			Options:         "[\"none\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
	})
}
