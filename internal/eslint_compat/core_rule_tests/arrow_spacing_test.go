// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrowSpacingRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "arrow-spacing", []ValidTestCase{
		{
			Code:    `a => a`,
			Options: "[{\"after\":true,\"before\":true}]",
		},
		{
			Code:    `() => {}`,
			Options: "[{\"after\":true,\"before\":true}]",
		},
		{
			Code:    `(a) => {}`,
			Options: "[{\"after\":true,\"before\":true}]",
		},
		{
			Code:    `a=> a`,
			Options: "[{\"after\":true,\"before\":false}]",
		},
		{
			Code:    `()=> {}`,
			Options: "[{\"after\":true,\"before\":false}]",
		},
		{
			Code:    `(a)=> {}`,
			Options: "[{\"after\":true,\"before\":false}]",
		},
		{
			Code:    `a =>a`,
			Options: "[{\"after\":false,\"before\":true}]",
		},
		{
			Code:    `() =>{}`,
			Options: "[{\"after\":false,\"before\":true}]",
		},
		{
			Code:    `(a) =>{}`,
			Options: "[{\"after\":false,\"before\":true}]",
		},
		{
			Code:    `a=>a`,
			Options: "[{\"after\":false,\"before\":false}]",
		},
		{
			Code:    `()=>{}`,
			Options: "[{\"after\":false,\"before\":false}]",
		},
		{
			Code:    `(a)=>{}`,
			Options: "[{\"after\":false,\"before\":false}]",
		},
		{
			Code:    `a => a`,
			Options: "[{}]",
		},
		{
			Code:    `() => {}`,
			Options: "[{}]",
		},
		{
			Code:    `(a) => {}`,
			Options: "[{}]",
		},
		{Code: `(a) =>
{}`},
		{Code: `(a) =>` + "\r" + `
{}`},
		{Code: `(a) =>
    0`},
	}, []InvalidTestCase{
		{
			Code:    `a=>a`,
			Output:  `a => a`,
			Options: "[{\"after\":true,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    4,
				},
			},
		},
		{
			Code:    `()=>{}`,
			Output:  `() => {}`,
			Options: "[{\"after\":true,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `(a)=>{}`,
			Output:  `(a) => {}`,
			Options: "[{\"after\":true,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `a=> a`,
			Output:  `a =>a`,
			Options: "[{\"after\":false,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `()=> {}`,
			Output:  `() =>{}`,
			Options: "[{\"after\":false,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `(a)=> {}`,
			Output:  `(a) =>{}`,
			Options: "[{\"after\":false,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:    `a=>  a`,
			Output:  `a =>a`,
			Options: "[{\"after\":false,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `()=>  {}`,
			Output:  `() =>{}`,
			Options: "[{\"after\":false,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:    `(a)=>  {}`,
			Output:  `(a) =>{}`,
			Options: "[{\"after\":false,\"before\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `a =>a`,
			Output:  `a=> a`,
			Options: "[{\"after\":true,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `() =>{}`,
			Output:  `()=> {}`,
			Options: "[{\"after\":true,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `(a) =>{}`,
			Output:  `(a)=> {}`,
			Options: "[{\"after\":true,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:    `a  =>a`,
			Output:  `a=> a`,
			Options: "[{\"after\":true,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `()  =>{}`,
			Output:  `()=> {}`,
			Options: "[{\"after\":true,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:    `(a)  =>{}`,
			Output:  `(a)=> {}`,
			Options: "[{\"after\":true,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `a => a`,
			Output:  `a=>a`,
			Options: "[{\"after\":false,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `() => {}`,
			Output:  `()=>{}`,
			Options: "[{\"after\":false,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:    `(a) => {}`,
			Output:  `(a)=>{}`,
			Options: "[{\"after\":false,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `a  =>  a`,
			Output:  `a=>a`,
			Options: "[{\"after\":false,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `()  =>  {}`,
			Output:  `()=>{}`,
			Options: "[{\"after\":false,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:    `(a)  =>  {}`,
			Output:  `(a)=>{}`,
			Options: "[{\"after\":false,\"before\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `(a)  =>
{}`,
			Output:  `(a)  =>{}`,
			Options: "[{\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:   `(a = ()=>0)=>1`,
			Output: `(a = () => 0) => 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    7,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    10,
				},
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:   `(a = ()=>0)=>(1)`,
			Output: `(a = () => 0) => (1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    7,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    10,
				},
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    14,
				},
			},
		},
	})
}
