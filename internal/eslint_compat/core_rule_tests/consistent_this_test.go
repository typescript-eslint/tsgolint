// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestConsistentThisRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "consistent-this", []ValidTestCase{
		{Code: `var foo = 42, that = this`},
		{
			Code:    `var foo = 42, self = this`,
			Options: "[\"self\"]",
		},
		{
			Code:    `var self = 42`,
			Options: "[\"that\"]",
		},
		{
			Code:    `var self`,
			Options: "[\"that\"]",
		},
		{
			Code:    `var self; self = this`,
			Options: "[\"self\"]",
		},
		{
			Code:    `var foo, self; self = this`,
			Options: "[\"self\"]",
		},
		{
			Code:    `var foo, self; foo = 42; self = this`,
			Options: "[\"self\"]",
		},
		{
			Code:    `self = 42`,
			Options: "[\"that\"]",
		},
		{
			Code:    `var foo = {}; foo.bar = this`,
			Options: "[\"self\"]",
		},
		{
			Code:    `var self = this; var vm = this;`,
			Options: "[\"self\",\"vm\"]",
		},
		{
			Code:            `var {foo, bar} = this`,
			Options:         "[\"self\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({foo, bar} = this)`,
			Options:         "[\"self\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [foo, bar] = this`,
			Options:         "[\"self\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[foo, bar] = this`,
			Options:         "[\"self\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `var context = this`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAlias",
				},
			},
		},
		{
			Code:    `var that = this`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAlias",
				},
			},
		},
		{
			Code:    `var foo = 42, self = this`,
			Options: "[\"that\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAlias",
				},
			},
		},
		{
			Code:    `var self = 42`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "aliasNotAssignedToThis",
				},
			},
		},
		{
			Code:    `var self`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "aliasNotAssignedToThis",
				},
			},
		},
		{
			Code:    `var self; self = 42`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "aliasNotAssignedToThis",
				},
				{
					MessageId: "aliasNotAssignedToThis",
				},
			},
		},
		{
			Code:    `context = this`,
			Options: "[\"that\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAlias",
				},
			},
		},
		{
			Code:    `that = this`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAlias",
				},
			},
		},
		{
			Code:    `self = this`,
			Options: "[\"that\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAlias",
				},
			},
		},
		{
			Code:    `self += this`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "aliasNotAssignedToThis",
				},
			},
		},
		{
			Code:    `var self; (function() { self = this; }())`,
			Options: "[\"self\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "aliasNotAssignedToThis",
				},
			},
		},
		{
			Code:            `var self; (function() { self = this; }())`,
			Options:         "[\"self\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "aliasNotAssignedToThis",
				},
			},
		},
	})
}
