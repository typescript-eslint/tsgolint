// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoEmptyPatternRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-empty-pattern", []ValidTestCase{
		{
			Code:            `var {a = {}} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a, b = {}} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a = []} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({a = {}}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({a = []}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({}) {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = function({}) {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = ({}) => {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({} = {}) {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = function({} = {}) {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = ({} = {}) => {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code:            `var {} = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var [] = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var {a: {}} = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var {a, b: {}} = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var {a: []} = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo({}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo([]) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo({a: {}}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo({a: []}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo({}) {}`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = function({}) {}`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ({}) => {}`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo({} = {}) {}`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = function({} = {}) {}`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ({} = {}) => {}`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ({a: {}}) => {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ({} = bar) => {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ({} = { bar: 1 }) => {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ([]) => {}`,
			Options:         "[{\"allowObjectPatternsAsParameters\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
