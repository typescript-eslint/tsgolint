// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoParamReassignRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-param-reassign", []ValidTestCase{
		{Code: `function foo(a) { var b = a; }`},
		{Code: `function foo(a) { for (b in a); }`},
		{
			Code:            `function foo(a) { for (b of a); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function foo(a) { a.prop = 'value'; }`},
		{Code: `function foo(a) { for (a.prop in obj); }`},
		{
			Code:            `function foo(a) { for (a.prop of arr); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function foo(a) { (function() { var a = 12; a++; })(); }`},
		{Code: `function foo() { someGlobal = 13; }`},
		{
			Code:            `function foo() { someGlobal = 13; }`,
			LanguageOptions: "{\"globals\":{\"someGlobal\":false}}",
		},
		{Code: `function foo(a) { a.b = 0; }`},
		{Code: `function foo(a) { delete a.b; }`},
		{Code: `function foo(a) { ++a.b; }`},
		{
			Code:            `function foo(a) { [a.b] = []; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function foo(a) { bar(a.b).c = 0; }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:    `function foo(a) { data[a.b] = 0; }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:    `function foo(a) { +a.b; }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:    `function foo(a) { (a ? [] : [])[0] = 1; }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:    `function foo(a) { (a.b ? [] : [])[0] = 1; }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:    `function foo(a) { a.b = 0; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
		},
		{
			Code:    `function foo(a) { ++a.b; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
		},
		{
			Code:    `function foo(a) { delete a.b; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
		},
		{
			Code:    `function foo(a) { for (a.b in obj); }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
		},
		{
			Code:            `function foo(a) { for (a.b of arr); }`,
			Options:         "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function foo(a, z) { a.b = 0; x.y = 0; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\",\"x\"]}]",
		},
		{
			Code:    `function foo(a) { a.b.c = 0;}`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
		},
		{
			Code:    `function foo(aFoo) { aFoo.b = 0; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^a.*$\"]}]",
		},
		{
			Code:    `function foo(aFoo) { ++aFoo.b; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^a.*$\"]}]",
		},
		{
			Code:    `function foo(aFoo) { delete aFoo.b; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^a.*$\"]}]",
		},
		{
			Code:    `function foo(a, z) { aFoo.b = 0; x.y = 0; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^a.*$\",\"^x.*$\"]}]",
		},
		{
			Code:    `function foo(aFoo) { aFoo.b.c = 0;}`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^a.*$\"]}]",
		},
		{
			Code:            `function foo(a) { ({ [a]: variable } = value) }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo(a) { ([...a.b] = obj); }`,
			Options:         "[{\"props\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `function foo(a) { ({...a.b} = obj); }`,
			Options:         "[{\"props\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:    `function foo(a) { for (obj[a.b] in obj); }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:            `function foo(a) { for (obj[a.b] of arr); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function foo(a) { for (bar in a.b); }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:            `function foo(a) { for (bar of a.b); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function foo(a) { for (bar in baz) a.b; }`,
			Options: "[{\"props\":true}]",
		},
		{
			Code:            `function foo(a) { for (bar of baz) a.b; }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function foo(bar, baz) { bar.a = true; baz.b = false; }`,
			Options: "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^(foo|bar)$\"],\"ignorePropertyModificationsFor\":[\"baz\"]}]",
		},
	}, []InvalidTestCase{
		{
			Code: `function foo(bar) { bar = 13; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { bar += 13; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { (function() { bar = 13; })(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { ++bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { bar++; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { --bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { bar--; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo({bar}) { bar = 13; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo([, {bar}]) { bar = 13; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(bar) { ({bar} = {}); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(bar) { ({x: [, bar = 0]} = {}); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code: `function foo(bar) { for (bar in baz); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(bar) { for (bar of baz); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:    `function foo(bar) { bar.a = 0; }`,
			Options: "[{\"props\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:    `function foo(bar) { bar.get(0).a = 0; }`,
			Options: "[{\"props\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:    `function foo(bar) { delete bar.a; }`,
			Options: "[{\"props\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:    `function foo(bar) { ++bar.a; }`,
			Options: "[{\"props\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:    `function foo(bar) { for (bar.a in {}); }`,
			Options: "[{\"props\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(bar) { for (bar.a of []); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:    `function foo(bar) { (bar ? bar : [])[0] = 1; }`,
			Options: "[{\"props\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(bar) { [bar.a] = []; }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(bar) { [bar.a] = []; }`,
			Options:         "[{\"props\":true,\"ignorePropertyModificationsFor\":[\"a\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(bar) { [bar.a] = []; }`,
			Options:         "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^a.*$\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(bar) { [bar.a] = []; }`,
			Options:         "[{\"props\":true,\"ignorePropertyModificationsForRegex\":[\"^B.*$\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(bar) { ({foo: bar.a} = {}); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { ({a} = obj); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(a) { ([...a] = obj); }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(a) { ({...a} = obj); }`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(a) { ([...a.b] = obj); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { ({...a.b} = obj); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { for ({bar: a.b} in {}); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { for ([a.b] of []); }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { a &&= b; }`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(a) { a ||= b; }`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(a) { a ??= b; }`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParam",
				},
			},
		},
		{
			Code:            `function foo(a) { a.b &&= c; }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { a.b.c ||= d; }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
		{
			Code:            `function foo(a) { a[b] ??= c; }`,
			Options:         "[{\"props\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignmentToFunctionParamProp",
				},
			},
		},
	})
}
