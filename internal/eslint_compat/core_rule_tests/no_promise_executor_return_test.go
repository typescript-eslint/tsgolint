// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoPromiseExecutorReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2015}}", "no-promise-executor-return", []ValidTestCase{
		{Code: `function foo(resolve, reject) { return 1; }`},
		{Code: `function Promise(resolve, reject) { return 1; }`},
		{Code: `(function (resolve, reject) { return 1; })`},
		{Code: `(function foo(resolve, reject) { return 1; })`},
		{Code: `(function Promise(resolve, reject) { return 1; })`},
		{Code: `var foo = function (resolve, reject) { return 1; }`},
		{Code: `var foo = function Promise(resolve, reject) { return 1; }`},
		{Code: `var Promise = function (resolve, reject) { return 1; }`},
		{Code: `(resolve, reject) => { return 1; }`},
		{Code: `(resolve, reject) => 1`},
		{Code: `var foo = (resolve, reject) => { return 1; }`},
		{Code: `var Promise = (resolve, reject) => { return 1; }`},
		{Code: `var foo = (resolve, reject) => 1`},
		{Code: `var Promise = (resolve, reject) => 1`},
		{Code: `var foo = { bar(resolve, reject) { return 1; } }`},
		{Code: `var foo = { Promise(resolve, reject) { return 1; } }`},
		{Code: `new foo(function (resolve, reject) { return 1; });`},
		{Code: `new foo(function bar(resolve, reject) { return 1; });`},
		{Code: `new foo(function Promise(resolve, reject) { return 1; });`},
		{Code: `new foo((resolve, reject) => { return 1; });`},
		{Code: `new foo((resolve, reject) => 1);`},
		{Code: `new promise(function foo(resolve, reject) { return 1; });`},
		{Code: `new Promise.foo(function foo(resolve, reject) { return 1; });`},
		{Code: `new foo.Promise(function foo(resolve, reject) { return 1; });`},
		{Code: `new Promise.Promise(function foo(resolve, reject) { return 1; });`},
		{Code: `new Promise()(function foo(resolve, reject) { return 1; });`},
		{Code: `Promise(function (resolve, reject) { return 1; });`},
		{Code: `Promise((resolve, reject) => { return 1; });`},
		{Code: `Promise((resolve, reject) => 1);`},
		{Code: `new Promise(foo, function (resolve, reject) { return 1; });`},
		{Code: `new Promise(foo, (resolve, reject) => { return 1; });`},
		{Code: `new Promise(foo, (resolve, reject) => 1);`},
		{Code: `/* globals Promise:off */ new Promise(function (resolve, reject) { return 1; });`},
		{
			Code:            `new Promise((resolve, reject) => { return 1; });`,
			LanguageOptions: "{\"globals\":{\"Promise\":\"off\"}}",
		},
		{Code: `let Promise; new Promise(function (resolve, reject) { return 1; });`},
		{Code: `function f() { new Promise((resolve, reject) => { return 1; }); var Promise; }`},
		{Code: `function f(Promise) { new Promise((resolve, reject) => 1); }`},
		{Code: `if (x) { const Promise = foo(); new Promise(function (resolve, reject) { return 1; }); }`},
		{Code: `x = function Promise() { new Promise((resolve, reject) => { return 1; }); }`},
		{Code: `new Promise(function (resolve, reject) { return; });`},
		{Code: `new Promise(function (resolve, reject) { reject(new Error()); return; });`},
		{Code: `new Promise(function (resolve, reject) { if (foo) { return; } });`},
		{Code: `new Promise((resolve, reject) => { return; });`},
		{Code: `new Promise((resolve, reject) => { if (foo) { resolve(1); return; } reject(new Error()); });`},
		{Code: `new Promise(function (resolve, reject) { throw new Error(); });`},
		{Code: `new Promise((resolve, reject) => { throw new Error(); });`},
		{Code: `new Promise(function (resolve, reject) { function foo() { return 1; } });`},
		{Code: `new Promise((resolve, reject) => { (function foo() { return 1; })(); });`},
		{Code: `new Promise(function (resolve, reject) { () => { return 1; } });`},
		{Code: `new Promise((resolve, reject) => { () => 1 });`},
		{Code: `function foo() { return new Promise(function (resolve, reject) { resolve(bar); }) };`},
		{Code: `foo => new Promise((resolve, reject) => { bar(foo, (err, data) => { if (err) { reject(err); return; } resolve(data); })});`},
		{Code: `new Promise(function (resolve, reject) {}); function foo() { return 1; }`},
		{Code: `new Promise((resolve, reject) => {}); (function () { return 1; });`},
		{Code: `new Promise(function (resolve, reject) {}); () => { return 1; };`},
		{Code: `new Promise((resolve, reject) => {}); () => 1;`},
		{
			Code:            `return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `return 1;`,
			LanguageOptions: "{\"sourceType\":\"script\",\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code:            `return 1; function foo(){ return 1; } return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `function foo(){} return 1; var bar = function*(){ return 1; }; return 1; var baz = () => {}; return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `new Promise(function (resolve, reject) {}); return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:    `new Promise((r) => void cbf(r));`,
			Options: "[{\"allowVoid\":true}]",
		},
		{
			Code:    `new Promise(r => void 0)`,
			Options: "[{\"allowVoid\":true}]",
		},
		{
			Code:    `new Promise(r => { return void 0 })`,
			Options: "[{\"allowVoid\":true}]",
		},
		{
			Code:    `new Promise(r => { if (foo) { return void 0 } return void 0 })`,
			Options: "[{\"allowVoid\":true}]",
		},
		{Code: `new Promise(r => {0})`},
	}, []InvalidTestCase{
		{
			Code: `new Promise(function (resolve, reject) { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Return values from promise executor functions cannot be read.",
					Column:             42,
					EndColumn:          51,
				},
			},
		},
		{
			Code:    `new Promise((resolve, reject) => resolve(1))`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Return values from promise executor functions cannot be read.",
					Column:             34,
					EndColumn:          44,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise((resolve, reject) => void resolve(1))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise((resolve, reject) => {resolve(1)})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise((resolve, reject) => { return 1 })`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Return values from promise executor functions cannot be read.",
					Column:             36,
					EndColumn:          44,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise((resolve, reject) => { return void 1 })`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => 1)`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void 1)`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {1})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => 1 ? 2 : 3)`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void (1 ? 2 : 3))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {1 ? 2 : 3})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => (1 ? 2 : 3))`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void (1 ? 2 : 3))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {(1 ? 2 : 3)})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => (1))`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void (1))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {(1)})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => () => {})`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void (() => {}))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {() => {}})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => null)`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void null)`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {null})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => null)`,
			Options: "[{\"allowVoid\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {null})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => /*hi*/ ~0)`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => /*hi*/ void ~0)`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => /*hi*/ {~0})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => /*hi*/ ~0)`,
			Options: "[{\"allowVoid\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => /*hi*/ {~0})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => { return 0 })`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => { return void 0 })`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => { return 0 })`,
			Options: "[{\"allowVoid\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code:    `new Promise(r => { if (foo) { return void 0 } return 0 })`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => { if (foo) { return void 0 } return void 0 })`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(resolve => { return (foo = resolve(1)); })`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(resolve => { return void (foo = resolve(1)); })`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(resolve => r = resolve)`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(resolve => void (r = resolve))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(resolve => {r = resolve})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => { return(1) })`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => { return void (1) })`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r =>1)`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r =>void 1)`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r =>{1})`,
						},
					},
				},
			},
		},
		{
			Code:    `new Promise(r => ((1)))`,
			Options: "[{\"allowVoid\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `new Promise(r => void ((1)))`,
						},
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(r => {((1))})`,
						},
					},
				},
			},
		},
		{
			Code: `new Promise(function foo(resolve, reject) { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(function (resolve, reject) { return undefined; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => { return null; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(function (resolve, reject) { return false; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => resolve)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    34,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise((resolve, reject) => {resolve})`,
						},
					},
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => null)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    34,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise((resolve, reject) => {null})`,
						},
					},
				},
			},
		},
		{
			Code: `new Promise(function (resolve, reject) { return resolve(foo); })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => { return reject(foo); })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => x + y)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    34,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise((resolve, reject) => {x + y})`,
						},
					},
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => { return Promise.resolve(42); })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(function (resolve, reject) { if (foo) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => { try { return 1; } catch(e) {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(function (resolve, reject) { while (foo){ if (bar) break; else return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(() => { return void 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(() => (1))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    20,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(() => {(1)})`,
						},
					},
				},
			},
		},
		{
			Code: `() => new Promise(() => ({}));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `() => new Promise(() => {({})});`,
						},
					},
				},
			},
		},
		{
			Code: `new Promise(function () { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(() => { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(() => 1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    19,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `new Promise(() => {1})`,
						},
					},
				},
			},
		},
		{
			Code: `function foo() {} new Promise(function () { return 1; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    45,
				},
			},
		},
		{
			Code: `function foo() { return; } new Promise(() => { return 1; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    48,
				},
			},
		},
		{
			Code: `function foo() { return 1; } new Promise(() => { return 2; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    50,
				},
			},
		},
		{
			Code: `function foo () { return new Promise(function () { return 1; }); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    52,
				},
			},
		},
		{
			Code: `function foo() { return new Promise(() => { bar(() => { return 1; }); return false; }); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    71,
				},
			},
		},
		{
			Code: `() => new Promise(() => { if (foo) { return 0; } else bar(() => { return 1; }); })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    38,
				},
			},
		},
		{
			Code: `function foo () { return 1; return new Promise(function () { return 2; }); return 3;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    62,
				},
			},
		},
		{
			Code: `() => 1; new Promise(() => { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    30,
				},
			},
		},
		{
			Code: `new Promise(function () { return 1; }); function foo() { return 1; } `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    27,
				},
			},
		},
		{
			Code: `() => new Promise(() => { return 1; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    27,
				},
			},
		},
		{
			Code: `() => new Promise(() => 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `() => new Promise(() => {1});`,
						},
					},
				},
			},
		},
		{
			Code: `() => new Promise(() => () => 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `() => new Promise(() => {() => 1});`,
						},
					},
				},
			},
		},
		{
			Code:            `() => new Promise(() => async () => 1);`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `() => new Promise(() => {async () => 1});`,
						},
					},
				},
			},
		},
		{
			Code: `() => new Promise(() => function () {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "returnsValue",
					Column:      25,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `() => new Promise(() => function foo() {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `() => new Promise(() => {function foo() {}});`,
						},
					},
				},
			},
		},
		{
			Code: `() => new Promise(() => []);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `() => new Promise(() => {[]});`,
						},
					},
				},
			},
		},
		{
			Code: `new Promise((Promise) => { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `new Promise(function Promise(resolve, reject) { return 1; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
	})
}
