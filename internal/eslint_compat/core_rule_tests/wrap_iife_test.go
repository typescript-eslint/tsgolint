// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestWrapIifeRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "wrap-iife", []ValidTestCase{
		{
			Code:    `(function(){ }());`,
			Options: "[\"any\"]",
		},
		{
			Code:    `(function(){ })();`,
			Options: "[\"any\"]",
		},
		{
			Code:    `(function a(){ }());`,
			Options: "[\"any\"]",
		},
		{
			Code:    `(function a(){ })();`,
			Options: "[\"any\"]",
		},
		{
			Code:    `(function(){ }())`,
			Options: "[\"any\"]",
		},
		{
			Code:    `(function(){ })()`,
			Options: "[\"any\"]",
		},
		{
			Code:    `(function a(){ }());`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `(function a(){ })();`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `foo.bar();`,
			Options: "[\"any\"]",
		},
		{
			Code:    `var a = function(){return 1;};`,
			Options: "[\"any\"]",
		},
		{
			Code:    `var a = ((function(){return 1;})());`,
			Options: "[\"any\"]",
		},
		{
			Code:    `var a = ((function(){return 1;})());`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `var a = ((function(){return 1;})());`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `if (function (){}()) {}`,
			Options: "[\"any\"]",
		},
		{
			Code:    `while (function (){}()) {}`,
			Options: "[\"any\"]",
		},
		{
			Code:    `do {} while (function (){}())`,
			Options: "[\"any\"]",
		},
		{
			Code:    `switch (function (){}()) {}`,
			Options: "[\"any\"]",
		},
		{
			Code:    `with (function (){}()) {}`,
			Options: "[\"any\"]",
		},
		{
			Code:    `foo(function (){}());`,
			Options: "[\"any\"]",
		},
		{
			Code:    `new foo(function (){}());`,
			Options: "[\"any\"]",
		},
		{
			Code:            `import(function (){}());`,
			Options:         "[\"any\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if ((function (){})()) {}`,
			Options: "[\"any\"]",
		},
		{
			Code:    `while (((function (){})())) {}`,
			Options: "[\"any\"]",
		},
		{
			Code:    `if (function (){}()) {}`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `while (function (){}()) {}`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `do {} while (function (){}())`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `switch (function (){}()) {}`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `with (function (){}()) {}`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `foo(function (){}());`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `new foo(function (){}());`,
			Options: "[\"outside\"]",
		},
		{
			Code:            `import(function (){}());`,
			Options:         "[\"outside\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if ((function (){})()) {}`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `while (((function (){})())) {}`,
			Options: "[\"outside\"]",
		},
		{
			Code:    `if ((function (){})()) {}`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `while ((function (){})()) {}`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `do {} while ((function (){})())`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `switch ((function (){})()) {}`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `with ((function (){})()) {}`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `foo((function (){})());`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `new foo((function (){})());`,
			Options: "[\"inside\"]",
		},
		{
			Code:            `import((function (){})());`,
			Options:         "[\"inside\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `while (((function (){})())) {}`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `window.bar = (function() { return 3; }.call(this, arg1));`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `window.bar = (function() { return 3; }).call(this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `window.bar = (function() { return 3; }.apply(this, arg1));`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `window.bar = (function() { return 3; }).apply(this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `window.bar = function() { return 3; }.call(this, arg1);`,
			Options: "[\"inside\"]",
		},
		{
			Code:    `window.bar = function() { return 3; }.call(this, arg1);`,
			Options: "[\"inside\",{}]",
		},
		{
			Code:    `window.bar = function() { return 3; }.call(this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":false}]",
		},
		{
			Code:    `window.bar = function() { return 3; }[call](this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `window.bar = function() { return 3; }[apply](this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `window.bar = function() { return 3; }[foo](this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `var a = function(){return 1;}.bind(this);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `var a = function(){return 1;}.bind(this).apply(that);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `var a = ((function(){return 1;}).call());`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `var a = ((function(){return 1;}).call());`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `var a = ((function(){return 1;}).call());`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `if (function (){}.call()) {}`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `while (function (){}.call()) {}`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `do {} while (function (){}.call())`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `switch (function (){}.call()) {}`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `with (function (){}.call()) {}`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `foo(function (){}.call())`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `new foo(function (){}.call())`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:            `import(function (){}.call())`,
			Options:         "[\"any\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if ((function (){}).call()) {}`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `while (((function (){}).call())) {}`,
			Options: "[\"any\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `if (function (){}.call()) {}`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `while (function (){}.call()) {}`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `do {} while (function (){}.call())`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `switch (function (){}.call()) {}`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `with (function (){}.call()) {}`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `foo(function (){}.call())`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `new foo(function (){}.call())`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:            `import(function (){}.call())`,
			Options:         "[\"outside\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if ((function (){}).call()) {}`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `while (((function (){}).call())) {}`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `if ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `while ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `do {} while ((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `switch ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `with ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `foo((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:    `new foo((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
		{
			Code:            `import((function (){}).call())`,
			Options:         "[\"inside\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if (((function (){}).call())) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `0, function(){ }();`,
			Output: `0, (function(){ }());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:   `[function(){ }()];`,
			Output: `[(function(){ }())];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:   `var a = function(){ }();`,
			Output: `var a = (function(){ }());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:   `(function(){ }(), 0);`,
			Output: `((function(){ }()), 0);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:    `(function a(){ })();`,
			Output:  `(function a(){ }());`,
			Options: "[\"outside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveInvocation",
				},
			},
		},
		{
			Code:    `(function a(){ }());`,
			Output:  `(function a(){ })();`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `new foo((function (){}()))`,
			Output:  `new foo((function (){})())`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `new (function (){}())`,
			Output:  `new ((function (){})())`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `new (function (){}())()`,
			Output:  `new ((function (){})())()`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `if (function (){}()) {}`,
			Output:  `if ((function (){})()) {}`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `if ((function (){}())) {}`,
			Output:  `if ((function (){})()) {}`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `while (function (){}()) {}`,
			Output:  `while ((function (){})()) {}`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `do {} while (function (){}())`,
			Output:  `do {} while ((function (){})())`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `switch (function (){}()) {}`,
			Output:  `switch ((function (){})()) {}`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `with (function (){}()) {}`,
			Output:  `with ((function (){})()) {}`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `foo(function (){}())`,
			Output:  `foo((function (){})())`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `new foo(function (){}())`,
			Output:  `new foo((function (){})())`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:            `import(function (){}())`,
			Output:          `import((function (){})())`,
			Options:         "[\"inside\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `( /* a */ function /* b */ foo /* c */ ( /* d */ bar /* e */ ) /* f */ { /* g */ return; /* h */ } /* i */ ( /* j */ baz /* k */) /* l */ ) /* m */ ;`,
			Output:  `( /* a */ function /* b */ foo /* c */ ( /* d */ bar /* e */ ) /* f */ { /* g */ return; /* h */ }) /* i */ ( /* j */ baz /* k */) /* l */  /* m */ ;`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `( /* a */ function /* b */ foo /* c */ ( /* d */ bar /* e */ ) /* f */ { /* g */ return; /* h */ } /* i */ ) /* j */ ( /* k */ baz /* l */) /* m */ ;`,
			Output:  `( /* a */ function /* b */ foo /* c */ ( /* d */ bar /* e */ ) /* f */ { /* g */ return; /* h */ } /* i */  /* j */ ( /* k */ baz /* l */)) /* m */ ;`,
			Options: "[\"outside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveInvocation",
				},
			},
		},
		{
			Code:    `+function(){return 1;}()`,
			Output:  `+(function(){return 1;}())`,
			Options: "[\"outside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:    `+function(){return 1;}()`,
			Output:  `+(function(){return 1;})()`,
			Options: "[\"inside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:    `window.bar = function() { return 3; }.call(this, arg1);`,
			Output:  `window.bar = (function() { return 3; }).call(this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:    `window.bar = function() { return 3; }['call'](this, arg1);`,
			Output:  `window.bar = (function() { return 3; })['call'](this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:    `window.bar = function() { return 3; }.call(this, arg1);`,
			Output:  `window.bar = (function() { return 3; }.call(this, arg1));`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:    `window.bar = (function() { return 3; }.call(this, arg1));`,
			Output:  `window.bar = (function() { return 3; }).call(this, arg1);`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `window.bar = (function() { return 3; }).call(this, arg1);`,
			Output:  `window.bar = (function() { return 3; }.call(this, arg1));`,
			Options: "[\"outside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveInvocation",
				},
			},
		},
		{
			Code:    `new (function (){}.call())`,
			Output:  `new ((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `new (function (){}.call())()`,
			Output:  `new ((function (){}).call())()`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `if (function (){}.call()) {}`,
			Output:  `if ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `if ((function (){}.call())) {}`,
			Output:  `if ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `while (function (){}.call()) {}`,
			Output:  `while ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `do {} while (function (){}.call())`,
			Output:  `do {} while ((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `switch (function (){}.call()) {}`,
			Output:  `switch ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `with (function (){}.call()) {}`,
			Output:  `with ((function (){}).call()) {}`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `foo(function (){}.call())`,
			Output:  `foo((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:    `new foo(function (){}.call())`,
			Output:  `new foo((function (){}).call())`,
			Options: "[\"inside\",{\"functionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:            `import(function (){}.call())`,
			Output:          `import((function (){}).call())`,
			Options:         "[\"inside\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
		{
			Code:            `window.bar = function() { return 3; }.call?.(this, arg1);`,
			Output:          `window.bar = (function() { return 3; }).call?.(this, arg1);`,
			Options:         "[\"inside\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:            `window.bar = function() { return 3; }?.call(this, arg1);`,
			Output:          `window.bar = (function() { return 3; })?.call(this, arg1);`,
			Options:         "[\"inside\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:            `window.bar = (function() { return 3; }?.call)(this, arg1);`,
			Output:          `window.bar = ((function() { return 3; })?.call)(this, arg1);`,
			Options:         "[\"inside\",{\"functionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapInvocation",
				},
			},
		},
		{
			Code:            `new (function () {} ?.());`,
			Output:          `new ((function () {}) ?.());`,
			Options:         "[\"inside\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrapExpression",
				},
			},
		},
	})
}
