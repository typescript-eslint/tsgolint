// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoExtraParensRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"sourceType\":\"script\",\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}}", "no-extra-parens", []ValidTestCase{
		{Code: `foo`},
		{Code: `a = b, c = d`},
		{Code: `a = b ? c : d`},
		{Code: `a = (b, c)`},
		{Code: `a || b ? c = d : e = f`},
		{Code: `(a = b) ? (c, d) : (e, f)`},
		{Code: `a && b || c && d`},
		{Code: `(a ? b : c) || (d ? e : f)`},
		{Code: `a | b && c | d`},
		{Code: `(a || b) && (c || d)`},
		{Code: `a ^ b | c ^ d`},
		{Code: `(a && b) | (c && d)`},
		{Code: `a & b ^ c & d`},
		{Code: `(a | b) ^ (c | d)`},
		{Code: `a == b & c != d`},
		{Code: `(a ^ b) & (c ^ d)`},
		{Code: `a < b === c in d`},
		{Code: `(a & b) !== (c & d)`},
		{Code: `a << b >= c >>> d`},
		{Code: `(a == b) instanceof (c != d)`},
		{Code: `a + b << c - d`},
		{Code: `(a <= b) >> (c > d)`},
		{Code: `a * b + c / d`},
		{Code: `(a << b) - (c >> d)`},
		{Code: `+a % !b`},
		{Code: `(a + b) * (c - d)`},
		{Code: `-void+delete~typeof!a`},
		{Code: `!(a * b); typeof (a / b); +(a % b); delete (a * b); ~(a / b); void (a % b); -(a * b)`},
		{Code: `a(b = c, (d, e))`},
		{Code: `(++a)(b); (c++)(d);`},
		{Code: `new (A())`},
		{Code: `new (foo.Baz().foo)`},
		{Code: `new (foo.baz.bar().foo.baz)`},
		{Code: `new ({}.baz.bar.foo().baz)`},
		{Code: `new (doSomething().baz.bar().foo)`},
		{Code: `new ([][0].baz.foo().bar.foo)`},
		{Code: `new (foo
.baz
.bar()
.foo.baz)`},
		{Code: `new A()()`},
		{Code: `(new A)()`},
		{Code: `(new (Foo || Bar))()`},
		{Code: `(new new foo())()`},
		{Code: `new (new A)()`},
		{Code: `new (new a.b)()`},
		{Code: `new (new new foo())(bar)`},
		{Code: `(new foo).bar`},
		{Code: `(new foo)[bar]`},
		{Code: `(new foo).bar.baz`},
		{Code: `(new foo.bar).baz`},
		{Code: `(new foo).bar()`},
		{Code: `(new foo.bar).baz()`},
		{Code: `new (new foo).bar`},
		{Code: `new (new foo.bar).baz`},
		{Code: `(new new foo()).baz`},
		{Code: `(2 + 3) ** 4`},
		{Code: `2 ** (2 + 3)`},
		{Code: `new (import(source))`},
		{Code: `import((s,t))`},
		{Code: `a, b, c`},
		{Code: `a = b = c`},
		{Code: `a ? b ? c : d : e`},
		{Code: `a ? b : c ? d : e`},
		{Code: `a || b || c`},
		{Code: `a || (b || c)`},
		{Code: `a && b && c`},
		{Code: `a && (b && c)`},
		{Code: `a | b | c`},
		{Code: `a | (b | c)`},
		{Code: `a ^ b ^ c`},
		{Code: `a ^ (b ^ c)`},
		{Code: `a & b & c`},
		{Code: `a & (b & c)`},
		{Code: `a == b == c`},
		{Code: `a == (b == c)`},
		{Code: `a < b < c`},
		{Code: `a < (b < c)`},
		{Code: `a << b << c`},
		{Code: `a << (b << c)`},
		{Code: `a + b + c`},
		{Code: `a + (b + c)`},
		{Code: `a * b * c`},
		{Code: `a * (b * c)`},
		{Code: `!!a; typeof +b; void -c; ~delete d;`},
		{Code: `a(b)`},
		{Code: `a(b)(c)`},
		{Code: `a((b, c))`},
		{Code: `new new A`},
		{Code: `2 ** 3 ** 4`},
		{Code: `(2 ** 3) ** 4`},
		{Code: `if(a);`},
		{Code: `with(a){}`},
		{Code: `switch(a){ case 0: break; }`},
		{Code: `function a(){ return b; }`},
		{Code: `var a = () => { return b; }`},
		{Code: `throw a;`},
		{Code: `while(a);`},
		{Code: `do; while(a);`},
		{Code: `for(;;);`},
		{Code: `for(a in b);`},
		{Code: `for(a in b, c);`},
		{Code: `for(a of b);`},
		{Code: `for (a of (b, c));`},
		{Code: `var a = (b, c);`},
		{Code: `[]`},
		{Code: `[a, b]`},
		{Code: `!{a}`},
		{Code: `!{a: 0, b: 1}`},
		{Code: `!{[a]:0}`},
		{Code: `!{[(a, b)]:0}`},
		{Code: `!{a, ...b}`},
		{Code: `const {a} = {}`},
		{Code: `const {a:b} = {}`},
		{Code: `const {a:b=1} = {}`},
		{Code: `const {[a]:b} = {}`},
		{Code: `const {[a]:b=1} = {}`},
		{Code: `const {[(a, b)]:c} = {}`},
		{Code: `const {a, ...b} = {}`},
		{Code: `class foo {}`},
		{Code: `class foo { constructor(){} a(){} get b(){} set b(bar){} get c(){} set d(baz){} static e(){} }`},
		{Code: `class foo { [a](){} get [b](){} set [b](bar){} get [c](){} set [d](baz){} static [e](){} }`},
		{Code: `class foo { [(a,b)](){} }`},
		{Code: `class foo { a(){} [b](){} c(){} [(d,e)](){} }`},
		{Code: `class foo { [(a,b)](){} c(){} [d](){} e(){} }`},
		{Code: `const foo = class { constructor(){} a(){} get b(){} set b(bar){} get c(){} set d(baz){} static e(){} }`},
		{Code: `class foo { x; }`},
		{Code: `class foo { static x; }`},
		{Code: `class foo { x = 1; }`},
		{Code: `class foo { static x = 1; }`},
		{Code: `class foo { #x; }`},
		{Code: `class foo { static #x; }`},
		{Code: `class foo { static #x = 1; }`},
		{Code: `class foo { #x(){} get #y() {} set #y(value) {} static #z(){} static get #q() {} static set #q(value) {} }`},
		{Code: `const foo  = class { #x(){} get #y() {} set #y(value) {} static #z(){} static get #q() {} static set #q(value) {} }`},
		{Code: `class foo { [(x, y)]; }`},
		{Code: `class foo { static [(x, y)]; }`},
		{Code: `class foo { [(x, y)] = 1; }`},
		{Code: `class foo { static [(x, y)] = 1; }`},
		{Code: `class foo { x = (y, z); }`},
		{Code: `class foo { static x = (y, z); }`},
		{Code: `class foo { #x = (y, z); }`},
		{Code: `class foo { static #x = (y, z); }`},
		{Code: `class foo { [(1, 2)] = (3, 4) }`},
		{Code: `const foo = class { [(1, 2)] = (3, 4) }`},
		{Code: `({});`},
		{Code: `(function(){});`},
		{Code: `(let[a] = b);`},
		{Code: `(function*(){});`},
		{Code: `(class{});`},
		{Code: `(0).a`},
		{Code: `(123).a`},
		{Code: `(08).a`},
		{Code: `(09).a`},
		{Code: `(018).a`},
		{Code: `(012934).a`},
		{Code: `(5_000).a`},
		{Code: `(5_000_00).a`},
		{Code: `(function(){ }())`},
		{Code: `({a: function(){}}.a());`},
		{Code: `({a:0}.a ? b : c)`},
		{Code: `var isA = (/^a$/).test('a');`},
		{Code: `var regex = (/^a$/);`},
		{Code: `function a(){ return (/^a$/); }`},
		{Code: `function a(){ return (/^a$/).test('a'); }`},
		{Code: `var isA = ((/^a$/)).test('a');`},
		{Code: `var foo = (function() { return bar(); }())`},
		{Code: `var o = { foo: (function() { return bar(); }()) };`},
		{Code: `o.foo = (function(){ return bar(); }());`},
		{Code: `(function(){ return bar(); }()), (function(){ return bar(); }())`},
		{Code: `var foo = (function() { return bar(); })()`},
		{Code: `var o = { foo: (function() { return bar(); })() };`},
		{Code: `o.foo = (function(){ return bar(); })();`},
		{Code: `(function(){ return bar(); })(), (function(){ return bar(); })()`},
		{Code: `function foo() { return (function(){}()); }`},
		{Code: `var foo = (function*() { if ((yield foo()) + 1) { return; } }())`},
		{Code: `(() => 0)()`},
		{Code: `(_ => 0)()`},
		{Code: `_ => 0, _ => 1`},
		{Code: `a = () => b = 0`},
		{Code: `0 ? _ => 0 : _ => 0`},
		{Code: `(_ => 0) || (_ => 0)`},
		{Code: `x => ({foo: 1})`},
		{Code: `1 + 2 ** 3`},
		{Code: `1 - 2 ** 3`},
		{Code: `2 ** -3`},
		{Code: `(-2) ** 3`},
		{Code: `(+2) ** 3`},
		{Code: `+ (2 ** 3)`},
		{Code: `a => ({b: c}[d])`},
		{Code: `a => ({b: c}.d())`},
		{Code: `a => ({b: c}.d.e)`},
		{
			Code:    `(0)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `((0))`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `a + (b * c)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `a + ((b * c))`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `(a)(b)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `((a))(b)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `a, (b = c)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `a, ((b = c))`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `for(a in (0));`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `for(a in ((0)));`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `var a = (b = c)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `var a = ((b = c))`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `_ => (a = 0)`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `_ => ((a = 0))`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `while ((foo = bar())) {}`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `if ((foo = bar())) {}`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `do; while ((foo = bar()))`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `for (;(a = b););`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `var a = ((b = c)) ? foo : bar;`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `while (((foo = bar()))) {}`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `var a = (((b = c))) ? foo : bar;`,
			Options: "[\"all\",{\"conditionalAssign\":false}]",
		},
		{
			Code:    `(a && b) ? foo : bar`,
			Options: "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
		},
		{
			Code:    `(a - b > a) ? foo : bar`,
			Options: "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
		},
		{
			Code:    `foo ? (bar || baz) : qux`,
			Options: "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
		},
		{
			Code:    `foo ? bar : (baz || qux)`,
			Options: "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
		},
		{
			Code:    `(a, b) ? (c, d) : (e, f)`,
			Options: "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
		},
		{
			Code:    `(a = b) ? c : d`,
			Options: "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
		},
		{
			Code:    `a + (b * c)`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `(a * b) + c`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `(a * b) / c`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `a || (b && c)`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `a + ((b * c))`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `((a * b)) + c`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `((a * b)) / c`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `a || ((b && c))`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `function a(b) { return b || c; }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `function a(b) { return; }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `function a(b) { return (b = 1); }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `function a(b) { return (b = c) || (b = d); }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `function a(b) { return c ? (d = b) : (e = b); }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => b || c;`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => (b = 1);`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => (b = c) || (b = d);`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => c ? (d = b) : (e = b);`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => { return b || c };`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => { return (b = 1) };`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => { return (b = c) || (b = d) };`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => { return c ? (d = b) : (e = b) };`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `function a(b) { return ((b = 1)); }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{
			Code:    `b => ((b = 1));`,
			Options: "[\"all\",{\"returnAssign\":false}]",
		},
		{Code: `(function(){}).foo(), 1, 2;`},
		{Code: `(function(){}).foo++;`},
		{Code: `(function(){}).foo() || bar;`},
		{Code: `(function(){}).foo() + 1;`},
		{Code: `(function(){}).foo() ? bar : baz;`},
		{Code: `(function(){}).foo.bar();`},
		{Code: `(function(){}.foo());`},
		{Code: `(function(){}.foo.bar);`},
		{Code: `(class{}).foo(), 1, 2;`},
		{Code: `(class{}).foo++;`},
		{Code: `(class{}).foo() || bar;`},
		{Code: `(class{}).foo() + 1;`},
		{Code: `(class{}).foo() ? bar : baz;`},
		{Code: `(class{}).foo.bar();`},
		{Code: `(class{}.foo());`},
		{Code: `(class{}.foo.bar);`},
		{Code: `function *a() { yield b; }`},
		{Code: `function *a() { yield yield; }`},
		{Code: `function *a() { yield b, c; }`},
		{Code: `function *a() { yield (b, c); }`},
		{Code: `function *a() { yield b + c; }`},
		{Code: `function *a() { (yield b) + c; }`},
		{Code: `function a() {
    return (
        b
    );
}`},
		{Code: `function a() {
    return (
        <JSX />
    );
}`},
		{Code: `function a() {
    return (
        <></>
    );
}`},
		{Code: `throw (
    a
);`},
		{Code: `function *a() {
    yield (
        b
    );
}`},
		{Code: `(a
)++`},
		{Code: `(a
)--`},
		{Code: `(a

)++`},
		{Code: `(a.b
)--`},
		{Code: `(a
.b
)++`},
		{Code: `(a[
b
]
)--`},
		{Code: `(a[b]

)++`},
		{Code: `async function a() { await (a + b) }`},
		{Code: `async function a() { await (a + await b) }`},
		{Code: `async function a() { (await a)() }`},
		{Code: `async function a() { new (await a) }`},
		{Code: `async function a() { await (a ** b) }`},
		{Code: `async function a() { (await a) ** b }`},
		{
			Code:    `(foo instanceof bar) instanceof baz`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `(foo in bar) in baz`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `(foo + bar) + baz`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `(foo && bar) && baz`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `foo instanceof (bar instanceof baz)`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `foo in (bar in baz)`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `foo + (bar + baz)`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `foo && (bar && baz)`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `((foo instanceof bar)) instanceof baz`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{
			Code:    `((foo in bar)) in baz`,
			Options: "[\"all\",{\"nestedBinaryExpressions\":false}]",
		},
		{Code: `(async function() {});`},
		{Code: `(async function () { }());`},
		{
			Code:    `const Component = (<div />)`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code:    `const Component = ((<div />))`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code: `const Component = (<>
  <p />
</>);`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code: `const Component = ((<>
  <p />
</>));`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code: `const Component = (<div>
  <p />
</div>);`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code: `const Component = (
  <div />
);`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code: `const Component =
  (<div />)`,
			Options: "[\"all\",{\"ignoreJSX\":\"all\"}]",
		},
		{
			Code:    `const Component = (<div />);`,
			Options: "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
		},
		{
			Code:    `const Component = ((<div />));`,
			Options: "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
		},
		{
			Code: `const Component = (
  <div />
);`,
			Options: "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
		},
		{
			Code: `const Component =
(<div />)`,
			Options: "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
		},
		{
			Code: `const Component = (
<div>
  <p />
</div>
);`,
			Options: "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
		},
		{
			Code: `const Component = ((
<div>
  <p />
</div>
));`,
			Options: "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
		},
		{
			Code: `const Component = (<div>
  <p />
</div>);`,
			Options: "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
		},
		{
			Code: `const Component =
(<div>
  <p />
</div>);`,
			Options: "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
		},
		{
			Code: `const Component = (<div
  prop={true}
/>)`,
			Options: "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
		},
		{
			Code:    `var a = b => 1 ? 2 : 3`,
			Options: "[\"all\",{\"enforceForArrowConditionals\":false}]",
		},
		{
			Code:    `var a = (b) => (1 ? 2 : 3)`,
			Options: "[\"all\",{\"enforceForArrowConditionals\":false}]",
		},
		{
			Code:    `var a = (b) => ((1 ? 2 : 3))`,
			Options: "[\"all\",{\"enforceForArrowConditionals\":false}]",
		},
		{
			Code:    `(a, b)`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `((a, b))`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `(foo(), bar());`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `((foo(), bar()));`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `if((a, b)){}`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `if(((a, b))){}`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `while ((val = foo(), val < 10));`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":false}]",
		},
		{
			Code:    `(new foo()).bar`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `(new foo())[bar]`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `(new foo()).bar()`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `(new foo(bar)).baz`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `(new foo.bar()).baz`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `(new foo.bar()).baz()`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `((new foo.bar())).baz()`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":false}]",
		},
		{
			Code:    `var foo = (function(){}).call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = (function(){}).apply()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = (function(){}.call())`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = (function(){}.apply())`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = (function(){}).call(arg)`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = (function(){}.apply(arg))`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = (function(){}['call']())`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    "var foo = (function(){})[`apply`]()",
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = ((function(){})).call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = ((function(){}).apply())`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = ((function(){}.call()))`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = ((((function(){})).apply()))`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `foo((function(){}).call().bar)`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `foo = (function(){}).call()()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `foo = (function(){}.call())()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = { bar: (function(){}.call()) }`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `var foo = { [(function(){}.call())]: bar  }`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `if((function(){}).call()){}`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{
			Code:    `while((function(){}.apply())){}`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
		},
		{Code: `let a = [ ...b ]`},
		{Code: `let a = { ...b }`},
		{
			Code:            `let a = { ...b }`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{Code: `let a = [ ...(b, c) ]`},
		{Code: `let a = { ...(b, c) }`},
		{
			Code:            `let a = { ...(b, c) }`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{Code: `var [x = (1, foo)] = bar`},
		{Code: `class A extends B {}`},
		{Code: `const A = class extends B {}`},
		{Code: `class A extends (B=C) {}`},
		{Code: `const A = class extends (B=C) {}`},
		{Code: `class A extends (++foo) {}`},
		{Code: `() => ({ foo: 1 })`},
		{Code: `() => ({ foo: 1 }).foo`},
		{Code: `() => ({ foo: 1 }.foo().bar).baz.qux()`},
		{Code: `() => ({ foo: 1 }.foo().bar + baz)`},
		{
			Code:            `export default (a, b)`,
			LanguageOptions: "{\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default (function(){}).foo`,
			LanguageOptions: "{\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default (class{}).foo`,
			LanguageOptions: "{\"sourceType\":\"module\"}",
		},
		{Code: `({}).hasOwnProperty.call(foo, bar)`},
		{Code: `({}) ? foo() : bar()`},
		{Code: `({}) + foo`},
		{Code: `(function(){}) + foo`},
		{Code: `(let)
foo`},
		{Code: `(let[foo]) = 1`},
		{
			Code:    `((function(){}).foo.bar)();`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `((function(){}).foo)();`,
			Options: "[\"functions\"]",
		},
		{Code: `(let)[foo]`},
		{Code: `for ((let[a]);;);`},
		{Code: `for ((let)[a];;);`},
		{Code: `for ((let[a] = 1);;);`},
		{Code: `for ((let[a]) = 1;;);`},
		{Code: `for ((let)[a] = 1;;);`},
		{Code: `for ((let[a, b] = foo);;);`},
		{Code: `for ((let[a].b = 1);;);`},
		{Code: `for ((let[a].b) = 1;;);`},
		{Code: `for ((let[a]).b = 1;;);`},
		{Code: `for ((let)[a].b = 1;;);`},
		{Code: `for ((let[a])();;);`},
		{Code: `for ((let)[a]();;);`},
		{Code: `for ((let[a]) + b;;);`},
		{Code: `for ((let[foo]) in bar);`},
		{Code: `for ((let)[foo] in bar);`},
		{Code: `for ((let[foo].bar) in baz);`},
		{Code: `for ((let[foo]).bar in baz);`},
		{Code: `for ((let)[foo].bar in baz);`},
		{Code: `for ((let) of foo);`},
		{Code: `for ((let).foo of bar);`},
		{Code: `for ((let.foo) of bar);`},
		{Code: `for ((let[foo]) of bar);`},
		{Code: `for ((let)[foo] of bar);`},
		{Code: `for ((let.foo.bar) of baz);`},
		{Code: `for ((let.foo).bar of baz);`},
		{Code: `for ((let).foo.bar of baz);`},
		{Code: `for ((let[foo].bar) of baz);`},
		{Code: `for ((let[foo]).bar of baz);`},
		{Code: `for ((let)[foo].bar of baz);`},
		{Code: `for ((let)().foo of bar);`},
		{Code: `for ((let()).foo of bar);`},
		{Code: `for ((let().foo) of bar);`},
		{Code: `for (let a = (b in c); ;);`},
		{Code: `for (let a = (b && c in d); ;);`},
		{Code: `for (let a = (b in c && d); ;);`},
		{Code: `for (let a = (b => b in c); ;);`},
		{Code: `for (let a = b => (b in c); ;);`},
		{Code: `for (let a = (b in c in d); ;);`},
		{Code: `for (let a = (b in c), d = (e in f); ;);`},
		{Code: `for (let a = (b => c => b in c); ;);`},
		{Code: `for (let a = (b && c && d in e); ;);`},
		{Code: `for (let a = b && (c in d); ;);`},
		{Code: `for (let a = (b in c) && (d in e); ;);`},
		{Code: `for ((a in b); ;);`},
		{Code: `for (a = (b in c); ;);`},
		{Code: `for ((a in b && c in d && e in f); ;);`},
		{Code: `for (let a = [] && (b in c); ;);`},
		{Code: `for (let a = (b in [c]); ;);`},
		{Code: `for (let a = b => (c in d); ;);`},
		{Code: `for (let a = (b in c) ? d : e; ;);`},
		{Code: `for (let a = (b in c ? d : e); ;);`},
		{Code: `for (let a = b ? c : (d in e); ;);`},
		{Code: `for (let a = (b in c), d = () => { for ((e in f);;); for ((g in h);;); }; ;); for((i in j); ;);`},
		{Code: `for (let a = b; a; a); a; a;`},
		{Code: `for (a; a; a); a; a;`},
		{Code: `for (; a; a); a; a;`},
		{Code: `for (let a = (b && c) === d; ;);`},
		{Code: `new (a()).b.c;`},
		{Code: `new (a().b).c;`},
		{Code: `new (a().b.c);`},
		{Code: `new (a().b().d);`},
		{Code: `new a().b().d;`},
		{Code: `new (a(b()).c)`},
		{Code: `new (a.b()).c`},
		{
			Code:            `var v = (a ?? b) || c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = a ?? (b || c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (a ?? b) && c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = a ?? (b && c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (a || b) ?? c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = a || (b ?? c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (a && b) ?? c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = a && (b ?? c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (obj?.aaa).bbb`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (obj?.aaa)()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = new (obj?.aaa)()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = new (obj?.aaa)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            "var v = (obj?.aaa)`template`",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (obj?.()).bbb`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = (obj?.())()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = new (obj?.())()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var v = new (obj?.())`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            "var v = (obj?.())`template`",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `(obj?.aaa).bbb = 0`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var foo = (function(){})?.()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var foo = (function(){}?.())`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var foo = (function(){})?.call()`,
			Options:         "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var foo = (function(){}?.call())`,
			Options:         "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `(Object.prototype.toString.call())`,
			Options: "[\"functions\"]",
		},
		{
			Code:    `const span = /**@type {HTMLSpanElement}*/(event.currentTarget);`,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
		},
		{
			Code:    `if (/** @type {Compiler | MultiCompiler} */(options).hooks) console.log('good');`,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
		},
		{
			Code: `
                validate(/** @type {Schema} */ (schema), options, {
                    name: "Dev Server",
                    baseDataPath: "options",
                });
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
		},
		{
			Code: `
                if (condition) {
                    /** @type {ServerOptions} */
                    (options.server.options).requestCert = false;
                }
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
		},
		{
			Code:    `const net = ipaddr.parseCIDR(/** @type {string} */ (cidr));`,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
		},
		{Code: `(a) = function () {};`},
		{Code: `(a) = () => {};`},
		{Code: `(a) = class {};`},
		{Code: `(a) ??= function () {};`},
		{Code: `(a) &&= class extends SuperClass {};`},
		{Code: `(a) ||= async () => {}`},
		{
			Code:    `((a)) = function () {};`,
			Options: "[\"functions\"]",
		},
		{
			Code:            `const x = (1 satisfies number).toFixed();`,
			LanguageOptions: "{\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code:            `(0)`,
			Output:          `0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(  0  )`,
			Output:          `  0  `,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if((0));`,
			Output:          `if(0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(( 0 ));`,
			Output:          `if( 0 );`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `with((0)){}`,
			Output:          `with(0){}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `switch((0)){}`,
			Output:          `switch(0){}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `switch(0){ case (1): break; }`,
			Output:          `switch(0){ case 1: break; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for((0);;);`,
			Output:          `for(0;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for(;(0););`,
			Output:          `for(;0;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for(;;(0));`,
			Output:          `for(;;0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `throw(0)`,
			Output:          `throw 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `while((0));`,
			Output:          `while(0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `do; while((0))`,
			Output:          `do; while(0)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for(a in (0));`,
			Output:          `for(a in 0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for(a of (0));`,
			Output:          `for(a of 0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a)]:1}`,
			Output:          `const foo = {[a]:1}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a=b)]:1}`,
			Output:          `const foo = {[a=b]:1}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {*[(Symbol.iterator)]() {}}`,
			Output:          `const foo = {*[Symbol.iterator]() {}}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = { get [(a)]() {}}`,
			Output:          `const foo = { get [a]() {}}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a+b)]:c, d}`,
			Output:          `const foo = {[a+b]:c, d}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {a, [(b+c)]:d, e}`,
			Output:          `const foo = {a, [b+c]:d, e}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a+b)]:c, d:e}`,
			Output:          `const foo = {[a+b]:c, d:e}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {a:b, [(c+d)]:e, f:g}`,
			Output:          `const foo = {a:b, [c+d]:e, f:g}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a+b)]:c, [d]:e}`,
			Output:          `const foo = {[a+b]:c, [d]:e}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[a]:b, [(c+d)]:e, [f]:g}`,
			Output:          `const foo = {[a]:b, [c+d]:e, [f]:g}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a+b)]:c, [(d,e)]:f}`,
			Output:          `const foo = {[a+b]:c, [(d,e)]:f}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a,b)]:c, [(d+e)]:f, [(g,h)]:e}`,
			Output:          `const foo = {[(a,b)]:c, [d+e]:f, [(g,h)]:e}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {a, b:c, [(d+e)]:f, [(g,h)]:i, [j]:k}`,
			Output:          `const foo = {a, b:c, [d+e]:f, [(g,h)]:i, [j]:k}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[a+(b*c)]:d}`,
			Output:          `const foo = {[a+b*c]:d}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const foo = {[(a, (b+c))]:d}`,
			Output:          `const foo = {[(a, b+c)]:d}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a)]:b} = {}`,
			Output:          `const {[a]:b} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a=b)]:c=1} = {}`,
			Output:          `const {[a=b]:c=1} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a+b)]:c, d} = {}`,
			Output:          `const {[a+b]:c, d} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {a, [(b+c)]:d, e} = {}`,
			Output:          `const {a, [b+c]:d, e} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a+b)]:c, d:e} = {}`,
			Output:          `const {[a+b]:c, d:e} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {a:b, [(c+d)]:e, f:g} = {}`,
			Output:          `const {a:b, [c+d]:e, f:g} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a+b)]:c, [d]:e} = {}`,
			Output:          `const {[a+b]:c, [d]:e} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[a]:b, [(c+d)]:e, [f]:g} = {}`,
			Output:          `const {[a]:b, [c+d]:e, [f]:g} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a+b)]:c, [(d,e)]:f} = {}`,
			Output:          `const {[a+b]:c, [(d,e)]:f} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a,b)]:c, [(d+e)]:f, [(g,h)]:e} = {}`,
			Output:          `const {[(a,b)]:c, [d+e]:f, [(g,h)]:e} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {a, b:c, [(d+e)]:f, [(g,h)]:i, [j]:k} = {}`,
			Output:          `const {a, b:c, [d+e]:f, [(g,h)]:i, [j]:k} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[a+(b*c)]:d} = {}`,
			Output:          `const {[a+b*c]:d} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const {[(a, (b+c))]:d} = {}`,
			Output:          `const {[(a, b+c)]:d} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `class foo { [(a)](){} }`,
			Output:          `class foo { [a](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo {*[(Symbol.iterator)]() {}}`,
			Output:          `class foo {*[Symbol.iterator]() {}}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { get [(a)](){} }`,
			Output:          `class foo { get [a](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { set [(a)](bar){} }`,
			Output:          `class foo { set [a](bar){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { static [(a)](bar){} }`,
			Output:          `class foo { static [a](bar){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(a=b)](){} }`,
			Output:          `class foo { [a=b](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { constructor (){} [(a+b)](){} }`,
			Output:          `class foo { constructor (){} [a+b](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(a+b)](){} constructor (){} }`,
			Output:          `class foo { [a+b](){} constructor (){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(a+b)](){} c(){} }`,
			Output:          `class foo { [a+b](){} c(){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { a(){} [(b+c)](){} d(){} }`,
			Output:          `class foo { a(){} [b+c](){} d(){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(a+b)](){} [c](){} }`,
			Output:          `class foo { [a+b](){} [c](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [a](){} [(b+c)](){} [d](){} }`,
			Output:          `class foo { [a](){} [b+c](){} [d](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(a+b)](){} [(c,d)](){} }`,
			Output:          `class foo { [a+b](){} [(c,d)](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(a,b)](){} [(c+d)](){} }`,
			Output:          `class foo { [(a,b)](){} [c+d](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [a+(b*c)](){} }`,
			Output:          `class foo { [a+b*c](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const foo = class { [(a)](){} }`,
			Output:          `const foo = class { [a](){} }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(x)]; }`,
			Output:          `class foo { [x]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { static [(x)]; }`,
			Output:          `class foo { static [x]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(x)] = 1; }`,
			Output:          `class foo { [x] = 1; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { static [(x)] = 1; }`,
			Output:          `class foo { static [x] = 1; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const foo = class { [(x)]; }`,
			Output:          `const foo = class { [x]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(x = y)]; }`,
			Output:          `class foo { [x = y]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(x + y)]; }`,
			Output:          `class foo { [x + y]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [(x ? y : z)]; }`,
			Output:          `class foo { [x ? y : z]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { [((x, y))]; }`,
			Output:          `class foo { [(x, y)]; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { x = (y); }`,
			Output:          `class foo { x = y; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { static x = (y); }`,
			Output:          `class foo { static x = y; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { #x = (y); }`,
			Output:          `class foo { #x = y; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { static #x = (y); }`,
			Output:          `class foo { static #x = y; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const foo = class { x = (y); }`,
			Output:          `const foo = class { x = y; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { x = (() => {}); }`,
			Output:          `class foo { x = () => {}; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { x = (y + z); }`,
			Output:          `class foo { x = y + z; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { x = (y ? z : q); }`,
			Output:          `class foo { x = y ? z : q; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class foo { x = ((y, z)); }`,
			Output:          `class foo { x = (y, z); }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = (function*() { if ((yield foo())) { return; } }())`,
			Output:          `var foo = (function*() { if (yield foo()) { return; } }())`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `f((0))`,
			Output:          `f(0)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `f(0, (1))`,
			Output:          `f(0, 1)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `!(0)`,
			Output:          `!0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a[(1)]`,
			Output:          `a[1]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a)(b)`,
			Output:          `a(b)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(async)`,
			Output:          `async`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a, b)`,
			Output:          `a, b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var a = (b = c);`,
			Output:          `var a = b = c;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function f(){ return (a); }`,
			Output:          `function f(){ return a; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[a, (b = c)]`,
			Output:          `[a, b = c]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `!{a: (b = c)}`,
			Output:          `!{a: b = c}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof(0)`,
			Output:          `typeof 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof (0)`,
			Output:          `typeof 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof([])`,
			Output:          `typeof[]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof ([])`,
			Output:          `typeof []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof( 0)`,
			Output:          `typeof 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof(typeof 5)`,
			Output:          `typeof typeof 5`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof (typeof 5)`,
			Output:          `typeof typeof 5`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `+(+foo)`,
			Output:          `+ +foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `-(-foo)`,
			Output:          `- -foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `+(-foo)`,
			Output:          `+-foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `-(+foo)`,
			Output:          `-+foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `-((bar+foo))`,
			Output:          `-(bar+foo)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `+((bar-foo))`,
			Output:          `+(bar-foo)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `++(foo)`,
			Output:          `++foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `--(foo)`,
			Output:          `--foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `++
(foo)`,
			Output: `++
foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `--
(foo)`,
			Output: `--
foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `++(
foo)`,
			Output: `++
foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `--(
foo)`,
			Output: `--
foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(foo)++`,
			Output:          `foo++`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(foo)--`,
			Output:          `foo--`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `((foo)
)++`,
			Output: `(foo
)++`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `((foo
))--`,
			Output: `(foo
)--`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `((foo
)
)++`,
			Output: `(foo

)++`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(a
.b)--`,
			Output: `a
.b--`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(a.
b)++`,
			Output: `a.
b++`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(a
[
b
])--`,
			Output: `a
[
b
]--`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a || b) ? c : d`,
			Output:          `a || b ? c : d`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a ? (b = c) : d`,
			Output:          `a ? b = c : d`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a ? b : (c = d)`,
			Output:          `a ? b : c = d`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(c = d) ? (b) : c`,
			Output:          `(c = d) ? b : c`,
			Options:         "[\"all\",{\"conditionalAssign\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(c = d) ? b : (c)`,
			Output:          `(c = d) ? b : c`,
			Options:         "[\"all\",{\"conditionalAssign\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) ? foo : bar`,
			Output:          `a ? foo : bar`,
			Options:         "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a()) ? foo : bar`,
			Output:          `a() ? foo : bar`,
			Options:         "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b) ? foo : bar`,
			Output:          `a.b ? foo : bar`,
			Options:         "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a || b) ? foo : (bar)`,
			Output:          `(a || b) ? foo : bar`,
			Options:         "[\"all\",{\"ternaryOperandBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `f((a = b))`,
			Output:          `f(a = b)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a, (b = c)`,
			Output:          `a, b = c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a = (b * c)`,
			Output:          `a = b * c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a + (b * c)`,
			Output:          `a + b * c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a * b) + c`,
			Output:          `a * b + c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a * b) / c`,
			Output:          `a * b / c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(2) ** 3 ** 4`,
			Output:          `2 ** 3 ** 4`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `2 ** (3 ** 4)`,
			Output:          `2 ** 3 ** 4`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(2 ** 3)`,
			Output:          `2 ** 3`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(2 ** 3) + 1`,
			Output:          `2 ** 3 + 1`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `1 - (2 ** 3)`,
			Output:          `1 - 2 ** 3`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `-((2 ** 3))`,
			Output:          `-(2 ** 3)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `typeof ((a ** b));`,
			Output:          `typeof (a ** b);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((-2)) ** 3`,
			Output:          `(-2) ** 3`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a = (b * c)`,
			Output:          `a = b * c`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(b * c)`,
			Output:          `b * c`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a = (b = c)`,
			Output:          `a = b = c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a).b`,
			Output:          `a.b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(0)[a]`,
			Output:          `0[a]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(0.0).a`,
			Output:          `0.0.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(123.4).a`,
			Output:          `123.4.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(0.0_0).a`,
			Output:          `0.0_0.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(0xBEEF).a`,
			Output:          `0xBEEF.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(0xBE_EF).a`,
			Output:          `0xBE_EF.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(1e6).a`,
			Output:          `1e6.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(0123).a`,
			Output:          `0123.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(08.1).a`,
			Output:          `08.1.a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(09.).a`,
			Output:          `09..a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a[(function() {})]`,
			Output:          `a[function() {}]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (function(){})`,
			Output:          `new function(){}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new (
function(){}
)`,
			Output: `new 
function(){}
`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `((function foo() {return 1;}))()`,
			Output:          `(function foo() {return 1;})()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((function(){ return bar(); })())`,
			Output:          `(function(){ return bar(); })()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(foo()).bar`,
			Output:          `foo().bar`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(foo.bar()).baz`,
			Output:          `foo.bar().baz`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(foo
.bar())
.baz`,
			Output: `foo
.bar()
.baz`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new foo()).bar`,
			Output:          `new foo().bar`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new foo())[bar]`,
			Output:          `new foo()[bar]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new foo()).bar()`,
			Output:          `new foo().bar()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new foo(bar)).baz`,
			Output:          `new foo(bar).baz`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new foo.bar()).baz`,
			Output:          `new foo.bar().baz`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new foo.bar()).baz()`,
			Output:          `new foo.bar().baz()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new a[(b()).c]`,
			Output:          `new a[b().c]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a)()`,
			Output:          `a()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b)()`,
			Output:          `a.b()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a())()`,
			Output:          `a()()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b())()`,
			Output:          `a.b()()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a().b)()`,
			Output:          `a().b()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a().b.c)()`,
			Output:          `a().b.c()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (A)`,
			Output:          `new A`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new A())()`,
			Output:          `new A()()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(new A(1))()`,
			Output:          `new A(1)()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((new A))()`,
			Output:          `(new A)()`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new (foo
.baz
.bar
.foo.baz)`,
			Output: `new foo
.baz
.bar
.foo.baz`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (foo.baz.bar.baz)`,
			Output:          `new foo.baz.bar.baz`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new ((a.b())).c`,
			Output:          `new (a.b()).c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new ((a().b)).c`,
			Output:          `new (a().b).c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new ((a().b().d))`,
			Output:          `new (a().b().d)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new ((a())).b.d`,
			Output:          `new (a()).b.d`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (a.b).d;`,
			Output:          `new a.b.d;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (new A())();`,
			Output:          `new new A()();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (new A());`,
			Output:          `new new A();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (new A);`,
			Output:          `new new A;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new (new a.b);`,
			Output:          `new new a.b;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a().b).d;`,
			Output:          `a().b.d;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b()).d;`,
			Output:          `a.b().d;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b).d;`,
			Output:          `a.b.d;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `0, (_ => 0)`,
			Output:          `0, _ => 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `(_ => 0), 0`,
			Output:          `_ => 0, 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `a = (_ => 0)`,
			Output:          `a = _ => 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `_ => (a = 0)`,
			Output:          `_ => a = 0`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `x => (({}))`,
			Output:          `x => ({})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `new (function(){})`,
			Output:          `new function(){}`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new (
function(){}
)`,
			Output: `new 
function(){}
`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `((function foo() {return 1;}))()`,
			Output:          `(function foo() {return 1;})()`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a[(function() {})]`,
			Output:          `a[function() {}]`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `0, (_ => 0)`,
			Output:          `0, _ => 0`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `(_ => 0), 0`,
			Output:          `_ => 0, 0`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `a = (_ => 0)`,
			Output:          `a = _ => 0`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `while ((foo = bar())) {}`,
			Output:          `while (foo = bar()) {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `while ((foo = bar())) {}`,
			Output:          `while (foo = bar()) {}`,
			Options:         "[\"all\",{\"conditionalAssign\":true}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `if ((foo = bar())) {}`,
			Output:          `if (foo = bar()) {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `do; while ((foo = bar()))`,
			Output:          `do; while (foo = bar())`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for (;(a = b););`,
			Output:          `for (;a = b;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((function(){})).foo();`,
			Output:          `(function(){}).foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((function(){}).foo());`,
			Output:          `(function(){}).foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((function(){}).foo);`,
			Output:          `(function(){}).foo;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `0, (function(){}).foo();`,
			Output:          `0, function(){}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `void (function(){}).foo();`,
			Output:          `void function(){}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `++(function(){}).foo;`,
			Output:          `++function(){}.foo;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar || (function(){}).foo();`,
			Output:          `bar || function(){}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `1 + (function(){}).foo();`,
			Output:          `1 + function(){}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar ? (function(){}).foo() : baz;`,
			Output:          `bar ? function(){}.foo() : baz;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar ? baz : (function(){}).foo();`,
			Output:          `bar ? baz : function(){}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar((function(){}).foo(), 0);`,
			Output:          `bar(function(){}.foo(), 0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar[(function(){}).foo()];`,
			Output:          `bar[function(){}.foo()];`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var bar = (function(){}).foo();`,
			Output:          `var bar = function(){}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((class{})).foo();`,
			Output:          `(class{}).foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((class{}).foo());`,
			Output:          `(class{}).foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((class{}).foo);`,
			Output:          `(class{}).foo;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `0, (class{}).foo();`,
			Output:          `0, class{}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `void (class{}).foo();`,
			Output:          `void class{}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `++(class{}).foo;`,
			Output:          `++class{}.foo;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar || (class{}).foo();`,
			Output:          `bar || class{}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `1 + (class{}).foo();`,
			Output:          `1 + class{}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar ? (class{}).foo() : baz;`,
			Output:          `bar ? class{}.foo() : baz;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar ? baz : (class{}).foo();`,
			Output:          `bar ? baz : class{}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar((class{}).foo(), 0);`,
			Output:          `bar(class{}.foo(), 0);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `bar[(class{}).foo()];`,
			Output:          `bar[class{}.foo()];`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var bar = (class{}).foo();`,
			Output:          `var bar = class{}.foo();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = ((bar, baz));`,
			Output:          `var foo = (bar, baz);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function *a() { yield (b); }`,
			Output:          `function *a() { yield b; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function *a() { (yield b), c; }`,
			Output:          `function *a() { yield b, c; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function *a() { yield ((b, c)); }`,
			Output:          `function *a() { yield (b, c); }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function *a() { yield (b + c); }`,
			Output:          `function *a() { yield b + c; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return (b);
}`,
			Output: `function a() {
    return b;
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return
    (b);
}`,
			Output: `function a() {
    return
    b;
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return ((
       b
    ));
}`,
			Output: `function a() {
    return (
       b
    );
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return (<JSX />);
}`,
			Output: `function a() {
    return <JSX />;
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return
    (<JSX />);
}`,
			Output: `function a() {
    return
    <JSX />;
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return ((
       <JSX />
    ));
}`,
			Output: `function a() {
    return (
       <JSX />
    );
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function a() {
    return ((
       <></>
    ));
}`,
			Output: `function a() {
    return (
       <></>
    );
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `throw (a);`,
			Output:          `throw a;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `throw ((
   a
));`,
			Output: `throw (
   a
);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function *a() {
    yield (b);
}`,
			Output: `function *a() {
    yield b;
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function *a() {
    yield
    (b);
}`,
			Output: `function *a() {
    yield
    b;
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function *a() {
    yield ((
       b
    ));
}`,
			Output: `function *a() {
    yield (
       b
    );
}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function a(b) { return (b || c); }`,
			Output:  `function a(b) { return b || c; }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function a(b) { return ((b = c) || (d = e)); }`,
			Output: `function a(b) { return (b = c) || (d = e); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function a(b) { return (b = 1); }`,
			Output: `function a(b) { return b = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function a(b) { return c ? (d = b) : (e = b); }`,
			Output: `function a(b) { return c ? d = b : e = b; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `b => (b || c);`,
			Output:  `b => b || c;`,
			Options: "[\"all\",{\"returnAssign\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `b => ((b = c) || (d = e));`,
			Output: `b => (b = c) || (d = e);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `b => (b = 1);`,
			Output: `b => b = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `b => c ? (d = b) : (e = b);`,
			Output: `b => c ? d = b : e = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `b => { return (b || c); }`,
			Output:  `b => { return b || c; }`,
			Options: "[\"all\",{\"returnAssign\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `b => { return ((b = c) || (d = e)) };`,
			Output: `b => { return (b = c) || (d = e) };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `b => { return (b = 1) };`,
			Output: `b => { return b = 1 };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `b => { return c ? (d = b) : (e = b); }`,
			Output: `b => { return c ? d = b : e = b; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `async function a() { (await a) + (await b); }`,
			Output: `async function a() { await a + await b; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `async function a() { await (a); }`,
			Output:          `async function a() { await a; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `async function a() { await (a()); }`,
			Output:          `async function a() { await a(); }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `async function a() { await (+a); }`,
			Output:          `async function a() { await +a; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `async function a() { +(await a); }`,
			Output:          `async function a() { +await a; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `async function a() { await ((a,b)); }`,
			Output:          `async function a() { await (a,b); }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `async function a() { a ** (await b); }`,
			Output:          `async function a() { a ** await b; }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(foo) instanceof bar`,
			Output:          `foo instanceof bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `(foo) in bar`,
			Output:          `foo in bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `(foo) + bar`,
			Output:          `foo + bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `(foo) && bar`,
			Output:          `foo && bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo instanceof (bar)`,
			Output:          `foo instanceof bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo in (bar)`,
			Output:          `foo in bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo + (bar)`,
			Output:          `foo + bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `foo && (bar)`,
			Output:          `foo && bar`,
			Options:         "[\"all\",{\"nestedBinaryExpressions\":false}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const Component = (<div />);`,
			Output:          `const Component = <div />;`,
			Options:         "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `const Component = (
  <div />
);`,
			Output: `const Component = 
  <div />
;`,
			Options:         "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `const Component = (
  <></>
);`,
			Output: `const Component = 
  <></>
;`,
			Options:         "[\"all\",{\"ignoreJSX\":\"multi-line\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `const Component = (
<div>
  <p />
</div>
);`,
			Output: `const Component = 
<div>
  <p />
</div>
;`,
			Options:         "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `const Component = (<div>
  <p />
</div>);`,
			Output: `const Component = <div>
  <p />
</div>;`,
			Options:         "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `const Component = (<div
  prop={true}
/>)`,
			Output: `const Component = <div
  prop={true}
/>`,
			Options:         "[\"all\",{\"ignoreJSX\":\"single-line\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const Component = (<div />);`,
			Output:          `const Component = <div />;`,
			Options:         "[\"all\",{\"ignoreJSX\":\"none\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `const Component = (<div>
<p />
</div>)`,
			Output: `const Component = <div>
<p />
</div>`,
			Options:         "[\"all\",{\"ignoreJSX\":\"none\"}]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:    `var a = (b) => (1 ? 2 : 3)`,
			Output:  `var a = (b) => 1 ? 2 : 3`,
			Options: "[\"all\",{\"enforceForArrowConditionals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var a = (b) => ((1 ? 2 : 3))`,
			Output:  `var a = (b) => (1 ? 2 : 3)`,
			Options: "[\"all\",{\"enforceForArrowConditionals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(a, b)`,
			Output:  `a, b`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(a, b)`,
			Output:  `a, b`,
			Options: "[\"all\",{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(a, b)`,
			Output:  `a, b`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(foo(), bar());`,
			Output:  `foo(), bar();`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `if((a, b)){}`,
			Output:  `if(a, b){}`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while ((val = foo(), val < 10));`,
			Output:  `while (val = foo(), val < 10);`,
			Options: "[\"all\",{\"enforceForSequenceExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(new foo()).bar`,
			Output:  `new foo().bar`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(new foo()).bar`,
			Output:  `new foo().bar`,
			Options: "[\"all\",{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(new foo()).bar`,
			Output:  `new foo().bar`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(new foo())[bar]`,
			Output:  `new foo()[bar]`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(new foo.bar()).baz`,
			Output:  `new foo.bar().baz`,
			Options: "[\"all\",{\"enforceForNewInMemberExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).call()`,
			Output:  `var foo = function(){}.call()`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.apply())`,
			Output:  `var foo = function(){}.apply()`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).apply()`,
			Output:  `var foo = function(){}.apply()`,
			Options: "[\"all\",{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.call())`,
			Output:  `var foo = function(){}.call()`,
			Options: "[\"all\",{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).call()`,
			Output:  `var foo = function(){}.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).apply()`,
			Output:  `var foo = function(){}.apply()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.call())`,
			Output:  `var foo = function(){}.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.apply())`,
			Output:  `var foo = function(){}.apply()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.call)()`,
			Output:  `var foo = function(){}.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.apply)()`,
			Output:  `var foo = function(){}.apply()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).call`,
			Output:  `var foo = function(){}.call`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.call)`,
			Output:  `var foo = function(){}.call`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = new (function(){}).call()`,
			Output:  `var foo = new function(){}.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (new function(){}.call())`,
			Output:  `var foo = new function(){}.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){})[call]()`,
			Output:  `var foo = function(){}[call]()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}[apply]())`,
			Output:  `var foo = function(){}[apply]()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).bar()`,
			Output:  `var foo = function(){}.bar()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.bar())`,
			Output:  `var foo = function(){}.bar()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}).call.call()`,
			Output:  `var foo = function(){}.call.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (function(){}.call.call())`,
			Output:  `var foo = function(){}.call.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (call())`,
			Output:  `var foo = call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (apply())`,
			Output:  `var foo = apply()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (bar).call()`,
			Output:  `var foo = bar.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = (bar.call())`,
			Output:  `var foo = bar.call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `((() => {}).call())`,
			Output:  `(() => {}).call()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = function(){}.call((a.b))`,
			Output:  `var foo = function(){}.call(a.b)`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = function(){}.call((a).b)`,
			Output:  `var foo = function(){}.call(a.b)`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var foo = function(){}[('call')]()`,
			Output:  `var foo = function(){}['call']()`,
			Options: "[\"all\",{\"enforceForFunctionPrototypeMethods\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `let a = [...(b)]`,
			Output:          `let a = [...b]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `let a = {...(b)}`,
			Output:          `let a = {...b}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `let a = {...(b)}`,
			Output:          `let a = {...b}`,
			Options:         "[]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `let a = [...((b, c))]`,
			Output:          `let a = [...(b, c)]`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `let a = {...((b, c))}`,
			Output:          `let a = {...(b, c)}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `let a = {...((b, c))}`,
			Output:          `let a = {...(b, c)}`,
			Options:         "[]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `class A extends (B) {}`,
			Output:          `class A extends B {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const A = class extends (B) {}`,
			Output:          `const A = class extends B {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `class A extends ((B=C)) {}`,
			Output:          `class A extends (B=C) {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `const A = class extends ((B=C)) {}`,
			Output:          `const A = class extends (B=C) {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `class A extends ((++foo)) {}`,
			Output:          `class A extends (++foo) {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default ((a, b))`,
			Output:          `export default (a, b)`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default (() => {})`,
			Output:          `export default () => {}`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default ((a, b) => a + b)`,
			Output:          `export default (a, b) => a + b`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default (a => a)`,
			Output:          `export default a => a`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default (a = b)`,
			Output:          `export default a = b`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default (a ? b : c)`,
			Output:          `export default a ? b : c`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `export default (a)`,
			Output:          `export default a`,
			Options:         "[]",
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (foo of(bar));`,
			Output:          `for (foo of bar);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((foo) of bar);`,
			Output:          `for (foo of bar);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (foo of (baz = bar));`,
			Output:          `for (foo of baz = bar);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `function* f() { for (foo of (yield bar)); }`,
			Output:          `function* f() { for (foo of yield bar); }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (foo of ((bar, baz)));`,
			Output:          `for (foo of (bar, baz));`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((foo)in bar);`,
			Output:          `for (foo in bar);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((foo['bar'])of baz);`,
			Output:          `for (foo['bar']of baz);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `() => (({ foo: 1 }).foo)`,
			Output:          `() => ({ foo: 1 }).foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `(let).foo`,
			Output:          `let.foo`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let);;);`,
			Output:          `for (let;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let = 1);;);`,
			Output:          `for (let = 1;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let) = 1;;);`,
			Output:          `for (let = 1;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let = []);;);`,
			Output:          `for (let = [];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let) = [];;);`,
			Output:          `for (let = [];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let());;);`,
			Output:          `for (let();;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let([]));;);`,
			Output:          `for (let([]);;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let())[a];;);`,
			Output:          `for (let()[a];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            "for ((let`[]`);;);",
			Output:          "for (let`[]`;;);",
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let.a);;);`,
			Output:          `for (let.a;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let).a;;);`,
			Output:          `for (let.a;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let).a = 1;;);`,
			Output:          `for (let.a = 1;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let).a[b];;);`,
			Output:          `for (let.a[b];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let.a)[b];;);`,
			Output:          `for (let.a[b];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let.a[b]);;);`,
			Output:          `for (let.a[b];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let);[];);`,
			Output:          `for (let;[];);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a]));;);`,
			Output:          `for ((let[a]);;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let))[a];;);`,
			Output:          `for ((let)[a];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a])).b;;);`,
			Output:          `for ((let[a]).b;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let))[a].b;;);`,
			Output:          `for ((let)[a].b;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let)[a]).b;;);`,
			Output:          `for ((let)[a].b;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a]) = b);;);`,
			Output:          `for ((let[a]) = b;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let)[a]) = b;;);`,
			Output:          `for ((let)[a] = b;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let)[a] = b);;);`,
			Output:          `for ((let)[a] = b;;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((Let[a]);;);`,
			Output:          `for (Let[a];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((lett)[a];;);`,
			Output:          `for (lett[a];;);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let) in foo);`,
			Output:          `for (let in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let())[a] in foo);`,
			Output:          `for (let()[a] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let.a) in foo);`,
			Output:          `for (let.a in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let).a in foo);`,
			Output:          `for (let.a in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let).a.b in foo);`,
			Output:          `for (let.a.b in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let).a[b] in foo);`,
			Output:          `for (let.a[b] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let.a)[b] in foo);`,
			Output:          `for (let.a[b] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((let.a[b]) in foo);`,
			Output:          `for (let.a[b] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a])) in foo);`,
			Output:          `for ((let[a]) in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let))[a] in foo);`,
			Output:          `for ((let)[a] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a])).b in foo);`,
			Output:          `for ((let[a]).b in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let))[a].b in foo);`,
			Output:          `for ((let)[a].b in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let)[a]).b in foo);`,
			Output:          `for ((let)[a].b in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a]).b) in foo);`,
			Output:          `for ((let[a]).b in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((Let[a]) in foo);`,
			Output:          `for (Let[a] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((lett)[a] in foo);`,
			Output:          `for (lett[a] in foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let)) of foo);`,
			Output:          `for ((let) of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let)).a of foo);`,
			Output:          `for ((let).a of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let))[a] of foo);`,
			Output:          `for ((let)[a] of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let).a) of foo);`,
			Output:          `for ((let).a of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let[a]).b) of foo);`,
			Output:          `for ((let[a]).b of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let).a).b of foo);`,
			Output:          `for ((let).a.b of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let).a.b) of foo);`,
			Output:          `for ((let).a.b of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let.a).b) of foo);`,
			Output:          `for ((let.a).b of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (((let()).a) of foo);`,
			Output:          `for ((let()).a of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((Let) of foo);`,
			Output:          `for (Let of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for ((lett) of foo);`,
			Output:          `for (lett of foo);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `for (a in (b, c));`,
			Output:          `for (a in b, c);`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(let)`,
			Output:          `let`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `((let))`,
			Output:          `(let)`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            "let s = `${(v)}`",
			Output:          "let s = `${v}`",
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            "let s = `${(a, b)}`",
			Output:          "let s = `${a, b}`",
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo(a = (b)) {}`,
			Output:          `function foo(a = b) {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const bar = (a = (b)) => a`,
			Output:          `const bar = (a = b) => a`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const [a = (b)] = []`,
			Output:          `const [a = b] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const {a = (b)} = {}`,
			Output:          `const {a = b} = {}`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) = b`,
			Output:          `a = b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b) = c`,
			Output:          `a.b = c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) += b`,
			Output:          `a += b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b) >>= c`,
			Output:          `a.b >>= c`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[(a) = b] = []`,
			Output:          `[a = b] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[(a.b) = c] = []`,
			Output:          `[a.b = c] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({ a: (b) = c } = {})`,
			Output:          `({ a: b = c } = {})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({ a: (b.c) = d } = {})`,
			Output:          `({ a: b.c = d } = {})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[(a)] = []`,
			Output:          `[a] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[(a.b)] = []`,
			Output:          `[a.b] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[,(a),,] = []`,
			Output:          `[,a,,] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[...(a)] = []`,
			Output:          `[...a] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `[...(a.b)] = []`,
			Output:          `[...a.b] = []`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({ a: (b) } = {})`,
			Output:          `({ a: b } = {})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({ a: (b.c) } = {})`,
			Output:          `({ a: b.c } = {})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({ ...(a) } = {})`,
			Output:          `({ ...a } = {})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `({ ...(a.b) } = {})`,
			Output:          `({ ...a.b } = {})`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for ((a = (b in c)); ;);`,
			Output: `for ((a = b in c); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = ((b in c) && (d in e)); ;);`,
			Output: `for (let a = (b in c && d in e); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = ((b in c) in d); ;);`,
			Output: `for (let a = (b in c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b && (c in d)), e = (f in g); ;);`,
			Output: `for (let a = (b && c in d), e = (f in g); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b + c), d = (e in f); ;);`,
			Output: `for (let a = b + c, d = (e in f); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = [(b in c)]; ;);`,
			Output: `for (let a = [b in c]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = [b, (c in d)]; ;);`,
			Output: `for (let a = [b, c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = ([b in c]); ;);`,
			Output: `for (let a = [b in c]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = ([b, c in d]); ;);`,
			Output: `for (let a = [b, c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for ((a = [b in c]); ;);`,
			Output: `for (a = [b in c]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = [b && (c in d)]; ;);`,
			Output: `for (let a = [b && c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = [(b && c in d)]; ;);`,
			Output: `for (let a = [b && c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = ([b && c in d]); ;);`,
			Output: `for (let a = [b && c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for ((a = [b && c in d]); ;);`,
			Output: `for (a = [b && c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for ([(a in b)]; ;);`,
			Output: `for ([a in b]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (([a in b]); ;);`,
			Output: `for ([a in b]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = [(b in c)], d = (e in f); ;);`,
			Output: `for (let a = [b in c], d = (e in f); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let [a = (b in c)] = []; ;);`,
			Output: `for (let [a = b in c] = []; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let [a = b && (c in d)] = []; ;);`,
			Output: `for (let [a = b && c in d] = []; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = () => { (b in c) }; ;);`,
			Output: `for (let a = () => { b in c }; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = () => { a && (b in c) }; ;);`,
			Output: `for (let a = () => { a && b in c }; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = function () { (b in c) }; ;);`,
			Output: `for (let a = function () { b in c }; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = { a: (b in c) }; ;);`,
			Output: `for (let a = { a: b in c }; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = { a: b && (c in d) }; ;);`,
			Output: `for (let a = { a: b && c in d }; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let { a = (b in c) } = {}; ;);`,
			Output: `for (let { a = b in c } = {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let { a = b && (c in d) } = {}; ;);`,
			Output: `for (let { a = b && c in d } = {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let { a: { b = c && (d in e) } } = {}; ;);`,
			Output: `for (let { a: { b = c && d in e } } = {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   "for (let a = `${(a in b)}`; ;);",
			Output: "for (let a = `${a in b}`; ;);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   "for (let a = `${a && (b in c)}`; ;);",
			Output: "for (let a = `${a && b in c}`; ;);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b = (c in d)) => {}; ;);`,
			Output: `for (let a = (b = c in d) => {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b = c && (d in e)) => {}; ;);`,
			Output: `for (let a = (b = c && d in e) => {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b, c = d && (e in f)) => {}; ;);`,
			Output: `for (let a = (b, c = d && e in f) => {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = function (b = c && (d in e)) {}; ;);`,
			Output: `for (let a = function (b = c && d in e) {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = function (b, c = d && (e in f)) {}; ;);`,
			Output: `for (let a = function (b, c = d && e in f) {}; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b((c in d)); ;);`,
			Output: `for (let a = b(c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b(c, (d in e)); ;);`,
			Output: `for (let a = b(c, d in e); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b(c && (d in e)); ;);`,
			Output: `for (let a = b(c && d in e); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b(c, d && (e in f)); ;);`,
			Output: `for (let a = b(c, d && e in f); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = new b((c in d)); ;);`,
			Output: `for (let a = new b(c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = new b(c, (d in e)); ;);`,
			Output: `for (let a = new b(c, d in e); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = new b(c && (d in e)); ;);`,
			Output: `for (let a = new b(c && d in e); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = new b(c, d && (e in f)); ;);`,
			Output: `for (let a = new b(c, d && e in f); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b[(c in d)]; ;);`,
			Output: `for (let a = b[c in d]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b[c && (d in e)]; ;);`,
			Output: `for (let a = b[c && d in e]; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b ? (c in d) : e; ;);`,
			Output: `for (let a = b ? c in d : e; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b ? c && (d in e) : f; ;);`,
			Output: `for (let a = b ? c && d in e : f; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (a ? b && (c in d) : e; ;);`,
			Output: `for (a ? b && c in d : e; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = ((b in c)); ;);`,
			Output: `for (let a = (b in c); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (((a in b)); ;);`,
			Output: `for ((a in b); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (((a && b in c && d)); ;);`,
			Output: `for ((a && b in c && d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (!(b in c)); ;);`,
			Output: `for (let a = !(b in c); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (!(b && c in d)); ;);`,
			Output: `for (let a = !(b && c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = !((b in c) && (d in e)); ;);`,
			Output: `for (let a = !(b in c && d in e); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (x && (b in c)), d = () => { for ((e in f); ;); for ((g in h); ;); }; ;); for((i in j); ;);`,
			Output: `for (let a = (x && b in c), d = () => { for ((e in f); ;); for ((g in h); ;); }; ;); for((i in j); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b in c), d = () => { for ((x && (e in f)); ;); for ((g in h); ;); }; ;); for((i in j); ;);`,
			Output: `for (let a = (b in c), d = () => { for ((x && e in f); ;); for ((g in h); ;); }; ;); for((i in j); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b in c), d = () => { for ((e in f); ;); for ((x && (g in h)); ;); }; ;); for((i in j); ;);`,
			Output: `for (let a = (b in c), d = () => { for ((e in f); ;); for ((x && g in h); ;); }; ;); for((i in j); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b in c), d = () => { for ((e in f); ;); for ((g in h); ;); }; ;); for((x && (i in j)); ;);`,
			Output: `for (let a = (b in c), d = () => { for ((e in f); ;); for ((g in h); ;); }; ;); for((x && i in j); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (x && (b in c)), d = () => { for ((e in f); ;); for ((y && (g in h)); ;); }; ;); for((i in j); ;);`,
			Output: `for (let a = (x && b in c), d = () => { for ((e in f); ;); for ((y && g in h); ;); }; ;); for((i in j); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (x && (b in c)), d = () => { for ((y && (e in f)); ;); for ((z && (g in h)); ;); }; ;); for((w && (i in j)); ;);`,
			Output: `for (let a = (x && b in c), d = () => { for ((y && e in f); ;); for ((z && g in h); ;); }; ;); for((w && i in j); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b); a > (b); a = (b)) a = (b); a = (b);`,
			Output: `for (let a = b; a > b; a = b) a = b; a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for ((a = b); (a > b); (a = b)) (a = b); (a = b);`,
			Output: `for (a = b; a > b; a = b) a = b; a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b; a > (b); a = (b)) a = (b); a = (b);`,
			Output: `for (let a = b; a > b; a = b) a = b; a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b; (a > b); (a = b)) (a = b); (a = b);`,
			Output: `for (let a = b; a > b; a = b) a = b; a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (; a > (b); a = (b)) a = (b); a = (b);`,
			Output: `for (; a > b; a = b) a = b; a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (; (a > b); (a = b)) (a = b); (a = b);`,
			Output: `for (; a > b; a = b) a = b; a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b); a = (b in c); a = (b in c)) a = (b in c); a = (b in c);`,
			Output: `for (let a = b; a = b in c; a = b in c) a = b in c; a = b in c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b); (a in b); (a in b)) (a in b); (a in b);`,
			Output: `for (let a = b; a in b; a in b) a in b; a in b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b; a = (b in c); a = (b in c)) a = (b in c); a = (b in c);`,
			Output: `for (let a = b; a = b in c; a = b in c) a = b in c; a = b in c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = b; (a in b); (a in b)) (a in b); (a in b);`,
			Output: `for (let a = b; a in b; a in b) a in b; a in b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (; a = (b in c); a = (b in c)) a = (b in c); a = (b in c);`,
			Output: `for (; a = b in c; a = b in c) a = b in c; a = b in c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (; (a in b); (a in b)) (a in b); (a in b);`,
			Output: `for (; a in b; a in b) a in b; a in b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for (let a = (b + c), d = () => { for ((e + f); ;); for ((g + h); ;); }; ;); for((i + j); ;);`,
			Output: `for (let a = b + c, d = () => { for (e + f; ;); for (g + h; ;); }; ;); for(i + j; ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `import((source))`,
			Output:          `import(source)`,
			Options:         "[]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `import((source = 'foo.js'))`,
			Output:          `import(source = 'foo.js')`,
			Options:         "[]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:            `import(((s,t)))`,
			Output:          `import((s,t))`,
			Options:         "[]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code:   `[1, ((2, 3))];`,
			Output: `[1, (2, 3)];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `const foo = () => ((bar, baz));`,
			Output: `const foo = () => (bar, baz);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo = ((bar, baz));`,
			Output: `foo = (bar, baz);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo + ((bar + baz));`,
			Output: `foo + (bar + baz);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `((foo + bar)) + baz;`,
			Output: `(foo + bar) + baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo * ((bar + baz));`,
			Output: `foo * (bar + baz);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `((foo + bar)) * baz;`,
			Output: `(foo + bar) * baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `new A(((foo, bar)))`,
			Output: `new A((foo, bar))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `class A{ [((foo, bar))]() {} }`,
			Output: `class A{ [(foo, bar)]() {} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `new ((A, B))()`,
			Output: `new (A, B)()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `((foo, bar)) ? bar : baz;`,
			Output: `(foo, bar) ? bar : baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `((f ? o : o)) ? bar : baz;`,
			Output: `(f ? o : o) ? bar : baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `((f = oo)) ? bar : baz;`,
			Output: `(f = oo) ? bar : baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo ? ((bar, baz)) : baz;`,
			Output: `foo ? (bar, baz) : baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo ? bar : ((bar, baz));`,
			Output: `foo ? bar : (bar, baz);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo(bar = ((baz1, baz2))) {}`,
			Output: `function foo(bar = (baz1, baz2)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `var foo = { bar: ((baz1, baz2)) };`,
			Output: `var foo = { bar: (baz1, baz2) };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `var foo = { [((bar1, bar2))]: baz };`,
			Output: `var foo = { [(bar1, bar2)]: baz };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a+/**/(/**/b)`,
			Output:          `a+/**//**/b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a+/**/(//
b)`,
			Output: `a+/**///
b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a in(/**/b)`,
			Output:          `a in/**/b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a in(//
b)`,
			Output: `a in//
b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a+(/**/b)`,
			Output:          `a+/**/b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a+/**/(b)`,
			Output:          `a+/**/b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a+(//
b)`,
			Output: `a+//
b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a+//
(b)`,
			Output: `a+//
b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a+(/^b$/)`,
			Output:          `a+/^b$/`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a/(/**/b)`,
			Output:          `a/ /**/b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a/(//
b)`,
			Output: `a/ //
b`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a/(/^b$/)`,
			Output:          `a/ /^b$/`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = ((a ?? b)) || c`,
			Output:          `var v = (a ?? b) || c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = a ?? ((b || c))`,
			Output:          `var v = a ?? (b || c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = ((a ?? b)) && c`,
			Output:          `var v = (a ?? b) && c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = a ?? ((b && c))`,
			Output:          `var v = a ?? (b && c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = ((a || b)) ?? c`,
			Output:          `var v = (a || b) ?? c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = a || ((b ?? c))`,
			Output:          `var v = a || (b ?? c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = ((a && b)) ?? c`,
			Output:          `var v = (a && b) ?? c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = a && ((b ?? c))`,
			Output:          `var v = a && (b ?? c)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = (a ?? b) ? b : c`,
			Output:          `var v = a ?? b ? b : c`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = (a | b) ?? c | d`,
			Output:          `var v = a | b ?? c | d`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = a | b ?? (c | d)`,
			Output:          `var v = a | b ?? c | d`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `const span = /**@type {HTMLSpanElement}*/(event.currentTarget);`,
			Output:  `const span = /**@type {HTMLSpanElement}*/event.currentTarget;`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `if (/** @type {Compiler | MultiCompiler} */(options).hooks) console.log('good');`,
			Output:  `if (/** @type {Compiler | MultiCompiler} */options.hooks) console.log('good');`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                validate(/** @type {Schema} */ (schema), options, {
                    name: "Dev Server",
                    baseDataPath: "options",
                });
            `,
			Output: `
                validate(/** @type {Schema} */ schema, options, {
                    name: "Dev Server",
                    baseDataPath: "options",
                });
            `,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                if (condition) {
                    /** @type {ServerOptions} */
                    (options.server.options).requestCert = false;
                }
            `,
			Output: `
                if (condition) {
                    /** @type {ServerOptions} */
                    options.server.options.requestCert = false;
                }
            `,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `const net = ipaddr.parseCIDR(/** @type {string} */ (cidr));`,
			Output:  `const net = ipaddr.parseCIDR(/** @type {string} */ cidr);`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `const span = /**@type {HTMLSpanElement}*/(event.currentTarget);`,
			Output:  `const span = /**@type {HTMLSpanElement}*/event.currentTarget;`,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"invalid\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `if (/** @type {Compiler | MultiCompiler} */(options).hooks) console.log('good');`,
			Output:  `if (/** @type {Compiler | MultiCompiler} */options.hooks) console.log('good');`,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"invalid\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                validate(/** @type {Schema} */ (schema), options, {
                    name: "Dev Server",
                    baseDataPath: "options",
                });
            `,
			Output: `
                validate(/** @type {Schema} */ schema, options, {
                    name: "Dev Server",
                    baseDataPath: "options",
                });
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"invalid\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                if (condition) {
                    /** @type {ServerOptions} */
                    (options.server.options).requestCert = false;
                }
            `,
			Output: `
                if (condition) {
                    /** @type {ServerOptions} */
                    options.server.options.requestCert = false;
                }
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"invalid\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                if (condition) {
                    /** @type {ServerOptions} */
                    /** extra comment */
                    (options.server.options).requestCert = false;
                }
            `,
			Output: `
                if (condition) {
                    /** @type {ServerOptions} */
                    /** extra comment */
                    options.server.options.requestCert = false;
                }
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                if (condition) {
                    /** @type {ServerOptions} */
                    ((options.server.options)).requestCert = false;
                }
            `,
			Output: `
                if (condition) {
                    /** @type {ServerOptions} */
                    (options.server.options).requestCert = false;
                }
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                if (condition) {
                    /** @type {ServerOptions} */
                    let foo = "bar";
                    (options.server.options).requestCert = false;
                }
            `,
			Output: `
                if (condition) {
                    /** @type {ServerOptions} */
                    let foo = "bar";
                    options.server.options.requestCert = false;
                }
            `,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"@type\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `const net = ipaddr.parseCIDR(/** @type {string} */ (cidr));`,
			Output:  `const net = ipaddr.parseCIDR(/** @type {string} */ cidr);`,
			Options: "[\"all\",{\"allowParensAfterCommentPattern\":\"invalid\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = (obj?.aaa)?.aaa`,
			Output:          `var v = obj?.aaa?.aaa`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var v = (obj.aaa)?.aaa`,
			Output:          `var v = obj.aaa?.aaa`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = (function(){})?.call()`,
			Output:          `var foo = function(){}?.call()`,
			Options:         "[\"all\",{\"enforceForFunctionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = (function(){}?.call())`,
			Output:          `var foo = function(){}?.call()`,
			Options:         "[\"all\",{\"enforceForFunctionPrototypeMethods\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(Object.prototype.toString.call())`,
			Output:          `Object.prototype.toString.call()`,
			Options:         "[\"all\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) = function foo() {};`,
			Output:          `a = function foo() {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) = class Bar {};`,
			Output:          `a = class Bar {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a.b) = function () {};`,
			Output:          `a.b = function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `(newClass) = [(one)] = class { static * [Symbol.iterator]() { yield 1; } };`,
			Output: `newClass = [one] = class { static * [Symbol.iterator]() { yield 1; } };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `((a)) = () => {};`,
			Output:          `(a) = () => {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) = (function () {})();`,
			Output:          `a = (function () {})();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) **= function () {};`,
			Output:          `a **= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) *= function () {};`,
			Output:          `a *= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) /= function () {};`,
			Output:          `a /= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) %= function () {};`,
			Output:          `a %= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) += function () {};`,
			Output:          `a += function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) -= function () {};`,
			Output:          `a -= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) <<= function () {};`,
			Output:          `a <<= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) >>= function () {};`,
			Output:          `a >>= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) >>>= function () {};`,
			Output:          `a >>>= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) &= function () {};`,
			Output:          `a &= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) ^= function () {};`,
			Output:          `a ^= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(a) |= function () {};`,
			Output:          `a |= function () {};`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `('use strict');`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function f() { ('abc'); }`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(function () { ('abc'); })();`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `_ = () => { ('abc'); };`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `'use strict';("foobar");`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo(); ('bar');`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `foo = { bar() { ; ("baz"); } };`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(12345);`,
			Output:          `12345;`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(('foobar'));`,
			Output:          `('foobar');`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            "(`foobar`);",
			Output:          "`foobar`;",
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `void ('foobar');`,
			Output:          `void 'foobar';`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `_ = () => ('abc');`,
			Output:          `_ = () => 'abc';`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if (foo) ('bar');`,
			Output:          `if (foo) 'bar';`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `const foo = () => ('bar');`,
			Output:          `const foo = () => 'bar';`,
			Options:         "[]",
			LanguageOptions: "{}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
