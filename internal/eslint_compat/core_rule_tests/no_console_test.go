// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoConsoleRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-console", []ValidTestCase{
		{Code: `Console.info(foo)`},
		{
			Code:    `console.info(foo)`,
			Options: "[{\"allow\":[\"info\"]}]",
		},
		{
			Code:    `console.warn(foo)`,
			Options: "[{\"allow\":[\"warn\"]}]",
		},
		{
			Code:    `console.error(foo)`,
			Options: "[{\"allow\":[\"error\"]}]",
		},
		{
			Code:    `console.log(foo)`,
			Options: "[{\"allow\":[\"log\"]}]",
		},
		{
			Code:    `console.info(foo)`,
			Options: "[{\"allow\":[\"warn\",\"info\"]}]",
		},
		{
			Code:    `console.warn(foo)`,
			Options: "[{\"allow\":[\"error\",\"warn\"]}]",
		},
		{
			Code:    `console.error(foo)`,
			Options: "[{\"allow\":[\"log\",\"error\"]}]",
		},
		{
			Code:    `console.log(foo)`,
			Options: "[{\"allow\":[\"info\",\"log\",\"warn\"]}]",
		},
		{Code: `var console = require('myconsole'); console.log(foo)`},
	}, []InvalidTestCase{
		{
			Code: `if (a) console.warn(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `foo(console.log)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `console.log(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `console.error(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `console.info(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `console.warn(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `switch (a) { case 1: console.log(foo) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `switch (a) { case 1:  }`,
						},
					},
				},
			},
		},
		{
			Code: `if (a) { console.warn(foo) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `if (a) {  }`,
						},
					},
				},
			},
		},
		{
			Code: `a();
console.log(foo);
b();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output: `a();

b();`,
						},
					},
				},
			},
		},
		{
			Code:            `class A { static { console.info(foo) } }`,
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `class A { static {  } }`,
						},
					},
				},
			},
		},
		{
			Code: `a()
console.log(foo);
[1, 2, 3].forEach(a => doSomething(a))`,
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a++
console.log();
/b/`,
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a();
console.log(foo);
[1, 2, 3].forEach(a => doSomething(a));`,
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output: `a();

[1, 2, 3].forEach(a => doSomething(a));`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a) console.info(foo)`,
			Options: "[{\"allow\":[\"warn\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
				},
			},
		},
		{
			Code:    `foo(console.warn)`,
			Options: "[{\"allow\":[\"log\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
				},
			},
		},
		{
			Code:    `console.log(foo)`,
			Options: "[{\"allow\":[\"error\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `console.error(foo)`,
			Options: "[{\"allow\":[\"warn\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `console.info(foo)`,
			Options: "[{\"allow\":[\"log\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `console.warn(foo)`,
			Options: "[{\"allow\":[\"error\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `switch (a) { case 1: console.log(foo) }`,
			Options: "[{\"allow\":[\"error\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `switch (a) { case 1:  }`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a) { console.info(foo) }`,
			Options: "[{\"allow\":[\"warn\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `if (a) {  }`,
						},
					},
				},
			},
		},
		{
			Code:            `class A { static { console.error(foo) } }`,
			Options:         "[{\"allow\":[\"log\"]}]",
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `class A { static {  } }`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a) console.log(foo)`,
			Options: "[{\"allow\":[\"warn\",\"error\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
				},
			},
		},
		{
			Code:    `foo(console.info)`,
			Options: "[{\"allow\":[\"warn\",\"error\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
				},
			},
		},
		{
			Code:    `console.log(foo)`,
			Options: "[{\"allow\":[\"warn\",\"info\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `console.error(foo)`,
			Options: "[{\"allow\":[\"warn\",\"info\",\"log\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `console.info(foo)`,
			Options: "[{\"allow\":[\"warn\",\"error\",\"log\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `console.warn(foo)`,
			Options: "[{\"allow\":[\"info\",\"log\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `switch (a) { case 1: console.error(foo) }`,
			Options: "[{\"allow\":[\"info\",\"log\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `switch (a) { case 1:  }`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a) { console.log(foo) }`,
			Options: "[{\"allow\":[\"warn\",\"error\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `if (a) {  }`,
						},
					},
				},
			},
		},
		{
			Code:            `class A { static { console.info(foo) } }`,
			Options:         "[{\"allow\":[\"log\",\"error\",\"warn\"]}]",
			LanguageOptions: "{\"ecmaVersion\":\"latest\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "limited",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    `class A { static {  } }`,
						},
					},
				},
			},
		},
		{
			Code: `console[foo](bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeMethodCall",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `console[0](foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeMethodCall",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `console.log(foo)`,
			LanguageOptions: "{\"globals\":{\"console\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConsole",
							Output:    ``,
						},
					},
				},
			},
		},
	})
}
