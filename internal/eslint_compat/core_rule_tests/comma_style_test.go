// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCommaStyleRule(t *testing.T) {
	RunRuleTester(t, "{}", "comma-style", []ValidTestCase{
		{Code: `var foo = 1, bar = 3;`},
		{Code: `var foo = {'a': 1, 'b': 2};`},
		{Code: `var foo = [1, 2];`},
		{Code: `var foo = [, 2];`},
		{Code: `var foo = [1, ];`},
		{Code: `var foo = ['apples', 
 'oranges'];`},
		{Code: `var foo = {'a': 1, 
 'b': 2, 
'c': 3};`},
		{Code: `var foo = {'a': 1, 
 'b': 2, 'c':
 3};`},
		{Code: `var foo = {'a': 1, 
 'b': 2, 'c': [{'d': 1}, 
 {'e': 2}, 
 {'f': 3}]};`},
		{Code: `var foo = [1, 
2, 
3];`},
		{Code: `function foo(){var a=[1,
 2]}`},
		{Code: `function foo(){return {'a': 1,
'b': 2}}`},
		{Code: `var foo = 
1, 
bar = 
2;`},
		{Code: `var foo = [
(bar),
baz
];`},
		{Code: `var foo = [
(bar
),
baz
];`},
		{Code: `var foo = [
(
bar
),
baz
];`},
		{Code: `new Foo(a
,b);`},
		{
			Code: `var foo = [
(bar
)
,baz
];`,
			Options: "[\"first\"]",
		},
		{Code: `var foo = 
1, 
bar = [1,
2,
3]`},
		{
			Code: `var foo = ['apples'
,'oranges'];`,
			Options: "[\"first\"]",
		},
		{
			Code:    `var foo = 1, bar = 2;`,
			Options: "[\"first\"]",
		},
		{
			Code: `var foo = 1 
 ,bar = 2;`,
			Options: "[\"first\"]",
		},
		{
			Code: `var foo = {'a': 1 
 ,'b': 2 
,'c': 3};`,
			Options: "[\"first\"]",
		},
		{
			Code: `var foo = [1 
 ,2 
, 3];`,
			Options: "[\"first\"]",
		},
		{
			Code: `function foo(){return {'a': 1
,'b': 2}}`,
			Options: "[\"first\"]",
		},
		{
			Code: `function foo(){var a=[1
, 2]}`,
			Options: "[\"first\"]",
		},
		{
			Code: `new Foo(a,
b);`,
			Options: "[\"first\"]",
		},
		{Code: `f(1
, 2);`},
		{Code: `function foo(a
, b) { return a + b; }`},
		{
			Code: `var a = 'a',
o = 'o';`,
			Options: "[\"first\",{\"exceptions\":{\"VariableDeclaration\":true}}]",
		},
		{
			Code: `var arr = ['a',
'o'];`,
			Options: "[\"first\",{\"exceptions\":{\"ArrayExpression\":true}}]",
		},
		{
			Code: `var obj = {a: 'a',
b: 'b'};`,
			Options: "[\"first\",{\"exceptions\":{\"ObjectExpression\":true}}]",
		},
		{
			Code: `var a = 'a',
o = 'o',
arr = [1,
2];`,
			Options: "[\"first\",{\"exceptions\":{\"VariableDeclaration\":true,\"ArrayExpression\":true}}]",
		},
		{
			Code: `var ar ={fst:1,
snd: [1,
2]};`,
			Options: "[\"first\",{\"exceptions\":{\"ArrayExpression\":true,\"ObjectExpression\":true}}]",
		},
		{
			Code: `var a = 'a',
ar ={fst:1,
snd: [1,
2]};`,
			Options: "[\"first\",{\"exceptions\":{\"ArrayExpression\":true,\"ObjectExpression\":true,\"VariableDeclaration\":true}}]",
		},
		{
			Code: `const foo = (a
, b) => { return a + b; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo([a
, b]) { return a + b; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = ([a
, b]) => { return a + b; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `import { a
, b } from './source';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `const foo = function (a
, b) { return a + b; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {foo
, bar} = {foo:'apples', bar:'oranges'};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {foo
, bar} = {foo:'apples', bar:'oranges'};`,
			Options:         "[\"first\",{\"exceptions\":{\"ObjectPattern\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `new Foo(a,
b);`,
			Options: "[\"first\",{\"exceptions\":{\"NewExpression\":true}}]",
		},
		{
			Code: `f(1
, 2);`,
			Options: "[\"last\",{\"exceptions\":{\"CallExpression\":true}}]",
		},
		{
			Code: `function foo(a
, b) { return a + b; }`,
			Options: "[\"last\",{\"exceptions\":{\"FunctionDeclaration\":true}}]",
		},
		{
			Code: `const foo = function (a
, b) { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"FunctionExpression\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo([a
, b]) { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = (a
, b) => { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrowFunctionExpression\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = ([a
, b]) => { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `import { a
, b } from './source';`,
			Options:         "[\"last\",{\"exceptions\":{\"ImportDeclaration\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var {foo
, bar} = {foo:'apples', bar:'oranges'};`,
			Options:         "[\"last\",{\"exceptions\":{\"ObjectPattern\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `new Foo(a,
b);`,
			Options: "[\"last\",{\"exceptions\":{\"NewExpression\":false}}]",
		},
		{
			Code: `new Foo(a
,b);`,
			Options: "[\"last\",{\"exceptions\":{\"NewExpression\":true}}]",
		},
		{Code: `var foo = [
 , 
 1, 
 2 
];`},
		{
			Code: `const [
 , 
 , 
 a, 
 b, 
] = arr;`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const [
 ,, 
 a, 
 b, 
] = arr;`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const arr = [
 1 
 , 
 ,2 
]`,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const arr = [
 ,'fifi' 
]`,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo = { a: 1. //comment 
, b: 2
}`,
			Output: `var foo = { a: 1., //comment 
 b: 2
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `var foo = { a: 1. //comment 
 //comment1 
 //comment2 
, b: 2
}`,
			Output: `var foo = { a: 1., //comment 
 //comment1 
 //comment2 
 b: 2
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `var foo = 1
,
bar = 2;`,
			Output: `var foo = 1,
bar = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
		{
			Code: `var foo = 1 //comment
,
bar = 2;`,
			Output: `var foo = 1, //comment
bar = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
		{
			Code: `var foo = 1 //comment
, // comment 2
bar = 2;`,
			Output: `var foo = 1, //comment // comment 2
bar = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
		{
			Code: `new Foo(a
,
b);`,
			Output: `new Foo(a,
b);`,
			Options: "[\"last\",{\"exceptions\":{\"NewExpression\":false}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
		{
			Code: `var foo = 1
,bar = 2;`,
			Output: `var foo = 1,
bar = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `f([1,2
,3]);`,
			Output: `f([1,2,
3]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `f([1,2
,]);`,
			Output: `f([1,2,
]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `f([,2
,3]);`,
			Output: `f([,2,
3]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `var foo = ['apples'
, 'oranges'];`,
			Output: `var foo = ['apples',
 'oranges'];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `var [foo
, bar] = ['apples', 'oranges'];`,
			Output: `var [foo,
 bar] = ['apples', 'oranges'];`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `f(1
, 2);`,
			Output: `f(1,
 2);`,
			Options: "[\"last\",{\"exceptions\":{\"CallExpression\":false}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `function foo(a
, b) { return a + b; }`,
			Output: `function foo(a,
 b) { return a + b; }`,
			Options: "[\"last\",{\"exceptions\":{\"FunctionDeclaration\":false}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `const foo = function (a
, b) { return a + b; }`,
			Output: `const foo = function (a,
 b) { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"FunctionExpression\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `function foo([a
, b]) { return a + b; }`,
			Output: `function foo([a,
 b]) { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `const foo = (a
, b) => { return a + b; }`,
			Output: `const foo = (a,
 b) => { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrowFunctionExpression\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `const foo = ([a
, b]) => { return a + b; }`,
			Output: `const foo = ([a,
 b]) => { return a + b; }`,
			Options:         "[\"last\",{\"exceptions\":{\"ArrayPattern\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `import { a
, b } from './source';`,
			Output: `import { a,
 b } from './source';`,
			Options:         "[\"last\",{\"exceptions\":{\"ImportDeclaration\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `var {foo
, bar} = {foo:'apples', bar:'oranges'};`,
			Output: `var {foo,
 bar} = {foo:'apples', bar:'oranges'};`,
			Options:         "[\"last\",{\"exceptions\":{\"ObjectPattern\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `var foo = 1,
bar = 2;`,
			Output: `var foo = 1
,bar = 2;`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
					Column:    12,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `f([1,
2,3]);`,
			Output: `f([1
,2,3]);`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var foo = ['apples', 
 'oranges'];`,
			Output: `var foo = ['apples' 
 ,'oranges'];`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var foo = {'a': 1, 
 'b': 2
 ,'c': 3};`,
			Output: `var foo = {'a': 1 
 ,'b': 2
 ,'c': 3};`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var a = 'a',
o = 'o',
arr = [1,
2];`,
			Output: `var a = 'a',
o = 'o',
arr = [1
,2];`,
			Options: "[\"first\",{\"exceptions\":{\"VariableDeclaration\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var a = 'a',
obj = {a: 'a',
b: 'b'};`,
			Output: `var a = 'a',
obj = {a: 'a'
,b: 'b'};`,
			Options: "[\"first\",{\"exceptions\":{\"VariableDeclaration\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var a = 'a',
obj = {a: 'a',
b: 'b'};`,
			Output: `var a = 'a'
,obj = {a: 'a',
b: 'b'};`,
			Options: "[\"first\",{\"exceptions\":{\"ObjectExpression\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var a = 'a',
arr = [1,
2];`,
			Output: `var a = 'a'
,arr = [1,
2];`,
			Options: "[\"first\",{\"exceptions\":{\"ArrayExpression\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var ar =[1,
{a: 'a',
b: 'b'}];`,
			Output: `var ar =[1,
{a: 'a'
,b: 'b'}];`,
			Options: "[\"first\",{\"exceptions\":{\"ArrayExpression\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var ar =[1,
{a: 'a',
b: 'b'}];`,
			Output: `var ar =[1
,{a: 'a',
b: 'b'}];`,
			Options: "[\"first\",{\"exceptions\":{\"ObjectExpression\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var ar ={fst:1,
snd: [1,
2]};`,
			Output: `var ar ={fst:1,
snd: [1
,2]};`,
			Options: "[\"first\",{\"exceptions\":{\"ObjectExpression\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var ar ={fst:1,
snd: [1,
2]};`,
			Output: `var ar ={fst:1
,snd: [1,
2]};`,
			Options: "[\"first\",{\"exceptions\":{\"ArrayExpression\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `new Foo(a,
b);`,
			Output: `new Foo(a
,b);`,
			Options: "[\"first\",{\"exceptions\":{\"NewExpression\":false}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaFirst",
				},
			},
		},
		{
			Code: `var foo = [
(bar
)
,
baz
];`,
			Output: `var foo = [
(bar
),
baz
];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `[(foo),
,
bar]`,
			Output: `[(foo),,
bar]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
		{
			Code: `new Foo(a
,b);`,
			Output: `new Foo(a,
b);`,
			Options: "[\"last\",{\"exceptions\":{\"NewExpression\":false}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCommaLast",
				},
			},
		},
		{
			Code: `[
[foo(3)],
,
bar
];`,
			Output: `[
[foo(3)],,
bar
];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
		{
			Code: `[foo//
,/*block
comment*/];`,
			Output: `[foo,//
/*block
comment*/];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBeforeAndAfterComma",
				},
			},
		},
	})
}
