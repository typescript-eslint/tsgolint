// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestGeneratorStarSpacingRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018}}", "generator-star-spacing", []ValidTestCase{
		{Code: `function foo(){}`},
		{Code: `function *foo(){}`},
		{Code: `function *foo(arg1, arg2){}`},
		{Code: `var foo = function *foo(){};`},
		{Code: `var foo = function *(){};`},
		{Code: `var foo = { *foo(){} };`},
		{Code: `var foo = {*foo(){} };`},
		{Code: `class Foo { *foo(){} }`},
		{Code: `class Foo {*foo(){} }`},
		{Code: `class Foo { static *foo(){} }`},
		{Code: `var foo = {*[ foo ](){} };`},
		{Code: `class Foo {*[ foo ](){} }`},
		{
			Code:    `function foo(){}`,
			Options: "[\"before\"]",
		},
		{
			Code:    `function *foo(){}`,
			Options: "[\"before\"]",
		},
		{
			Code:    `function *foo(arg1, arg2){}`,
			Options: "[\"before\"]",
		},
		{
			Code:    `var foo = function *foo(){};`,
			Options: "[\"before\"]",
		},
		{
			Code:    `var foo = function *(){};`,
			Options: "[\"before\"]",
		},
		{
			Code:    `var foo = { *foo(){} };`,
			Options: "[\"before\"]",
		},
		{
			Code:    `var foo = {*foo(){} };`,
			Options: "[\"before\"]",
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Options: "[\"before\"]",
		},
		{
			Code:    `class Foo {*foo(){} }`,
			Options: "[\"before\"]",
		},
		{
			Code:    `class Foo { static *foo(){} }`,
			Options: "[\"before\"]",
		},
		{
			Code:    `class Foo {*[ foo ](){} }`,
			Options: "[\"before\"]",
		},
		{
			Code:    `var foo = {*[ foo ](){} };`,
			Options: "[\"before\"]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[\"after\"]",
		},
		{
			Code:    `function* foo(){}`,
			Options: "[\"after\"]",
		},
		{
			Code:    `function* foo(arg1, arg2){}`,
			Options: "[\"after\"]",
		},
		{
			Code:    `var foo = function* foo(){};`,
			Options: "[\"after\"]",
		},
		{
			Code:    `var foo = function* (){};`,
			Options: "[\"after\"]",
		},
		{
			Code:    `var foo = {* foo(){} };`,
			Options: "[\"after\"]",
		},
		{
			Code:    `var foo = { * foo(){} };`,
			Options: "[\"after\"]",
		},
		{
			Code:    `class Foo {* foo(){} }`,
			Options: "[\"after\"]",
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Options: "[\"after\"]",
		},
		{
			Code:    `class Foo { static* foo(){} }`,
			Options: "[\"after\"]",
		},
		{
			Code:    `var foo = {* [foo](){} };`,
			Options: "[\"after\"]",
		},
		{
			Code:    `class Foo {* [foo](){} }`,
			Options: "[\"after\"]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[\"both\"]",
		},
		{
			Code:    `function * foo(){}`,
			Options: "[\"both\"]",
		},
		{
			Code:    `function * foo(arg1, arg2){}`,
			Options: "[\"both\"]",
		},
		{
			Code:    `var foo = function * foo(){};`,
			Options: "[\"both\"]",
		},
		{
			Code:    `var foo = function * (){};`,
			Options: "[\"both\"]",
		},
		{
			Code:    `var foo = { * foo(){} };`,
			Options: "[\"both\"]",
		},
		{
			Code:    `var foo = {* foo(){} };`,
			Options: "[\"both\"]",
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Options: "[\"both\"]",
		},
		{
			Code:    `class Foo {* foo(){} }`,
			Options: "[\"both\"]",
		},
		{
			Code:    `class Foo { static * foo(){} }`,
			Options: "[\"both\"]",
		},
		{
			Code:    `var foo = {* [foo](){} };`,
			Options: "[\"both\"]",
		},
		{
			Code:    `class Foo {* [foo](){} }`,
			Options: "[\"both\"]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `function*foo(){}`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `function*foo(arg1, arg2){}`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `var foo = function*foo(){};`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `var foo = function*(){};`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `var foo = {*foo(){} };`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `var foo = { *foo(){} };`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `class Foo {*foo(){} }`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `class Foo { static*foo(){} }`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `var foo = {*[ foo ](){} };`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `class Foo {*[ foo ](){} }`,
			Options: "[\"neither\"]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `function *foo(){}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `function *foo(arg1, arg2){}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var foo = function *foo(){};`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var foo = function *(){};`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var foo = { *foo(){} };`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var foo = {*foo(){} };`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `class Foo {*foo(){} }`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `class Foo { static *foo(){} }`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `function* foo(){}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `function* foo(arg1, arg2){}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `var foo = function* foo(){};`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `var foo = function* (){};`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `var foo = {* foo(){} };`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `var foo = { * foo(){} };`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `class Foo {* foo(){} }`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `class Foo { static* foo(){} }`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `function * foo(){}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `function * foo(arg1, arg2){}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var foo = function * foo(){};`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var foo = function * (){};`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var foo = { * foo(){} };`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var foo = {* foo(){} };`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `class Foo {* foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `class Foo { static * foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `function*foo(){}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `function*foo(arg1, arg2){}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var foo = function*foo(){};`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var foo = function*(){};`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var foo = {*foo(){} };`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var foo = { *foo(){} };`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `class Foo {*foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `class Foo { static*foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `function * foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"named\":\"both\"}]",
		},
		{
			Code:    `var foo = function * (){};`,
			Options: "[{\"before\":false,\"after\":false,\"anonymous\":\"both\"}]",
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
		},
		{
			Code:    `var foo = { * foo(){} }`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
		},
		{
			Code:    `var foo = { bar: function * () {} }`,
			Options: "[{\"before\":false,\"after\":false,\"anonymous\":\"both\"}]",
		},
		{
			Code:    `class Foo { static * foo(){} }`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
		},
		{
			Code:    `function *foo(){}`,
			Options: "[{\"method\":\"both\"}]",
		},
		{
			Code:    `function*foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
		},
		{
			Code:    `function * foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"named\":{\"before\":true,\"after\":true}}]",
		},
		{
			Code:    `function *foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"named\":{\"before\":true}}]",
		},
		{
			Code:            `async function foo() { }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(async function() { })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => { }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({async foo() { }})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `class A {async foo() { }}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(class {async foo() { }})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
	}, []InvalidTestCase{
		{
			Code:   `function*foo(){}`,
			Output: `function *foo(){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:   `function* foo(arg1, arg2){}`,
			Output: `function *foo(arg1, arg2){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `var foo = function*foo(){};`,
			Output: `var foo = function *foo(){};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:   `var foo = function* (){};`,
			Output: `var foo = function *(){};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `var foo = {* foo(){} };`,
			Output: `var foo = {*foo(){} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `class Foo {* foo(){} }`,
			Output: `class Foo {*foo(){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `class Foo { static* foo(){} }`,
			Output: `class Foo { static *foo(){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function *foo(){}`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:    `function* foo(arg1, arg2){}`,
			Output:  `function *foo(arg1, arg2){}`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = function*foo(){};`,
			Output:  `var foo = function *foo(){};`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:    `var foo = function* (){};`,
			Output:  `var foo = function *(){};`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = {* foo(){} };`,
			Output:  `var foo = {*foo(){} };`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo {* foo(){} }`,
			Output:  `class Foo {*foo(){} }`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = {* [ foo ](){} };`,
			Output:  `var foo = {*[ foo ](){} };`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo {* [ foo ](){} }`,
			Output:  `class Foo {*[ foo ](){} }`,
			Options: "[\"before\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function* foo(){}`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function *foo(arg1, arg2){}`,
			Output:  `function* foo(arg1, arg2){}`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function *foo(){};`,
			Output:  `var foo = function* foo(){};`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function *(){};`,
			Output:  `var foo = function* (){};`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = { *foo(){} };`,
			Output:  `var foo = { * foo(){} };`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Output:  `class Foo { * foo(){} }`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { static *foo(){} }`,
			Output:  `class Foo { static* foo(){} }`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = { *[foo](){} };`,
			Output:  `var foo = { * [foo](){} };`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { *[foo](){} }`,
			Output:  `class Foo { * [foo](){} }`,
			Options: "[\"after\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function * foo(){}`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function*foo(arg1, arg2){}`,
			Output:  `function * foo(arg1, arg2){}`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function*foo(){};`,
			Output:  `var foo = function * foo(){};`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function*(){};`,
			Output:  `var foo = function * (){};`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = {*foo(){} };`,
			Output:  `var foo = {* foo(){} };`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo {*foo(){} }`,
			Output:  `class Foo {* foo(){} }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { static*foo(){} }`,
			Output:  `class Foo { static * foo(){} }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = {*[foo](){} };`,
			Output:  `var foo = {* [foo](){} };`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo {*[foo](){} }`,
			Output:  `class Foo {* [foo](){} }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function * foo(){}`,
			Output:  `function*foo(){}`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function * foo(arg1, arg2){}`,
			Output:  `function*foo(arg1, arg2){}`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = function * foo(){};`,
			Output:  `var foo = function*foo(){};`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = function * (){};`,
			Output:  `var foo = function*(){};`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = { * foo(){} };`,
			Output:  `var foo = { *foo(){} };`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Output:  `class Foo { *foo(){} }`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { static * foo(){} }`,
			Output:  `class Foo { static*foo(){} }`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = { * [ foo ](){} };`,
			Output:  `var foo = { *[ foo ](){} };`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { * [ foo ](){} }`,
			Output:  `class Foo { *[ foo ](){} }`,
			Options: "[\"neither\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function *foo(){}`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:    `function* foo(arg1, arg2){}`,
			Output:  `function *foo(arg1, arg2){}`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = function*foo(){};`,
			Output:  `var foo = function *foo(){};`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:    `var foo = function* (){};`,
			Output:  `var foo = function *(){};`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = {* foo(){} };`,
			Output:  `var foo = {*foo(){} };`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo {* foo(){} }`,
			Output:  `class Foo {*foo(){} }`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function* foo(){}`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function *foo(arg1, arg2){}`,
			Output:  `function* foo(arg1, arg2){}`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function *foo(){};`,
			Output:  `var foo = function* foo(){};`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function *(){};`,
			Output:  `var foo = function* (){};`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = { *foo(){} };`,
			Output:  `var foo = { * foo(){} };`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Output:  `class Foo { * foo(){} }`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { static *foo(){} }`,
			Output:  `class Foo { static* foo(){} }`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function * foo(){}`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function*foo(arg1, arg2){}`,
			Output:  `function * foo(arg1, arg2){}`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function*foo(){};`,
			Output:  `var foo = function * foo(){};`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function*(){};`,
			Output:  `var foo = function * (){};`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = {*foo(){} };`,
			Output:  `var foo = {* foo(){} };`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo {*foo(){} }`,
			Output:  `class Foo {* foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { static*foo(){} }`,
			Output:  `class Foo { static * foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function * foo(){}`,
			Output:  `function*foo(){}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function * foo(arg1, arg2){}`,
			Output:  `function*foo(arg1, arg2){}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = function * foo(){};`,
			Output:  `var foo = function*foo(){};`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = function * (){};`,
			Output:  `var foo = function*(){};`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `var foo = { * foo(){} };`,
			Output:  `var foo = { *foo(){} };`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { * foo(){} }`,
			Output:  `class Foo { *foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { static * foo(){} }`,
			Output:  `class Foo { static*foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function * foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"named\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = function*(){};`,
			Output:  `var foo = function * (){};`,
			Options: "[{\"before\":false,\"after\":false,\"anonymous\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { *foo(){} }`,
			Output:  `class Foo { * foo(){} }`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = { *foo(){} }`,
			Output:  `var foo = { * foo(){} }`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `var foo = { bar: function*() {} }`,
			Output:  `var foo = { bar: function * () {} }`,
			Options: "[{\"before\":false,\"after\":false,\"anonymous\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { static*foo(){} }`,
			Output:  `class Foo { static * foo(){} }`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function *foo(){}`,
			Options: "[{\"method\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:    `function * foo(){}`,
			Output:  `function*foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"method\":\"both\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function * foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"named\":{\"before\":true,\"after\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `function*foo(){}`,
			Output:  `function *foo(){}`,
			Options: "[{\"before\":false,\"after\":false,\"named\":{\"before\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
			},
		},
		{
			Code:    `({ async * foo(){} })`,
			Output:  `({ async*foo(){} })`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `({ async*foo(){} })`,
			Output:  `({ async * foo(){} })`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { async * foo(){} }`,
			Output:  `class Foo { async*foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { async*foo(){} }`,
			Output:  `class Foo { async * foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
		{
			Code:    `class Foo { static async * foo(){} }`,
			Output:  `class Foo { static async*foo(){} }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `class Foo { static async*foo(){} }`,
			Output:  `class Foo { static async * foo(){} }`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingBefore",
				},
				{
					MessageId: "missingAfter",
				},
			},
		},
	})
}
