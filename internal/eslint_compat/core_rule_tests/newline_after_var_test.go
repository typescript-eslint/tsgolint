// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNewlineAfterVarRule(t *testing.T) {
	RunRuleTester(t, "{}", "newline-after-var", []ValidTestCase{
		{
			Code:    `console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code:    `console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var greet = 'hello';`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var greet = 'hello';`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var greet = 'hello';console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';

console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';


console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';



console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';    

console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';    
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello'; // inline comment

console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello'; // inline comment
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment

console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */

console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
// second-line comment

console.log(greet);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
// second-line comment
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
/* block comment
block comment */
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var greet = 'hello';var name = 'world';console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
var name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';
// inline comment
var name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
var name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello';
// inline comment
var name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
var name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var greet = 'hello', name = 'world';console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello', name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello', // inline comment
name = 'world'; // inline comment

console.log(greet, name);`,
			Options: "[\"always\"]",
		},
		{
			Code: `var greet = 'hello', // inline comment
name = 'world'; // inline comment
console.log(greet, name);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';
// next-line comment
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';
/* block comment
block comment */
console.log(greet);`,
			Options: "[\"never\"]",
		},
		{
			Code: `let greet = 'hello';

console.log(greet);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let greet = 'hello';
console.log(greet);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const greet = 'hello';

console.log(greet);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const greet = 'hello';
console.log(greet);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let greet = 'hello';
const name = 'world';

console.log(greet, name);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(let a = 1; a < 1; a++){
 break;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(var a = 1; a < 1; a++){
 break;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(let a = 1; a < 1; a++){
 break;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(var a = 1; a < 1; a++){
 break;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(let a in obj){
 break;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(var a in obj){
 break;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(let a in obj){
 break;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(var a in obj){
 break;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(let a of obj){
 break;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(var a of obj){
 break;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(let a of obj){
 break;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for(var a of obj){
 break;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `export let a = 1;
export let b = 2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export let a = 1;
export let b = 2;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export var a = 1;
export var b = 2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export var a = 1;
export var b = 2;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export const a = 1;
export const b = 2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export const a = 1;
export const b = 2;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `function example() {
var greet = 'hello'
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `function example() {
var greet = 'hello'
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function example() {
var greet = 'hello';
console.log(greet);
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `var f = function() {
var greet = 'hello'
};`,
			Options: "[\"always\"]",
		},
		{
			Code: `var f = function() {
var greet = 'hello'
};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var f = function() {
var greet = 'hello';
console.log(greet);
};`,
			Options: "[\"never\"]",
		},
		{
			Code: `() => {
var greet = 'hello';
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
var greet = 'hello';
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
var greet = 'hello';
console.log(greet);
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `{
var foo;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `{
var foo;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `if(true) {
var foo;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `if(true) {
var foo;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;

case 1:}`,
			Options: "[\"always\"]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
case 1:}`,
			Options: "[\"never\"]",
		},
		{
			Code: `
                var a = 1

                ;(b || c).doSomething()
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                var a = 1
                ;(b || c).doSomething()
            `,
			Options: "[\"never\"]",
		},
		{
			Code: `
                var a = 1
                ;
                (b || c).doSomething();
            `,
			Options: "[\"never\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `var greet = 'hello';console.log(greet);`,
			Output: `var greet = 'hello';

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';var name = 'world';console.log(greet, name);`,
			Output: `var greet = 'hello';var name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello', name = 'world';console.log(greet, name);`,
			Output: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
console.log(greet);`,
			Output: `var greet = 'hello';

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';    
console.log(greet);`,
			Output: `var greet = 'hello';    

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello'; // inline comment
console.log(greet);`,
			Output: `var greet = 'hello'; // inline comment

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
var name = 'world';
console.log(greet, name);`,
			Output: `var greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello', name = 'world';
console.log(greet, name);`,
			Output: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';
console.log(greet, name);`,
			Output: `var greet = 'hello',
name = 'world';

console.log(greet, name);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `let greet = 'hello';
console.log(greet);`,
			Output: `let greet = 'hello';

console.log(greet);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `const greet = 'hello';
console.log(greet);`,
			Output: `const greet = 'hello';

console.log(greet);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function example() {
var greet = 'hello';
console.log(greet);
}`,
			Output: `function example() {
var greet = 'hello';

console.log(greet);
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var f = function() {
var greet = 'hello';
console.log(greet);
};`,
			Output: `var f = function() {
var greet = 'hello';

console.log(greet);
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
var greet = 'hello';
console.log(greet);
}`,
			Output: `() => {
var greet = 'hello';

console.log(greet);
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `switch(a) {
case 0:
var foo;
case 1:}`,
			Output: `switch(a) {
case 0:
var foo;

case 1:}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';

console.log(greet);`,
			Output: `var greet = 'hello';
console.log(greet);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello';


console.log(greet);`,
			Output: `var greet = 'hello';
console.log(greet);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello';



console.log(greet);`,
			Output: `var greet = 'hello';
console.log(greet);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello';    

console.log(greet);`,
			Output: `var greet = 'hello';    
console.log(greet);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello'; // inline comment

console.log(greet);`,
			Output: `var greet = 'hello'; // inline comment
console.log(greet);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Output: `var greet = 'hello';
var name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Output: `var greet = 'hello', name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';

console.log(greet, name);`,
			Output: `var greet = 'hello',
name = 'world';
console.log(greet, name);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello', // inline comment
name = 'world'; // inline comment

console.log(greet, name);`,
			Output: `var greet = 'hello', // inline comment
name = 'world'; // inline comment
console.log(greet, name);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `let greet = 'hello';

console.log(greet);`,
			Output: `let greet = 'hello';
console.log(greet);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `const greet = 'hello';

console.log(greet);`,
			Output: `const greet = 'hello';
console.log(greet);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `switch(a) {
case 0:
var foo;

case 1:}`,
			Output: `switch(a) {
case 0:
var foo;
case 1:}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
// next-line comment
console.log(greet);`,
			Output: `var greet = 'hello';
// next-line comment

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
console.log(greet);`,
			Output: `var greet = 'hello';
/* block comment
block comment */

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';
// next-line comment
console.log(greet);`,
			Output: `var greet = 'hello',
name = 'world';
// next-line comment

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';
/* block comment
block comment */
console.log(greet);`,
			Output: `var greet = 'hello',
name = 'world';
/* block comment
block comment */

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
// next-line comment
// second-line comment
console.log(greet);`,
			Output: `var greet = 'hello';
// next-line comment
// second-line comment

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var greet = 'hello';
// next-line comment
/* block comment
block comment */
console.log(greet);`,
			Output: `var greet = 'hello';
// next-line comment
/* block comment
block comment */

console.log(greet);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `
                var a = 1
                ;(b || c).doSomething()
            `,
			Output: `
                var a = 1

                ;(b || c).doSomething()
            `,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `
                var a = 1

                ;(b || c).doSomething()
            `,
			Output: `
                var a = 1
                ;(b || c).doSomething()
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `
                var a = 1

                ;
                (b || c).doSomething();
            `,
			Output: `
                var a = 1
                ;
                (b || c).doSomething();
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
