// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCommaSpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "comma-spacing", []ValidTestCase{
		{Code: `myfunc(404, true/* bla bla bla */, 'hello');`},
		{Code: `myfunc(404, true /* bla bla bla */, 'hello');`},
		{Code: `myfunc(404, true/* bla bla bla *//* hi */, 'hello');`},
		{Code: `myfunc(404, true/* bla bla bla */ /* hi */, 'hello');`},
		{Code: `myfunc(404, true, /* bla bla bla */ 'hello');`},
		{Code: `myfunc(404, // comment
 true, /* bla bla bla */ 'hello');`},
		{
			Code: `myfunc(404, // comment
 true,/* bla bla bla */ 'hello');`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `var a = 1, b = 2;`},
		{Code: `var arr = [,];`},
		{Code: `var arr = [, ];`},
		{Code: `var arr = [ ,];`},
		{Code: `var arr = [ , ];`},
		{Code: `var arr = [1,];`},
		{Code: `var arr = [1, ];`},
		{Code: `var arr = [, 2];`},
		{Code: `var arr = [ , 2];`},
		{Code: `var arr = [1, 2];`},
		{Code: `var arr = [,,];`},
		{Code: `var arr = [ ,,];`},
		{Code: `var arr = [, ,];`},
		{Code: `var arr = [,, ];`},
		{Code: `var arr = [ , ,];`},
		{Code: `var arr = [ ,, ];`},
		{Code: `var arr = [, , ];`},
		{Code: `var arr = [ , , ];`},
		{Code: `var arr = [1, , ];`},
		{Code: `var arr = [, 2, ];`},
		{Code: `var arr = [, , 3];`},
		{Code: `var arr = [,, 3];`},
		{Code: `var arr = [1, 2, ];`},
		{Code: `var arr = [, 2, 3];`},
		{Code: `var arr = [1, , 3];`},
		{Code: `var arr = [1, 2, 3];`},
		{Code: `var arr = [1, 2, 3,];`},
		{Code: `var arr = [1, 2, 3, ];`},
		{Code: `var obj = {'foo':'bar', 'baz':'qur'};`},
		{Code: `var obj = {'foo':'bar', 'baz':'qur', };`},
		{Code: `var obj = {'foo':'bar', 'baz':'qur',};`},
		{Code: `var obj = {'foo':'bar', 'baz':
'qur'};`},
		{Code: `var obj = {'foo':
'bar', 'baz':
'qur'};`},
		{Code: `function foo(a, b){}`},
		{
			Code:            `function foo(a, b = 1){}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo(a = 1, b, c){}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = (a, b) => {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = (a=1, b) => {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = a => a + 2`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `a, b`},
		{Code: `var a = (1 + 2, 2);`},
		{Code: `a(b, c)`},
		{Code: `new A(b, c)`},
		{Code: `foo((a), b)`},
		{Code: `var b = ((1 + 2), 2);`},
		{Code: `parseInt((a + b), 10)`},
		{Code: `go.boom((a + b), 10)`},
		{Code: `go.boom((a + b), 10, (4))`},
		{Code: `var x = [ (a + c), (b + b) ]`},
		{Code: `['  ,  ']`},
		{
			Code:            "[`  ,  `]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${[1, 2]}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `fn(a, b,)`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `const fn = (a, b,) => {}`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `const fn = function (a, b,) {}`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `function fn(a, b,) {}`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{Code: `foo(/,/, 'a')`},
		{Code: `var x = ',,,,,';`},
		{Code: `var code = 'var foo = 1, bar = 3;'`},
		{Code: `['apples', 
 'oranges'];`},
		{Code: `{x: 'var x,y,z'}`},
		{
			Code: `var obj = {'foo':
'bar' ,'baz':
'qur'};`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var a = 1 ,b = 2;`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `function foo(a ,b){}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [, ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ , ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 , ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,2];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 ,2];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [,,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [, ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [,, ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ , ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,, ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [, , ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ , , ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 , ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,2 ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [,2 , ];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ , ,3];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 ,2 ,];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,2 ,3];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 , ,3];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var arr = [1 ,2 ,3];`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var obj = {'foo':'bar' , 'baz':'qur'};`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var obj = {'foo':'bar' ,'baz':'qur' , };`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `var a = 1 , b = 2;`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [, ];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [,,];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [1 , ];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [ , 2];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [1 , 2];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [, , ];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [1 , , ];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [ , 2 , ];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [ , , 3];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [1 , 2 , ];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [, 2 , 3];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [1 , , 3];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [1 , 2 , 3];`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `a , b`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var arr = [,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [1,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [,2];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,2];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [1,2];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [,,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [ , , ];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [1,,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [,2,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [ ,2,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [,,3];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [1,2,];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [,2,3];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [1,,3];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var arr = [1,2,3];`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `var a = (1 + 2,2)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `var a; console.log(` + "`" + `${a}` + "`" + `, "a");`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, b] = [1, 2];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, b, ] = [1, 2];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, b,] = [1, 2];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, , b] = [1, 2, 3];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a,, b] = [1, 2, 3];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ , b] = a;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [, b] = a;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { a,} = a;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import { a,} from 'mod';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `<a>,</a>`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<a>  ,  </a>`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<a>Hello, world</a>`,
			Options:         "[{\"before\":true,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:    `[a, /**/ , ]`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `[a , /**/, ]`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:            `[a, /**/ , ] = foo`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[a , /**/, ] = foo`,
			Options:         "[{\"before\":true,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code:    `a(b,c)`,
			Output:  `a(b , c)`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `new A(b,c)`,
			Output:  `new A(b , c)`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = 1 ,b = 2;`,
			Output: `var a = 1, b = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var arr = [1 , 2];`,
			Output: `var arr = [1, 2];`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
			},
		},
		{
			Code:   `var arr = [1 , ];`,
			Output: `var arr = [1, ];`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
			},
		},
		{
			Code:   `var arr = [1 ,2];`,
			Output: `var arr = [1, 2];`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var arr = [(1) , 2];`,
			Output: `var arr = [(1), 2];`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
			},
		},
		{
			Code:    `var arr = [1, 2];`,
			Output:  `var arr = [1 ,2];`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageDescription: "There should be no space after ','.",
				},
			},
		},
		{
			Code: `var arr = [1
  , 2];`,
			Output: `var arr = [1
  ,2];`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space after ','.",
				},
			},
		},
		{
			Code: `var arr = [1,
  2];`,
			Output: `var arr = [1 ,
  2];`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var obj = {'foo':
'bar', 'baz':
'qur'};`,
			Output: `var obj = {'foo':
'bar' ,'baz':
'qur'};`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageDescription: "There should be no space after ','.",
				},
			},
		},
		{
			Code: `var obj = {a: 1
  ,b: 2};`,
			Output: `var obj = {a: 1
  , b: 2};`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var obj = {a: 1 ,
  b: 2};`,
			Output: `var obj = {a: 1,
  b: 2};`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
			},
		},
		{
			Code:    `var arr = [1 ,2];`,
			Output:  `var arr = [1 , 2];`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var arr = [1,2];`,
			Output:  `var arr = [1 , 2];`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var obj = {'foo':
'bar','baz':
'qur'};`,
			Output: `var obj = {'foo':
'bar' , 'baz':
'qur'};`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var arr = [1 , 2];`,
			Output:  `var arr = [1,2];`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
				{
					MessageDescription: "There should be no space after ','.",
				},
			},
		},
		{
			Code:    `a ,b`,
			Output:  `a, b`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `function foo(a,b){}`,
			Output:  `function foo(a , b){}`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `var foo = (a,b) => {}`,
			Output:          `var foo = (a , b) => {}`,
			Options:         "[{\"before\":true,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `var foo = (a = 1,b) => {}`,
			Output:          `var foo = (a = 1 , b) => {}`,
			Options:         "[{\"before\":true,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `function foo(a = 1 ,b = 2) {}`,
			Output:          `function foo(a = 1, b = 2) {}`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `<a>{foo(1 ,2)}</a>`,
			Output:          `<a>{foo(1, 2)}</a>`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `myfunc(404, true/* bla bla bla */ , 'hello');`,
			Output: `myfunc(404, true/* bla bla bla */, 'hello');`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "There should be no space before ','.",
				},
			},
		},
		{
			Code:   `myfunc(404, true,/* bla bla bla */ 'hello');`,
			Output: `myfunc(404, true, /* bla bla bla */ 'hello');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `myfunc(404,// comment
 true, 'hello');`,
			Output: `myfunc(404, // comment
 true, 'hello');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
	})
}
