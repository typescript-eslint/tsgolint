// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferConstRule(t *testing.T) {
	RunRuleTester(t, "{\"plugins\":{\"custom\":{\"rules\":{\"use-x\":{}}}},\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"script\"}}", "prefer-const", []ValidTestCase{
		{Code: `var x = 0;`},
		{Code: `let x;`},
		{Code: `let x; { x = 0; } foo(x);`},
		{Code: `let x = 0; x = 1;`},
		{Code: `const x = 0;`},
		{Code: `for (let i = 0, end = 10; i < end; ++i) {}`},
		{Code: `for (let i in [1,2,3]) { i = 0; }`},
		{Code: `for (let x of [1,2,3]) { x = 0; }`},
		{Code: `(function() { var x = 0; })();`},
		{Code: `(function() { let x; })();`},
		{Code: `(function() { let x; { x = 0; } foo(x); })();`},
		{Code: `(function() { let x = 0; x = 1; })();`},
		{Code: `(function() { const x = 0; })();`},
		{Code: `(function() { for (let i = 0, end = 10; i < end; ++i) {} })();`},
		{Code: `(function() { for (let i in [1,2,3]) { i = 0; } })();`},
		{Code: `(function() { for (let x of [1,2,3]) { x = 0; } })();`},
		{Code: `(function(x = 0) { })();`},
		{Code: `let a; while (a = foo());`},
		{Code: `let a; do {} while (a = foo());`},
		{Code: `let a; for (; a = foo(); );`},
		{Code: `let a; for (;; ++a);`},
		{Code: `let a; for (const {b = ++a} in foo());`},
		{Code: `let a; for (const {b = ++a} of foo());`},
		{Code: `let a; for (const x of [1,2,3]) { if (a) {} a = foo(); }`},
		{Code: `let a; for (const x of [1,2,3]) { a = a || foo(); bar(a); }`},
		{Code: `let a; for (const x of [1,2,3]) { foo(++a); }`},
		{Code: `let a; function foo() { if (a) {} a = bar(); }`},
		{Code: `let a; function foo() { a = a || bar(); baz(a); }`},
		{Code: `let a; function foo() { bar(++a); }`},
		{Code: `let id;
function foo() {
    if (typeof id !== 'undefined') {
        return;
    }
    id = setInterval(() => {}, 250);
}
foo();`},
		{Code: `/*exported a*/ let a; function init() { a = foo(); }`},
		{Code: `/*exported a*/ let a = 1`},
		{Code: `let a; if (true) a = 0; foo(a);`},
		{Code: `
        (function (a) {
            let b;
            ({ a, b } = obj);
        })();
        `},
		{Code: `
        (function (a) {
            let b;
            ([ a, b ] = obj);
        })();
        `},
		{Code: `var a; { var b; ({ a, b } = obj); }`},
		{Code: `let a; { let b; ({ a, b } = obj); }`},
		{Code: `var a; { var b; ([ a, b ] = obj); }`},
		{Code: `let a; { let b; ([ a, b ] = obj); }`},
		{Code: `let x; { x = 0; foo(x); }`},
		{Code: `(function() { let x; { x = 0; foo(x); } })();`},
		{Code: `let x; for (const a of [1,2,3]) { x = foo(); bar(x); }`},
		{Code: `(function() { let x; for (const a of [1,2,3]) { x = foo(); bar(x); } })();`},
		{Code: `let x; for (x of array) { x; }`},
		{
			Code:    `let {a, b} = obj; b = 0;`,
			Options: "[{\"destructuring\":\"all\"}]",
		},
		{
			Code:    `let a, b; ({a, b} = obj); b++;`,
			Options: "[{\"destructuring\":\"all\"}]",
		},
		{
			Code:            `let { name, ...otherStuff } = obj; otherStuff = {};`,
			Options:         "[{\"destructuring\":\"all\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let { name, ...otherStuff } = obj; otherStuff = {};`,
			Options:         "[{\"destructuring\":\"all\"}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `let predicate; [typeNode.returnType, predicate] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [typeNode.returnType, ...predicate] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [typeNode.returnType,, predicate] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [typeNode.returnType=5, predicate] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [[typeNode.returnType=5], predicate] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [[typeNode.returnType, predicate]] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [typeNode.returnType, [predicate]] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [, [typeNode.returnType, predicate]] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [, {foo:typeNode.returnType, predicate}] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let predicate; [, {foo:typeNode.returnType, ...predicate}] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let a; const b = {}; ({ a, c: b.c } = func());`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:    `let x; function foo() { bar(x); } x = 0;`,
			Options: "[{\"ignoreReadBeforeAssign\":true}]",
		},
		{Code: `const x = [1,2]; let y; [,y] = x; y = 0;`},
		{Code: `const x = [1,2,3]; let y, z; [y,,z] = x; y = 0; z = 0;`},
		{
			Code:            `class C { static { let a = 1; a = 2; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; a = 1; a = 2; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `let a; class C { static { a = 1; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; if (foo) { a = 1; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; if (foo) a = 1; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a, b; if (foo) { ({ a, b } = foo); } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a, b; if (foo) ({ a, b } = foo); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a; } } let a = 1; `,
			Options:         "[{\"ignoreReadBeforeAssign\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { () => a; let a = 1; } };`,
			Options:         "[{\"ignoreReadBeforeAssign\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:   `let x = 1; foo(x);`,
			Output: `const x = 1; foo(x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `for (let i in [1,2,3]) { foo(i); }`,
			Output: `for (const i in [1,2,3]) { foo(i); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `for (let x of [1,2,3]) { foo(x); }`,
			Output: `for (const x of [1,2,3]) { foo(x); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `let [x = -1, y] = [1,2]; y = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `let {a: x = -1, b: y} = {a:1,b:2}; y = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `(function() { let x = 1; foo(x); })();`,
			Output: `(function() { const x = 1; foo(x); })();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `(function() { for (let i in [1,2,3]) { foo(i); } })();`,
			Output: `(function() { for (const i in [1,2,3]) { foo(i); } })();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `(function() { for (let x of [1,2,3]) { foo(x); } })();`,
			Output: `(function() { for (const x of [1,2,3]) { foo(x); } })();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `(function() { let [x = -1, y] = [1,2]; y = 0; })();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `let f = (function() { let g = x; })(); f = 1;`,
			Output: `let f = (function() { const g = x; })(); f = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `(function() { let {a: x = -1, b: y} = {a:1,b:2}; y = 0; })();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `let x = 0; { let x = 1; foo(x); } x = 0;`,
			Output: `let x = 0; { const x = 1; foo(x); } x = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `for (let i = 0; i < 10; ++i) { let x = 1; foo(x); }`,
			Output: `for (let i = 0; i < 10; ++i) { const x = 1; foo(x); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `for (let i in [1,2,3]) { let x = 1; foo(x); }`,
			Output: `for (const i in [1,2,3]) { const x = 1; foo(x); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `var foo = function() {
    for (const b of c) {
       let a;
       a = 1;
   }
};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `var foo = function() {
    for (const b of c) {
       let a;
       ({a} = 1);
   }
};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `let x; x = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    8,
				},
			},
		},
		{
			Code: `switch (a) { case 0: let x; x = 0; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    29,
				},
			},
		},
		{
			Code: `(function() { let x; x = 1; })();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    22,
				},
			},
		},
		{
			Code:    `let {a = 0, b} = obj; b = 0; foo(a, b);`,
			Options: "[{\"destructuring\":\"any\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let {a: {b, c}} = {a: {b: 1, c: 2}}; b = 3;`,
			Options: "[{\"destructuring\":\"any\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let {a: {b, c}} = {a: {b: 1, c: 2}}`,
			Output:  `const {a: {b, c}} = {a: {b: 1, c: 2}}`,
			Options: "[{\"destructuring\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let a, b; ({a = 0, b} = obj); b = 0; foo(a, b);`,
			Options: "[{\"destructuring\":\"any\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let {a = 0, b} = obj; foo(a, b);`,
			Output:  `const {a = 0, b} = obj; foo(a, b);`,
			Options: "[{\"destructuring\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let [a] = [1]`,
			Output:  `const [a] = [1]`,
			Options: "[]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let {a} = obj`,
			Output:  `const {a} = obj`,
			Options: "[]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let a, b; ({a = 0, b} = obj); foo(a, b);`,
			Options: "[{\"destructuring\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let {a = 0, b} = obj, c = a; b = a;`,
			Options: "[{\"destructuring\":\"any\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:    `let {a = 0, b} = obj, c = a; b = a;`,
			Options: "[{\"destructuring\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `let { name, ...otherStuff } = obj; otherStuff = {};`,
			Options:         "[{\"destructuring\":\"any\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    7,
				},
			},
		},
		{
			Code:            `let { name, ...otherStuff } = obj; otherStuff = {};`,
			Options:         "[{\"destructuring\":\"any\"}]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    7,
				},
			},
		},
		{
			Code: `let x; function foo() { bar(x); } x = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    5,
				},
			},
		},
		{
			Code:            `/*eslint custom/use-x:error*/ let x = 1`,
			Output:          `/*eslint custom/use-x:error*/ const x = 1`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `/*eslint custom/use-x:error*/ { let x = 1 }`,
			Output: `/*eslint custom/use-x:error*/ { const x = 1 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `let { foo, bar } = baz;`,
			Output: `const { foo, bar } = baz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `const x = [1,2]; let [,y] = x;`,
			Output: `const x = [1,2]; const [,y] = x;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:   `const x = [1,2,3]; let [y,,z] = x;`,
			Output: `const x = [1,2,3]; const [y,,z] = x;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `let predicate; [, {foo:returnType, predicate}] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'predicate' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:            `let predicate; [, {foo:returnType, predicate}, ...bar ] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'predicate' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:            `let predicate; [, {foo:returnType, ...predicate} ] = foo();`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'predicate' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:   `let x = 'x', y = 'y';`,
			Output: `const x = 'x', y = 'y';`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'x' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'y' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code: `let x = 'x', y = 'y'; x = 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'y' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:   `let x = 1, y = 'y'; let z = 1;`,
			Output: `const x = 1, y = 'y'; const z = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'x' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'y' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'z' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:   `let { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;`,
			Output: `const { a, b, c} = obj; let { x, y, z} = anotherObj; x = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'a' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'b' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'c' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'y' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'z' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:   `let x = 'x', y = 'y'; function someFunc() { let a = 1, b = 2; foo(a, b) }`,
			Output: `const x = 'x', y = 'y'; function someFunc() { const a = 1, b = 2; foo(a, b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'x' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'y' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'a' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'b' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:   `let someFunc = () => { let a = 1, b = 2; foo(a, b) }`,
			Output: `const someFunc = () => { let a = 1, b = 2; foo(a, b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'someFunc' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'a' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'b' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code: `let {a, b} = c, d;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `let {a, b, c} = {}, e, f;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `function a() {
let foo = 0,
  bar = 1;
foo = 1;
}
function b() {
let foo = 0,
  bar = 2;
foo = 2;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'bar' is never reassigned. Use 'const' instead.",
				},
				{
					MessageDescription: "'bar' is never reassigned. Use 'const' instead.",
				},
			},
		},
		{
			Code:   `/*eslint no-undef-init:error*/ let foo = undefined;`,
			Output: `/*eslint no-undef-init:error*/ const foo = undefined;`,
			Errors: []InvalidTestCaseError{
				{},
				{},
			},
		},
		{
			Code:            `let a = 1; class C { static { a; } }`,
			Output:          `const a = 1; class C { static { a; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { a; } } let a = 1;`,
			Output:          `class C { static { a; } } const a = 1;`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { let a = 1; } }`,
			Output:          `class C { static { const a = 1; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { if (foo) { let a = 1; } } }`,
			Output:          `class C { static { if (foo) { const a = 1; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { let a = 1; if (foo) { a; } } }`,
			Output:          `class C { static { const a = 1; if (foo) { a; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { if (foo) { let a; a = 1; } } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { let a; a = 1; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
					Column:    27,
				},
			},
		},
		{
			Code:            `class C { static { let { a, b } = foo; } }`,
			Output:          `class C { static { const { a, b } = foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { let a, b; ({ a, b } = foo); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { let a; let b; ({ a, b } = foo); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code:            `class C { static { let a; a = 0; console.log(a); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `
            let { itemId, list } = {},
            obj = [],
            total = 0;
            total = 9;
            console.log(itemId, list, obj, total);
            `,
			Options:         "[{\"destructuring\":\"any\",\"ignoreReadBeforeAssign\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `
            let { itemId, list } = {},
            obj = [];
            console.log(itemId, list, obj);
            `,
			Output: `
            const { itemId, list } = {},
            obj = [];
            console.log(itemId, list, obj);
            `,
			Options:         "[{\"destructuring\":\"any\",\"ignoreReadBeforeAssign\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `
            let [ itemId, list ] = [],
            total = 0;
            total = 9;
            console.log(itemId, list, total);
            `,
			Options:         "[{\"destructuring\":\"any\",\"ignoreReadBeforeAssign\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
		{
			Code: `
            let [ itemId, list ] = [],
            obj = [];
            console.log(itemId, list, obj);
            `,
			Output: `
            const [ itemId, list ] = [],
            obj = [];
            console.log(itemId, list, obj);
            `,
			Options:         "[{\"destructuring\":\"any\",\"ignoreReadBeforeAssign\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
				{
					MessageId: "useConst",
				},
			},
		},
	})
}
