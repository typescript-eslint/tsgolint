// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestFuncNameMatchingRule(t *testing.T) {
	RunRuleTester(t, "{}", "func-name-matching", []ValidTestCase{
		{Code: `var foo;`},
		{Code: `var foo = function foo() {};`},
		{
			Code:    `var foo = function foo() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = function bar() {};`,
			Options: "[\"never\"]",
		},
		{Code: `var foo = function() {}`},
		{
			Code:            `var foo = () => {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `foo = function foo() {};`},
		{
			Code:    `foo = function foo() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo = function bar() {};`,
			Options: "[\"never\"]",
		},
		{
			Code:            `foo &&= function foo() {};`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `obj.foo ||= function foo() {};`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `obj['foo'] ??= function foo() {};`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{Code: `obj.foo = function foo() {};`},
		{
			Code:    `obj.foo = function foo() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj.foo = function bar() {};`,
			Options: "[\"never\"]",
		},
		{Code: `obj.foo = function() {};`},
		{
			Code:    `obj.foo = function() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj.foo = function() {};`,
			Options: "[\"never\"]",
		},
		{Code: `obj.bar.foo = function foo() {};`},
		{
			Code:    `obj.bar.foo = function foo() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj.bar.foo = function baz() {};`,
			Options: "[\"never\"]",
		},
		{Code: `obj['foo'] = function foo() {};`},
		{
			Code:    `obj['foo'] = function foo() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj['foo'] = function bar() {};`,
			Options: "[\"never\"]",
		},
		{Code: `obj['foo//bar'] = function foo() {};`},
		{
			Code:    `obj['foo//bar'] = function foo() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj['foo//bar'] = function foo() {};`,
			Options: "[\"never\"]",
		},
		{Code: `obj[foo] = function bar() {};`},
		{
			Code:    `obj[foo] = function bar() {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[foo] = function bar() {};`,
			Options: "[\"never\"]",
		},
		{Code: `var obj = {foo: function foo() {}};`},
		{
			Code:    `var obj = {foo: function foo() {}};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = {foo: function bar() {}};`,
			Options: "[\"never\"]",
		},
		{Code: `var obj = {'foo': function foo() {}};`},
		{
			Code:    `var obj = {'foo': function foo() {}};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = {'foo': function bar() {}};`,
			Options: "[\"never\"]",
		},
		{Code: `var obj = {'foo//bar': function foo() {}};`},
		{
			Code:    `var obj = {'foo//bar': function foo() {}};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = {'foo//bar': function foo() {}};`,
			Options: "[\"never\"]",
		},
		{Code: `var obj = {foo: function() {}};`},
		{
			Code:    `var obj = {foo: function() {}};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = {foo: function() {}};`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var obj = {[foo]: function bar() {}} `,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var obj = {['x' + 2]: function bar(){}};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `obj['x' + 2] = function bar(){};`},
		{
			Code:            `var [ bar ] = [ function bar(){} ];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function a(foo = function bar() {}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `module.exports = function foo(name) {};`},
		{Code: `module['exports'] = function foo(name) {};`},
		{
			Code:            `module.exports = function foo(name) {};`,
			Options:         "[{\"includeCommonJSModuleExports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `module.exports = function foo(name) {};`,
			Options:         "[\"always\",{\"includeCommonJSModuleExports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `module.exports = function foo(name) {};`,
			Options:         "[\"never\",{\"includeCommonJSModuleExports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `module['exports'] = function foo(name) {};`,
			Options:         "[{\"includeCommonJSModuleExports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `module['exports'] = function foo(name) {};`,
			Options:         "[\"always\",{\"includeCommonJSModuleExports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `module['exports'] = function foo(name) {};`,
			Options:         "[\"never\",{\"includeCommonJSModuleExports\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({['foo']: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({['foo']: function foo() {}})`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({['foo']: function bar() {}})`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({['‚ù§']: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[foo]: function bar() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[null]: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[1]: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[true]: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "({[`x`]: function foo() {}})",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[/abc/]: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[[1, 2, 3]]: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[{x: 1}]: function foo() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[] = function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({} = function foo() {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[a] = function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({a} = function foo() {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [] = function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {} = function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a} = function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `({ value: function value() {} })`,
			Options: "[{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `obj.foo = function foo() {};`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `obj.bar.foo = function foo() {};`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `var obj = {foo: function foo() {}};`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `var obj = {foo: function() {}};`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `var obj = { value: function value() {} }`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `Object.defineProperty(foo, 'bar', { value: function bar() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { value: function bar() {} } })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `Object.create(proto, { bar: { value: function bar() {} } })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `Object.defineProperty(foo, 'b' + 'ar', { value: function bar() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:            `Object.defineProperties(foo, { ['bar']: { value: function bar() {} } })`,
			Options:         "[\"always\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Object.create(proto, { ['bar']: { value: function bar() {} } })`,
			Options:         "[\"always\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Object.defineProperty(foo, 'bar', { value() {} })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Object.defineProperties(foo, { bar: { value() {} } })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Object.create(proto, { bar: { value() {} } })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `Reflect.defineProperty(foo, 'bar', { value: function bar() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:    `Reflect.defineProperty(foo, 'b' + 'ar', { value: function baz() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { value() {} })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo({ value: function value() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
		},
		{
			Code:            `class C { x = function () {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = function () {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'x' = function () {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'x' = function () {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x = function () {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x = function () {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [x] = function () {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [x] = function () {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { ['x'] = function () {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { ['x'] = function () {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = function x() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = function y() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'x' = function x() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'x' = function y() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x = function x() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x = function x() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x = function y() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x = function y() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [x] = function x() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [x] = function x() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [x] = function y() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [x] = function y() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { ['x'] = function x() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { ['x'] = function y() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'xy ' = function foo() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'xy ' = function xy() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { ['xy '] = function foo() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { ['xy '] = function xy() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 1 = function x0() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 1 = function x1() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [1] = function x0() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [1] = function x1() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [f()] = function g() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [f()] = function f() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static x = function x() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static x = function y() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = (function y() {})(); }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = (function x() {})(); }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `(class { x = function x() {}; })`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `(class { x = function y() {}; })`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { this.#x = function x() {}; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { this.#x = function x() {}; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { this.#x = function y() {}; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { this.#x = function y() {}; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { a.b.#x = function x() {}; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { a.b.#x = function x() {}; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { a.b.#x = function y() {}; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #x; foo() { a.b.#x = function y() {}; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `var obj = { '\u1885': function foo() {} };`,
			LanguageOptions: "{\"ecmaVersion\":5,\"sourceType\":\"script\"}",
		},
	}, []InvalidTestCase{
		{
			Code:            `let foo = function bar() {};`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchVariable",
				},
			},
		},
		{
			Code:            `let foo = function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchVariable",
				},
			},
		},
		{
			Code:            `foo = function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchVariable",
				},
			},
		},
		{
			Code:            `foo &&= function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchVariable",
				},
			},
		},
		{
			Code:            `obj.foo ||= function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `obj['foo'] ??= function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `obj.foo = function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `obj.bar.foo = function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `obj['foo'] = function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `let obj = {foo: function bar() {}};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `let obj = {'foo': function bar() {}};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `({['foo']: function bar() {}})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `module.exports = function foo(name) {};`,
			Options:         "[{\"includeCommonJSModuleExports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `module.exports = function foo(name) {};`,
			Options:         "[\"always\",{\"includeCommonJSModuleExports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `module.exports = function exports(name) {};`,
			Options:         "[\"never\",{\"includeCommonJSModuleExports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `module['exports'] = function foo(name) {};`,
			Options:         "[{\"includeCommonJSModuleExports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `module['exports'] = function foo(name) {};`,
			Options:         "[\"always\",{\"includeCommonJSModuleExports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `module['exports'] = function exports(name) {};`,
			Options:         "[\"never\",{\"includeCommonJSModuleExports\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:    `var foo = function foo(name) {};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchVariable",
				},
			},
		},
		{
			Code:    `obj.foo = function foo(name) {};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:    `Object.defineProperty(foo, 'bar', { value: function baz() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { value: function baz() {} } })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:    `Object.create(proto, { bar: { value: function baz() {} } })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:    `var obj = { value: function foo(name) {} }`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:    `Object.defineProperty(foo, 'bar', { value: function bar() {} })`,
			Options: "[\"never\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:    `Object.defineProperties(foo, { bar: { value: function bar() {} } })`,
			Options: "[\"never\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:    `Object.create(proto, { bar: { value: function bar() {} } })`,
			Options: "[\"never\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:    `Reflect.defineProperty(foo, 'bar', { value: function baz() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:    `Reflect.defineProperty(foo, 'bar', { value: function bar() {} })`,
			Options: "[\"never\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:    `foo({ value: function bar() {} })`,
			Options: "[\"always\",{\"considerPropertyDescriptor\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `(obj?.aaa).foo = function bar() {};`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `Object?.defineProperty(foo, 'bar', { value: function baz() {} })`,
			Options:         "[\"always\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `(Object?.defineProperty)(foo, 'bar', { value: function baz() {} })`,
			Options:         "[\"always\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `Object?.defineProperty(foo, 'bar', { value: function bar() {} })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `(Object?.defineProperty)(foo, 'bar', { value: function bar() {} })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `Object?.defineProperties(foo, { bar: { value: function baz() {} } })`,
			Options:         "[\"always\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `(Object?.defineProperties)(foo, { bar: { value: function baz() {} } })`,
			Options:         "[\"always\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `Object?.defineProperties(foo, { bar: { value: function bar() {} } })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `(Object?.defineProperties)(foo, { bar: { value: function bar() {} } })`,
			Options:         "[\"never\",{\"considerPropertyDescriptor\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `class C { x = function y() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `class C { x = function x() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `class C { 'x' = function y() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `class C { 'x' = function x() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `class C { ['x'] = function y() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `class C { ['x'] = function x() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `class C { static x = function y() {}; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `class C { static x = function x() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `(class { x = function y() {}; })`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
		{
			Code:            `(class { x = function x() {}; })`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatchProperty",
				},
			},
		},
		{
			Code:            `var obj = { '\u1885': function foo() {} };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "matchProperty",
				},
			},
		},
	})
}
