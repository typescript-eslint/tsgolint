// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrayBracketSpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "array-bracket-spacing", []ValidTestCase{
		{
			Code:    `var foo = obj[ 1 ]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = obj[ 'foo' ];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = obj[ [ 1, 1 ] ];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = ['foo']`,
			Options: "[\"always\",{\"singleValue\":false}]",
		},
		{
			Code:    `var foo = [2]`,
			Options: "[\"always\",{\"singleValue\":false}]",
		},
		{
			Code:    `var foo = [[ 1, 1 ]]`,
			Options: "[\"always\",{\"singleValue\":false}]",
		},
		{
			Code:    `var foo = [{ 'foo': 'bar' }]`,
			Options: "[\"always\",{\"singleValue\":false}]",
		},
		{
			Code:    `var foo = [bar]`,
			Options: "[\"always\",{\"singleValue\":false}]",
		},
		{
			Code:    `var foo = [{ 'bar': 'baz' }, 1,  5 ];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var foo = [ 1, 5, { 'bar': 'baz' }];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code: `var foo = [{
'bar': 'baz', 
'qux': [{ 'bar': 'baz' }], 
'quxx': 1 
}]`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var foo = [{ 'bar': 'baz' }]`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var foo = [{ 'bar': 'baz' }, 1, { 'bar': 'baz' }];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var foo = [ 1, { 'bar': 'baz' }, 5 ];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var foo = [ 1, { 'bar': 'baz' }, [{ 'bar': 'baz' }] ];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var foo = [ function(){} ];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
		},
		{
			Code:    `var arr = [[ 1, 2 ], 2, 3, 4 ];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
		},
		{
			Code:    `var arr = [[ 1, 2 ], [[[ 1 ]]], 3, 4 ];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
		},
		{
			Code:    `var foo = [ arr[i], arr[j] ];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
		},
		{
			Code:    `var arr = [[ 1, 2 ], 2, 3, { 'foo': 'bar' }];`,
			Options: "[\"always\",{\"arraysInArrays\":false,\"objectsInArrays\":false}]",
		},
		{
			Code:    `var arr = [[ 1, 2 ], [2], 3, { 'foo': 'bar' }];`,
			Options: "[\"always\",{\"arraysInArrays\":false,\"objectsInArrays\":false,\"singleValue\":false}]",
		},
		{
			Code:    `obj[ foo ]`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj[
foo
]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[ 'foo' ]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[ 'foo' + 'bar' ]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `obj[ obj2[ foo ] ]`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj.map(function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj[ 'map' ](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"always\"]",
		},
		{
			Code: `obj[ 'for' + 'Each' ](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var arr = [ 1, 2, 3, 4 ];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var arr = [ [ 1, 2 ], 2, 3, 4 ];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var arr = [
1, 2, 3, 4
];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"always\"]",
		},
		{
			Code: `this.db.mappings.insert([
 { alias: 'a', url: 'http://www.amazon.de' },
 { alias: 'g', url: 'http://www.google.de' }
], function() {});`,
			Options: "[\"always\",{\"singleValue\":false,\"objectsInArrays\":true,\"arraysInArrays\":true}]",
		},
		{
			Code:            `var [ x, y ] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ x,y ] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [ x, y
] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, y ] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, y
] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x,,,
] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ ,x, ] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, ...y
] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, ...y ] = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [[ x, y ], z ] = arr;`,
			Options:         "[\"always\",{\"arraysInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ x, [ y, z ]] = arr;`,
			Options:         "[\"always\",{\"arraysInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[{ x, y }, z ] = arr;`,
			Options:         "[\"always\",{\"objectsInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[ x, { y, z }] = arr;`,
			Options:         "[\"always\",{\"objectsInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `obj[foo]`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj['foo']`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj['foo' + 'bar']`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj['foo'+'bar']`,
			Options: "[\"never\"]",
		},
		{
			Code:    `obj[obj2[foo]]`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj.map(function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj['map'](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj['for' + 'Each'](function(item) { return [
1,
2,
3,
4
]; })`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var arr = [1, 2, 3, 4];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var arr = [[1, 2], 2, 3, 4];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var arr = [
1, 2, 3, 4
];`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj[
foo]`,
			Options: "[\"never\"]",
		},
		{
			Code: `obj[foo
]`,
			Options: "[\"never\"]",
		},
		{
			Code: `var arr = [1,
2,
3,
4
];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var arr = [
1,
2,
3,
4];`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var [x, y] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [x,y] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [x, y
] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, y] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, y
] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x,,,
] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [,x,] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, ...y
] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
x, ...y] = z`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ [x, y], z] = arr;`,
			Options:         "[\"never\",{\"arraysInArrays\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [x, [y, z] ] = arr;`,
			Options:         "[\"never\",{\"arraysInArrays\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[ { x, y }, z] = arr;`,
			Options:         "[\"never\",{\"objectsInArrays\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[x, { y, z } ] = arr;`,
			Options:         "[\"never\",{\"objectsInArrays\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = [ 'foo' ]`,
			Options: "[\"never\",{\"singleValue\":true}]",
		},
		{
			Code:    `var foo = [ 2 ]`,
			Options: "[\"never\",{\"singleValue\":true}]",
		},
		{
			Code:    `var foo = [ [1, 1] ]`,
			Options: "[\"never\",{\"singleValue\":true}]",
		},
		{
			Code:    `var foo = [ {'foo': 'bar'} ]`,
			Options: "[\"never\",{\"singleValue\":true}]",
		},
		{
			Code:    `var foo = [ bar ]`,
			Options: "[\"never\",{\"singleValue\":true}]",
		},
		{
			Code:    `var foo = [ {'bar': 'baz'}, 1, 5];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [1, 5, {'bar': 'baz'} ];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code: `var foo = [ {
'bar': 'baz', 
'qux': [ {'bar': 'baz'} ], 
'quxx': 1 
} ]`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [ {'bar': 'baz'} ]`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [ {'bar': 'baz'}, 1, {'bar': 'baz'} ];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [1, {'bar': 'baz'} , 5];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [1, {'bar': 'baz'}, [ {'bar': 'baz'} ]];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [function(){}];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
		},
		{
			Code:    `var arr = [ [1, 2], 2, 3, 4];`,
			Options: "[\"never\",{\"arraysInArrays\":true}]",
		},
		{
			Code:    `var foo = [arr[i], arr[j]];`,
			Options: "[\"never\",{\"arraysInArrays\":true}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"never\",{\"arraysInArrays\":true}]",
		},
		{
			Code:    `var arr = [ [1, 2], [ [ [ 1 ] ] ], 3, 4];`,
			Options: "[\"never\",{\"arraysInArrays\":true,\"singleValue\":true}]",
		},
		{
			Code:    `var arr = [ [1, 2], 2, 3, {'foo': 'bar'} ];`,
			Options: "[\"never\",{\"arraysInArrays\":true,\"objectsInArrays\":true}]",
		},
		{
			Code:    `var foo = {};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [{'bar':'baz'}, 1, {'bar': 'baz'}];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [{'bar': 'baz'}];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [{
'bar': 'baz', 
'qux': [{'bar': 'baz'}], 
'quxx': 1 
}]`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1, {'bar': 'baz'}, 5];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [{'bar': 'baz'}, 1,  5];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1, 5, {'bar': 'baz'}];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = {'foo': [1, 2]}`,
			Options: "[\"never\"]",
		},
		{
			Code:            `([ a, b ]: Array<any>) => {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
		{
			Code:            `([a, b]: Array< any >) => {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code:    `var foo = [ ]`,
			Output:  `var foo = []`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var foo = [ { 'bar': 'baz' }, 1,  5];`,
			Output:  `var foo = [{ 'bar': 'baz' }, 1,  5 ];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    36,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code:    `var foo = [1, 5, { 'bar': 'baz' } ];`,
			Output:  `var foo = [ 1, 5, { 'bar': 'baz' }];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    34,
					EndLine:   1,
					EndColumn: 35,
				},
			},
		},
		{
			Code:    `var foo = [ { 'bar':'baz' }, 1, { 'bar': 'baz' } ];`,
			Output:  `var foo = [{ 'bar':'baz' }, 1, { 'bar': 'baz' }];`,
			Options: "[\"always\",{\"objectsInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    49,
					EndLine:   1,
					EndColumn: 50,
				},
			},
		},
		{
			Code:    `var obj = [ 'foo' ];`,
			Output:  `var obj = ['foo'];`,
			Options: "[\"always\",{\"singleValue\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code:    `var obj = ['foo' ];`,
			Output:  `var obj = ['foo'];`,
			Options: "[\"always\",{\"singleValue\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:    `var obj = ['foo'];`,
			Output:  `var obj = [ 'foo' ];`,
			Options: "[\"never\",{\"singleValue\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:    `var arr = [ [ 1, 2 ], 2, 3, 4 ];`,
			Output:  `var arr = [[ 1, 2 ], 2, 3, 4 ];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var arr = [ 1, 2, 2, [ 3, 4 ] ];`,
			Output:  `var arr = [ 1, 2, 2, [ 3, 4 ]];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code:    `var arr = [[ 1, 2 ], 2, [ 3, 4 ] ];`,
			Output:  `var arr = [[ 1, 2 ], 2, [ 3, 4 ]];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    33,
					EndLine:   1,
					EndColumn: 34,
				},
			},
		},
		{
			Code:    `var arr = [ [ 1, 2 ], 2, [ 3, 4 ]];`,
			Output:  `var arr = [[ 1, 2 ], 2, [ 3, 4 ]];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var arr = [ [ 1, 2 ], 2, [ 3, 4 ] ];`,
			Output:  `var arr = [[ 1, 2 ], 2, [ 3, 4 ]];`,
			Options: "[\"always\",{\"arraysInArrays\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    34,
					EndLine:   1,
					EndColumn: 35,
				},
			},
		},
		{
			Code:            `var [x,y] = y`,
			Output:          `var [ x,y ] = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:            `var [x,y ] = y`,
			Output:          `var [ x,y ] = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code:            `var [,,,x,,] = y`,
			Output:          `var [ ,,,x,, ] = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `var [ ,,,x,,] = y`,
			Output:          `var [ ,,,x,, ] = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `var [...horse] = y`,
			Output:          `var [ ...horse ] = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `var [...horse ] = y`,
			Output:          `var [ ...horse ] = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code:            `var [ [ x, y ], z ] = arr;`,
			Output:          `var [[ x, y ], z ] = arr;`,
			Options:         "[\"always\",{\"arraysInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code:            `[ { x, y }, z ] = arr;`,
			Output:          `[{ x, y }, z ] = arr;`,
			Options:         "[\"always\",{\"objectsInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code:            `[ x, { y, z } ] = arr;`,
			Output:          `[ x, { y, z }] = arr;`,
			Options:         "[\"always\",{\"objectsInArrays\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:    `var arr = [[1, 2], 2, [3, 4]];`,
			Output:  `var arr = [ [1, 2], 2, [3, 4] ];`,
			Options: "[\"never\",{\"arraysInArrays\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:    `var arr = [ ];`,
			Output:  `var arr = [];`,
			Options: "[\"never\",{\"arraysInArrays\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var arr = [ ];`,
			Output:  `var arr = [];`,
			Options: "[\"never\",{\"objectsInArrays\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var arr = [1, 2, 3, 4];`,
			Output:  `var arr = [ 1, 2, 3, 4 ];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:    `var arr = [1, 2, 3, 4 ];`,
			Output:  `var arr = [ 1, 2, 3, 4 ];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `var arr = [ 1, 2, 3, 4];`,
			Output:  `var arr = [ 1, 2, 3, 4 ];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:    `var arr = [ 1, 2, 3, 4 ];`,
			Output:  `var arr = [1, 2, 3, 4];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:    `var arr = [1, 2, 3, 4 ];`,
			Output:  `var arr = [1, 2, 3, 4];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:    `var arr = [ 1, 2, 3, 4];`,
			Output:  `var arr = [1, 2, 3, 4];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var arr = [ [ 1], 2, 3, 4];`,
			Output:  `var arr = [[1], 2, 3, 4];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:    `var arr = [[1 ], 2, 3, 4 ];`,
			Output:  `var arr = [[1], 2, 3, 4];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code:            `([ a, b ]: Array<any>) => {}`,
			Output:          `([a, b]: Array<any>) => {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `([a, b]: Array< any >) => {}`,
			Output:          `([ a, b ]: Array< any >) => {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{},\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpaceAfter",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
				{
					MessageId: "missingSpaceBefore",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `var arr = [  1, 2   ];`,
			Output:  `var arr = [1, 2];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:            `function f( [   a, b  ] ) {}`,
			Output:          `function f( [a, b] ) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 17,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `var arr = [ 1,
   2   ];`,
			Output: `var arr = [1,
   2];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    5,
					EndLine:   2,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `var arr = [  1, [ 2, 3  ] ];`,
			Output:  `var arr = [1, [2, 3]];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 25,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
	})
}
