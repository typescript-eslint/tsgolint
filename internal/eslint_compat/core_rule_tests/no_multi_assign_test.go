// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoMultiAssignRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-multi-assign", []ValidTestCase{
		{Code: `var a, b, c,
d = 0;`},
		{Code: `var a = 1; var b = 2; var c = 3;
var d = 0;`},
		{Code: `var a = 1 + (b === 10 ? 5 : 4);`},
		{
			Code:            `const a = 1, b = 2, c = 3;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const a = 1;
const b = 2;
 const c = 3;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `for(var a = 0, b = 0;;){}`},
		{
			Code:            `for(let a = 0, b = 0;;){}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for(const a = 0, b = 0;;){}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `export let a, b;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export let a,
 b = 0;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `const x = {};const y = {};x.one = y.one = 1;`,
			Options:         "[{\"ignoreNonDeclaration\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a, b;a = b = 1`,
			Options:         "[{\"ignoreNonDeclaration\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { [foo = 0] = 0 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `var a = b = c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var a = b = c = d;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:            `let foo = bar = cee = 100;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `a=b=c=d=e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    3,
				},
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code: `a=b=c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    3,
				},
			},
		},
		{
			Code: `a
=b
=c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var a = (b) = (((c)))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var a = ((b)) = (c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var a = b = ( (c * 12) + 2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var a =
((b))
 = (c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `a = b = '=' + c + 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `a = b = 7 * 12 + 5;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `const x = {};
const y = x.one = 1;`,
			Options:         "[{\"ignoreNonDeclaration\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code:            `let a, b;a = b = 1`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:            `let x, y;x = y = 'baz'`,
			Options:         "[{\"ignoreNonDeclaration\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:            `const a = b = 1`,
			Options:         "[{\"ignoreNonDeclaration\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:            `class C { field = foo = 0 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `class C { field = foo = 0 }`,
			Options:         "[{\"ignoreNonDeclaration\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedChain",
					Line:      1,
					Column:    19,
				},
			},
		},
	})
}
