// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNewlinePerChainedCallRule(t *testing.T) {
	RunRuleTester(t, "{}", "newline-per-chained-call", []ValidTestCase{
		{Code: `_
.chain({})
.map(foo)
.filter(bar)
.value();`},
		{Code: `a.b.c.d.e.f`},
		{Code: `a()
.b()
.c
.e`},
		{Code: `var a = m1.m2(); var b = m1.m2();
var c = m1.m2()`},
		{Code: `var a = m1()
.m2();`},
		{Code: `var a = m1();`},
		{Code: `a()
.b().c.e.d()`},
		{Code: `a().b().c.e.d()`},
		{Code: `a.b.c.e.d()`},
		{Code: `var a = window
.location
.href
.match(/(^[^#]*)/)[0];`},
		{Code: `var a = window['location']
.href
.match(/(^[^#]*)/)[0];`},
		{Code: `var a = window['location'].href.match(/(^[^#]*)/)[0];`},
		{
			Code:    `var a = m1().m2.m3();`,
			Options: "[{\"ignoreChainWithDepth\":3}]",
		},
		{
			Code:    `var a = m1().m2.m3().m4.m5().m6.m7().m8;`,
			Options: "[{\"ignoreChainWithDepth\":8}]",
		},
	}, []InvalidTestCase{
		{
			Code: `_
.chain({}).map(foo).filter(bar).value();`,
			Output: `_
.chain({}).map(foo)
.filter(bar)
.value();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
					Column:    20,
					EndLine:   2,
					EndColumn: 27,
				},
				{
					MessageId: "expected",
					Line:      2,
					Column:    32,
					EndLine:   2,
					EndColumn: 38,
				},
			},
		},
		{
			Code: `_
.chain({})
.map(foo)
.filter(bar).value();`,
			Output: `_
.chain({})
.map(foo)
.filter(bar)
.value();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
					Column:    13,
					EndLine:   4,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `a().b().c().e.d()`,
			Output: `a().b()
.c().e.d()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `a.b.c().e().d()`,
			Output: `a.b.c().e()
.d()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `_.chain({}).map(a).value(); `,
			Output: `_.chain({}).map(a)
.value(); `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code: `var a = m1.m2();
 var b = m1.m2().m3().m4().m5();`,
			Output: `var a = m1.m2();
 var b = m1.m2().m3()
.m4()
.m5();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
					Column:    22,
					EndLine:   2,
					EndColumn: 25,
				},
				{
					MessageId: "expected",
					Line:      2,
					Column:    27,
					EndLine:   2,
					EndColumn: 30,
				},
			},
		},
		{
			Code: `var a = m1.m2();
 var b = m1.m2().m3()
.m4().m5();`,
			Output: `var a = m1.m2();
 var b = m1.m2().m3()
.m4()
.m5();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
					Column:    6,
					EndLine:   3,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `var a = m1().m2
.m3().m4().m5().m6().m7();`,
			Output: `var a = m1().m2
.m3().m4().m5()
.m6()
.m7();`,
			Options: "[{\"ignoreChainWithDepth\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
					Column:    16,
					EndLine:   2,
					EndColumn: 19,
				},
				{
					MessageId: "expected",
					Line:      2,
					Column:    21,
					EndLine:   2,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `http.request({
    // Param
    // Param
    // Param
}).on('response', function(response) {
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
}).on('error', function(error) {
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
}).end();`,
			Output: `http.request({
    // Param
    // Param
    // Param
}).on('response', function(response) {
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
    // Do something with response.
})
.on('error', function(error) {
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
    // Do something with error.
})
.end();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      16,
					Column:    3,
					EndLine:   16,
					EndColumn: 6,
				},
				{
					MessageId: "expected",
					Line:      27,
					Column:    3,
					EndLine:   27,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `anObject.method1().method2()['method' + n]()[aCondition ?
    'method3' :
    'method4']()`,
			Output: `anObject.method1().method2()
['method' + n]()
[aCondition ?
    'method3' :
    'method4']()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 43,
				},
				{
					MessageId: "expected",
					Line:      1,
					Column:    45,
					EndLine:   3,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `foo.bar()['foo' +   + 'bar']()`,
			Output: `foo.bar()
['foo' +   + 'bar']()`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    10,
					EndLine:   2,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `foo.bar()[(biz)]()`,
			Output: `foo.bar()
[(biz)]()`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `(foo).bar().biz()`,
			Output: `(foo).bar()
.biz()`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `foo.bar(). /* comment */ biz()`,
			Output: `foo.bar()
. /* comment */ biz()`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `foo.bar() /* comment */ .biz()`,
			Output: `foo.bar() /* comment */ 
.biz()`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `((foo.bar()) . baz()).quux();`,
			Output: `((foo.bar()) 
. baz())
.quux();`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 19,
				},
				{
					MessageId: "expected",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `((foo.bar()) [a + b] ()) [(c + d)]()`,
			Output: `((foo.bar()) 
[a + b] ()) 
[(c + d)]()`,
			Options: "[{\"ignoreChainWithDepth\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 21,
				},
				{
					MessageId: "expected",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `obj?.foo1()?.foo2()?.foo3()`,
			Output: `obj?.foo1()
?.foo2()
?.foo3()`,
			Options:         "[{\"ignoreChainWithDepth\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(obj?.foo1()?.foo2)()?.foo3()`,
			Output: `(obj?.foo1()
?.foo2)()
?.foo3()`,
			Options:         "[{\"ignoreChainWithDepth\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(obj?.foo1())?.foo2()?.foo3()`,
			Output: `(obj?.foo1())
?.foo2()
?.foo3()`,
			Options:         "[{\"ignoreChainWithDepth\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `obj?.[foo1]()?.[foo2]()?.[foo3]()`,
			Output: `obj?.[foo1]()
?.[foo2]()
?.[foo3]()`,
			Options:         "[{\"ignoreChainWithDepth\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(obj?.[foo1]()?.[foo2])()?.[foo3]()`,
			Output: `(obj?.[foo1]()
?.[foo2])()
?.[foo3]()`,
			Options:         "[{\"ignoreChainWithDepth\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `(obj?.[foo1]())?.[foo2]()?.[foo3]()`,
			Output: `(obj?.[foo1]())
?.[foo2]()
?.[foo3]()`,
			Options:         "[{\"ignoreChainWithDepth\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
	})
}
