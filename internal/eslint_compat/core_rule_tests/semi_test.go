// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSemiRule(t *testing.T) {
	RunRuleTester(t, "{}", "semi", []ValidTestCase{
		{Code: `var x = 5;`},
		{Code: `var x =5, y;`},
		{Code: `foo();`},
		{Code: `x = foo();`},
		{Code: `setTimeout(function() {foo = "bar"; });`},
		{Code: `setTimeout(function() {foo = "bar";});`},
		{Code: `for (var a in b){}`},
		{Code: `for (var i;;){}`},
		{Code: `if (true) {}
;[global, extended].forEach(function(){});`},
		{Code: `throw new Error('foo');`},
		{
			Code:    `throw new Error('foo')`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x = 5`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x =5, y`,
			Options: "[\"never\"]",
		},
		{
			Code:    `foo()`,
			Options: "[\"never\"]",
		},
		{
			Code:    `debugger`,
			Options: "[\"never\"]",
		},
		{
			Code:    `for (var a in b){}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `for (var i;;){}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `x = foo()`,
			Options: "[\"never\"]",
		},
		{
			Code: `if (true) {}
;[global, extended].forEach(function(){})`,
			Options: "[\"never\"]",
		},
		{
			Code: `(function bar() {})
;(function foo(){})`,
			Options: "[\"never\"]",
		},
		{
			Code:    `;/foo/.test('bar')`,
			Options: "[\"never\"]",
		},
		{
			Code:    `;+5`,
			Options: "[\"never\"]",
		},
		{
			Code:    `;-foo()`,
			Options: "[\"never\"]",
		},
		{
			Code: `a++
b++`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a++; b++`,
			Options: "[\"never\"]",
		},
		{
			Code: `for (let thing of {}) {
  console.log(thing);
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `do{}while(true)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `do{}while(true);`,
			Options: "[\"always\"]",
		},
		{
			Code:            `class C { static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static {} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo(); } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo(); bar(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo(); bar(); baz();} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
bar() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
bar()
baz() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { foo(); bar() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo();
 (a) } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
 ;(a) } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo();
 [a] } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
 ;[a] } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo();
 +a } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
 ;+a } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo();
 -a } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
 ;-a } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo();
 /a/ } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo()
 ;/a/} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { foo();
 (a) } }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { do ; while (foo)
 (a)} }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static { do ; while (foo)
 ;(a)} }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:    `if (foo) { bar() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code:    `if (foo) { bar(); baz() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code: `if (foo)
{ bar(); baz() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code: `if (foo) {
 bar(); baz(); }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code: `if (foo) { bar(); baz(); 
}`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code:    `function foo() { bar(); baz() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code: `function foo()
{ bar(); baz() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code: `function foo(){
 bar(); baz(); }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code: `function foo(){ bar(); baz(); 
}`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
		},
		{
			Code:            `() => { bar(); baz() };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() =>
 { bar(); baz() };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
 bar(); baz(); };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => { bar(); baz(); 
};`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const obj = { method() { bar(); baz() } };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const obj = { method()
 { bar(); baz() } };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const obj = { method() {
 bar(); baz(); } };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const obj = { method() { bar(); baz(); 
} };`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class C {
 method() { bar(); baz() } 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class C {
 method()
 { bar(); baz() } 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class C {
 method() {
 bar(); baz(); } 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class C {
 method() { bar(); baz(); 
} 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class C {
 static { bar(); baz() } 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static
 { bar(); baz() } 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 bar(); baz(); } 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static { bar(); baz(); 
} 
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1}
                export class Variant2 extends SomeClass{type=2}
                export class Variant3 extends SomeClass{type=3}
                export class Variant4 extends SomeClass{type=4}
                export class Variant5 extends SomeClass{type=5}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                        console.log(this.anotherType);
                    }
                }

                export class Variant1 extends SomeClass{type=1; anotherType=2}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1;}
                export class Variant2 extends SomeClass{type=2;}
                export class Variant3 extends SomeClass{type=3;}
                export class Variant4 extends SomeClass{type=4;}
                export class Variant5 extends SomeClass{type=5;}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code: `class C {
foo;}`,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {foo;
}`,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {foo;
bar;}`,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `{ foo; }`,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C
{ foo }`,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a() {} b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var A = class { a() {} b() {} };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `import theDefault, { named1, named2 } from 'src/mylib';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import theDefault, { named1, named2 } from 'src/mylib'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { foo } from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var foo = 0;export { foo };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export function foo () { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export function* foo () { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export class Foo { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export let foo;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export const FOO = 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default function() { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default function* () { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default class { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default foo || bar;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default (foo) => foo.bar();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default foo = 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default foo += 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * from 'foo'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { foo } from 'foo'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var foo = 0; export { foo }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export var foo`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export function foo () { }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export function* foo () { }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export class Foo { }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export let foo`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export const FOO = 42`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default function() { }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default function* () { }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default class { }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default foo || bar`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default (foo) => foo.bar()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default foo = 42`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default foo += 42`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `++
foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `var a = b;
+ c`,
			Options: "[\"never\"]",
		},
		{
			Code: `var a = b;
/foo/.test(c)`,
			Options: "[\"never\"]",
		},
		{
			Code: `var a = b;
` + "`" + `foo` + "`" + ``,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
                do; while(a);
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"any\"}]",
		},
		{
			Code: `
                do; while(a)
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"any\"}]",
		},
		{
			Code: `
                import a from "a";
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `
                var a = 0; export {a};
                [a] = b
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `
                function wrap() {
                    return;
                    ({a} = b)
                }
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `
                while (true) {
                    break;
                    +i
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
		},
		{
			Code: `
                while (true) {
                    continue;
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
		},
		{
			Code: `
                do; while(a);
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
		},
		{
			Code: `
                const f = () => {};
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `
                import a from "a"
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `
                var a = 0; export {a}
                [a] = b
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `
                function wrap() {
                    return
                    ({a} = b)
                }
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `
                while (true) {
                    break
                    +i
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
		},
		{
			Code: `
                while (true) {
                    continue
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
		},
		{
			Code: `
                do; while(a)
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
		},
		{
			Code: `
                const f = () => {}
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `class C { foo; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = obj
;[bar] }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo;
[bar]; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
;[bar] }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
[bar] }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
;[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = () => {}
;[bar] }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = () => {}
[bar] }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = () => {}
;[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = () => {}
[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo() {} }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo() {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static {}; }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { a=b;
*foo() {} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { get;
foo() {} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { set;
foo() {} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static;
foo() {} }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { a=b;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { a=b;
instanceof }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    x
                    [foo]

                    x;
                    [foo]

                    x = "a";
                    [foo]
                }
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    x
                    [foo]

                    x;
                    [foo]

                    x = 1;
                    [foo]
                }
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = () => {}
[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo
;[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { foo = () => {}
;[bar] }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo] = bar;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { #foo = bar;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static static = bar;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [foo];
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [get];
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { [get] = 5;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { #get;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { #set = 5;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { static static;
in }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:            `import * as utils from './utils'`,
			Output:          `import * as utils from './utils';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    33,
				},
			},
		},
		{
			Code:            `import { square, diag } from 'lib'`,
			Output:          `import { square, diag } from 'lib';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    35,
				},
			},
		},
		{
			Code:            `import { default as foo } from 'lib'`,
			Output:          `import { default as foo } from 'lib';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    37,
				},
			},
		},
		{
			Code:            `import 'src/mylib'`,
			Output:          `import 'src/mylib';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `import theDefault, { named1, named2 } from 'src/mylib'`,
			Output:          `import theDefault, { named1, named2 } from 'src/mylib';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    55,
				},
			},
		},
		{
			Code:   `function foo() { return [] }`,
			Output: `function foo() { return []; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code:   `while(true) { break }`,
			Output: `while(true) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:   `while(true) { continue }`,
			Output: `while(true) { continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `let x = 5`,
			Output:          `let x = 5;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:   `var x = 5`,
			Output: `var x = 5;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:   `var x = 5, y`,
			Output: `var x = 5, y;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:   `debugger`,
			Output: `debugger;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `foo()`,
			Output: `foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code: `foo()
`,
			Output: `foo();
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `foo()` + "\r" + `
`,
			Output: `foo();` + "\r" + `
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `foo()
bar();`,
			Output: `foo();
bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `foo()` + "\r" + `
bar();`,
			Output: `foo();` + "\r" + `
bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:   `for (var a in b) var i `,
			Output: `for (var a in b) var i; `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:   `for (;;){var i}`,
			Output: `for (;;){var i;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:   `for (;;) var i `,
			Output: `for (;;) var i; `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:   `for (var j;;) {var i}`,
			Output: `for (var j;;) {var i;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `var foo = {
 bar: baz
}`,
			Output: `var foo = {
 bar: baz
};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo
var bar;`,
			Output: `var foo;
var bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    8,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:   `throw new Error('foo')`,
			Output: `throw new Error('foo');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:   `do{}while(true)`,
			Output: `do{}while(true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:   `if (foo) {bar()}`,
			Output: `if (foo) {bar();}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:   `if (foo) {bar()} `,
			Output: `if (foo) {bar();} `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `if (foo) {bar()
}`,
			Output: `if (foo) {bar();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    16,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `throw new Error('foo');`,
			Output:  `throw new Error('foo')`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:    `function foo() { return []; }`,
			Output:  `function foo() { return [] }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code:    `while(true) { break; }`,
			Output:  `while(true) { break }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:    `while(true) { continue; }`,
			Output:  `while(true) { continue }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `let x = 5;`,
			Output:          `let x = 5`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:    `var x = 5;`,
			Output:  `var x = 5`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:    `var x = 5, y;`,
			Output:  `var x = 5, y`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:    `debugger;`,
			Output:  `debugger`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `foo();`,
			Output:  `foo()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code:    `for (var a in b) var i; `,
			Output:  `for (var a in b) var i `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:    `for (;;){var i;}`,
			Output:  `for (;;){var i}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:    `for (;;) var i; `,
			Output:  `for (;;) var i `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:    `for (var j;;) {var i;}`,
			Output:  `for (var j;;) {var i}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `var foo = {
 bar: baz
};`,
			Output: `var foo = {
 bar: baz
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    2,
					EndLine:   3,
					EndColumn: 3,
				},
			},
		},
		{
			Code:            `import theDefault, { named1, named2 } from 'src/mylib';`,
			Output:          `import theDefault, { named1, named2 } from 'src/mylib'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    55,
					EndLine:   1,
					EndColumn: 56,
				},
			},
		},
		{
			Code:    `do{}while(true);`,
			Output:  `do{}while(true)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:            `class C { static { foo() } }`,
			Output:          `class C { static { foo(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code:            `class C { static { foo() } }`,
			Output:          `class C { static { foo(); } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code:            `class C { static { foo(); bar() } }`,
			Output:          `class C { static { foo(); bar(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    32,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code: `class C { static { foo()
bar(); } }`,
			Output: `class C { static { foo();
bar(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    25,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class C { static { foo(); bar()
baz(); } }`,
			Output: `class C { static { foo(); bar();
baz(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    32,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:            `class C { static { foo(); } }`,
			Output:          `class C { static { foo() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `class C { static { foo();
bar() } }`,
			Output: `class C { static { foo()
bar() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `class C { static { foo()
bar(); } }`,
			Output: `class C { static { foo()
bar() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    6,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `class C { static { foo()
bar();
baz() } }`,
			Output: `class C { static { foo()
bar()
baz() } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    6,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `class C { static { do ; while (foo)
 (a)} }`,
			Output: `class C { static { do ; while (foo);
 (a)} }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    36,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class C { static { do ; while (foo)
 ;(a)} }`,
			Output: `class C { static { do ; while (foo)
 (a)} }`,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `if (foo) { bar()
 }`,
			Output: `if (foo) { bar();
 }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    17,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `if (foo) {
 bar() }`,
			Output: `if (foo) {
 bar(); }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    7,
					EndLine:   2,
					EndColumn: 8,
				},
			},
		},
		{
			Code: `if (foo) {
 bar(); baz() }`,
			Output: `if (foo) {
 bar(); baz(); }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    14,
					EndLine:   2,
					EndColumn: 15,
				},
			},
		},
		{
			Code:    `if (foo) { bar(); }`,
			Output:  `if (foo) { bar() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:    `function foo() { bar(); baz(); }`,
			Output:  `function foo() { bar(); baz() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code: `function foo()
{ bar(); baz(); }`,
			Output: `function foo()
{ bar(); baz() }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    15,
					EndLine:   2,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `function foo() {
 bar(); baz() }`,
			Output: `function foo() {
 bar(); baz(); }`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    14,
					EndLine:   2,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `function foo() { bar(); baz() 
}`,
			Output: `function foo() { bar(); baz(); 
}`,
			Options: "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code: `class C {
foo() { bar(); baz(); }
}`,
			Output: `class C {
foo() { bar(); baz() }
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    21,
					EndLine:   2,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `class C {
foo() 
{ bar(); baz(); }
}`,
			Output: `class C {
foo() 
{ bar(); baz() }
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    15,
					EndLine:   3,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `class C {
foo() {
 bar(); baz() }
}`,
			Output: `class C {
foo() {
 bar(); baz(); }
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      3,
					Column:    14,
					EndLine:   3,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `class C {
foo() { bar(); baz() 
}
}`,
			Output: `class C {
foo() { bar(); baz(); 
}
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    21,
					EndLine:   2,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `class C {
static { bar(); baz(); }
}`,
			Output: `class C {
static { bar(); baz() }
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    22,
					EndLine:   2,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `class C {
static 
{ bar(); baz(); }
}`,
			Output: `class C {
static 
{ bar(); baz() }
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    15,
					EndLine:   3,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `class C {
static {
 bar(); baz() }
}`,
			Output: `class C {
static {
 bar(); baz(); }
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      3,
					Column:    14,
					EndLine:   3,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `class C {
foo() { bar(); baz() 
}
}`,
			Output: `class C {
foo() { bar(); baz(); 
}
}`,
			Options:         "[\"always\",{\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    21,
					EndLine:   2,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `export * from 'foo'`,
			Output:          `export * from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:            `export { foo } from 'foo'`,
			Output:          `export { foo } from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:            `var foo = 0;export { foo }`,
			Output:          `var foo = 0;export { foo };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:            `export var foo`,
			Output:          `export var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `export let foo`,
			Output:          `export let foo;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `export const FOO = 42`,
			Output:          `export const FOO = 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:            `export default foo || bar`,
			Output:          `export default foo || bar;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:            `export default (foo) => foo.bar()`,
			Output:          `export default (foo) => foo.bar();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code:            `export default foo = 42`,
			Output:          `export default foo = 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `export default foo += 42`,
			Output:          `export default foo += 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:            `export * from 'foo';`,
			Output:          `export * from 'foo'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:            `export { foo } from 'foo';`,
			Output:          `export { foo } from 'foo'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `var foo = 0;export { foo };`,
			Output:          `var foo = 0;export { foo }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code:            `export var foo;`,
			Output:          `export var foo`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `export let foo;`,
			Output:          `export let foo`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `export const FOO = 42;`,
			Output:          `export const FOO = 42`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `export default foo || bar;`,
			Output:          `export default foo || bar`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `export default (foo) => foo.bar();`,
			Output:          `export default (foo) => foo.bar()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    34,
					EndLine:   1,
					EndColumn: 35,
				},
			},
		},
		{
			Code:            `export default foo = 42;`,
			Output:          `export default foo = 42`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:            `export default foo += 42;`,
			Output:          `export default foo += 42`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `a;
++b`,
			Output: `a
++b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `/*eslint no-extra-semi: error */
foo();
;[0,1,2].forEach(bar)`,
			Output: `/*eslint no-extra-semi: error */
foo()
;[0,1,2].forEach(bar)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    6,
					EndLine:   2,
					EndColumn: 7,
				},
				{
					MessageDescription: "Unnecessary semicolon.",
					Line:               3,
					Column:             1,
					EndLine:            3,
					EndColumn:          2,
				},
			},
		},
		{
			Code: `
                import a from "a"
                [1,2,3].forEach(doSomething)
            `,
			Output: `
                import a from "a";
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    34,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                var a = 0; export {a}
                [a] = b
            `,
			Output: `
                var a = 0; export {a};
                [a] = b
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    38,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                function wrap() {
                    return
                    ({a} = b)
                }
            `,
			Output: `
                function wrap() {
                    return;
                    ({a} = b)
                }
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      3,
					Column:    27,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                while (true) {
                    break
                   +i
                }
            `,
			Output: `
                while (true) {
                    break;
                   +i
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      3,
					Column:    26,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                while (true) {
                    continue
                    [1,2,3].forEach(doSomething)
                }
            `,
			Output: `
                while (true) {
                    continue;
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      3,
					Column:    29,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                do; while(a)
                [1,2,3].forEach(doSomething)
            `,
			Output: `
                do; while(a);
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    29,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                const f = () => {}
                [1,2,3].forEach(doSomething)
            `,
			Output: `
                const f = () => {};
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      2,
					Column:    35,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
                import a from "a";
                [1,2,3].forEach(doSomething)
            `,
			Output: `
                import a from "a"
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    34,
					EndLine:   2,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `
                var a = 0; export {a};
                [a] = b
            `,
			Output: `
                var a = 0; export {a}
                [a] = b
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    38,
					EndLine:   2,
					EndColumn: 39,
				},
			},
		},
		{
			Code: `
                function wrap() {
                    return;
                    ({a} = b)
                }
            `,
			Output: `
                function wrap() {
                    return
                    ({a} = b)
                }
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    27,
					EndLine:   3,
					EndColumn: 28,
				},
			},
		},
		{
			Code: `
                while (true) {
                    break;
                    +i
                }
            `,
			Output: `
                while (true) {
                    break
                    +i
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    26,
					EndLine:   3,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `
                while (true) {
                    continue;
                    [1,2,3].forEach(doSomething)
                }
            `,
			Output: `
                while (true) {
                    continue
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    29,
					EndLine:   3,
					EndColumn: 30,
				},
			},
		},
		{
			Code: `
                do; while(a);
                [1,2,3].forEach(doSomething)
            `,
			Output: `
                do; while(a)
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    29,
					EndLine:   2,
					EndColumn: 30,
				},
			},
		},
		{
			Code: `
                const f = () => {};
                [1,2,3].forEach(doSomething)
            `,
			Output: `
                const f = () => {}
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      2,
					Column:    35,
					EndLine:   2,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `
                import a from "a"
                ;[1,2,3].forEach(doSomething)
            `,
			Output: `
                import a from "a"
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                var a = 0; export {a}
                ;[1,2,3].forEach(doSomething)
            `,
			Output: `
                var a = 0; export {a}
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                function wrap() {
                    return
                    ;[1,2,3].forEach(doSomething)
                }
            `,
			Output: `
                function wrap() {
                    return
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      4,
					Column:    21,
					EndLine:   4,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `
                while (true) {
                    break
                    ;[1,2,3].forEach(doSomething)
                }
            `,
			Output: `
                while (true) {
                    break
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      4,
					Column:    21,
					EndLine:   4,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `
                while (true) {
                    continue
                    ;[1,2,3].forEach(doSomething)
                }
            `,
			Output: `
                while (true) {
                    continue
                    [1,2,3].forEach(doSomething)
                }
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      4,
					Column:    21,
					EndLine:   4,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `
                do; while(a)
                ;[1,2,3].forEach(doSomething)
            `,
			Output: `
                do; while(a)
                [1,2,3].forEach(doSomething)
            `,
			Options: "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                const f = () => {}
                ;[1,2,3].forEach(doSomething)
            `,
			Output: `
                const f = () => {}
                [1,2,3].forEach(doSomething)
            `,
			Options:         "[\"never\",{\"beforeStatementContinuationChars\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `class C { foo }`,
			Output:          `class C { foo; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `class C { foo }`,
			Output:          `class C { foo; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `class C { foo; }`,
			Output:          `class C { foo }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `class C { foo
[bar]; }`,
			Output: `class C { foo;
[bar]; }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      1,
					Column:    14,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class C { [get];
foo
}`,
			Output: `class C { [get]
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `class C { [set];
foo
}`,
			Output: `class C { [set]
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `class C { #get;
foo
}`,
			Output: `class C { #get
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `class C { #set;
foo
}`,
			Output: `class C { #set
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `class C { #static;
foo
}`,
			Output: `class C { #static
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `class C { get=1;
foo
}`,
			Output: `class C { get=1
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `class C { static static;
foo
}`,
			Output: `class C { static static
foo
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code: `class C { static;
}`,
			Output: `class C { static
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1}
            `,
			Output: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1;}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      8,
					Column:    63,
					EndLine:   8,
					EndColumn: 64,
				},
			},
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1}
            `,
			Output: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1;}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":false,\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      8,
					Column:    63,
					EndLine:   8,
					EndColumn: 64,
				},
			},
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1;}
            `,
			Output: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                    }
                }

                export class Variant1 extends SomeClass{type=1}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":true,\"omitLastInOneLineBlock\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraSemi",
					Line:      8,
					Column:    63,
					EndLine:   8,
					EndColumn: 64,
				},
			},
		},
		{
			Code: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                        console.log(this.anotherType);
                    }
                }

                export class Variant1 extends SomeClass{type=1; anotherType=2}
            `,
			Output: `
                export class SomeClass{
                    logType(){
                        console.log(this.type);
                        console.log(this.anotherType);
                    }
                }

                export class Variant1 extends SomeClass{type=1; anotherType=2;}
            `,
			Options:         "[\"always\",{\"omitLastInOneLineClassBody\":false,\"omitLastInOneLineBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSemi",
					Line:      9,
					Column:    78,
					EndLine:   9,
					EndColumn: 79,
				},
			},
		},
	})
}
