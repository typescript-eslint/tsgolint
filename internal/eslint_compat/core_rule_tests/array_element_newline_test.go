// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrayElementNewlineRule(t *testing.T) {
	RunRuleTester(t, "{}", "array-element-newline", []ValidTestCase{
		{Code: `var foo = [];`},
		{Code: `var foo = [1];`},
		{Code: `var foo = [1,
2];`},
		{Code: `var foo = [1, // any comment
2];`},
		{Code: `var foo = [// any comment 
1,
2];`},
		{Code: `var foo = [1,
2 // any comment
];`},
		{Code: `var foo = [1,
2,
3];`},
		{Code: `var foo = [1
, (2
, 3)];`},
		{Code: `var foo = [1,
(  2   ),
3];`},
		{Code: `var foo = [1,
((((2)))),
3];`},
		{Code: `var foo = [1,
(
2
),
3];`},
		{Code: `var foo = [1,
(2),
3];`},
		{Code: `var foo = [1,
(2)
, 3];`},
		{Code: `var foo = [1
, 2
, 3];`},
		{Code: `var foo = [1,
2,
,
3];`},
		{Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
osomething();
}
];`},
		{Code: `var foo = [1,
[2,
3],
4]`},
		{Code: `var foo = [[],
[
[]]]`},
		{
			Code:    `var foo = [];`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [1,
2];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [1,
(2)];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [1
, (2)];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [1, // any comment
2];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [// any comment 
1,
2];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [1,
2 // any comment
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [1,
2,
3];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
[1,
2],
3,
[
4]]`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1, /* any comment */ 2];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [/* any comment */ 1, 2];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = /* any comment */ [1, 2];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1, 2, 3];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [1, (
2
), 3];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [
[1,2],3,[4]
]`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [[1,2
],3,[4
]
]`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1,
2];`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var foo = [1, 2, 3];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1,
2,
3];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1,
2,
,
3];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1, // any comment
2];`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var foo = [/* any comment */ 1, 2];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1, (
2
), 3];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1,
(2)
, 3];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
},
function bar() {
dosomething();
}];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}, function bar() {
dosomething();
}];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [1,
[
2,3,
]
];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [
1,
[2
,3
,]
];`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var foo = [
1,[2,
3]];`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [1, 2, 3];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var f = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
1,
2,
3,
[
]
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1, 2, 3];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1, 2, 3, [[],1,[[]]]];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [1,
2];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [1,
2,
3];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [
1, 
2, 
3,
[
[],
[]],
[]];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code: `var foo = [1,
2,
3];`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code: `var foo = [[1,2],[[
1,
2,
3]]];`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
		},
		{
			Code: `var foo = [1, // any comment
2,
, 3];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
		},
		{
			Code: `var foo = [1,
2,
// any comment
, 3];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
		},
		{
			Code:            `var [] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [a,
b] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [a, // any comment
b] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [// any comment 
a,
b] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [a,
b // any comment
] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [a,
b,
b] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a,
[
b,
c]] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a,[b,c]] = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [] = foo;`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = foo;`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, b] = foo;`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [a,
b,
c] = foo;`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [a, b] = [1,
2]`,
			Options:         "[{\"ArrayExpression\":\"always\",\"ArrayPattern\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo = [
1,[2,
3]]`,
			Output: `var foo = [
1,
[2,
3]]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var foo = [1, 2];`,
			Output: `var foo = [1,
2];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `var foo = [1, 2, 3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `var foo = [1,2, 3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `var foo = [1, (2), 3];`,
			Output: `var foo = [1,
(2),
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var foo = [1,(
2
), 3];`,
			Output: `var foo = [1,
(
2
),
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "missingLineBreak",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [1,        	      (
2
),
3];`,
			Output: `var foo = [1,
(
2
),
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo = [1, ((((2)))), 3];`,
			Output: `var foo = [1,
((((2)))),
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `var foo = [1,/* any comment */(2), 3];`,
			Output: `var foo = [1,/* any comment */
(2),
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    31,
					EndLine:   1,
					EndColumn: 31,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    35,
					EndLine:   1,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `var foo = [1,(  2), 3];`,
			Output: `var foo = [1,
(  2),
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code: `var foo = [1, [2], 3];`,
			Output: `var foo = [1,
[2],
3];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
(function foo() {
dosomething();
}), function bar() {
dosomething();
}
];`,
			Output: `var foo = [
(function foo() {
dosomething();
}),
function bar() {
dosomething();
}
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `var foo = [
[1,
2],
3,[
4]]`,
			Output: `var foo = [
[1,
2],
3,
[
4]]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
1,
2
];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
1
, 2
];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [
1 // any comment
, 2
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [
1, // any comment
2
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    18,
				},
			},
		},
		{
			Code: `var foo = [
1,
2 // any comment
];`,
			Output: `var foo = [
1, 2 // any comment
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
1,
2,
3
];`,
			Output: `var foo = [
1, 2, 3
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      3,
					Column:    3,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, /* any comment */
function bar() {
dosomething();
}
];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      4,
					Column:    21,
				},
			},
		},
		{
			Code: `var foo = [[1,
2
],3,[4
]
]`,
			Output: `var foo = [[1, 2
],3,[4
]
]`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code: `var foo = [1,
2, 3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `var foo = [1, 2,
3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `var foo = [1,
(
2), 3];`,
			Output: `var foo = [1,
(
2),
3];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      3,
					Column:    4,
					EndLine:   3,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `var foo = [1,        	      (
2
),
3];`,
			Output: `var foo = [1,
(
2
),
3];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `var foo = [1, /* any comment */(2),
3];`,
			Output: `var foo = [1, /* any comment */
(2),
3];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    32,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},function bar() {
dosomething();
},
function bar() {
dosomething();
}];`,
			Output: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
},
function bar() {
dosomething();
}];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
1,[2,3,
[]],
[]
];`,
			Output: `var foo = [
1,
[2,
3,
[]],
[]
];`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    3,
				},
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    6,
				},
			},
		},
		{
			Code: `var foo = [1,
2, 3];`,
			Output:  `var foo = [1, 2, 3];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, /* any comment */ function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
}, /* any comment */
function bar() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    21,
				},
			},
		},
		{
			Code: `var foo = [
1,2,3,
[
]
];`,
			Output: `var foo = [
1,
2,
3,
[
]
];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    3,
				},
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo = [1,
2,
3];`,
			Output:  `var foo = [1, 2, 3];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [1, 2];`,
			Output: `var foo = [1,
2];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo = [1, 2, 3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo = [1, 2, 3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var foo = [1, 2, 3];`,
			Output: `var foo = [1,
2,
3];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}, function bar() {
dosomething();
}
];`,
			Output: `var foo = [
function foo() {
dosomething();
},
function bar() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true,\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
				},
			},
		},
		{
			Code: `var [a, b] = foo;`,
			Output: `var [a,
b] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `var [a, b, c] = foo;`,
			Output: `var [a,
b,
c] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code: `var [a,
b] = foo;`,
			Output:          `var [a, b] = foo;`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `var [a, b, c] = foo;`,
			Output: `var [a,
b,
c] = foo;`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code: `var [a,
b] = [1, 2]`,
			Output: `var [a, b] = [1,
2]`,
			Options:         "[{\"ArrayExpression\":\"always\",\"ArrayPattern\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `var [a, b] = [1, 2]`,
			Output: `var [a, b] = [1,
2]`,
			Options:         "[{\"ArrayExpression\":\"always\",\"ArrayPattern\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var [a,
b] = [1,
2]`,
			Output: `var [a, b] = [1,
2]`,
			Options:         "[{\"ArrayExpression\":\"always\",\"ArrayPattern\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    8,
				},
			},
		},
	})
}
