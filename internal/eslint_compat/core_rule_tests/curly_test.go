// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCurlyRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "curly", []ValidTestCase{
		{Code: `if (foo) { bar() }`},
		{Code: `if (foo) { bar() } else if (foo2) { baz() }`},
		{Code: `while (foo) { bar() }`},
		{Code: `do { bar(); } while (foo)`},
		{Code: `for (;foo;) { bar() }`},
		{Code: `for (var foo in bar) { console.log(foo) }`},
		{
			Code:            `for (var foo of bar) { console.log(foo) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `for (;foo;) bar()`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (foo) bar()`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { b; c; }`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `for (var foo in bar) console.log(foo)`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `for (var foo in bar) { console.log(1); console.log(2) }`,
			Options: "[\"multi\"]",
		},
		{
			Code:            `for (var foo of bar) console.log(foo)`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for (var foo of bar) { console.log(1); console.log(2) }`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `if (foo) bar()`,
			Options: "[\"multi-line\"]",
		},
		{
			Code: `if (foo) bar() 
`,
			Options: "[\"multi-line\"]",
		},
		{
			Code:    `if (foo) bar(); else baz()`,
			Options: "[\"multi-line\"]",
		},
		{
			Code: `if (foo) bar(); 
 else baz()`,
			Options: "[\"multi-line\"]",
		},
		{
			Code: `if (foo) bar() 
 else if (foo) bar() 
 else baz()`,
			Options: "[\"multi-line\"]",
		},
		{
			Code:    `do baz(); while (foo)`,
			Options: "[\"multi-line\"]",
		},
		{
			Code:    `if (foo) { bar() }`,
			Options: "[\"multi-line\"]",
		},
		{
			Code:    `for (var foo in bar) console.log(foo)`,
			Options: "[\"multi-line\"]",
		},
		{
			Code: `for (var foo in bar) { 
 console.log(1); 
 console.log(2); 
 }`,
			Options: "[\"multi-line\"]",
		},
		{
			Code:            `for (var foo of bar) console.log(foo)`,
			Options:         "[\"multi-line\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for (var foo of bar) { 
 console.log(1); 
 console.log(2); 
 }`,
			Options:         "[\"multi-line\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if (foo) { 
 bar(); 
 baz(); 
 }`,
			Options: "[\"multi-line\"]",
		},
		{
			Code: `do bar() 
 while (foo)`,
			Options: "[\"multi-line\"]",
		},
		{
			Code: `if (foo) { 
 quz = { 
 bar: baz, 
 qux: foo 
 }; 
 }`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `while (true) { 
 if (foo) 
 doSomething(); 
 else 
 doSomethingElse(); 
 }`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) 
 quz = true;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) { 
 // line of comment 
 quz = true; 
 }`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `// line of comment 
 if (foo) 
 quz = true; 
`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `while (true) 
 doSomething();`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var i = 0; foo; i++) 
 doSomething();`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) { 
 if(bar) 
 doSomething(); 
 } else 
 doSomethingElse();`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo in bar) 
 console.log(foo)`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo in bar) { 
 if (foo) console.log(1); 
 else console.log(2) 
 }`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo of bar) 
 console.log(foo)`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `for (var foo of bar) { 
 if (foo) console.log(1); 
 else console.log(2) 
 }`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if (foo) { const bar = 'baz'; }`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `while (foo) { let bar = 'baz'; }`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `for(;;) { function foo() {} }`,
			Options: "[\"multi\"]",
		},
		{
			Code:            `for (foo in bar) { class Baz {} }`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if (foo) { let bar; } else { baz(); }`,
			Options:         "[\"multi\",\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if (foo) { bar(); } else { const baz = 'quux'; }`,
			Options:         "[\"multi\",\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if (foo) { 
 const bar = 'baz'; 
 }`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if (foo) { 
 let bar = 'baz'; 
 }`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if (foo) { 
 function bar() {} 
 }`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if (foo) { 
 class bar {} 
 }`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if (foo) doSomething() 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) doSomething(); 
 else if (bar) doSomethingElse() 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) doSomething(); 
 else doSomethingElse() 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) doSomething(); 
 else if (bar) doSomethingElse(); 
 else doAnotherThing() 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var i = 0; foo; i++) doSomething() 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo in bar) console.log(foo) 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo of bar) console.log(foo) 
 ;`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `while (foo) doSomething() 
 ;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `do doSomething() 
 ;while (foo)`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo)
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) doSomething(); 
 else if (bar)
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) doSomething(); 
 else
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `if (foo) doSomething(); 
 else if (bar) doSomethingElse(); 
 else
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var i = 0; foo; i++)
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo in bar)
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `for (var foo of bar)
;`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `while (foo)
;`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code: `do
;while (foo)`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code:    `if (true) { if (false) console.log(1) } else console.log(2)`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { if (b) console.log(1); else if (c) console.log(2) } else console.log(3)`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (true) { while(false) if (true); } else;`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (true) { label: if (false); } else;`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (true) { with(0) if (false); } else;`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (true) { while(a) if(b) while(c) if (d); else; } else;`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (true) foo(); else { bar(); baz(); }`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (true) { foo(); } else { bar(); baz(); }`,
			Options: "[\"multi\",\"consistent\"]",
		},
		{
			Code:    `if (true) { foo(); } else if (true) { faa(); } else { bar(); baz(); }`,
			Options: "[\"multi\",\"consistent\"]",
		},
		{
			Code:    `if (true) { foo(); faa(); } else { bar(); }`,
			Options: "[\"multi\",\"consistent\"]",
		},
		{
			Code: `if (true) foo()
;[1, 2, 3].bar()`,
			Options: "[\"multi-line\"]",
		},
		{
			Code:    `if (x) for (var i in x) { if (i > 0) console.log(i); } else console.log('whoops');`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { if (b) foo(); } else bar();`,
			Options: "[\"multi-or-nest\"]",
		},
		{
			Code:    `if (a) { if (b) foo(); } else { bar(); }`,
			Options: "[\"multi\",\"consistent\"]",
		},
		{
			Code:    `if (a) { if (b) foo(); } else { bar(); }`,
			Options: "[\"multi-or-nest\",\"consistent\"]",
		},
		{
			Code:    `if (a) { if (b) { foo(); bar(); } } else baz();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) foo(); else if (b) { if (c) bar(); } else baz();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { if (b) foo(); else if (c) bar(); } else baz();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) if (b) foo(); else { if (c) bar(); } else baz();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { lbl:if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { lbl1:lbl2:if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { for (;;) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { for (key in obj) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:            `if (a) { for (elem of arr) if (b) foo(); } else bar();`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `if (a) { with (obj) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { while (cond) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) { while (cond) for (;;) for (key in obj) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) while (cond) { for (;;) for (key in obj) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) while (cond) for (;;) { for (key in obj) if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
		{
			Code:    `if (a) while (cond) for (;;) for (key in obj) { if (b) foo(); } else bar();`,
			Options: "[\"multi\"]",
		},
	}, []InvalidTestCase{
		{
			Code:   `if (foo) bar()`,
			Output: `if (foo) {bar()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `if (foo) 
 bar()`,
			Output: `if (foo) 
 {bar()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `if (foo) { bar() } else baz()`,
			Output: `if (foo) { bar() } else {baz()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code:   `if (foo) { bar() } else if (faa) baz()`,
			Output: `if (foo) { bar() } else if (faa) {baz()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code:   `while (foo) bar()`,
			Output: `while (foo) {bar()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `while (foo) 
 bar()`,
			Output: `while (foo) 
 {bar()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `do bar(); while (foo)`,
			Output: `do {bar();} while (foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `do 
 bar(); while (foo)`,
			Output: `do 
 {bar();} while (foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 8,
				},
			},
		},
		{
			Code:   `for (;foo;) bar()`,
			Output: `for (;foo;) {bar()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code:   `for (var foo in bar) console.log(foo)`,
			Output: `for (var foo in bar) {console.log(foo)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code:            `for (var foo of bar) console.log(foo)`,
			Output:          `for (var foo of bar) {console.log(foo)}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 38,
				},
			},
		},
		{
			Code: `for (var foo of bar) 
 console.log(foo)`,
			Output: `for (var foo of bar) 
 {console.log(foo)}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `for (a;;) console.log(foo)`,
			Output:          `for (a;;) {console.log(foo)}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `for (a;;) 
 console.log(foo)`,
			Output: `for (a;;) 
 {console.log(foo)}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `for (var foo of bar) {console.log(foo)}`,
			Output:          `for (var foo of bar) console.log(foo)`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code:            `do{foo();} while(bar);`,
			Output:          `do foo(); while(bar);`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:    `for (;foo;) { bar() }`,
			Output:  `for (;foo;)  bar() `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `for (;foo;) 
 bar()`,
			Output: `for (;foo;) 
 {bar()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code:    `if (foo) { bar() }`,
			Output:  `if (foo)  bar() `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code:    `if (foo) if (bar) { baz() }`,
			Output:  `if (foo) if (bar)  baz() `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (foo) if (bar) baz(); else if (quux) { quuux(); }`,
			Output:  `if (foo) if (bar) baz(); else if (quux)  quuux(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `while (foo) { bar() }`,
			Output:  `while (foo)  bar() `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code:    `if (foo) baz(); else { bar() }`,
			Output:  `if (foo) baz(); else  bar() `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code:    `if (foo) if (bar); else { baz() }`,
			Output:  `if (foo) if (bar); else  baz() `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code:    `if (true) { if (false) console.log(1) }`,
			Output:  `if (true)  if (false) console.log(1) `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { if (b) console.log(1); else console.log(2) } else console.log(3)`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (0)
    console.log(0)
else if (1) {
    console.log(1)
    console.log(1)
} else {
    if (2)
        console.log(2)
    else
        console.log(3)
}`,
			Output: `if (0)
    console.log(0)
else if (1) {
    console.log(1)
    console.log(1)
} else 
    if (2)
        console.log(2)
    else
        console.log(3)
`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      6,
					Column:    8,
					EndLine:   11,
					EndColumn: 2,
				},
			},
		},
		{
			Code:    `for (var foo in bar) { console.log(foo) }`,
			Output:  `for (var foo in bar)  console.log(foo) `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 42,
				},
			},
		},
		{
			Code:            `for (var foo of bar) { console.log(foo) }`,
			Output:          `for (var foo of bar)  console.log(foo) `,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `if (foo) 
 baz()`,
			Output: `if (foo) 
 {baz()}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `if (foo) baz()`,
			Output: `if (foo) {baz()}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `while (foo) 
 baz()`,
			Output: `while (foo) 
 {baz()}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `for (;foo;) 
 bar()`,
			Output: `for (;foo;) 
 {bar()}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `while (bar && 
 baz) 
 foo()`,
			Output: `while (bar && 
 baz) 
 {foo()}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) bar(baz, 
 baz)`,
			Output: `if (foo) {bar(baz, 
 baz)}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `do foo(); while (bar)`,
			Output:  `do {foo();} while (bar)`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `do 
 foo(); 
 while (bar)`,
			Output: `do 
 {foo();} 
 while (bar)`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `for (var foo in bar) {console.log(foo)}`,
			Output:  `for (var foo in bar) console.log(foo)`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code: `for (var foo in bar) 
 console.log(foo)`,
			Output: `for (var foo in bar) 
 {console.log(foo)}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code: `for (var foo in bar) 
 console.log(1); 
 console.log(2)`,
			Output: `for (var foo in bar) 
 {console.log(1);} 
 console.log(2)`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code: `for (var foo of bar) 
 console.log(foo)`,
			Output: `for (var foo of bar) 
 {console.log(foo)}`,
			Options:         "[\"multi-line\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `for (var foo of bar) 
 console.log(1); 
 console.log(2)`,
			Output: `for (var foo of bar) 
 {console.log(1);} 
 console.log(2)`,
			Options:         "[\"multi-line\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code: `if (foo) 
 quz = { 
 bar: baz, 
 qux: foo 
 };`,
			Output: `if (foo) 
 {quz = { 
 bar: baz, 
 qux: foo 
 };}`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `while (true) 
 if (foo) 
 doSomething(); 
 else 
 doSomethingElse(); 
`,
			Output: `while (true) 
 {if (foo) 
 doSomething(); 
 else 
 doSomethingElse();} 
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { 
 quz = true; 
 }`,
			Output: `if (foo)  
 quz = true; 
 `,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (foo) { var bar = 'baz'; }`,
			Output:  `if (foo)  var bar = 'baz'; `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:            `if (foo) { let bar; } else baz();`,
			Output:          `if (foo) { let bar; } else {baz();}`,
			Options:         "[\"multi\",\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code:            `if (foo) bar(); else { const baz = 'quux' }`,
			Output:          `if (foo) {bar();} else { const baz = 'quux' }`,
			Options:         "[\"multi\",\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { 
 var bar = 'baz'; 
 }`,
			Output: `if (foo)  
 var bar = 'baz'; 
 `,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `while (true) { 
 doSomething(); 
 }`,
			Output: `while (true)  
 doSomething(); 
 `,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `for (var i = 0; foo; i++) { 
 doSomething(); 
 }`,
			Output: `for (var i = 0; foo; i++)  
 doSomething(); 
 `,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    27,
					EndLine:   3,
					EndColumn: 3,
				},
			},
		},
		{
			Code:    `for (var foo in bar) if (foo) console.log(1); else console.log(2);`,
			Output:  `for (var foo in bar) {if (foo) console.log(1); else console.log(2);}`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 67,
				},
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    31,
					EndLine:   1,
					EndColumn: 46,
				},
				{
					MessageId: "missingCurlyAfter",
					Line:      1,
					Column:    52,
					EndLine:   1,
					EndColumn: 67,
				},
			},
		},
		{
			Code: `for (var foo in bar) 
 if (foo) console.log(1); 
 else console.log(2);`,
			Output: `for (var foo in bar) 
 {if (foo) console.log(1); 
 else console.log(2);}`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      2,
					Column:    2,
					EndLine:   3,
					EndColumn: 22,
				},
			},
		},
		{
			Code:    `for (var foo in bar) { if (foo) console.log(1) }`,
			Output:  `for (var foo in bar)  if (foo) console.log(1) `,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `for (var foo of bar) 
 if (foo) console.log(1); 
 else console.log(2);`,
			Output: `for (var foo of bar) 
 {if (foo) console.log(1); 
 else console.log(2);}`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code:            `for (var foo of bar) { if (foo) console.log(1) }`,
			Output:          `for (var foo of bar)  if (foo) console.log(1) `,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `if (true) foo(); 
 else { 
 bar(); 
 baz(); 
 }`,
			Output: `if (true) {foo();} 
 else { 
 bar(); 
 baz(); 
 }`,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (true) { foo(); faa(); }
 else bar();`,
			Output: `if (true) { foo(); faa(); }
 else {bar();}`,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
				},
			},
		},
		{
			Code:    `if (true) foo(); else { baz(); }`,
			Output:  `if (true) foo(); else  baz(); `,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code:    `if (true) foo(); else if (true) faa(); else { bar(); baz(); }`,
			Output:  `if (true) {foo();} else if (true) {faa();} else { bar(); baz(); }`,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (true) if (true) foo(); else { bar(); baz(); }`,
			Output:  `if (true) if (true) {foo();} else { bar(); baz(); }`,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `do{foo();} while (bar)`,
			Output:  `do foo(); while (bar)`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `do
{foo();} while (bar)`,
			Output: `do
foo(); while (bar)`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `while (bar) { foo(); }`,
			Output:  `while (bar)  foo(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `while (bar) 
{
 foo(); }`,
			Output: `while (bar) 

 foo(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `for (;;) { foo(); }`,
			Output:  `for (;;)  foo(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:    `do{[1, 2, 3].map(bar);} while (bar)`,
			Output:  `do[1, 2, 3].map(bar); while (bar)`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code:    `if (foo) {bar()} baz()`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `do {foo();} while (bar)`,
			Output:  `do foo(); while (bar)`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `if (foo) { bar }
++baz;`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { bar; }
++baz;`,
			Output: `if (foo)  bar; 
++baz;`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { bar++ }
baz;`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { bar }
[1, 2, 3].map(foo);`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { bar }
(1).toString();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { bar }
/regex/.test('foo');`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) { bar }
Baz();`,
			Output: `if (foo)  bar 
Baz();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (a) {
  while (b) {
    c();
    d();
  }
} else e();`,
			Output: `if (a) 
  while (b) {
    c();
    d();
  }
 else e();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (foo) { while (bar) {} } else {}`,
			Output:  `if (foo)  while (bar) {}  else {}`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:            `if (foo) { var foo = () => {} } else {}`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (foo) { var foo = function() {} } else {}`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:            `if (foo) { var foo = function*() {} } else {}`,
			Options:         "[\"multi\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (true)
foo()
;[1, 2, 3].bar()`,
			Output: `if (true)
{foo()
;}[1, 2, 3].bar()`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) {
doSomething()
;
}`,
			Output: `if (foo) 
doSomething()
;
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) doSomething();
else if (bar) {
doSomethingElse()
;
}`,
			Output: `if (foo) doSomething();
else if (bar) 
doSomethingElse()
;
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `if (foo) doSomething();
else {
doSomethingElse()
;
}`,
			Output: `if (foo) doSomething();
else 
doSomethingElse()
;
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `for (var i = 0; foo; i++) {
doSomething()
;
}`,
			Output: `for (var i = 0; foo; i++) 
doSomething()
;
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `for (var foo in bar) {
doSomething()
;
}`,
			Output: `for (var foo in bar) 
doSomething()
;
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `for (var foo of bar) {
doSomething()
;
}`,
			Output: `for (var foo of bar) 
doSomething()
;
`,
			Options:         "[\"multi-or-nest\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code: `while (foo) {
doSomething()
;
}`,
			Output: `while (foo) 
doSomething()
;
`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `do {
doSomething()
;
} while (foo)`,
			Output: `do 
doSomething()
;
 while (foo)`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code:    `if (a) { if (b) foo(); }`,
			Output:  `if (a)  if (b) foo(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { if (b) foo(); else bar(); }`,
			Output:  `if (a)  if (b) foo(); else bar(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { if (b) foo(); else bar(); } baz();`,
			Output:  `if (a)  if (b) foo(); else bar();  baz();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { while (cond) if (b) foo(); }`,
			Output:  `if (a)  while (cond) if (b) foo(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) while (cond) { if (b) foo(); }`,
			Output:  `if (a) while (cond)  if (b) foo(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) while (cond) { if (b) foo(); else bar(); }`,
			Output:  `if (a) while (cond)  if (b) foo(); else bar(); `,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { while (cond) { if (b) foo(); } bar(); baz() } else quux();`,
			Output:  `if (a) { while (cond)  if (b) foo();  bar(); baz() } else quux();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { if (b) foo(); } bar();`,
			Output:  `if (a)  if (b) foo();  bar();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if(a) { if (b) foo(); } if (c) bar(); else baz();`,
			Output:  `if(a)  if (b) foo();  if (c) bar(); else baz();`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { do if (b) foo(); while (cond); } else bar();`,
			Output:  `if (a)  do if (b) foo(); while (cond);  else bar();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) do { if (b) foo(); } while (cond); else bar();`,
			Output:  `if (a) do  if (b) foo();  while (cond); else bar();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
				},
			},
		},
		{
			Code:    `if (a) { if (b) foo(); else bar(); } else baz();`,
			Output:  `if (a)  if (b) foo(); else bar();  else baz();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) while (cond) { bar(); } else baz();`,
			Output:  `if (a) while (cond)  bar();  else baz();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { for (;;); } else bar();`,
			Output:  `if (a)  for (;;);  else bar();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code:    `if (a) { while (cond) if (b) foo() } else bar();`,
			Output:  `if (a) { while (cond) if (b) foo() } else {bar();}`,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      1,
					Column:    43,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
		{
			Code: `if (a)  while (cond) if (b) foo()  
else
 {bar();}`,
			Output: `if (a)  while (cond) if (b) foo()  
else
 bar();`,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfter",
					Line:      3,
					Column:    2,
					EndLine:   3,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `if (a) foo() 
else
 bar();`,
			Output: `if (a) {foo()} 
else
 {bar();}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "missingCurlyAfter",
					Line:      3,
					Column:    2,
					EndLine:   3,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `if (a) { while (cond) if (b) foo() } `,
			Output:  `if (a)  while (cond) if (b) foo()  `,
			Options: "[\"multi\",\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code:    `if(a) { if (b) foo(); } if (c) bar(); else if(foo){bar();}`,
			Output:  `if(a)  if (b) foo();  if (c) bar(); else if(foo)bar();`,
			Options: "[\"multi-or-nest\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 24,
				},
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      1,
					Column:    51,
					EndLine:   1,
					EndColumn: 59,
				},
			},
		},
		{
			Code: `if (true) [1, 2, 3]
.bar()`,
			Output: `if (true) {[1, 2, 3]
.bar()}`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    11,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `for(
;
;
) {foo()}`,
			Output: `for(
;
;
) foo()`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
					Line:      4,
					Column:    3,
					EndLine:   4,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `for(
;
;
) 
foo()
`,
			Output: `for(
;
;
) 
{foo()}
`,
			Options: "[\"multi-line\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      5,
					Column:    1,
					EndLine:   5,
					EndColumn: 6,
				},
			},
		},
		{
			Code:    `if (a) { while (cond) { if (b) foo(); } } else bar();`,
			Output:  `if (a)  while (cond) { if (b) foo(); }  else bar();`,
			Options: "[\"multi\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
				{
					MessageId: "unexpectedCurlyAfterCondition",
				},
			},
		},
		{
			Code: `for(;;)foo()
`,
			Output: `for(;;){foo()}
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfterCondition",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `for(var 
i 
 in 
 z)foo()
`,
			Output: `for(var 
i 
 in 
 z){foo()}
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      4,
					Column:    4,
					EndLine:   4,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `for(var i of 
 z)
foo()
`,
			Output: `for(var i of 
 z)
{foo()}
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingCurlyAfter",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 6,
				},
			},
		},
	})
}
