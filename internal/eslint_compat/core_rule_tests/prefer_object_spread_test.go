// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferObjectSpreadRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018,\"sourceType\":\"module\"}}", "prefer-object-spread", []ValidTestCase{
		{Code: `Object.assign()`},
		{Code: `let a = Object.assign(a, b)`},
		{Code: `Object.assign(a, b)`},
		{Code: `let a = Object.assign(b, { c: 1 })`},
		{Code: `const bar = { ...foo }`},
		{Code: `Object.assign(...foo)`},
		{Code: `Object.assign(foo, { bar: baz })`},
		{Code: `Object.assign({}, ...objects)`},
		{Code: `foo({ foo: 'bar' })`},
		{Code: `
        const Object = {};
        Object.assign({}, foo);
        `},
		{Code: `
        Object = {};
        Object.assign({}, foo);
        `},
		{Code: `
        const Object = {};
        Object.assign({ foo: 'bar' });
        `},
		{Code: `
        Object = {};
        Object.assign({ foo: 'bar' });
        `},
		{Code: `
        const Object = require('foo');
        Object.assign({ foo: 'bar' });
        `},
		{Code: `
        import Object from 'foo';
        Object.assign({ foo: 'bar' });
        `},
		{Code: `
        import { Something as Object } from 'foo';
        Object.assign({ foo: 'bar' });
        `},
		{Code: `
        import { Object, Array } from 'globals';
        Object.assign({ foo: 'bar' });
        `},
		{Code: `globalThis.Object.assign({}, foo)`},
		{
			Code:            `globalThis.Object.assign({}, { foo: 'bar' })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `globalThis.Object.assign({}, baz, { foo: 'bar' })`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                var globalThis = foo;
                globalThis.Object.assign({}, foo)
                `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `class C { #assign; foo() { Object.#assign({}, foo); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `Object.assign({ get a() {} }, {})`},
		{Code: `Object.assign({ set a(val) {} }, {})`},
		{Code: `Object.assign({ get a() {} }, foo)`},
		{Code: `Object.assign({ set a(val) {} }, foo)`},
		{Code: `Object.assign({ foo: 'bar', get a() {}, baz: 'quux' }, quuux)`},
		{Code: `Object.assign({ foo: 'bar', set a(val) {} }, { baz: 'quux' })`},
		{Code: `Object.assign({}, { get a() {} })`},
		{Code: `Object.assign({}, { set a(val) {} })`},
		{Code: `Object.assign({}, { foo: 'bar', get a() {} }, {})`},
		{Code: `Object.assign({ foo }, bar, {}, { baz: 'quux', set a(val) {}, quuux }, {})`},
	}, []InvalidTestCase{
		{
			Code:   `Object.assign({}, foo)`,
			Output: `({ ...foo})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign  ({}, foo)`,
			Output: `({ ...foo})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({}, { foo: 'bar' })`,
			Output: `({ foo: 'bar'})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({}, baz, { foo: 'bar' })`,
			Output: `({ ...baz, foo: 'bar'})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({}, { foo: 'bar', baz: 'foo' })`,
			Output: `({ foo: 'bar', baz: 'foo'})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({ foo: 'bar' }, baz)`,
			Output: `({foo: 'bar', ...baz})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({ foo: 'bar' }, cats, dogs, trees, birds)`,
			Output: `({foo: 'bar', ...cats, ...dogs, ...trees, ...birds})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({ foo: 'bar' }, Object.assign({ bar: 'foo' }, baz))`,
			Output: `({foo: 'bar', ...Object.assign({ bar: 'foo' }, baz)})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    31,
				},
			},
		},
		{
			Code:   `Object.assign({ foo: 'bar' }, Object.assign({ bar: 'foo' }, Object.assign({}, { superNested: 'butwhy' })))`,
			Output: `({foo: 'bar', ...Object.assign({ bar: 'foo' }, Object.assign({}, { superNested: 'butwhy' }))})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    31,
				},
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    61,
				},
			},
		},
		{
			Code:   `Object.assign({foo: 'bar', ...bar}, baz)`,
			Output: `({foo: 'bar', ...bar, ...baz})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({}, { foo, bar, baz })`,
			Output: `({ foo, bar, baz})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({}, { [bar]: 'foo' })`,
			Output: `({ [bar]: 'foo'})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({ ...bar }, { ...baz })`,
			Output: `({...bar, ...baz})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `Object.assign({ ...bar }, {
                // this is a bar
                foo: 'bar',
                baz: "cats"
            })`,
			Output: `({...bar, // this is a bar
                foo: 'bar',
                baz: "cats"})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `Object.assign({
                boo: "lol",
                // I'm a comment
                dog: "cat"
             }, {
                // this is a bar
                foo: 'bar',
                baz: "cats"
            })`,
			Output: `({boo: "lol",
                // I'm a comment
                dog: "cat", // this is a bar
                foo: 'bar',
                baz: "cats"})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `const test = Object.assign({ ...bar }, {
                <!-- html comment
                foo: 'bar',
                baz: "cats"
                --> weird
            })`,
			Output: `const test = {...bar, <!-- html comment
                foo: 'bar',
                baz: "cats"
                --> weird
            }`,
			LanguageOptions: "{\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `const test = Object.assign({ ...bar }, {
                foo: 'bar', // inline comment
                baz: "cats"
            })`,
			Output: `const test = {...bar, foo: 'bar', // inline comment
                baz: "cats"}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `const test = Object.assign({ ...bar }, {
                /**
                 * foo
                 */
                foo: 'bar',
                baz: "cats"
            })`,
			Output: `const test = {...bar, /**
                 * foo
                 */
                foo: 'bar',
                baz: "cats"}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:   `Object.assign({})`,
			Output: `({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({ foo: bar })`,
			Output: `({foo: bar})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `
                const foo = 'bar';
                Object.assign({ foo: bar })
            `,
			Output: `
                const foo = 'bar';
                ({foo: bar})
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                foo = 'bar';
                Object.assign({ foo: bar })
            `,
			Output: `
                foo = 'bar';
                ({foo: bar})
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code:   `let a = Object.assign({})`,
			Output: `let a = {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `let a = Object.assign({}, a)`,
			Output: `let a = { ...a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `let a = Object.assign   ({}, a)`,
			Output: `let a = { ...a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `let a = Object.assign({ a: 1 }, b)`,
			Output: `let a = {a: 1, ...b}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `Object.assign(  {},  a,      b,   )`,
			Output: `({    ...a,      ...b,   })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `Object.assign({}, a ? b : {}, b => c, a = 2)`,
			Output: `({ ...(a ? b : {}), ...(b => c), ...(a = 2)})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `
                const someVar = 'foo';
                Object.assign({}, a ? b : {}, b => c, a = 2)
            `,
			Output: `
                const someVar = 'foo';
                ({ ...(a ? b : {}), ...(b => c), ...(a = 2)})
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                someVar = 'foo';
                Object.assign({}, a ? b : {}, b => c, a = 2)
            `,
			Output: `
                someVar = 'foo';
                ({ ...(a ? b : {}), ...(b => c), ...(a = 2)})
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code:   `[1, 2, Object.assign({}, a)]`,
			Output: `[1, 2, { ...a}]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:   `const foo = Object.assign({}, a)`,
			Output: `const foo = { ...a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:   `function foo() { return Object.assign({}, a) }`,
			Output: `function foo() { return { ...a} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:   `foo(Object.assign({}, a));`,
			Output: `foo({ ...a});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:   `const x = { foo: 'bar', baz: Object.assign({}, a) }`,
			Output: `const x = { foo: 'bar', baz: { ...a} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code: `
                import Foo from 'foo';
                Object.assign({ foo: Foo });
            `,
			Output: `
                import Foo from 'foo';
                ({foo: Foo});
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                import Foo from 'foo';
                Object.assign({}, Foo);
            `,
			Output: `
                import Foo from 'foo';
                ({ ...Foo});
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                const Foo = require('foo');
                Object.assign({ foo: Foo });
            `,
			Output: `
                const Foo = require('foo');
                ({foo: Foo});
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                import { Something as somethingelse } from 'foo';
                Object.assign({}, somethingelse);
            `,
			Output: `
                import { Something as somethingelse } from 'foo';
                ({ ...somethingelse});
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                import { foo } from 'foo';
                Object.assign({ foo: Foo });
            `,
			Output: `
                import { foo } from 'foo';
                ({foo: Foo});
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                const Foo = require('foo');
                Object.assign({}, Foo);
            `,
			Output: `
                const Foo = require('foo');
                ({ ...Foo});
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                const actions = Object.assign(
                    {
                        onChangeInput: this.handleChangeInput,
                    },
                    this.props.actions
                );
            `,
			Output: `
                const actions = {
                    onChangeInput: this.handleChangeInput,
                    ...this.props.actions
                };
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      2,
					Column:    33,
				},
			},
		},
		{
			Code: `
                const actions = Object.assign(
                    {
                        onChangeInput: this.handleChangeInput, //
                    },
                    this.props.actions
                );
            `,
			Output: `
                const actions = {
                    onChangeInput: this.handleChangeInput, //
                    
                    ...this.props.actions
                };
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      2,
					Column:    33,
				},
			},
		},
		{
			Code: `
                const actions = Object.assign(
                    {
                        onChangeInput: this.handleChangeInput //
                    },
                    this.props.actions
                );
            `,
			Output: `
                const actions = {
                    onChangeInput: this.handleChangeInput //
                    ,
                    ...this.props.actions
                };
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      2,
					Column:    33,
				},
			},
		},
		{
			Code: `
                const actions = Object.assign(
                    (
                        {
                            onChangeInput: this.handleChangeInput
                        }
                    ),
                    (
                        this.props.actions
                    )
                );
            `,
			Output: `
                const actions = {
                    
                            onChangeInput: this.handleChangeInput
                        ,
                    ...(
                        this.props.actions
                    )
                };
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      2,
					Column:    33,
				},
			},
		},
		{
			Code: `
                eventData = Object.assign({}, eventData, { outsideLocality: ` + "`" + `${originLocality} - ${destinationLocality}` + "`" + ` })
            `,
			Output: `
                eventData = { ...eventData, outsideLocality: ` + "`" + `${originLocality} - ${destinationLocality}` + "`" + `}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      2,
					Column:    29,
				},
			},
		},
		{
			Code:   `Object.assign({ });`,
			Output: `({});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `Object.assign({
});`,
			Output: `({});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:            `globalThis.Object.assign({ });`,
			Output:          `({});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `globalThis.Object.assign({
});`,
			Output:          `({});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `
                function foo () { var globalThis = bar; }
                globalThis.Object.assign({ });
            `,
			Output: `
                function foo () { var globalThis = bar; }
                ({});
            `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
                const Foo = require('foo');
                globalThis.Object.assign({ foo: Foo });
            `,
			Output: `
                const Foo = require('foo');
                ({foo: Foo});
            `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code:   `Object.assign({ get a() {}, set b(val) {} })`,
			Output: `({get a() {}, set b(val) {}})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useLiteralMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:            `const obj = Object.assign<{}, Record<string, string[]>>({}, getObject());`,
			Output:          `const obj = { ...getObject()};`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:            `Object.assign<{}, A>({}, foo);`,
			Output:          `({ ...foo});`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useSpreadMessage",
					Line:      1,
					Column:    1,
				},
			},
		},
	})
}
