// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferArrowCallbackRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2020,\"sourceType\":\"script\"}}", "prefer-arrow-callback", []ValidTestCase{
		{Code: `foo(a => a);`},
		{Code: `foo(function*() {});`},
		{Code: `foo(function() { this; });`},
		{
			Code:    `foo(function bar() {});`,
			Options: "[{\"allowNamedFunctions\":true}]",
		},
		{Code: `foo(function() { (() => this); });`},
		{Code: `foo(function() { this; }.bind(obj));`},
		{Code: `foo(function() { this; }.call(this));`},
		{Code: `foo(a => { (function() {}); });`},
		{Code: `var foo = function foo() {};`},
		{Code: `(function foo() {})();`},
		{Code: `foo(function bar() { bar; });`},
		{Code: `foo(function bar() { arguments; });`},
		{Code: `foo(function bar() { arguments; }.bind(this));`},
		{Code: `foo(function bar() { new.target; });`},
		{Code: `foo(function bar() { new.target; }.bind(this));`},
		{Code: `foo(function bar() { this; }.bind(this, somethingElse));`},
		{Code: `foo((function() {}).bind.bar)`},
		{Code: `foo((function() { this.bar(); }).bind(obj).bind(this))`},
	}, []InvalidTestCase{
		{
			Code:   `foo(function bar() {});`,
			Output: `foo(() => {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:    `foo(function() {});`,
			Output:  `foo(() => {});`,
			Options: "[{\"allowNamedFunctions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:    `foo(function bar() {});`,
			Output:  `foo(() => {});`,
			Options: "[{\"allowNamedFunctions\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() {});`,
			Output: `foo(() => {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(nativeCb || function() {});`,
			Output: `foo(nativeCb || (() => {}));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(bar ? function() {} : function() {});`,
			Output: `foo(bar ? () => {} : () => {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() { (function() { this; }); });`,
			Output: `foo(() => { (function() { this; }); });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() { this; }.bind(this));`,
			Output: `foo(() => { this; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(bar || function() { this; }.bind(this));`,
			Output: `foo(bar || (() => { this; }));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() { (() => this); }.bind(this));`,
			Output: `foo(() => { (() => this); });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function bar(a) { a; });`,
			Output: `foo((a) => { a; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function(a) { a; });`,
			Output: `foo((a) => { a; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function(arguments) { arguments; });`,
			Output: `foo((arguments) => { arguments; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:    `foo(function() { this; });`,
			Options: "[{\"allowUnboundThis\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:    `foo(function() { (() => this); });`,
			Options: "[{\"allowUnboundThis\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(function(foo, bar, baz) { return foo * 2; })`,
			Output: `qux((foo, bar, baz) => { return foo * 2; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(function(foo, bar, baz) { return foo * bar; }.bind(this))`,
			Output: `qux((foo, bar, baz) => { return foo * bar; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(function(foo, bar, baz) { return foo * this.qux; }.bind(this))`,
			Output: `qux((foo, bar, baz) => { return foo * this.qux; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() {}.bind(this, somethingElse))`,
			Output: `foo((() => {}).bind(this, somethingElse))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(function(foo = 1, [bar = 2] = [], {qux: baz = 3} = {foo: 'bar'}) { return foo + bar; });`,
			Output: `qux((foo = 1, [bar = 2] = [], {qux: baz = 3} = {foo: 'bar'}) => { return foo + bar; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code: `qux(function(baz, baz) { })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(function( /* no params */ ) { })`,
			Output: `qux(( /* no params */ ) => { })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(function( /* a */ foo /* b */ , /* c */ bar /* d */ , /* e */ baz /* f */ ) { return foo; })`,
			Output: `qux(( /* a */ foo /* b */ , /* c */ bar /* d */ , /* e */ baz /* f */ ) => { return foo; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(async function (foo = 1, bar = 2, baz = 3) { return baz; })`,
			Output: `qux(async (foo = 1, bar = 2, baz = 3) => { return baz; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `qux(async function (foo = 1, bar = 2, baz = 3) { return this; }.bind(this))`,
			Output: `qux(async (foo = 1, bar = 2, baz = 3) => { return this; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code: `foo((bar || function() {}).bind(this))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() {}.bind(this).bind(obj))`,
			Output: `foo((() => {}).bind(obj))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo?.(function() {});`,
			Output: `foo?.(() => {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo?.(function() { return this; }.bind(this));`,
			Output: `foo?.(() => { return this; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code:   `foo(function() { return this; }?.bind(this));`,
			Output: `foo(() => { return this; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code: `foo((function() { return this; }?.bind)(this));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code: `
            test(
                function ()
                { }
            );
            `,
			Output: `
            test(
                () =>
                { }
            );
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
		{
			Code: `
            test(
                function (
                    ...args
                ) /* Lorem ipsum
                dolor sit amet. */ {
                    return args;
                }
            );
            `,
			Output: `
            test(
                (
                    ...args
                ) => /* Lorem ipsum
                dolor sit amet. */ {
                    return args;
                }
            );
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferArrowCallback",
				},
			},
		},
	})
}
