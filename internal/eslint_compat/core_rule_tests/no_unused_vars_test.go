// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnusedVarsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"},\"plugins\":{\"custom\":{\"rules\":{\"use-every-a\":{}}}}}", "no-unused-vars", []ValidTestCase{
		{Code: `var foo = 5;

label: while (true) {
  console.log(foo);
  break label;
}`},
		{Code: `var foo = 5;

while (true) {
  console.log(foo);
  break;
}`},
		{
			Code: `for (let prop in box) {
        box[prop] = parseInt(box[prop]);
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var box = {a: 2};
    for (var prop in box) {
        box[prop] = parseInt(box[prop]);
}`},
		{Code: `f({ set foo(a) { return; } });`},
		{
			Code:    `a; var a;`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var a=10; alert(a);`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var a=10; (function() { alert(a); })();`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var a=10; (function() { setTimeout(function() { alert(a); }, 0); })();`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var a=10; d[a] = 0;`,
			Options: "[\"all\"]",
		},
		{
			Code:    `(function() { var a=10; return a; })();`,
			Options: "[\"all\"]",
		},
		{
			Code:    `(function g() {})()`,
			Options: "[\"all\"]",
		},
		{
			Code:    `function f(a) {alert(a);}; f();`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var c = 0; function f(a){ var b = a; return b; }; f(c);`,
			Options: "[\"all\"]",
		},
		{
			Code:    `function a(x, y){ return y; }; a();`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var arr1 = [1, 2]; var arr2 = [3, 4]; for (var i in arr1) { arr1[i] = 5; } for (var i in arr2) { arr2[i] = 10; }`,
			Options: "[\"all\"]",
		},
		{
			Code:    `var a=10;`,
			Options: "[\"local\"]",
		},
		{
			Code:    `var min = "min"; Math[min];`,
			Options: "[\"all\"]",
		},
		{
			Code:    `Foo.bar = function(baz) { return baz; };`,
			Options: "[\"all\"]",
		},
		{Code: `myFunc(function foo() {}.bind(this))`},
		{Code: `myFunc(function foo(){}.toString())`},
		{Code: `function foo(first, second) {
doStuff(function() {
console.log(second);});}; foo()`},
		{Code: `(function() { var doSomething = function doSomething() {}; doSomething() }())`},
		{Code: `/*global a */ a;`},
		{
			Code:    `var a=10; (function() { alert(a); })();`,
			Options: "[{\"vars\":\"all\"}]",
		},
		{
			Code:    `function g(bar, baz) { return baz; }; g();`,
			Options: "[{\"vars\":\"all\"}]",
		},
		{
			Code:    `function g(bar, baz) { return baz; }; g();`,
			Options: "[{\"vars\":\"all\",\"args\":\"after-used\"}]",
		},
		{
			Code:    `function g(bar, baz) { return bar; }; g();`,
			Options: "[{\"vars\":\"all\",\"args\":\"none\"}]",
		},
		{
			Code:    `function g(bar, baz) { return 2; }; g();`,
			Options: "[{\"vars\":\"all\",\"args\":\"none\"}]",
		},
		{
			Code:    `function g(bar, baz) { return bar + baz; }; g();`,
			Options: "[{\"vars\":\"local\",\"args\":\"all\"}]",
		},
		{
			Code:    `var g = function(bar, baz) { return 2; }; g();`,
			Options: "[{\"vars\":\"all\",\"args\":\"none\"}]",
		},
		{Code: `(function z() { z(); })();`},
		{
			Code:            ` `,
			LanguageOptions: "{\"globals\":{\"a\":true}}",
		},
		{
			Code: `var who = "Paul";
module.exports = ` + "`" + `Hello ${who}!` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `export var foo = 123;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export function foo () {}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let toUpper = (partial) => partial.toUpperCase; export {toUpper}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export class foo {}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `class Foo{}; var x = new Foo(); x.foo()`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = "hello!";function bar(foobar = foo) {  foobar.replace(/!$/, " world!");}
bar();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function Foo(){}; var x = new Foo(); x.foo()`},
		{Code: `function foo() {var foo = 1; return foo}; foo();`},
		{Code: `function foo(foo) {return foo}; foo(1);`},
		{Code: `function foo() {function foo() {return 1;}; return foo()}; foo();`},
		{
			Code:            `function foo() {var foo = 1; return foo}; foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo(foo) {return foo}; foo(1);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo() {function foo() {return 1;}; return foo()}; foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; const [y = x] = []; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; const {y = x} = {}; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; const {z: [y = x]} = {}; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = []; const {z: [y] = x} = {}; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; let y; [y = x] = []; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; let y; ({z: [y = x]} = {}); foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = []; let y; ({z: [y] = x} = {}); foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; function foo(y = x) { bar(y); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; function foo({y = x} = {}) { bar(y); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; function foo(y = function(z = x) { bar(z); }) { y(); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const x = 1; function foo(y = function() { bar(x); }) { y(); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; var [y = x] = []; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; var {y = x} = {}; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; var {z: [y = x]} = {}; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = []; var {z: [y] = x} = {}; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1, y; [y = x] = []; foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1, y; ({z: [y = x]} = {}); foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = [], y; ({z: [y] = x} = {}); foo(y);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; function foo(y = x) { bar(y); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; function foo({y = x} = {}) { bar(y); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; function foo(y = function(z = x) { bar(z); }) { y(); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = 1; function foo(y = function() { bar(x); }) { y(); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `/*exported toaster*/ var toaster = 'great'`},
		{Code: `/*exported toaster, poster*/ var toaster = 1; poster = 0;`},
		{
			Code:            `/*exported x*/ var { x } = y`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `/*exported x, y*/  var { x, y } = z`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `/*eslint custom/use-every-a:1*/ var a;`},
		{Code: `/*eslint custom/use-every-a:1*/ !function(a) { return 1; }`},
		{Code: `/*eslint custom/use-every-a:1*/ !function() { var a; return 1 }`},
		{
			Code:    `var _a;`,
			Options: "[{\"vars\":\"all\",\"varsIgnorePattern\":\"^_\"}]",
		},
		{
			Code:    `var a; function foo() { var _b; } foo();`,
			Options: "[{\"vars\":\"local\",\"varsIgnorePattern\":\"^_\"}]",
		},
		{
			Code:    `function foo(_a) { } foo();`,
			Options: "[{\"args\":\"all\",\"argsIgnorePattern\":\"^_\"}]",
		},
		{
			Code:    `function foo(a, _b) { return a; } foo();`,
			Options: "[{\"args\":\"after-used\",\"argsIgnorePattern\":\"^_\"}]",
		},
		{
			Code: `var [ firstItemIgnored, secondItem ] = items;
console.log(secondItem);`,
			Options:         "[{\"vars\":\"all\",\"varsIgnorePattern\":\"[iI]gnored\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const [ a, _b, c ] = items;
console.log(a+c);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const [ [a, _b, c] ] = items;
console.log(a+c);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const { x: [_a, foo] } = bar;
console.log(foo);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function baz([_b, foo]) { foo; };
baz()`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function baz({x: [_b, foo]}) {foo};
baz()`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function baz([{x: [_b, foo]}]) {foo};
baz()`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
            let _a, b;
            foo.forEach(item => {
                [_a, b] = item;
                doSomething(b);
            });
            `,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
            // doesn't report _x
            let _x, y;
            _x = 1;
            [_x, y] = foo;
            y;

            // doesn't report _a
            let _a, b;
            [_a, b] = foo;
            _a = 1;
            b;
            `,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `
            // doesn't report _x
            let _x, y;
            _x = 1;
            [_x, y] = foo;
            y;

            // doesn't report _a
            let _a, b;
            _a = 1;
            ({_a, ...b } = foo);
            b;
            `,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `try {} catch ([firstError]) {}`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"Error$\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{Code: `(function(obj) { var name; for ( name in obj ) return; })({});`},
		{Code: `(function(obj) { var name; for ( name in obj ) { return; } })({});`},
		{Code: `(function(obj) { for ( var name in obj ) { return true } })({})`},
		{Code: `(function(obj) { for ( var name in obj ) return true })({})`},
		{
			Code:            `(function(obj) { let name; for ( name in obj ) return; })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(obj) { let name; for ( name in obj ) { return; } })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(obj) { for ( let name in obj ) { return true } })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(obj) { for ( let name in obj ) return true })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(obj) { for ( const name in obj ) { return true } })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(obj) { for ( const name in obj ) return true })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(iter) { let name; for ( name of iter ) return; })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(iter) { let name; for ( name of iter ) { return; } })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(iter) { for ( let name of iter ) { return true } })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(iter) { for ( let name of iter ) return true })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(iter) { for ( const name of iter ) { return true } })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(iter) { for ( const name of iter ) return true })({})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let x = 0; foo = (0, x++);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let x = 0; foo = (0, x += 1);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let x = 0; foo = (0, x = x + 1);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `try{}catch(err){}`,
			Options: "[{\"caughtErrors\":\"none\"}]",
		},
		{
			Code:    `try{}catch(err){console.error(err);}`,
			Options: "[{\"caughtErrors\":\"all\"}]",
		},
		{
			Code:    `try{}catch(ignoreErr){}`,
			Options: "[{\"caughtErrorsIgnorePattern\":\"^ignore\"}]",
		},
		{
			Code:    `try{}catch(ignoreErr){}`,
			Options: "[{\"caughtErrors\":\"all\",\"caughtErrorsIgnorePattern\":\"^ignore\"}]",
		},
		{
			Code:            `try {} catch ({ message, stack }) {}`,
			Options:         "[{\"caughtErrorsIgnorePattern\":\"message|stack\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `try {} catch ({ errors: [firstError] }) {}`,
			Options:         "[{\"caughtErrorsIgnorePattern\":\"Error$\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `try{}catch(err){}`,
			Options: "[{\"caughtErrors\":\"none\",\"vars\":\"all\",\"args\":\"all\"}]",
		},
		{
			Code: `const data = { type: 'coords', x: 1, y: 2 };
const { type, ...coords } = data;
 console.log(coords);`,
			Options:         "[{\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `try {} catch ({ foo, ...bar }) { console.log(bar); }`,
			Options:         "[{\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{Code: `var a = 0, b; b = a = a + 1; foo(b);`},
		{Code: `var a = 0, b; b = a += a + 1; foo(b);`},
		{Code: `var a = 0, b; b = a++; foo(b);`},
		{Code: `function foo(a) { var b = a = a + 1; bar(b) } foo();`},
		{Code: `function foo(a) { var b = a += a + 1; bar(b) } foo();`},
		{Code: `function foo(a) { var b = a++; bar(b) } foo();`},
		{Code: `var unregisterFooWatcher;
// ...
unregisterFooWatcher = $scope.$watch( "foo", function() {
    // ...some code..
    unregisterFooWatcher();
});`},
		{Code: `var ref;
ref = setInterval(
    function(){
        clearInterval(ref);
    }, 10);`},
		{Code: `var _timer;
function f() {
    _timer = setTimeout(function () {}, _timer ? 100 : 0);
}
f();`},
		{Code: `function foo(cb) { cb = function() { function something(a) { cb(1 + a); } register(something); }(); } foo();`},
		{
			Code:            `function* foo(cb) { cb = yield function(a) { cb(1 + a); }; } foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "function foo(cb) { cb = tag`hello${function(a) { cb(1 + a); }}`; } foo();",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function foo(cb) { var b; cb = b = function(a) { cb(1 + a); }; b(); } foo();`},
		{Code: `function someFunction() {
    var a = 0, i;
    for (i = 0; i < 2; i++) {
        a = myFunction(a);
    }
}
someFunction();`},
		{
			Code:            `(function(a, b, {c, d}) { d })`,
			Options:         "[{\"argsIgnorePattern\":\"c\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function(a, b, {c, d}) { c })`,
			Options:         "[{\"argsIgnorePattern\":\"d\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `(function(a, b, c) { c })`,
			Options: "[{\"argsIgnorePattern\":\"c\"}]",
		},
		{
			Code:            `(function(a, b, {c, d}) { c })`,
			Options:         "[{\"argsIgnorePattern\":\"[cd]\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class { set foo(UNUSED) {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Foo { set bar(UNUSED) {} } console.log(Foo)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(({a, ...rest}) => rest)`,
			Options:         "[{\"args\":\"all\",\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `let foo, rest;
({ foo, ...rest } = something);
console.log(rest);`,
			Options:         "[{\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: `/*eslint custom/use-every-a:1*/ !function(b, a) { return 1 }`},
		{Code: `var a = function () { a(); }; a();`},
		{Code: `var a = function(){ return function () { a(); } }; a();`},
		{
			Code:            `const a = () => { a(); }; a();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `const a = () => () => { a(); }; a();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `export * as ns from "source"`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import.meta`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var a; a ||= 1;`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `var a; a &&= 1;`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `var a; a ??= 1;`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `class Foo { static {} }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { static {} }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":true,\"varsIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { static {} }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":false,\"varsIgnorePattern\":\"^Foo\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `const a = 5; const _c = a + 5;`,
			Options:         "[{\"args\":\"all\",\"varsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `(function foo(a, _b) { return a + 5 })(5)`,
			Options: "[{\"args\":\"all\",\"argsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
		},
		{
			Code: `const [ a, _b, c ] = items;
console.log(a+c);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `function foox() { return foox(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `(function() { function foox() { if (true) { return foox(); } } }())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function() {  }())`,
						},
					},
				},
			},
		},
		{
			Code: `var a=10`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `function f() { var a = 1; return function(){ f(a *= 2); }; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `function f() { var a = 1; return function(){ f(++a); }; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `/*global a */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(first, second) {
doStuff(function() {
console.log(second);});}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `var a=10;`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `var a=10; a=20;`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `var a=10; (function() { var a = 1; alert(a); })();`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ` (function() { var a = 1; alert(a); })();`,
						},
					},
				},
			},
		},
		{
			Code:    `var a=10, b=0, c=null; alert(a+b)`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var a=10, b=0; alert(a+b)`,
						},
					},
				},
			},
		},
		{
			Code:    `var a=10, b=0, c=null; setTimeout(function() { var b=2; alert(a+b+c); }, 0);`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var a=10, c=null; setTimeout(function() { var b=2; alert(a+b+c); }, 0);`,
						},
					},
				},
			},
		},
		{
			Code:    `var a=10, b=0, c=null; setTimeout(function() { var b=2; var c=2; alert(a+b+c); }, 0);`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var a=10, c=null; setTimeout(function() { var b=2; var c=2; alert(a+b+c); }, 0);`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var a=10, b=0; setTimeout(function() { var b=2; var c=2; alert(a+b+c); }, 0);`,
						},
					},
				},
			},
		},
		{
			Code:    `function f(){var a=[];return a.map(function(){});}`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `function f(){var a=[];return a.map(function g(){});}`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `function foo() {function foo(x) {
return x; }; return function() {return foo; }; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `function f(){var x;function a(){x=42;}function b(){alert(x);}}`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function f(){var x;function b(){alert(x);}}`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function f(){var x;function a(){x=42;}}`,
						},
					},
				},
			},
		},
		{
			Code:    `function f(a) {}; f();`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function f() {}; f();`,
						},
					},
				},
			},
		},
		{
			Code:    `function a(x, y, z){ return y; }; a();`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a(x, y){ return y; }; a();`,
						},
					},
				},
			},
		},
		{
			Code:    `var min = Math.min`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `var min = {min: 1}`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `Foo.bar = function(baz) { return 1; }`,
			Options: "[\"all\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `Foo.bar = function() { return 1; }`,
						},
					},
				},
			},
		},
		{
			Code:    `var min = {min: 1}`,
			Options: "[{\"vars\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:    `function gg(baz, bar) { return baz; }; gg();`,
			Options: "[{\"vars\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function gg(baz) { return baz; }; gg();`,
						},
					},
				},
			},
		},
		{
			Code:    `(function(foo, baz, bar) { return baz; })();`,
			Options: "[{\"vars\":\"all\",\"args\":\"after-used\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(foo, baz) { return baz; })();`,
						},
					},
				},
			},
		},
		{
			Code:    `(function(foo, baz, bar) { return baz; })();`,
			Options: "[{\"vars\":\"all\",\"args\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function( baz, bar) { return baz; })();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(foo, baz) { return baz; })();`,
						},
					},
				},
			},
		},
		{
			Code:    `(function z(foo) { var bar = 33; })();`,
			Options: "[{\"vars\":\"all\",\"args\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function z() { var bar = 33; })();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function z(foo) {  })();`,
						},
					},
				},
			},
		},
		{
			Code:    `(function z(foo) { z(); })();`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function z() { z(); })();`,
						},
					},
				},
			},
		},
		{
			Code:    `function f() { var a = 1; return function(){ f(a = 2); }; }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `import x from "y";`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import "y";`,
						},
					},
				},
			},
		},
		{
			Code: `export function fn2({ x, y }) {
 console.log(x); 
};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `export function fn2({ x }) {
 console.log(x); 
};`,
						},
					},
				},
			},
		},
		{
			Code: `export function fn2( x, y ) {
 console.log(x); 
};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `export function fn2( x ) {
 console.log(x); 
};`,
						},
					},
				},
			},
		},
		{
			Code: `/*exported max*/ var max = 1, min = {min: 1}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `/*exported max*/ var max = 1`,
						},
					},
				},
			},
		},
		{
			Code:            `/*exported x*/ var { x, y } = z`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `/*exported x*/ var { x } = z`,
						},
					},
				},
			},
		},
		{
			Code:    `var _a; var b;`,
			Options: "[{\"vars\":\"all\",\"varsIgnorePattern\":\"^_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var _a; `,
						},
					},
				},
			},
		},
		{
			Code:    `var a; function foo() { var _b; var c_; } foo();`,
			Options: "[{\"vars\":\"local\",\"varsIgnorePattern\":\"^_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    37,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var a; function foo() { var _b;  } foo();`,
						},
					},
				},
			},
		},
		{
			Code:    `function foo(a, _b) { } foo();`,
			Options: "[{\"args\":\"all\",\"argsIgnorePattern\":\"^_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    14,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo( _b) { } foo();`,
						},
					},
				},
			},
		},
		{
			Code:    `function foo(a, _b, c) { return a; } foo();`,
			Options: "[{\"args\":\"after-used\",\"argsIgnorePattern\":\"^_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    21,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo(a, _b) { return a; } foo();`,
						},
					},
				},
			},
		},
		{
			Code:    `function foo(_a) { } foo();`,
			Options: "[{\"args\":\"all\",\"argsIgnorePattern\":\"[iI]gnored\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    14,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo() { } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `var [ firstItemIgnored, secondItem ] = items;`,
			Options:         "[{\"vars\":\"all\",\"varsIgnorePattern\":\"[iI]gnored\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `var [ firstItemIgnored ] = items;`,
						},
					},
				},
			},
		},
		{
			Code:            `const array = ['a', 'b', 'c']; const [a, _b, c] = array; const newArray = [a, c];`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const array = ['a', 'b', 'c']; const [a, _b, c] = array; `,
						},
					},
				},
			},
		},
		{
			Code:            `const array = ['a', 'b', 'c', 'd', 'e']; const [a, _b, c] = array;`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    49,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const array = ['a', 'b', 'c', 'd', 'e']; const [, _b, c] = array;`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    56,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const array = ['a', 'b', 'c', 'd', 'e']; const [a, _b] = array;`,
						},
					},
				},
			},
		},
		{
			Code: `const array = ['a', 'b', 'c'];
const [a, _b, c] = array;
const fooArray = ['foo'];
const barArray = ['bar'];
const ignoreArray = ['ignore'];`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"varsIgnorePattern\":\"ignore\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const array = ['a', 'b', 'c'];
const [, _b, c] = array;
const fooArray = ['foo'];
const barArray = ['bar'];
const ignoreArray = ['ignore'];`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    15,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const array = ['a', 'b', 'c'];
const [a, _b] = array;
const fooArray = ['foo'];
const barArray = ['bar'];
const ignoreArray = ['ignore'];`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Line:      3,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const array = ['a', 'b', 'c'];
const [a, _b, c] = array;

const barArray = ['bar'];
const ignoreArray = ['ignore'];`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Line:      4,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const array = ['a', 'b', 'c'];
const [a, _b, c] = array;
const fooArray = ['foo'];

const ignoreArray = ['ignore'];`,
						},
					},
				},
			},
		},
		{
			Code:            `const array = [obj]; const [{_a, foo}] = array; console.log(foo);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    30,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const array = [obj]; const [{ foo}] = array; console.log(foo);`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo([{_a, bar}]) {bar;}foo();`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    16,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo([{ bar}]) {bar;}foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `let _a, b; foo.forEach(item => { [a, b] = item; });`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    5,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `let  b; foo.forEach(item => { [a, b] = item; });`,
						},
					},
				},
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      9,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `(function(obj) { var name; for ( name in obj ) { i(); return; } })({});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code: `(function(obj) { var name; for ( name in obj ) { } })({});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code: `(function(obj) { for ( var name in obj ) { } })({});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code:            `for ( var { foo } in bar ) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:            `for ( var [ foo ] in bar ) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:            `(function(iter) { var name; for ( name of iter ) { i(); return; } })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    35,
				},
			},
		},
		{
			Code:            `(function(iter) { var name; for ( name of iter ) { } })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    35,
				},
			},
		},
		{
			Code:            `(function(iter) { for ( var name of iter ) { } })({});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    29,
				},
			},
		},
		{
			Code:            `for ( var { foo } of bar ) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:            `for ( var [ foo ] of bar ) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `
/* global foobar, foo, bar */
foobar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    19,
					EndLine:   2,
					EndColumn: 22,
				},
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    24,
					EndLine:   2,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `
/* global foobar,
   foo,
   bar
 */
foobar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      3,
					Column:    4,
					EndLine:   3,
					EndColumn: 7,
				},
				{
					MessageId: "unusedVar",
					Line:      4,
					Column:    4,
					EndLine:   4,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `const data = { type: 'coords', x: 1, y: 2 };
const { type, ...coords } = data;
 console.log(coords);`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    9,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const data = { type: 'coords', x: 1, y: 2 };
const {  ...coords } = data;
 console.log(coords);`,
						},
					},
				},
			},
		},
		{
			Code: `const data = { type: 'coords', x: 2, y: 2 };
const { type, ...coords } = data;
 console.log(type)`,
			Options:         "[{\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    18,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const data = { type: 'coords', x: 2, y: 2 };
const { type } = data;
 console.log(type)`,
						},
					},
				},
			},
		},
		{
			Code: `let type, coords;
({ type, ...coords } = data);
 console.log(type)`,
			Options:         "[{\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    13,
				},
			},
		},
		{
			Code: `const data = { type: 'coords', x: 3, y: 2 };
const { type, ...coords } = data;
 console.log(type)`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    18,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const data = { type: 'coords', x: 3, y: 2 };
const { type } = data;
 console.log(type)`,
						},
					},
				},
			},
		},
		{
			Code: `const data = { vars: ['x','y'], x: 1, y: 2 };
const { vars: [x], ...coords } = data;
 console.log(coords)`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    16,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const data = { vars: ['x','y'], x: 1, y: 2 };
const {  ...coords } = data;
 console.log(coords)`,
						},
					},
				},
			},
		},
		{
			Code: `const data = { defaults: { x: 0 }, x: 1, y: 2 };
const { defaults: { x }, ...coords } = data;
 console.log(coords)`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    21,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `const data = { defaults: { x: 0 }, x: 1, y: 2 };
const {  ...coords } = data;
 console.log(coords)`,
						},
					},
				},
			},
		},
		{
			Code:            `(({a, ...rest}) => {})`,
			Options:         "[{\"args\":\"all\",\"ignoreRestSiblings\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(({a}) => {})`,
						},
					},
				},
			},
		},
		{
			Code: `/* global a$fooz,$foo */
a$fooz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `/* globals a$fooz, $ */
a$fooz;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code: `/*globals $foo*/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `/* global global*/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `/*global foo:true*/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `/*global 変数, 数*/
変数;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `/*global 𠮷𩸽, 𠮷*/
\u{20BB7}\u{29E3D};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `export default function(a) {}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `export default function() {}`,
						},
					},
				},
			},
		},
		{
			Code:            `export default function(a, b) { console.log(a); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `export default function(a) { console.log(a); }`,
						},
					},
				},
			},
		},
		{
			Code:            `export default (function(a) {});`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `export default (function() {});`,
						},
					},
				},
			},
		},
		{
			Code:            `export default (function(a, b) { console.log(a); });`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `export default (function(a) { console.log(a); });`,
						},
					},
				},
			},
		},
		{
			Code:            `export default (a) => {};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `export default () => {};`,
						},
					},
				},
			},
		},
		{
			Code:            `export default (a, b) => { console.log(a); };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `export default (a) => { console.log(a); };`,
						},
					},
				},
			},
		},
		{
			Code: `try{}catch(err){};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(err){};`,
			Options: "[{\"caughtErrors\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(err){};`,
			Options: "[{\"caughtErrors\":\"all\",\"caughtErrorsIgnorePattern\":\"^ignore\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(err){};`,
			Options: "[{\"caughtErrors\":\"all\",\"varsIgnorePattern\":\"^err\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(err){};`,
			Options: "[{\"caughtErrors\":\"all\",\"varsIgnorePattern\":\"^.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(ignoreErr){}try{}catch(err){};`,
			Options: "[{\"caughtErrors\":\"all\",\"caughtErrorsIgnorePattern\":\"^ignore\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(error){}try{}catch(err){};`,
			Options: "[{\"caughtErrors\":\"all\",\"caughtErrorsIgnorePattern\":\"^ignore\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(err){};`,
			Options: "[{\"vars\":\"all\",\"args\":\"all\",\"caughtErrors\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `try{}catch(err){};`,
			Options: "[{\"vars\":\"all\",\"args\":\"all\",\"caughtErrors\":\"all\",\"argsIgnorePattern\":\"^er\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `var a = 0; a = a + 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `var a = 0; a = a + a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `var a = 0; a += a + 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `var a = 0; a++;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(a) { a = a + 1 } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(a) { a += a + 1 } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(a) { a++ } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `var a = 3; a = a * 5 + 6;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `var a = 2, b = 4; a = a * 2 + b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(cb) { cb = function(a) { cb(1 + a); }; bar(not_cb); } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(cb) { cb = function(a) { return cb(1 + a); }(); } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(cb) { cb = (function(a) { cb(1 + a); }, cb); } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(cb) { cb = (0, function(a) { cb(1 + a); }); } foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `while (a) {
    function foo(b) {
        b = b + 1;
    }
    foo()
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `(function(a, b, c) {})`,
			Options: "[{\"argsIgnorePattern\":\"c\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function( b, c) {})`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(a, c) {})`,
						},
					},
				},
			},
		},
		{
			Code:            `(function(a, b, {c, d}) {})`,
			Options:         "[{\"argsIgnorePattern\":\"[cd]\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function( b, {c, d}) {})`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(a, {c, d}) {})`,
						},
					},
				},
			},
		},
		{
			Code:            `(function(a, b, {c, d}) {})`,
			Options:         "[{\"argsIgnorePattern\":\"c\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function( b, {c, d}) {})`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(a, {c, d}) {})`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(a, b, {c}) {})`,
						},
					},
				},
			},
		},
		{
			Code:            `(function(a, b, {c, d}) {})`,
			Options:         "[{\"argsIgnorePattern\":\"d\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function( b, {c, d}) {})`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(a, {c, d}) {})`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function(a, b, { d}) {})`,
						},
					},
				},
			},
		},
		{
			Code: `/*global` + "\r" + `foo*/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code:            `(function ({ a }, b ) { return b; })();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ( b ) { return b; })();`,
						},
					},
				},
			},
		},
		{
			Code:            `(function ({ a }, { b, c } ) { return b; })();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ( { b, c } ) { return b; })();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ({ a }, { b } ) { return b; })();`,
						},
					},
				},
			},
		},
		{
			Code: `let x = 0;
x++, x = 0;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        2,
					Column:      6,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `let x = 0;
x++, x = 0;
x=3;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        3,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; x++, 0;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      12,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; 0, x++;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      15,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; 0, (1, x++);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      19,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; foo = (x++, 0);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      19,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; foo = ((0, x++), 0);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      23,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; x += 1, 0;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      12,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; 0, x += 1;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      15,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; 0, (1, x += 1);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      19,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; foo = (x += 1, 0);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      19,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; foo = ((0, x += 1), 0);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      23,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `let z = 0;
z = z + 1, z = 2;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        2,
					Column:      12,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `let z = 0;
z = z+1, z = 2;
z = 3;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        3,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `let z = 0;
z = z+1, z = 2;
z = z+3;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        3,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; 0, x = x+1;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      15,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; x = x+1, 0;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      12,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; foo = ((0, x = x + 1), 0);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      23,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; foo = (x = x+1, 0);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      19,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `let x = 0; 0, (1, x=x+1);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      19,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `(function ({ a, b }, { c } ) { return b; })();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ({  b }, { c } ) { return b; })();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ({ a, b } ) { return b; })();`,
						},
					},
				},
			},
		},
		{
			Code:            `(function ([ a ], b ) { return b; })();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ( b ) { return b; })();`,
						},
					},
				},
			},
		},
		{
			Code:            `(function ([ a ], [ b, c ] ) { return b; })();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ( [ b, c ] ) { return b; })();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ([ a ], [ b ] ) { return b; })();`,
						},
					},
				},
			},
		},
		{
			Code:            `(function ([ a, b ], [ c ] ) { return b; })();`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ([ , b ], [ c ] ) { return b; })();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function ([ a, b ] ) { return b; })();`,
						},
					},
				},
			},
		},
		{
			Code:    `(function(_a) {})();`,
			Options: "[{\"args\":\"all\",\"varsIgnorePattern\":\"^_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function() {})();`,
						},
					},
				},
			},
		},
		{
			Code:    `(function(_a) {})();`,
			Options: "[{\"args\":\"all\",\"caughtErrorsIgnorePattern\":\"^_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `(function() {})();`,
						},
					},
				},
			},
		},
		{
			Code: `var a = function() { a(); };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    5,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `var a = function(){ return function() { a(); } };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    5,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const a = () => () => { a(); };`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `let myArray = [1,2,3,4].filter((x) => x == 0);
myArray = myArray.filter((x) => x == 1);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        2,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `const a = 1; a += 1;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        1,
					Column:      14,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `const a = () => { a(); };`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `let x = [];
x = x.concat(x);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        2,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `let a = 'a';
a = 10;
function foo(){a = 11;a = () => {a = 13}}`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        2,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
				{
					MessageId: "unusedVar",
					Line:      3,
					Column:    10,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output: `let a = 'a';
a = 10;
`,
						},
					},
				},
			},
		},
		{
			Code: `let foo;
init();
foo = foo + 2;
function init() {foo = 1;}`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        3,
					Column:      1,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `function foo(n) {
if (n < 2) return 1;
return n * foo(n - 1);}`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    10,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code: `let c = 'c';
c = 10;
function foo1() {c = 11; c = () => { c = 13 }} c = foo1`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Line:        3,
					Column:      48,
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `class Foo { static {} }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `class Foo { static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `class Foo { static { var bar; } }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `class Foo { static {  } }`,
						},
					},
				},
			},
		},
		{
			Code:            `class Foo {}`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `class Foo { static bar; }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `class Foo { static bar() {} }`,
			Options:         "[{\"ignoreClassWithStaticInitBlock\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Line:      1,
					Column:    7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const _a = 5;const _b = _a + 5`,
			Options:         "[{\"args\":\"all\",\"varsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code:            `const _a = 42; foo(() => _a);`,
			Options:         "[{\"args\":\"all\",\"varsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code:    ` (function foo(_a) { return _a + 5 })(5)`,
			Options: "[{\"args\":\"all\",\"argsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code: `const [ a, _b ] = items;
console.log(a+_b);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code: `let _x;
[_x] = arr;
foo(_x);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true,\"varsIgnorePattern\":\"[iI]gnored\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code: `const [ignored] = arr;
foo(ignored);`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true,\"varsIgnorePattern\":\"[iI]gnored\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code:    `try{}catch(_err){console.error(_err)}`,
			Options: "[{\"caughtErrors\":\"all\",\"caughtErrorsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code:            `try {} catch ({ message }) { console.error(message); }`,
			Options:         "[{\"caughtErrorsIgnorePattern\":\"message\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code:            `try {} catch ([_a, _b]) { doSomething(_a, _b); }`,
			Options:         "[{\"caughtErrorsIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code:            `try {} catch ([_a, _b]) { doSomething(_a, _b); }`,
			Options:         "[{\"destructuredArrayIgnorePattern\":\"^_\",\"reportUsedIgnorePattern\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "usedIgnoredVar",
				},
				{
					MessageId: "usedIgnoredVar",
				},
			},
		},
		{
			Code: `
try {
} catch (_) {
  _ = 'foo'
}
            `,
			Options: "[{\"caughtErrorsIgnorePattern\":\"foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'_' is assigned a value but never used. Allowed unused caught errors must match /foo/u.",
				},
			},
		},
		{
			Code: `
try {
} catch (_) {
  _ = 'foo'
}
            `,
			Options: "[{\"caughtErrorsIgnorePattern\":\"ignored\",\"varsIgnorePattern\":\"_\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'_' is assigned a value but never used. Allowed unused caught errors must match /ignored/u.",
				},
			},
		},
		{
			Code:            `try {} catch ({ message, errors: [firstError] }) {}`,
			Options:         "[{\"caughtErrorsIgnorePattern\":\"foo\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'message' is defined but never used. Allowed unused caught errors must match /foo/u.",
					Column:             17,
					EndColumn:          24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `try {} catch ({  errors: [firstError] }) {}`,
						},
					},
				},
				{
					MessageDescription: "'firstError' is defined but never used. Allowed unused caught errors must match /foo/u.",
					Column:             35,
					EndColumn:          45,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `try {} catch ({ message }) {}`,
						},
					},
				},
			},
		},
		{
			Code:            `try {} catch ({ stack: $ }) { $ = 'Something broke: ' + $; }`,
			Options:         "[{\"caughtErrorsIgnorePattern\":\"\\\\w\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'$' is assigned a value but never used. Allowed unused caught errors must match /\\w/u.",
					Column:             31,
					EndColumn:          32,
				},
			},
		},
		{
			Code:            `_ => { _ = _ + 1 };`,
			Options:         "[{\"argsIgnorePattern\":\"ignored\",\"varsIgnorePattern\":\"_\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "'_' is assigned a value but never used. Allowed unused args must match /ignored/u.",
				},
			},
		},
		{
			Code:            `const [a, b, c] = foo; alert(a + c);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a, , c] = foo; alert(a + c);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a = aDefault] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [[a = aDefault]]= foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [[a = aDefault], b]= foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [, b]= foo;`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [[a = aDefault]]= foo;`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a = aDefault, b] = foo; alert(b);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [, b] = foo; alert(b);`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([a = aDefault]) { } a();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a() { } a();`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([[a = aDefault]]) { } a();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a() { } a();`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([a = aDefault, b]) { alert(b); } a();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a([, b]) { alert(b); } a();`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([[a = aDefault, b]]) { alert(b); } a();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a([[, b]]) { alert(b); } a();`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: a1 } = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: a1, b: b1 } = foo; alert(b1);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const {  b: b1 } = foo; alert(b1);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: a1, b: b1 } = foo; alert(a1);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const { a: a1 } = foo; alert(a1);`,
						},
					},
				},
			},
		},
		{
			Code:            `function a({ a: a1 }) {} a();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a() {} a();`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: a1 = aDefault } = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [{ a: a1 = aDefault }] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const { a = aDefault } = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const { a = aDefault, b } = foo; alert(b);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const {  b } = foo; alert(b);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a, b = bDefault } = foo; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const { a } = foo; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a, b = bDefault, c } = foo; alert(a + c);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const { a, c } = foo; alert(a + c);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { [key]: a } = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [...{ a, b }] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [...{ a }] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo (...rest) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo () {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo (a, ...rest) { alert(a); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo (a) { alert(a); } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `const {...rest} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const {a, ...rest} = foo; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const {a} = foo; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const {...rest} = foo, a = bar; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const  a = bar; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const a = bar, {...rest} = foo; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const a = bar; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo ({...rest}) { } foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo () { } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo (a, {...rest}) { alert(a); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo (a) { alert(a); } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo ({...rest}, a) { alert(a); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo ( a) { alert(a); } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `const [...rest] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [[...rest]] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, ...rest] = foo; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = foo; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo ([...rest]) { } foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo () { } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, ...{ b }] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [[a, ...{ b }]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [[a]] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [...[a]] = array;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [[...[a]]] = array;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [...[a, b]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [...[a]] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, ...[b]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [[a, ...[b]]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [[a]] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, ...[b]] = array; alert(b);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [, ...[b]] = array; alert(b);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, ...[[ b ]]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, ...[{ b }]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo([a, ...[[ b ]]]) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo([, ...[[ b ]]]) {} foo();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo([a]) {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo([a, ...[{ b }]]) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo([, ...[{ b }]]) {} foo();`,
						},
					},
				},
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo([a]) {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo(...[[ a ]]) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo() {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo(...[{ a }]) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo() {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo(a, ...[b]) { alert(a); } foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo(a) { alert(a); } foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, [b]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [[a, [b]]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [[a]] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [a, [[b]]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([[b]]) {} a();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a() {} a();`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([[b], c]) { alert(c); } a();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a([, c]) { alert(c); } a();`,
						},
					},
				},
			},
		},
		{
			Code:            `const [{b}, a] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [, a] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [[{b}, a]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [[, a]] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [[[{b}], a]] = array; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [[, a]] = array; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([{b}]) {} a();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a() {} a();`,
						},
					},
				},
			},
		},
		{
			Code:            `function a([{b}, c]) { alert(c); } a();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function a([, c]) { alert(c); } a();`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: { b }, c } = foo; alert(c);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const {  c } = foo; alert(c);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { c, a: { b } } = foo; alert(c);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const { c } = foo; alert(c);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: { b: { c }, d } } = foo; alert(d);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const { a: {  d } } = foo; alert(d);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: { b: { c: { e } }, d } } = foo; alert(d);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const { a: {  d } } = foo; alert(d);`,
						},
					},
				},
			},
		},
		{
			Code:            `const [{ a: { b }, c }] = foo; alert(c);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const [{  c }] = foo; alert(c);`,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: [{ b }]} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: [[ b ]]} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const [{ a: [{ b }]}] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `const { a: [{ b }], c} = foo; alert(c);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `const {  c} = foo; alert(c);`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo({ a: [{ b }]}) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo() {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo({ a: [[ b ]]}) {} foo();`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo() {} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `let a = foo, b = 'bar'; alert(b);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `let  b = 'bar'; alert(b);`,
						},
					},
				},
			},
		},
		{
			Code:            `let a = foo, b = 'bar'; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `let a = foo; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `let { a } = foo, bar = 'hello'; alert(bar);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `let  bar = 'hello'; alert(bar);`,
						},
					},
				},
			},
		},
		{
			Code:            `let bar = 'hello', { a } = foo; alert(bar);`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `let bar = 'hello'; alert(bar);`,
						},
					},
				},
			},
		},
		{
			Code:            `import a from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import 'module';`,
						},
					},
				},
			},
		},
		{
			Code:            `import * as foo from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import 'module';`,
						},
					},
				},
			},
		},
		{
			Code:            `import a, * as foo from 'module'; a();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import a from 'module'; a();`,
						},
					},
				},
			},
		},
		{
			Code:            `import a, * as foo from 'module'; foo.hello;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import  * as foo from 'module'; foo.hello;`,
						},
					},
				},
			},
		},
		{
			Code:            `import { a } from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `import { a, b } from 'module'; alert(b);`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import {  b } from 'module'; alert(b);`,
						},
					},
				},
			},
		},
		{
			Code:            `import { a, b } from 'module'; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import { a } from 'module'; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `import { a as foo } from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    ``,
						},
					},
				},
			},
		},
		{
			Code:            `import { a as foo, b } from 'module'; alert(b);`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import {  b } from 'module'; alert(b);`,
						},
					},
				},
			},
		},
		{
			Code:            `import { a, b as foo } from 'module'; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import { a } from 'module'; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `import { default as foo, a } from 'module'; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import {  a } from 'module'; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `import foo, { a } from 'module'; alert(a);`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import  { a } from 'module'; alert(a);`,
						},
					},
				},
			},
		},
		{
			Code:            `import foo, { a } from 'module'; foo();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `import foo from 'module'; foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `let a; a = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `array.forEach(a => {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `array.forEach(() => {})`,
						},
					},
				},
			},
		},
		{
			Code:            `if (foo()) var bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `if (foo()) ;`,
						},
					},
				},
			},
		},
		{
			Code:            `for (;;) var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `for (;;) ;`,
						},
					},
				},
			},
		},
		{
			Code:            `for (a in b) var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `for (a in b) ;`,
						},
					},
				},
			},
		},
		{
			Code:            `for (a of b) var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `for (a of b) ;`,
						},
					},
				},
			},
		},
		{
			Code:            `while (a) var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `while (a) ;`,
						},
					},
				},
			},
		},
		{
			Code:            `do var foo; while (b);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `do ; while (b);`,
						},
					},
				},
			},
		},
		{
			Code:            `with (a) var foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `with (a) ;`,
						},
					},
				},
			},
		},
		{
			Code: `var a;'use strict';b(00);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
				},
			},
		},
		{
			Code:            `var [a] = foo;'use strict';b(00);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `var [...a] = foo;'use strict';b(00);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `var {a} = foo;'use strict';b(00);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `console.log('foo')
var a
+b > 0 ? bar() : baz()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
				},
			},
		},
		{
			Code: `console.log('foo')
var [a] = foo;
+b > 0 ? bar() : baz()`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
				},
			},
		},
		{
			Code: `console.log('foo')
var {a} = foo;
+b > 0 ? bar() : baz()`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
				},
			},
		},
		{
			Code: `let x;
() => x = 1;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
				},
			},
		},
		{
			Code: `let [a = 1] = arr;
a = 2;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
				},
			},
		},
		{
			Code:            `function foo(a = 1, b){alert(b);} foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo( b){alert(b);} foo();`,
						},
					},
				},
			},
		},
		{
			Code:            `function foo(a = 1) {a = 2;} foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `function foo(a = 1, b) {a = 2;} foo();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeVar",
							Output:    `function foo(a = 1) {a = 2;} foo();`,
						},
					},
				},
				{
					MessageId:   "unusedVar",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
	})
}
