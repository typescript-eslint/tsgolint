// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestFunctionCallArgumentNewlineRule(t *testing.T) {
	RunRuleTester(t, "{}", "function-call-argument-newline", []ValidTestCase{
		{Code: `fn()`},
		{Code: `fn(a)`},
		{Code: `new Foo()`},
		{Code: `new Foo(b)`},
		{Code: `fn(a,
	b)`},
		{
			Code: `fn(a,
	b)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(
	a,
	b
)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(
	a,
	b,
	c
)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(
	a,
	b,
	[
		1,
		2
	]
)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(
	a,
	b,
	{
		a: 1,
		b: 2
	}
)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(
	a,
	b,
	function (x) {
		x()
	}
)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(
	a,
	b,
	x => {
		x()
	}
)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `fn({
	a: 1
},
	b,
	c)`,
			Options: "[\"always\"]",
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `,
	a)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `fn(a, b)`,
			Options: "[\"never\"]",
		},
		{
			Code: `fn(
	a, b
)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `fn(a, b, c)`,
			Options: "[\"never\"]",
		},
		{
			Code: `fn(a, b, [
	1,
	2
])`,
			Options: "[\"never\"]",
		},
		{
			Code: `fn(a, b, {
	a: 1,
	b: 2
})`,
			Options: "[\"never\"]",
		},
		{
			Code: `fn(a, b, function (x) {
	x()
})`,
			Options: "[\"never\"]",
		},
		{
			Code: `fn(a, b, x => {
	x()
})`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `fn({
	a: 1
}, b)`,
			Options: "[\"never\"]",
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `, a)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `fn(a, b, c)`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `fn(a,
	b,
	c)`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `fn({
	a: 1
}, b, c)`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `fn({
	a: 1
},
	b,
	c)`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `, b, c)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `,
	b,
	c)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `fn(a, b)`,
			Output: `fn(a,
b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `fn(a, b)`,
			Output: `fn(a,
b)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `fn(a, b, c)`,
			Output: `fn(a,
b,
c)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `fn(a, b, [
	1,
	2
])`,
			Output: `fn(a,
b,
[
	1,
	2
])`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `fn(a, b, {
	a: 1,
	b: 2
})`,
			Output: `fn(a,
b,
{
	a: 1,
	b: 2
})`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `fn(a, b, function (x) {
	x()
})`,
			Output: `fn(a,
b,
function (x) {
	x()
})`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `fn(a, b, x => {
	x()
})`,
			Output: `fn(a,
b,
x => {
	x()
})`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "missingLineBreak",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `fn({
	a: 1
}, b)`,
			Output: `fn({
	a: 1
},
b)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      3,
					Column:    3,
					EndLine:   3,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `, b)`,
			Output: `fn(` + "`" + `
` + "`" + `,
b)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `fn(a,
	b)`,
			Output:  `fn(a, b)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn(a,
	b,
	c)`,
			Output:  `fn(a, b, c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    4,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn(a,
	b,
	[
		1,
		2
])`,
			Output: `fn(a, b, [
		1,
		2
])`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    4,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn(a,
	b,
	{
		a: 1,
		b: 2
})`,
			Output: `fn(a, b, {
		a: 1,
		b: 2
})`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    4,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn(a,
	b,
	function (x) {
		x()
})`,
			Output: `fn(a, b, function (x) {
		x()
})`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    4,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn(a,
	b,
	x => {
		x()
})`,
			Output: `fn(a, b, x => {
		x()
})`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    4,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn({
	a: 1
},
b)`,
			Output: `fn({
	a: 1
}, b)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      3,
					Column:    3,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `,
b)`,
			Output: `fn(` + "`" + `
` + "`" + `, b)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(a,/* comment */
b)`,
			Output:          `fn(a,/* comment */ b)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    19,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(a, b,
	c)`,
			Output:  `fn(a, b, c)`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    9,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `fn(a,
	b, c)`,
			Output: `fn(a,
	b,
c)`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `fn(a,
	b /* comment */, c)`,
			Output: `fn(a,
	b /* comment */,
c)`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    18,
					EndLine:   2,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `fn(a,
	b, /* comment */ c)`,
			Output: `fn(a,
	b, /* comment */
c)`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      2,
					Column:    18,
					EndLine:   2,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `fn({
	a: 1
},
b, c)`,
			Output: `fn({
	a: 1
},
b,
c)`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      4,
					Column:    3,
					EndLine:   4,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `fn({
	a: 1
}, b,
c)`,
			Output: `fn({
	a: 1
}, b, c)`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      3,
					Column:    6,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `,
b, c)`,
			Output: `fn(` + "`" + `
` + "`" + `,
b,
c)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingLineBreak",
					Line:      3,
					Column:    3,
					EndLine:   3,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `, b,
c)`,
			Output: `fn(` + "`" + `
` + "`" + `, b, c)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    6,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(a,// comment
{b, c})`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    16,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(a, // comment
b)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      1,
					Column:    17,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `fn(` + "`" + `
` + "`" + `, b, // comment
c)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLineBreak",
					Line:      2,
					Column:    17,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
	})
}
