// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoThrowLiteralRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-throw-literal", []ValidTestCase{
		{Code: `throw new Error();`},
		{Code: `throw new Error('error');`},
		{Code: `throw Error('error');`},
		{Code: `var e = new Error(); throw e;`},
		{Code: `try {throw new Error();} catch (e) {throw e;};`},
		{Code: `throw a;`},
		{Code: `throw foo();`},
		{Code: `throw new foo();`},
		{Code: `throw foo.bar;`},
		{Code: `throw foo[bar];`},
		{
			Code:            `class C { #field; foo() { throw foo.#field; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `throw foo = new Error();`},
		{
			Code:            `throw foo.bar ||= 'literal'`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `throw foo[bar] ??= 'literal'`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{Code: `throw 1, 2, new Error();`},
		{Code: `throw 'literal' && new Error();`},
		{Code: `throw new Error() || 'literal';`},
		{Code: `throw foo ? new Error() : 'literal';`},
		{Code: `throw foo ? 'literal' : new Error();`},
		{
			Code:            "throw tag `${foo}`;",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { var index = 0; throw yield index++; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `async function foo() { throw await bar; }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `throw obj?.foo`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `throw obj?.foo()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
	}, []InvalidTestCase{
		{
			Code: `throw 'error';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw false;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw null;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw undefined;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "undef",
				},
			},
		},
		{
			Code: `throw 'a' + 'b';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `var b = new Error(); throw 'a' + b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw foo = 'error';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw foo += new Error();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw foo &= new Error();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code:            `throw foo &&= 'literal'`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw new Error(), 1, 2, 3;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw 'literal' && 'not an Error';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw foo && 'literal'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code: `throw foo ? 'not an Error' : 'literal';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
		{
			Code:            "throw `${err}`;",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "object",
				},
			},
		},
	})
}
