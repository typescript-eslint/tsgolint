// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNonblockStatementBodyPositionRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "nonblock-statement-body-position", []ValidTestCase{
		{Code: `if (foo) bar;`},
		{Code: `while (foo) bar;`},
		{Code: `do foo; while (bar)`},
		{Code: `for (;foo;) bar;`},
		{Code: `for (foo in bar) baz;`},
		{Code: `for (foo of bar) baz;`},
		{Code: `if (foo) bar; else baz;`},
		{Code: `
            if (foo) bar(
                baz
            );
        `},
		{
			Code:    `if (foo) bar();`,
			Options: "[\"beside\"]",
		},
		{
			Code:    `while (foo) bar();`,
			Options: "[\"beside\"]",
		},
		{
			Code:    `do bar(); while (foo)`,
			Options: "[\"beside\"]",
		},
		{
			Code:    `for (;foo;) bar();`,
			Options: "[\"beside\"]",
		},
		{
			Code: `
                if (foo)
                    bar();
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                while (foo)
                    bar();
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                do
                    bar();
                while (foo)
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                for (;foo;)
                    bar();
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                for (foo in bar)
                    bar();
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                for (foo of bar)
                    bar();
            `,
			Options: "[\"below\"]",
		},
		{
			Code: `
                if (foo)
                    bar();
                else
                    baz();
            `,
			Options: "[\"below\"]",
		},
		{
			Code:    `if (foo) bar();`,
			Options: "[\"any\"]",
		},
		{
			Code: `
                if (foo)
                    bar();
            `,
			Options: "[\"any\"]",
		},
		{
			Code:    `if (foo) bar();`,
			Options: "[\"beside\",{\"overrides\":{\"while\":\"below\"}}]",
		},
		{
			Code: `
                while (foo)
                    bar();
            `,
			Options: "[\"beside\",{\"overrides\":{\"while\":\"below\"}}]",
		},
		{
			Code: `
                while (foo)
                    bar();
            `,
			Options: "[\"beside\",{\"overrides\":{\"while\":\"any\"}}]",
		},
		{
			Code:    `while (foo) bar();`,
			Options: "[\"beside\",{\"overrides\":{\"while\":\"any\"}}]",
		},
		{
			Code:    `while (foo) bar();`,
			Options: "[\"any\",{\"overrides\":{\"while\":\"beside\"}}]",
		},
		{
			Code:    ` `,
			Options: "[\"any\",{\"overrides\":{\"if\":\"any\",\"else\":\"any\",\"for\":\"any\",\"while\":\"any\",\"do\":\"any\"}}]",
		},
		{Code: `
            if (foo) {
            } else if (bar) {
            }
        `},
		{
			Code: `
                if (foo) {
                } else if (bar) {
                }
            `,
			Options: "[\"below\"]",
		},
		{Code: `
            if (foo) {
            } else
              if (bar) {
              }
        `},
		{
			Code: `
                if (foo) {
                } else
                  if (bar) {
                  }
            `,
			Options: "[\"beside\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `
                if (foo)
                    bar();
            `,
			Output: `
                if (foo) bar();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `
                while (foo)
                    bar();
            `,
			Output: `
                while (foo) bar();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `
                do
                    bar();
                while (foo)
            `,
			Output: `
                do bar();
                while (foo)
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `
                for (;foo;)
                    bar();
            `,
			Output: `
                for (;foo;) bar();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `
                for (foo in bar)
                    baz();
            `,
			Output: `
                for (foo in bar) baz();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `
                for (foo of bar)
                    baz();
            `,
			Output: `
                for (foo of bar) baz();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `
                if (foo)
                    bar();
                else
                    baz();
            `,
			Output: `
                if (foo) bar();
                else baz();
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `if (foo) bar();`,
			Output: `if (foo) 
bar();`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `while (foo) bar();`,
			Output: `while (foo) 
bar();`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `do bar(); while (foo)`,
			Output: `do 
bar(); while (foo)`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `for (;foo;) bar();`,
			Output: `for (;foo;) 
bar();`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `for (foo in bar) baz();`,
			Output: `for (foo in bar) 
baz();`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `for (foo of bar) baz();`,
			Output: `for (foo of bar) 
baz();`,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `
                if (foo) bar();
                else baz();
            `,
			Output: `
                if (foo) 
bar();
                else 
baz();
            `,
			Options: "[\"below\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `if (foo) bar();`,
			Output: `if (foo) 
bar();`,
			Options: "[\"below\",{\"overrides\":{\"while\":\"beside\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
		{
			Code: `
                while (foo)
                    bar();
            `,
			Output: `
                while (foo) bar();
            `,
			Options: "[\"below\",{\"overrides\":{\"while\":\"beside\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectNoLinebreak",
				},
			},
		},
		{
			Code: `do bar(); while (foo)`,
			Output: `do 
bar(); while (foo)`,
			Options: "[\"any\",{\"overrides\":{\"do\":\"below\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectLinebreak",
				},
			},
		},
	})
}
