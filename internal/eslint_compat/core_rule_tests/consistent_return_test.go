// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestConsistentReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "consistent-return", []ValidTestCase{
		{Code: `function foo() { return; }`},
		{Code: `function foo() { if (true) return; }`},
		{Code: `function foo() { if (true) return; else return; }`},
		{Code: `function foo() { if (true) return true; else return false; }`},
		{Code: `f(function() { return; })`},
		{Code: `f(function() { if (true) return; })`},
		{Code: `f(function() { if (true) return; else return; })`},
		{Code: `f(function() { if (true) return true; else return false; })`},
		{Code: `function foo() { function bar() { return true; } return; }`},
		{Code: `function foo() { function bar() { return; } return false; }`},
		{Code: `function Foo() { if (!(this instanceof Foo)) return new Foo(); }`},
		{Code: `function foo() { if (true) return 5; else return undefined; }`},
		{Code: `function foo() { if (true) return 5; else return void 0; }`},
		{
			Code:    `function foo() { if (true) return; else return undefined; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
		},
		{
			Code:    `function foo() { if (true) return; else return void 0; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
		},
		{
			Code:    `function foo() { if (true) return undefined; else return; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
		},
		{
			Code:    `function foo() { if (true) return undefined; else return void 0; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
		},
		{
			Code:    `function foo() { if (true) return void 0; else return; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
		},
		{
			Code:    `function foo() { if (true) return void 0; else return undefined; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
		},
		{
			Code:            `var x = () => {  return {}; };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if (true) { return 1; } return 0;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code:            `class Foo { constructor() { if (true) return foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var Foo = class { constructor() { if (true) return foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `function foo() { if (true) return true; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturnValue",
					Line:      1,
					Column:    46,
					EndLine:   1,
					EndColumn: 53,
				},
			},
		},
		{
			Code:            `var foo = () => { if (true) return true; else return; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturnValue",
					Line:      1,
					Column:    47,
					EndLine:   1,
					EndColumn: 54,
				},
			},
		},
		{
			Code: `function foo() { if (true) return; else return false; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedReturnValue",
					Line:      1,
					Column:    41,
					EndLine:   1,
					EndColumn: 54,
				},
			},
		},
		{
			Code: `f(function() { if (true) return true; else return; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturnValue",
					Line:      1,
					Column:    44,
					EndLine:   1,
					EndColumn: 51,
				},
			},
		},
		{
			Code: `f(function() { if (true) return; else return false; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedReturnValue",
					Line:      1,
					Column:    39,
					EndLine:   1,
					EndColumn: 52,
				},
			},
		},
		{
			Code:            `f(a => { if (true) return; else return false; })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedReturnValue",
					Line:      1,
					Column:    33,
					EndLine:   1,
					EndColumn: 46,
				},
			},
		},
		{
			Code:    `function foo() { if (true) return true; return undefined; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturnValue",
					Line:      1,
					Column:    41,
					EndLine:   1,
					EndColumn: 58,
				},
			},
		},
		{
			Code:    `function foo() { if (true) return true; return void 0; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturnValue",
					Line:      1,
					Column:    41,
					EndLine:   1,
					EndColumn: 55,
				},
			},
		},
		{
			Code:    `function foo() { if (true) return undefined; return true; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedReturnValue",
					Line:      1,
					Column:    46,
					EndLine:   1,
					EndColumn: 58,
				},
			},
		},
		{
			Code:    `function foo() { if (true) return void 0; return true; }`,
			Options: "[{\"treatUndefinedAsUnspecified\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedReturnValue",
					Line:      1,
					Column:    43,
					EndLine:   1,
					EndColumn: 55,
				},
			},
		},
		{
			Code:            `if (true) { return 1; } return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturnValue",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code: `function foo() { if (a) return true; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `function _foo() { if (a) return true; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `f(function foo() { if (a) return true; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `f(function() { if (a) return true; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `f(() => { if (a) return true; });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code:            `var obj = {foo() { if (a) return true; }};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `class A {foo() { if (a) return true; }};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `if (a) return true;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:            `class A { CapitalizedFunction() { if (a) return true; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:            `({ constructor() { if (a) return true; } });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
	})
}
