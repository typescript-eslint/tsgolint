// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestOneVarDeclarationPerLineRule(t *testing.T) {
	RunRuleTester(t, "{}", "one-var-declaration-per-line", []ValidTestCase{
		{
			Code: `var a, b, c,
d = 0;`,
			Options: "[\"initializations\"]",
		},
		{
			Code: `var a, b, c,

d = 0;`,
			Options: "[\"initializations\"]",
		},
		{
			Code: `var a, b,
c=0
d = 0;`,
			Options: "[\"initializations\"]",
		},
		{
			Code:            `let a, b;`,
			Options:         "[\"initializations\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a = 0; var b = 0;`,
			Options: "[\"initializations\"]",
		},
		{Code: `var a, b,
c=0
d = 0;`},
		{
			Code: `var a,
b,
c,
d = 0;`,
			Options: "[\"always\"]",
		},
		{
			Code: `var a = 0,
b;`,
			Options: "[\"always\"]",
		},
		{
			Code: `var a = 0,

b;`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var a; var b;`,
			Options: "[\"always\"]",
		},
		{
			Code:    `for(var a = 0, b = 0;;){}`,
			Options: "[\"always\"]",
		},
		{
			Code:            `for(let a = 0, b = 0;;){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for(const a = 0, b = 0;;){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `for(var a in obj){}`,
			Options: "[\"always\"]",
		},
		{
			Code:            `for(let a in obj){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for(const a in obj){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for(var a of arr){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for(let a of arr){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for(const a of arr){}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `export let a, b;`,
			Options:         "[\"initializations\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export let a,
 b = 0;`,
			Options:         "[\"initializations\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo, bar;`,
			Output: `var foo, 
bar;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var a, b;`,
			Output: `var a, 
b;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `let a, b;`,
			Output: `let a, 
b;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `var a, b = 0;`,
			Output: `var a, 
b = 0;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `var a = {
 foo: bar
}, b;`,
			Output: `var a = {
 foo: bar
}, 
b;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      3,
					Column:    4,
				},
			},
		},
		{
			Code: `var a
=0, b;`,
			Output: `var a
=0, 
b;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `let a, b = 0;`,
			Output: `let a, 
b = 0;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `const a = 0, b = 0;`,
			Output: `const a = 0, 
b = 0;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `var foo, bar, baz = 0;`,
			Output: `var foo, bar, 
baz = 0;`,
			Options: "[\"initializations\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `var a, b, c = 0;`,
			Output: `var a, b, 
c = 0;`,
			Options: "[\"initializations\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code: `var a, b,
c = 0, d;`,
			Output: `var a, b,
c = 0, 
d;`,
			Options: "[\"initializations\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      2,
					Column:    8,
				},
			},
		},
		{
			Code: `var a, b,
c = 0, d = 0;`,
			Output: `var a, b,
c = 0, 
d = 0;`,
			Options: "[\"initializations\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      2,
					Column:    8,
				},
			},
		},
		{
			Code: `var a
=0, b = 0;`,
			Output: `var a
=0, 
b = 0;`,
			Options: "[\"initializations\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `var a = {
 foo: bar
}, b;`,
			Output: `var a = {
 foo: bar
}, 
b;`,
			Options: "[\"initializations\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      3,
					Column:    4,
				},
			},
		},
		{
			Code: `for(var a = 0, b = 0;;){
var c,d;}`,
			Output: `for(var a = 0, b = 0;;){
var c,
d;}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      2,
					Column:    7,
				},
			},
		},
		{
			Code: `export let a, b;`,
			Output: `export let a, 
b;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code: `export let a, b = 0;`,
			Output: `export let a, 
b = 0;`,
			Options:         "[\"initializations\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectVarOnNewline",
					Line:      1,
					Column:    15,
				},
			},
		},
	})
}
