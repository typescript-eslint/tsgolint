// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoRegexSpacesRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-regex-spaces", []ValidTestCase{
		{Code: `var foo = /foo/;`},
		{Code: `var foo = RegExp('foo')`},
		{Code: `var foo = / /;`},
		{Code: `var foo = RegExp(' ')`},
		{Code: `var foo = / a b c d /;`},
		{Code: `var foo = /bar {3}baz/g;`},
		{Code: `var foo = RegExp('bar {3}baz', 'g')`},
		{Code: `var foo = new RegExp('bar {3}baz')`},
		{Code: `var foo = /bar			baz/;`},
		{Code: `var foo = RegExp('bar			baz');`},
		{Code: `var foo = new RegExp('bar			baz');`},
		{Code: `var RegExp = function() {}; var foo = new RegExp('bar   baz');`},
		{Code: `var RegExp = function() {}; var foo = RegExp('bar   baz');`},
		{Code: `var foo = /  +/;`},
		{Code: `var foo = /  ?/;`},
		{Code: `var foo = /  */;`},
		{Code: `var foo = /  {2}/;`},
		{Code: `var foo = /bar \ baz/;`},
		{Code: `var foo = /bar\ \ baz/;`},
		{Code: `var foo = /bar \u0020 baz/;`},
		{Code: `var foo = /bar\u0020\u0020baz/;`},
		{Code: `var foo = new RegExp('bar \ baz')`},
		{Code: `var foo = new RegExp('bar\ \ baz')`},
		{Code: `var foo = new RegExp('bar \\ baz')`},
		{Code: `var foo = new RegExp('bar \u0020 baz')`},
		{Code: `var foo = new RegExp('bar\u0020\u0020baz')`},
		{Code: `var foo = new RegExp('bar \\u0020 baz')`},
		{Code: `var foo = /[  ]/;`},
		{Code: `var foo = /[   ]/;`},
		{Code: `var foo = / [  ] /;`},
		{Code: `var foo = / [  ] [  ] /;`},
		{Code: `var foo = new RegExp('[  ]');`},
		{Code: `var foo = new RegExp('[   ]');`},
		{Code: `var foo = new RegExp(' [  ] ');`},
		{Code: `var foo = RegExp(' [  ] [  ] ');`},
		{Code: `var foo = new RegExp(' \[   ');`},
		{Code: `var foo = new RegExp(' \[   \] ');`},
		{
			Code:            `var foo = /  {2}/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[\q{    }]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{Code: `var foo = new RegExp('[  ');`},
		{Code: `var foo = new RegExp('{  ', 'u');`},
		{Code: `new RegExp('  ', flags)`},
		{Code: `new RegExp('[[abc]  ]', flags + 'v')`},
		{Code: `new RegExp('[[abc]\\q{  }]', flags + 'v')`},
	}, []InvalidTestCase{
		{
			Code:   `var foo = /bar  baz/;`,
			Output: `var foo = /bar {2}baz/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /bar    baz/;`,
			Output: `var foo = /bar {4}baz/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = / a b  c d /;`,
			Output: `var foo = / a b {2}c d /;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = RegExp(' a b c d  ');`,
			Output: `var foo = RegExp(' a b c d {2}');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = RegExp('bar    baz');`,
			Output: `var foo = RegExp('bar {4}baz');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = new RegExp('bar    baz');`,
			Output: `var foo = new RegExp('bar {4}baz');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:            `{ let RegExp = function() {}; } var foo = RegExp('bar    baz');`,
			Output:          `{ let RegExp = function() {}; } var foo = RegExp('bar {4}baz');`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /bar   {3}baz/;`,
			Output: `var foo = /bar {2} {3}baz/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /bar    ?baz/;`,
			Output: `var foo = /bar {3} ?baz/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = new RegExp('bar   *baz')`,
			Output: `var foo = new RegExp('bar {2} *baz')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = RegExp('bar   +baz')`,
			Output: `var foo = RegExp('bar {2} +baz')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = new RegExp('bar    ');`,
			Output: `var foo = new RegExp('bar {4}');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /bar\  baz/;`,
			Output: `var foo = /bar\ {2}baz/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /[   ]  /;`,
			Output: `var foo = /[   ] {2}/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /  [   ] /;`,
			Output: `var foo = / {2}[   ] /;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = new RegExp('[   ]  ');`,
			Output: `var foo = new RegExp('[   ] {2}');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = RegExp('  [ ]');`,
			Output: `var foo = RegExp(' {2}[ ]');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /\[  /;`,
			Output: `var foo = /\[ {2}/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /\[  \]/;`,
			Output: `var foo = /\[ {2}\]/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /(?:  )/;`,
			Output: `var foo = /(?: {2})/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = RegExp('^foo(?=   )');`,
			Output: `var foo = RegExp('^foo(?= {3})');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /\  /`,
			Output: `var foo = /\ {2}/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = / \  /`,
			Output: `var foo = / \ {2}/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = /  foo   /;`,
			Output: `var foo = / {2}foo   /;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code: `var foo = new RegExp('\\d  ')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code: `var foo = RegExp('\u0041   ')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code: `var foo = new RegExp('\\[  \\]');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:            `var foo = /[[    ]    ]    /v;`,
			Output:          `var foo = /[[    ]    ] {4}/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
		{
			Code:   `var foo = new RegExp('[[    ]    ]    ', 'v');`,
			Output: `var foo = new RegExp('[[    ]    ] {4}', 'v');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "multipleSpaces",
				},
			},
		},
	})
}
