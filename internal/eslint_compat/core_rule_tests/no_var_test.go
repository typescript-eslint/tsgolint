// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoVarRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"script\"}}", "no-var", []ValidTestCase{
		{Code: `const JOE = 'schmoe';`},
		{Code: `let moo = 'car';`},
		{
			Code:            `const JOE = 'schmoe';`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code:            `let moo = 'car';`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
	}, []InvalidTestCase{
		{
			Code:            `var foo = bar;`,
			Output:          `let foo = bar;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = bar, toast = most;`,
			Output:          `let foo = bar, toast = most;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = bar; let toast = most;`,
			Output:          `let foo = bar; let toast = most;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var a of b) { console.log(a); }`,
			Output:          `for (let a of b) { console.log(a); }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var a in b) { console.log(a); }`,
			Output:          `for (let a in b) { console.log(a); }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (let a of b) { var c = 1; console.log(c); }`,
			Output:          `for (let a of b) { let c = 1; console.log(c); }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var i = 0; i < list.length; ++i) { foo(i) }`,
			Output:          `for (let i = 0; i < list.length; ++i) { foo(i) }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var i = 0, i = 0; false;);`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var i = 0; for (var i = 1; false;); console.log(i);`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var a, b, c; var a;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var a; if (b) { var a; }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `if (foo) { var a, b, c; } a;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var i = 0; i < 10; ++i) {} i;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var a in obj) {} a;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var a of list) {} a;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `switch (a) { case 0: var b = 1 }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (var a of b) { arr.push(() => a); }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `for (let a of b) { var c; console.log(c); c = 'hello'; }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var a = a`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var {a = a} = {}`,
			LanguageOptions: "{\"ecmaVersion\":2015,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var {a = b, b} = {}`,
			LanguageOptions: "{\"ecmaVersion\":2015,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var {a, b = a} = {}`,
			Output:          `let {a, b = a} = {}`,
			LanguageOptions: "{\"ecmaVersion\":2015,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var a = b, b = 1`,
			LanguageOptions: "{\"ecmaVersion\":2015,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var a = b; var b = 1`,
			Output:          `let a = b; var b = 1`,
			LanguageOptions: "{\"ecmaVersion\":2015,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `function foo() { a } var a = 1; foo()`,
			LanguageOptions: "{\"ecmaVersion\":2015,\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `if (foo) var bar = 1;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code: `var foo = 1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code: `{ var foo = 1 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code: `if (true) { var foo = 1 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = 1`,
			Output:          `let foo = 1`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `declare var foo = 2;`,
			Output:          `declare let foo = 2;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\",\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code: `function foo() { var let; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code: `function foo() { var { let } = {}; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var fx = function (i = 0) { if (i < 5) { return fx(i + 1); } console.log(i); }; fx();`,
			Output:          `let fx = function (i = 0) { if (i < 5) { return fx(i + 1); } console.log(i); }; fx();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = function () { foo() };`,
			Output:          `let foo = function () { foo() };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = () => foo();`,
			Output:          `let foo = () => foo();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = (function () { foo(); })();`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var foo = bar(function () { foo(); });`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var bar = foo, foo = function () { foo(); };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var bar = foo; var foo = function () { foo(); };`,
			Output:          `let bar = foo; var foo = function () { foo(); };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var { foo = foo } = function () { foo(); };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var { bar = foo, foo } = function () { foo(); };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
			},
		},
		{
			Code:            `var bar = function () { foo(); }; var foo = function() {};`,
			Output:          `let bar = function () { foo(); }; var foo = function() {};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedVar",
				},
				{
					MessageId: "unexpectedVar",
				},
			},
		},
	})
}
