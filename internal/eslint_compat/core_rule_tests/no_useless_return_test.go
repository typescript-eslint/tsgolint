// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-useless-return", []ValidTestCase{
		{Code: `function foo() { return 5; }`},
		{Code: `function foo() { return null; }`},
		{Code: `function foo() { return doSomething(); }`},
		{Code: `
          function foo() {
            if (bar) {
              doSomething();
              return;
            } else {
              doSomethingElse();
            }
            qux();
          }
        `},
		{Code: `
          function foo() {
            switch (bar) {
              case 1:
                doSomething();
                return;
              default:
                doSomethingElse();
            }
          }
        `},
		{Code: `
          function foo() {
            switch (bar) {
              default:
                doSomething();
                return;
              case 1:
                doSomethingElse();
            }
          }
        `},
		{Code: `
          function foo() {
            switch (bar) {
              case 1:
                if (a) {
                  doSomething();
                  return;
                } else {
                  doSomething();
                  return;
                }
              default:
                doSomethingElse();
            }
          }
        `},
		{Code: `
          function foo() {
            for (var foo = 0; foo < 10; foo++) {
              return;
            }
          }
        `},
		{Code: `
          function foo() {
            for (var foo in bar) {
              return;
            }
          }
        `},
		{Code: `
          function foo() {
            try {
              return 5;
            } finally {
              return; // This is allowed because it can override the returned value of 5
            }
          }
        `},
		{Code: `
          function foo() {
            try {
              bar();
              return;
            } catch (err) {}
            baz();
          }
        `},
		{Code: `
          function foo() {
              if (something) {
                  try {
                      bar();
                      return;
                  } catch (err) {}
              }
              baz();
          }
        `},
		{Code: `
          function foo() {
            return;
            doSomething();
          }
        `},
		{
			Code: `
              function foo() {
                for (var foo of bar) return;
              }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `() => { if (foo) return; bar(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `() => 5`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `() => { return; doSomething(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if (foo) { return; } doSomething();`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{Code: `
          function foo() {
            if (bar) return;
            return baz;
          }
        `},
		{Code: `
          function foo() {
            if (bar) {
              return;
            }
            return baz;
          }
        `},
		{Code: `
          function foo() {
            if (bar) baz();
            else return;
            return 5;
          }
        `},
		{Code: `
          function foo() {
            return;
            while (foo) return;
            foo;
          }
        `},
		{Code: `
          try {
            throw new Error('foo');
            while (false);
          } catch (err) {}
        `},
		{Code: `
          function foo(arg) {
            throw new Error("Debugging...");
            if (!arg) {
              return;
            }
            console.log(arg);
          }
        `},
		{Code: `
        function foo() {
          try {
              bar();
              return;
          } finally {
              baz();
          }
          qux();
        }
        `},
	}, []InvalidTestCase{
		{
			Code:   `function foo() { return; }`,
			Output: `function foo() {  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code:   `function foo() { doSomething(); return; }`,
			Output: `function foo() { doSomething();  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code:   `function foo() { if (condition) { bar(); return; } else { baz(); } }`,
			Output: `function foo() { if (condition) { bar();  } else { baz(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `function foo() { if (foo) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `function foo() { bar(); return/**/; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `function foo() { bar(); return//
; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code:            `foo(); return;`,
			Output:          `foo(); `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code:            `if (foo) { bar(); return; } else { baz(); }`,
			Output:          `if (foo) { bar();  } else { baz(); }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                if (foo) {
                  return;
                }
                return;
              }
            `,
			Output: `
              function foo() {
                if (foo) {
                  
                }
                return;
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                switch (bar) {
                  case 1:
                    doSomething();
                  default:
                    doSomethingElse();
                    return;
                }
              }
            `,
			Output: `
              function foo() {
                switch (bar) {
                  case 1:
                    doSomething();
                  default:
                    doSomethingElse();
                    
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                switch (bar) {
                  default:
                    doSomething();
                  case 1:
                    doSomething();
                    return;
                }
              }
            `,
			Output: `
              function foo() {
                switch (bar) {
                  default:
                    doSomething();
                  case 1:
                    doSomething();
                    
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                switch (bar) {
                  case 1:
                    if (a) {
                      doSomething();
                      return;
                    }
                    break;
                  default:
                    doSomethingElse();
                }
              }
            `,
			Output: `
              function foo() {
                switch (bar) {
                  case 1:
                    if (a) {
                      doSomething();
                      
                    }
                    break;
                  default:
                    doSomethingElse();
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                switch (bar) {
                  case 1:
                    if (a) {
                      doSomething();
                      return;
                    } else {
                      doSomething();
                    }
                    break;
                  default:
                    doSomethingElse();
                }
              }
            `,
			Output: `
              function foo() {
                switch (bar) {
                  case 1:
                    if (a) {
                      doSomething();
                      
                    } else {
                      doSomething();
                    }
                    break;
                  default:
                    doSomethingElse();
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                switch (bar) {
                  case 1:
                    if (a) {
                      doSomething();
                      return;
                    }
                  default:
                }
              }
            `,
			Output: `
              function foo() {
                switch (bar) {
                  case 1:
                    if (a) {
                      doSomething();
                      
                    }
                  default:
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                try {} catch (err) { return; }
              }
            `,
			Output: `
              function foo() {
                try {} catch (err) {  }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                try {
                  foo();
                  return;
                } catch (err) {
                  return 5;
                }
              }
            `,
			Output: `
              function foo() {
                try {
                  foo();
                  
                } catch (err) {
                  return 5;
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                  if (something) {
                      try {
                          bar();
                          return;
                      } catch (err) {}
                  }
              }
            `,
			Output: `
              function foo() {
                  if (something) {
                      try {
                          bar();
                          
                      } catch (err) {}
                  }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                try {
                  return;
                } catch (err) {
                  foo();
                }
              }
            `,
			Output: `
              function foo() {
                try {
                  
                } catch (err) {
                  foo();
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                  try {
                      return;
                  } finally {
                      bar();
                  }
              }
            `,
			Output: `
              function foo() {
                  try {
                      
                  } finally {
                      bar();
                  }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                try {
                  bar();
                } catch (e) {
                  try {
                    baz();
                    return;
                  } catch (e) {
                    qux();
                  }
                }
              }
            `,
			Output: `
              function foo() {
                try {
                  bar();
                } catch (e) {
                  try {
                    baz();
                    
                  } catch (e) {
                    qux();
                  }
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                try {} finally {}
                return;
              }
            `,
			Output: `
              function foo() {
                try {} finally {}
                
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code: `
              function foo() {
                try {
                  return 5;
                } finally {
                  function bar() {
                    return;
                  }
                }
              }
            `,
			Output: `
              function foo() {
                try {
                  return 5;
                } finally {
                  function bar() {
                    
                  }
                }
              }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code:            `() => { return; }`,
			Output:          `() => {  }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
				},
			},
		},
		{
			Code:   `function foo() { return; return; }`,
			Output: `function foo() {  return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryReturn",
					Column:    18,
				},
			},
		},
	})
}
