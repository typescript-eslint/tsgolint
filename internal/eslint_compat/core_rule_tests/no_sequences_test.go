// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoSequencesRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-sequences", []ValidTestCase{
		{Code: `var arr = [1, 2];`},
		{Code: `var obj = {a: 1, b: 2};`},
		{Code: `var a = 1, b = 2;`},
		{Code: `var foo = (1, 2);`},
		{Code: `(0,eval)("foo()");`},
		{Code: `for (i = 1, j = 2;; i++, j++);`},
		{Code: `foo(a, (b, c), d);`},
		{Code: `do {} while ((doSomething(), !!test));`},
		{Code: `for ((doSomething(), somethingElse()); (doSomething(), !!test); );`},
		{Code: `if ((doSomething(), !!test));`},
		{Code: `switch ((doSomething(), val)) {}`},
		{Code: `while ((doSomething(), !!test));`},
		{Code: `with ((doSomething(), val)) {}`},
		{
			Code:            `a => ((doSomething(), a))`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = (1, 2);`,
			Options: "[{}]",
		},
		{
			Code:    `var foo = (1, 2);`,
			Options: "[{\"allowInParentheses\":true}]",
		},
		{
			Code:    `for ((i = 0, j = 0); test; );`,
			Options: "[{\"allowInParentheses\":false}]",
		},
		{
			Code:    `for (; test; (i++, j++));`,
			Options: "[{\"allowInParentheses\":false}]",
		},
		{
			Code:            `const foo = () => { return ((bar = 123), 10) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const foo = () => (((bar = 123), 10));`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `1, 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `a = 1, 2`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code: `do {} while (doSomething(), !!test);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code: `for (; doSomething(), !!test; );`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `if (doSomething(), !!test);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `switch (doSomething(), val) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code: `while (doSomething(), !!test);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `with (doSomething(), val) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:            `a => (doSomething(), a)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code: `(1), 2`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    4,
				},
			},
		},
		{
			Code: `((1)) , (2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code: `while((1) , 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:    `var foo = (1, 2);`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:    `(0,eval)("foo()");`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    3,
				},
			},
		},
		{
			Code:    `foo(a, (b, c), d);`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:    `do {} while ((doSomething(), !!test));`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code:    `for (; (doSomething(), !!test); );`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:    `if ((doSomething(), !!test));`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `switch ((doSomething(), val)) {}`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:    `while ((doSomething(), !!test));`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:    `with ((doSomething(), val)) {}`,
			Options: "[{\"allowInParentheses\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:            `a => ((doSomething(), a))`,
			Options:         "[{\"allowInParentheses\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCommaExpression",
					Line:      1,
					Column:    21,
				},
			},
		},
	})
}
