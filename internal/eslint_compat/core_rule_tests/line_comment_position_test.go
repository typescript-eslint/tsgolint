// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestLineCommentPositionRule(t *testing.T) {
	RunRuleTester(t, "{}", "line-comment-position", []ValidTestCase{
		{Code: `// valid comment
1 + 1;`},
		{Code: `/* block comments are skipped */
1 + 1;`},
		{Code: `1 + 1; /* block comments are skipped */`},
		{Code: `1 + 1; /* eslint eqeqeq: 'error' */`},
		{Code: `1 + 1; /* eslint-disable */`},
		{Code: `1 + 1; /* eslint-enable */`},
		{Code: `1 + 1; // eslint-disable-line`},
		{Code: `// eslint-disable-next-line
1 + 1;`},
		{Code: `1 + 1; // global MY_GLOBAL, ANOTHER`},
		{Code: `1 + 1; // globals MY_GLOBAL: true`},
		{Code: `1 + 1; // exported MY_GLOBAL, ANOTHER`},
		{Code: `1 + 1; // fallthrough`},
		{Code: `1 + 1; // fall through`},
		{Code: `1 + 1; // falls through`},
		{Code: `1 + 1; // jslint vars: true`},
		{Code: `1 + 1; // jshint ignore:line`},
		{Code: `1 + 1; // istanbul ignore next`},
		{
			Code:    `1 + 1; // linter excepted comment`,
			Options: "[{\"position\":\"above\",\"ignorePattern\":\"linter\"}]",
		},
		{
			Code: `// Meep
console.log('Meep');`,
			Options: "[\"above\"]",
		},
		{
			Code:    `1 + 1; // valid comment`,
			Options: "[\"beside\"]",
		},
		{
			Code: `// jscs: disable
1 + 1;`,
			Options: "[\"beside\"]",
		},
		{
			Code: `// jscs: enable
1 + 1;`,
			Options: "[\"beside\"]",
		},
		{
			Code: `/* block comments are skipped */
1 + 1;`,
			Options: "[\"beside\"]",
		},
		{
			Code: `/*block comment*/
/*block comment*/
1 + 1;`,
			Options: "[\"beside\"]",
		},
		{
			Code:    `1 + 1; /* block comment are skipped */`,
			Options: "[\"beside\"]",
		},
		{
			Code:    `1 + 1; // jshint strict: true`,
			Options: "[\"beside\"]",
		},
		{
			Code: `// pragma valid comment
1 + 1;`,
			Options: "[{\"position\":\"beside\",\"ignorePattern\":\"pragma|linter\"}]",
		},
		{
			Code: `// above
1 + 1; // ignored`,
			Options: "[{\"ignorePattern\":\"ignored\"}]",
		},
		{
			Code:    `foo; // eslint-disable-line no-alert`,
			Options: "[{\"position\":\"above\"}]",
		},
	}, []InvalidTestCase{
		{
			Code: `1 + 1; // invalid comment`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "above",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `1 + 1; // globalization is a word`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "above",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `// jscs: disable
1 + 1;`,
			Options: "[{\"position\":\"beside\",\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beside",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `// jscs: disable
1 + 1;`,
			Options: "[{\"position\":\"beside\",\"applyDefaultPatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beside",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `// jscs: disable
1 + 1;`,
			Options: "[{\"position\":\"beside\",\"applyDefaultIgnorePatterns\":false,\"applyDefaultPatterns\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beside",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `1 + 1; // mentioning falls through`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "above",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `// invalid comment
1 + 1;`,
			Options: "[\"beside\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beside",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `// pragma
// invalid
1 + 1;`,
			Options: "[{\"position\":\"beside\",\"ignorePattern\":\"pragma\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beside",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `1 + 1; // linter
2 + 2; // invalid comment`,
			Options: "[{\"position\":\"above\",\"ignorePattern\":\"linter\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "above",
					Line:      2,
					Column:    8,
				},
			},
		},
	})
}
