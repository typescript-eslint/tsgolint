// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestLogicalAssignmentOperatorsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021,\"sourceType\":\"script\"}}", "logical-assignment-operators", []ValidTestCase{
		{Code: `a || b`},
		{Code: `a && b`},
		{Code: `a ?? b`},
		{Code: `a || a || b`},
		{Code: `var a = a || b`},
		{Code: `a === undefined ? a : b`},
		{Code: `while (a) a = b`},
		{Code: `a ||= b`},
		{Code: `a &&= b`},
		{Code: `a ??= b`},
		{Code: `a += a || b`},
		{Code: `a *= a || b`},
		{Code: `a ||= a || b`},
		{Code: `a &&= a || b`},
		{Code: `a = a`},
		{Code: `a = b`},
		{Code: `a = a === b`},
		{Code: `a = a + b`},
		{Code: `a = a / b`},
		{Code: `a = fn(a) || b`},
		{Code: `a = false || c`},
		{Code: `a = f() || g()`},
		{Code: `a = b || c`},
		{Code: `a = b || a`},
		{Code: `object.a = object.b || c`},
		{Code: `[a] = a || b`},
		{Code: `({ a } = a || b)`},
		{Code: `(a = b) || a`},
		{Code: `a + (a = b)`},
		{Code: `a || (b ||= c)`},
		{Code: `a || (b &&= c)`},
		{Code: `a || b === 0`},
		{Code: `a || fn()`},
		{Code: `a || (b && c)`},
		{Code: `a || (b ?? c)`},
		{Code: `a || (b = c)`},
		{Code: `a || (a ||= b)`},
		{Code: `fn() || (a = b)`},
		{Code: `a.b || (a = b)`},
		{Code: `a?.b || (a.b = b)`},
		{
			Code:            `class Class { #prop; constructor() { this.#prop || (this.prop = value) } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Class { #prop; constructor() { this.prop || (this.#prop = value) } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `if (a) a = b`},
		{
			Code:    `if (a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":false}]",
		},
		{
			Code:    `if (a) { a = b } else {}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) { a = b } else if (a) {}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (unrelated) {} else if (a) a = b; else {}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (unrelated) {} else if (a) a = b; else if (unrelated) {}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) {}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) { before; a = b }`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) { a = b; after }`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) throw new Error()`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) a`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) a ||= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) b = a`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) { a() }`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) { a += a || b }`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (true) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (predicate(a)) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a?.b) a.b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (!a?.b) a.b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === b) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a != null) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null && a === undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === 0 || a === undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === 1) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a == null || a == undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === !0) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === +0) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === null) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === undefined || a === void 0) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === void void 0) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === void 'string') a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === void fn()) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a == a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a == b) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null == null) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (undefined == undefined) undefined = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null == x) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null == fn()) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null === a || a === 0) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (0 === a || null === a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (1 === a || a === undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (undefined === a || 1 === a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === b) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (b === undefined || a === null) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null === a || b === a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null === null || undefined === undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null === null || a === a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (undefined === undefined || a === a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (null === undefined || a === a) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `{
   const undefined = 0;
   if (a == undefined) a = b
}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `(() => {
   const undefined = 0;
   if (condition) {
       if (a == undefined) a = b
   }
})()`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `{
   if (a == undefined) a = b
}
var undefined = 0;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `{
   const undefined = 0;
   if (undefined == null) undefined = b
}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `{
   const undefined = 0;
   if (a === undefined || a === null) a = b
}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `{
   const undefined = 0;
   if (undefined === a || null === a) a = b
}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (!a) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (!!a) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a == null) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || a === undefined) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || b === undefined) a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (a === null || b === undefined) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `if (Boolean(a)) b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code: `function fn(Boolean) {
   if (Boolean(a)) a = b
}`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
		},
		{
			Code:    `a = a || b`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a = a && b`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a = a ?? b`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a = b`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a += b`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a -= b`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a.b = a.b || c`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a = a && b || c`,
			Options: "[\"always\"]",
		},
		{
			Code:    `a = a && b && c || d`,
			Options: "[\"always\"]",
		},
		{
			Code:    `a = (a || b) || c`,
			Options: "[\"always\"]",
		},
		{
			Code:    `a = (a && b) && c`,
			Options: "[\"always\"]",
		},
		{
			Code:    `a = (a ?? b) ?? c`,
			Options: "[\"always\"]",
		},
	}, []InvalidTestCase{
		{
			Code:   `a = a || b`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a && b`,
			Output: `a &&= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a ?? b`,
			Output: `a ??= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `foo = foo || bar`,
			Output: `foo ||= bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || fn()`,
			Output: `a ||= fn()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || b && c`,
			Output: `a ||= b && c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || (b || c)`,
			Output: `a ||= (b || c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || (b ? c : d)`,
			Output: `a ||= (b ? c : d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `/* before */ a = a || b`,
			Output: `/* before */ a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || b // after`,
			Output: `a ||= b // after`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `a /* between */ = a || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `a = /** @type */ a || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `a = a || /* between */ b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `(a) = a || b`,
			Output: `(a) ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = (a) || b`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || (b)`,
			Output: `a ||= (b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || ((b))`,
			Output: `a ||= ((b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `(a = a || b)`,
			Output: `(a ||= b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || (f(), b)`,
			Output: `a ||= (f(), b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `a.b = a.b ?? c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `a.b ??= c`,
						},
					},
				},
			},
		},
		{
			Code: `a.b.c = a.b.c ?? d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `a.b.c ??= d`,
						},
					},
				},
			},
		},
		{
			Code: `a[b] = a[b] ?? c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `a[b] ??= c`,
						},
					},
				},
			},
		},
		{
			Code: `a['b'] = a['b'] ?? c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `a['b'] ??= c`,
						},
					},
				},
			},
		},
		{
			Code: `a.b = a['b'] ?? c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `a.b ??= c`,
						},
					},
				},
			},
		},
		{
			Code: `a['b'] = a.b ?? c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `a['b'] ??= c`,
						},
					},
				},
			},
		},
		{
			Code: `this.prop = this.prop ?? {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `this.prop ??= {}`,
						},
					},
				},
			},
		},
		{
			Code: `with (object) a = a || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `with (object) a ||= b`,
						},
					},
				},
			},
		},
		{
			Code: `with (object) { a = a || b }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `with (object) { a ||= b }`,
						},
					},
				},
			},
		},
		{
			Code: `with (object) { if (condition) a = a || b }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output:    `with (object) { if (condition) a ||= b }`,
						},
					},
				},
			},
		},
		{
			Code:   `with (a = a || b) {}`,
			Output: `with (a ||= b) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `with (object) {} a = a || b`,
			Output: `with (object) {} a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = a || b; with (object) {}`,
			Output: `a ||= b; with (object) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `if (condition) a = a || b`,
			Output: `if (condition) a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `with (object) {
  "use strict";
   a = a || b
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "assignment",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLogicalOperator",
							Output: `with (object) {
  "use strict";
   a ||= b
}`,
						},
					},
				},
			},
		},
		{
			Code:   `fn(a = a || b)`,
			Output: `fn(a ||= b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `fn((a = a || b))`,
			Output: `fn((a ||= b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `(a = a || b) ? c : d`,
			Output: `(a ||= b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a = b = b || c`,
			Output: `a = b ||= c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a || (a = b)`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a && (a = b)`,
			Output: `a &&= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a ?? (a = b)`,
			Output: `a ??= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `foo ?? (foo = bar)`,
			Output: `foo ??= bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (a = 0)`,
			Output: `a ||= 0`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (a = fn())`,
			Output: `a ||= fn()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (a = (b || c))`,
			Output: `a ||= (b || c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `(a) || (a = b)`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || ((a) = b)`,
			Output: `(a) ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (a = (b))`,
			Output: `a ||= (b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || ((a = b))`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (((a = b)))`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || ( ( a = b ) )`,
			Output: `a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `/* before */ a || (a = b)`,
			Output: `/* before */ a ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (a = b) // after`,
			Output: `a ||= b // after`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code: `a /* between */ || (a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code: `a || /* between */ (a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a.b || (a.b = c)`,
			Output: `a.b ||= c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:            `class Class { #prop; constructor() { this.#prop || (this.#prop = value) } }`,
			Output:          `class Class { #prop; constructor() { this.#prop ||= value } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a['b'] || (a['b'] = c)`,
			Output: `a['b'] ||= c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a[0] || (a[0] = b)`,
			Output: `a[0] ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a[this] || (a[this] = b)`,
			Output: `a[this] ||= b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `foo.bar || (foo.bar = baz)`,
			Output: `foo.bar ||= baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code: `a.b.c || (a.b.c = d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `a.b.c ||= d`,
						},
					},
				},
			},
		},
		{
			Code: `a[b.c] || (a[b.c] = d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `a[b.c] ||= d`,
						},
					},
				},
			},
		},
		{
			Code: `a[b?.c] || (a[b?.c] = d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `a[b?.c] ||= d`,
						},
					},
				},
			},
		},
		{
			Code: `with (object) a.b || (a.b = c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `with (object) a.b ||= c`,
						},
					},
				},
			},
		},
		{
			Code:   `a = a.b || (a.b = {})`,
			Output: `a = a.b ||= {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "logical",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:   `a || (a = 0) || b`,
			Output: `(a ||= 0) || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `(a || (a = 0)) || b`,
			Output: `(a ||= 0) || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (b || (b = 0))`,
			Output: `a || (b ||= 0)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a = b || (b = c)`,
			Output: `a = b ||= c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `a || (a = 0) ? b : c`,
			Output: `(a ||= 0) ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:   `fn(a || (a = 0))`,
			Output: `fn(a ||= 0)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
				},
			},
		},
		{
			Code:    `if (a) a = b`,
			Output:  `a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (Boolean(a)) a = b`,
			Output:  `a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (!!a) a = b`,
			Output:  `a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (!a) a = b`,
			Output:  `a ||= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (!Boolean(a)) a = b`,
			Output:  `a ||= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a == undefined) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a == null) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a === null || a === undefined) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a === undefined || a === null) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a === null || a === void 0) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a === void 0 || a === null) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) { a = b; }`,
			Output:  `a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `{ const undefined = 0; }
if (a == undefined) a = b`,
			Output: `{ const undefined = 0; }
a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (a == undefined) a = b
{ const undefined = 0; }`,
			Output: `a ??= b
{ const undefined = 0; }`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (null == a) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (undefined == a) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (undefined === a || a === null) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (a === undefined || null === a) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (undefined === a || null === a) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (null === a || a === undefined) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (a === null || undefined === a) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (null === a || undefined === a) a = b`,
			Output:  `a ??= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if ((a)) a = b`,
			Output:  `a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) (a) = b`,
			Output:  `(a) &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) a = (b)`,
			Output:  `a &&= (b)`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) (a = b)`,
			Output:  `(a &&= b)`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `;if (a) (a) = b`,
			Output:  `;(a) &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `{ if (a) (a) = b }`,
			Output:  `{ (a) &&= b }`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `fn();if (a) (a) = b`,
			Output:  `fn();(a) &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `fn()
if (a) a = b`,
			Output: `fn()
a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `id
if (a) (a) = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `object.prop
if (a) (a) = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `object[computed]
if (a) (a) = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `fn()
if (a) (a) = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) a = b; fn();`,
			Output:  `a &&= b; fn();`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) { a = b }`,
			Output:  `a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (a) { a = b; }
fn();`,
			Output: `a &&= b;
fn();`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (a) { a = b }
fn();`,
			Output: `a &&= b;
fn();`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) { a = b } fn();`,
			Output:  `a &&= b; fn();`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (a) { a = b
} fn();`,
			Output:  `a &&= b; fn();`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) a  =  b`,
			Output:  `a  &&=  b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (a)
 a = b`,
			Output:  `a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (a) {
 a = b; 
}`,
			Output:  `a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `/* before */ if (a) a = b`,
			Output:  `/* before */ a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) a = b /* after */`,
			Output:  `a &&= b /* after */`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) /* between */ a = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) a = /* between */ b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a.b) a.b = c`,
			Output:  `a.b &&= c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (a[b]) a[b] = c`,
			Output:  `a[b] &&= c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (a['b']) a['b'] = c`,
			Output:  `a['b'] &&= c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (this.prop) this.prop = value`,
			Output:  `this.prop &&= value`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `(class extends SuperClass { method() { if (super.prop) super.prop = value } })`,
			Output:  `(class extends SuperClass { method() { super.prop &&= value } })`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `with (object) if (a) a = b`,
			Output:  `with (object) a &&= b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "if",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `if (a.b === undefined || a.b === null) a.b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertIf",
							Output:    `a.b ??= c`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a.b.c) a.b.c = d`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertIf",
							Output:    `a.b.c &&= d`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a.b.c.d) a.b.c.d = e`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertIf",
							Output:    `a.b.c.d &&= e`,
						},
					},
				},
			},
		},
		{
			Code:    `if (a[b].c) a[b].c = d`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertIf",
							Output:    `a[b].c &&= d`,
						},
					},
				},
			},
		},
		{
			Code:    `with (object) if (a.b) a.b = c`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertIf",
							Output:    `with (object) a.b &&= c`,
						},
					},
				},
			},
		},
		{
			Code:    `if (unrelated) {} else if (a) a = b;`,
			Output:  `if (unrelated) {} else a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (a) {} else if (b) {} else if (a) a = b;`,
			Output:  `if (a) {} else if (b) {} else a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (unrelated) {} else
if (a) a = b;`,
			Output: `if (unrelated) {} else
a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (unrelated) {
}
else if (a) {
a = b;
}`,
			Output: `if (unrelated) {
}
else a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (unrelated) statement; else if (a) a = b;`,
			Output:  `if (unrelated) statement; else a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (unrelated) id
else if (a) (a) = b`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (unrelated) {} else if (a) a = b; else if (c) c = d`,
			Output:  `if (unrelated) {} else if (a) a = b; else c &&= d`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (unrelated) { /* body */ } else if (a) a = b;`,
			Output:  `if (unrelated) { /* body */ } else a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (unrelated) {} /* before else */ else if (a) a = b;`,
			Output:  `if (unrelated) {} /* before else */ else a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code: `if (unrelated) {} else // Line
if (a) a = b;`,
			Output: `if (unrelated) {} else // Line
a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (unrelated) {} else /* Block */ if (a) a = b;`,
			Output:  `if (unrelated) {} else /* Block */ a &&= b;`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `if (array) array = array.filter(predicate)`,
			Output:  `array &&= array.filter(predicate)`,
			Options: "[\"always\",{\"enforceForIfStatements\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "if",
				},
			},
		},
		{
			Code:    `a ||= b`,
			Output:  `a = a || b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a &&= b`,
			Output:  `a = a && b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ??= b`,
			Output:  `a = a ?? b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo ||= bar`,
			Output:  `foo = foo || bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a.b ||= c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "separate",
							Output:    `a.b = a.b || c`,
						},
					},
				},
			},
		},
		{
			Code:    `a[b] ||= c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "separate",
							Output:    `a[b] = a[b] || c`,
						},
					},
				},
			},
		},
		{
			Code:    `a['b'] ||= c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "separate",
							Output:    `a['b'] = a['b'] || c`,
						},
					},
				},
			},
		},
		{
			Code:    `this.prop ||= 0`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "separate",
							Output:    `this.prop = this.prop || 0`,
						},
					},
				},
			},
		},
		{
			Code:    `with (object) a ||= b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "separate",
							Output:    `with (object) a = a || b`,
						},
					},
				},
			},
		},
		{
			Code:    `(a) ||= b`,
			Output:  `(a) = a || b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ||= (b)`,
			Output:  `a = a || (b)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(a ||= b)`,
			Output:  `(a = a || b)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `/* before */ a ||= b`,
			Output:  `/* before */ a = a || b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ||= b // after`,
			Output:  `a = a || b // after`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a /* before */ ||= b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ||= /* after */ b`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ||= b && c`,
			Output:  `a = a || b && c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a &&= b || c`,
			Output:  `a = a && (b || c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ||= b || c`,
			Output:  `a = a || (b || c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a &&= b && c`,
			Output:  `a = a && (b && c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ??= b || c`,
			Output:  `a = a ?? (b || c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ??= b && c`,
			Output:  `a = a ?? (b && c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ??= b ?? c`,
			Output:  `a = a ?? (b ?? c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ??= (b || c)`,
			Output:  `a = a ?? (b || c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a ??= b + c`,
			Output:  `a = a ?? b + c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a ||= b as number;`,
			Output:          `a = a || (b as number);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `a.b.c || (a.b.c = d as number)`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `a.b.c ||= d as number`,
						},
					},
				},
			},
		},
		{
			Code:            `a.b.c || (a.b.c = (d as number))`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `a.b.c ||= (d as number)`,
						},
					},
				},
			},
		},
		{
			Code:            `(a.b.c || (a.b.c = d)) as number`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "logical",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "convertLogical",
							Output:    `(a.b.c ||= d) as number`,
						},
					},
				},
			},
		},
		{
			Code:    `a = a || b || c`,
			Output:  `a ||= b || c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a && b && c`,
			Output:  `a &&= b && c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a ?? b ?? c`,
			Output:  `a ??= b ?? c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a || b && c`,
			Output:  `a ||= b && c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a || b || c || d`,
			Output:  `a ||= b || c || d`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a && b && c && d`,
			Output:  `a &&= b && c && d`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a ?? b ?? c ?? d`,
			Output:  `a ??= b ?? c ?? d`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a || b || c && d`,
			Output:  `a ||= b || c && d`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a || b && c || d`,
			Output:  `a ||= b && c || d`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = (a) || b || c`,
			Output:  `a ||= b || c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = a || (b || c) || d`,
			Output:  `a ||= (b || c) || d`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = (a || b || c)`,
			Output:  `a ||= (b || c)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:    `a = ((a) || (b || c) || d)`,
			Output:  `a ||= ((b || c) || d)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "assignment",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
	})
}
