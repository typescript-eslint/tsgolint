// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferPromiseRejectErrorsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022,\"sourceType\":\"script\"}}", "prefer-promise-reject-errors", []ValidTestCase{
		{Code: `Promise.resolve(5)`},
		{Code: `Foo.reject(5)`},
		{Code: `Promise.reject(foo)`},
		{Code: `Promise.reject(foo.bar)`},
		{Code: `Promise.reject(foo.bar())`},
		{Code: `Promise.reject(new Error())`},
		{Code: `Promise.reject(new TypeError)`},
		{Code: `Promise.reject(new Error('foo'))`},
		{Code: `Promise.reject(foo || 5)`},
		{Code: `Promise.reject(5 && foo)`},
		{Code: `new Foo((resolve, reject) => reject(5))`},
		{Code: `new Promise(function(resolve, reject) { return function(reject) { reject(5) } })`},
		{Code: `new Promise(function(resolve, reject) { if (foo) { const reject = somethingElse; reject(5) } })`},
		{Code: `new Promise(function(resolve, {apply}) { apply(5) })`},
		{Code: `new Promise(function(resolve, reject) { resolve(5, reject) })`},
		{Code: `async function foo() { Promise.reject(await foo); }`},
		{
			Code:    `Promise.reject()`,
			Options: "[{\"allowEmptyReject\":true}]",
		},
		{
			Code:    `new Promise(function(resolve, reject) { reject() })`,
			Options: "[{\"allowEmptyReject\":true}]",
		},
		{Code: `Promise.reject(obj?.foo)`},
		{Code: `Promise.reject(obj?.foo())`},
		{Code: `Promise.reject(foo = new Error())`},
		{Code: `Promise.reject(foo ||= 5)`},
		{Code: `Promise.reject(foo.bar ??= 5)`},
		{Code: `Promise.reject(foo[bar] ??= 5)`},
		{Code: `class C { #reject; foo() { Promise.#reject(5); } }`},
		{Code: `class C { #error; foo() { Promise.reject(this.#error); } }`},
	}, []InvalidTestCase{
		{
			Code: `Promise.reject(5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: "Promise.reject(`foo`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(!foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(void foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(undefined)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject({ foo: 1 })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject([1, 2, 3])`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code:    `Promise.reject()`,
			Options: "[{\"allowEmptyReject\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code:    `new Promise(function(resolve, reject) { reject() })`,
			Options: "[{\"allowEmptyReject\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code:    `Promise.reject(undefined)`,
			Options: "[{\"allowEmptyReject\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject('foo', somethingElse)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(function(resolve, reject) { reject(5) })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => { reject(5) })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => reject(5))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject) => reject())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(function(yes, no) { no(5) })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `
          new Promise((resolve, reject) => {
            fs.readFile('foo.txt', (err, file) => {
              if (err) reject('File not found')
              else resolve(file)
            })
          })
        `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(({foo, bar, baz}, reject) => reject(5))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(function(reject, reject) { reject(5) })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(function(foo, arguments) { arguments(5) })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise((foo, arguments) => arguments(5))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(function({}, reject) { reject(5) })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise(({}, reject) => reject(5))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `new Promise((resolve, reject, somethingElse = reject(5)) => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject?.(5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise?.reject(5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise?.reject?.(5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `(Promise?.reject)(5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `(Promise?.reject)?.(5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo += new Error())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo -= new Error())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo **= new Error())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo <<= new Error())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo |= new Error())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo &= new Error())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo && 5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
		{
			Code: `Promise.reject(foo &&= 5)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectAnError",
				},
			},
		},
	})
}
