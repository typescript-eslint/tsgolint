// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestDotNotationRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "dot-notation", []ValidTestCase{
		{Code: `a.b;`},
		{Code: `a.b.c;`},
		{Code: `a['12'];`},
		{Code: `a[b];`},
		{Code: `a[0];`},
		{
			Code:    `a.b.c;`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a.arguments;`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a.let;`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a.yield;`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a.eval;`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a[0];`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a['while'];`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a['true'];`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a['null'];`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a[true];`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a[null];`,
			Options: "[{\"allowKeywords\":false}]",
		},
		{
			Code:    `a.true;`,
			Options: "[{\"allowKeywords\":true}]",
		},
		{
			Code:    `a.null;`,
			Options: "[{\"allowKeywords\":true}]",
		},
		{
			Code:    `a['snake_case'];`,
			Options: "[{\"allowPattern\":\"^[a-z]+(_[a-z]+)+$\"}]",
		},
		{
			Code:    `a['lots_of_snake_case'];`,
			Options: "[{\"allowPattern\":\"^[a-z]+(_[a-z]+)+$\"}]",
		},
		{
			Code:            "a[`time${range}`];",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "a[`while`];",
			Options:         "[{\"allowKeywords\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "a[`time range`];",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `a.true;`},
		{Code: `a.null;`},
		{Code: `a[undefined];`},
		{Code: `a[void 0];`},
		{Code: `a[b()];`},
		{
			Code:            `a[/(?<zero>0)/];`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `class C { foo() { this['#a'] } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #in; foo() { this.#in; } }`,
			Options:         "[{\"allowKeywords\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `a.true;`,
			Output:  `a["true"];`,
			Options: "[{\"allowKeywords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useBrackets",
				},
			},
		},
		{
			Code:   `a['true'];`,
			Output: `a.true;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            "a[`time`];",
			Output:          `a.time;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `a[null];`,
			Output: `a.null;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `a[true];`,
			Output: `a.true;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `a[false];`,
			Output: `a.false;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `a['b'];`,
			Output: `a.b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `a.b['c'];`,
			Output: `a.b.c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:    `a['_dangle'];`,
			Output:  `a._dangle;`,
			Options: "[{\"allowPattern\":\"^[a-z]+(_[a-z]+)+$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:    `a['SHOUT_CASE'];`,
			Output:  `a.SHOUT_CASE;`,
			Options: "[{\"allowPattern\":\"^[a-z]+(_[a-z]+)+$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code: `a
  ['SHOUT_CASE'];`,
			Output: `a
  .SHOUT_CASE;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
					Line:      2,
					Column:    4,
				},
			},
		},
		{
			Code: `getResource()
    .then(function(){})
    ["catch"](function(){})
    .then(function(){})
    ["catch"](function(){});`,
			Output: `getResource()
    .then(function(){})
    .catch(function(){})
    .then(function(){})
    .catch(function(){});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
					Line:      3,
					Column:    6,
				},
				{
					MessageId: "useDot",
					Line:      5,
					Column:    6,
				},
			},
		},
		{
			Code: `foo
  .while;`,
			Output: `foo
  ["while"];`,
			Options: "[{\"allowKeywords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useBrackets",
				},
			},
		},
		{
			Code: `foo[ /* comment */ 'bar' ]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code: `foo[ 'bar' /* comment */ ]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `foo[    'bar'    ];`,
			Output: `foo.bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:    `foo. /* comment */ while`,
			Options: "[{\"allowKeywords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useBrackets",
				},
			},
		},
		{
			Code:   `foo[('bar')]`,
			Output: `foo.bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `foo[(null)]`,
			Output: `foo.null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `(foo)['bar']`,
			Output: `(foo).bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `1['toString']`,
			Output: `1 .toString`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `foo['bar']instanceof baz`,
			Output: `foo.bar instanceof baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:    `let.if()`,
			Options: "[{\"allowKeywords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useBrackets",
				},
			},
		},
		{
			Code:   `5['prop']`,
			Output: `5 .prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `-5['prop']`,
			Output: `-5 .prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `01['prop']`,
			Output: `01.prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `01234567['prop']`,
			Output: `01234567.prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `08['prop']`,
			Output: `08 .prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `090['prop']`,
			Output: `090 .prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:   `018['prop']`,
			Output: `018 .prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `5_000['prop']`,
			Output:          `5_000 .prop`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `5_000_00['prop']`,
			Output:          `5_000_00 .prop`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `5.000_000['prop']`,
			Output:          `5.000_000.prop`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `0b1010_1010['prop']`,
			Output:          `0b1010_1010.prop`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `obj?.['prop']`,
			Output:          `obj?.prop`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `0?.['prop']`,
			Output:          `0?.prop`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useDot",
				},
			},
		},
		{
			Code:            `obj?.true`,
			Output:          `obj?.["true"]`,
			Options:         "[{\"allowKeywords\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useBrackets",
				},
			},
		},
		{
			Code:            `let?.true`,
			Output:          `let?.["true"]`,
			Options:         "[{\"allowKeywords\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useBrackets",
				},
			},
		},
	})
}
