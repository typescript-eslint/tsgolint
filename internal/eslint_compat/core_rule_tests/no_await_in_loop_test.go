// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoAwaitInLoopRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018,\"sourceType\":\"script\"}}", "no-await-in-loop", []ValidTestCase{
		{Code: `async function foo() { await bar; }`},
		{Code: `async function foo() { for (var bar in await baz) { } }`},
		{Code: `async function foo() { for (var bar of await baz) { } }`},
		{Code: `async function foo() { for await (var bar of await baz) { } }`},
		{Code: `async function foo() { for (var bar = await baz in qux) {} }`},
		{Code: `async function foo() { while (true) { async function foo() { await bar; } } }`},
		{Code: `async function foo() { for (var i = await bar; i < n; i++) {  } }`},
		{Code: `async function foo() { do { } while (bar); }`},
		{Code: `async function foo() { while (true) { var y = async function() { await bar; } } }`},
		{Code: `async function foo() { while (true) { var y = async () => await foo; } }`},
		{Code: `async function foo() { while (true) { var y = async () => { await foo; } } }`},
		{Code: `async function foo() { while (true) { class Foo { async foo() { await bar; } } } }`},
		{Code: `async function foo() { for await (var x of xs) { await f(x) } }`},
	}, []InvalidTestCase{
		{
			Code: `async function foo() { while (baz) { await bar; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { while (await foo()) {  } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { while (baz) { for await (x of xs); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for (var bar of baz) { await bar; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for (var bar of baz) await bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for (var bar in baz) { await bar; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for (var i; i < n; i++) { await bar; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for (var i; await foo(i); i++) {  } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for (var i; i < n; i = await bar) {  } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { do { await bar; } while (baz); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { do { } while (await bar); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { while (true) { if (bar) { foo(await bar); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { while (xyz || 5 > await x) {  } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
		{
			Code: `async function foo() { for await (var x of xs) { while (1) await f(x) } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAwait",
				},
			},
		},
	})
}
