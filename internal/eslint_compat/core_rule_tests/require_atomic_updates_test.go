// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestRequireAtomicUpdatesRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022,\"sourceType\":\"script\"}}", "require-atomic-updates", []ValidTestCase{
		{Code: `let foo; async function x() { foo += bar; }`},
		{Code: `let foo; async function x() { foo = foo + bar; }`},
		{Code: `let foo; async function x() { foo = await bar + foo; }`},
		{Code: `async function x() { let foo; foo += await bar; }`},
		{Code: `let foo; async function x() { foo = (await result)(foo); }`},
		{Code: `let foo; async function x() { foo = bar(await something, foo) }`},
		{Code: `function* x() { let foo; foo += yield bar; }`},
		{Code: `const foo = {}; async function x() { foo.bar = await baz; }`},
		{Code: `const foo = []; async function x() { foo[x] += 1;  }`},
		{Code: `let foo; function* x() { foo = bar + foo; }`},
		{Code: `async function x() { let foo; bar(() => baz += 1); foo += await amount; }`},
		{Code: `let foo; async function x() { foo = condition ? foo : await bar; }`},
		{Code: `async function x() { let foo; bar(() => { let foo; blah(foo); }); foo += await result; }`},
		{Code: `let foo; async function x() { foo = foo + 1; await bar; }`},
		{Code: `async function x() { foo += await bar; }`},
		{Code: `
            async function foo() {
                if (1);
                if (2);
                if (3);
                if (4);
                if (5);
                if (6);
                if (7);
                if (8);
                if (9);
                if (10);
                if (11);
                if (12);
                if (13);
                if (14);
                if (15);
                if (16);
                if (17);
                if (18);
                if (19);
                if (20);
            }
        `},
		{Code: `
            async function foo() {
                return [
                    1 ? a : b,
                    2 ? a : b,
                    3 ? a : b,
                    4 ? a : b,
                    5 ? a : b,
                    6 ? a : b,
                    7 ? a : b,
                    8 ? a : b,
                    9 ? a : b,
                    10 ? a : b,
                    11 ? a : b,
                    12 ? a : b,
                    13 ? a : b,
                    14 ? a : b,
                    15 ? a : b,
                    16 ? a : b,
                    17 ? a : b,
                    18 ? a : b,
                    19 ? a : b,
                    20 ? a : b
                ];
            }
        `},
		{Code: `
            async function f() {
                let records
                records = await a.records
                g(() => { records })
            }
        `},
		{Code: `
            async function f() {
                try {
                    this.foo = doSomething();
                } catch (e) {
                    this.foo = null;
                    await doElse();
                }
            }
        `},
		{Code: `
            async function f(foo) {
                let bar = await get(foo.id);
                bar.prop = foo.prop;
            }
        `},
		{Code: `
            async function f(foo) {
                let bar = await get(foo.id);
                foo = bar.prop;
            }
        `},
		{Code: `
            async function f() {
                let foo = {}
                let bar = await get(foo.id);
                foo.prop = bar.prop;
            }
        `},
		{Code: `
            let count = 0
            let queue = []
            async function A(...args) {
                count += 1
                await new Promise(resolve=>resolve())
                count -= 1
                return
            }
        `},
		{Code: `
            async function foo(e) {
            }

            async function run() {
              const input = [];
              const props = [];

              for(const entry of input) {
                const prop = props.find(a => a.id === entry.id) || null;
                await foo(entry);
              }

              for(const entry of input) {
                const prop = props.find(a => a.id === entry.id) || null;
              }

              for(const entry2 of input) {
                const prop = props.find(a => a.id === entry2.id) || null;
              }
            }
        `},
		{Code: `
            async function run() {
              {
                let entry;
                await entry;
              }
              {
                let entry;
                () => entry;

                entry = 1;
              }
            }
        `},
		{Code: `
            async function run() {
                await a;
                b = 1;
            }
        `},
		{
			Code: `
                async function a(foo) {
                    if (foo.bar) {
                        foo.bar = await something;
                    }
                }
            `,
			Options: "[{\"allowProperties\":true}]",
		},
		{
			Code: `
                function* g(foo) {
                    baz = foo.bar;
                    yield something;
                    foo.bar = 1;
                }
            `,
			Options: "[{\"allowProperties\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `let foo; async function x() { foo += await amount; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `if (1); let foo; async function x() { foo += await amount; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { while (condition) { foo += await amount; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = foo + await amount; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = foo + (bar ? baz : await amount); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = foo + (bar ? await amount : baz); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = condition ? foo + await amount : somethingElse; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = (condition ? foo : await bar) + await bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo += bar + await amount; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `async function x() { let foo; bar(() => foo); foo += await amount; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; function* x() { foo += yield baz }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = bar(foo, await something) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `const foo = {}; async function x() { foo.bar += await baz }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `const foo = []; async function x() { foo[bar].baz += await result;  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `const foo = {}; class C { #bar; async wrap() { foo.#bar += await baz } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `let foo; async function* x() { foo = (yield foo) + await bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = foo + await result(foo); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = await result(foo, await somethingElse); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `function* x() { let foo; yield async function y() { foo += await bar; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function* x() { foo = await foo + (yield bar); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo; async function x() { foo = bar + await foo; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo = {}; async function x() { foo[bar].baz = await (foo.bar += await foo[bar].baz) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `let foo = ''; async function x() { foo += await bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo = 0; async function x() { foo = (a ? b : foo) + await bar; if (baz); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `let foo = 0; async function x() { foo = (a ? b ? c ? d ? foo : e : f : g : h) + await bar; if (baz); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `
                async function f(foo) {
                    let buz = await get(foo.id);
                    foo.bar = buz.bar;
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                async () => {
                    opts.spec = process.stdin;
                    try {
                        const { exit_code } = await run(opts);
                        process.exitCode = exit_code;
                    } catch (e) {
                        process.exitCode = 1;
                    }
              };
            `,
			LanguageOptions: "{\"sourceType\":\"commonjs\",\"globals\":{\"process\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
					Line:      6,
				},
				{
					MessageId: "nonAtomicObjectUpdate",
					Line:      8,
				},
			},
		},
		{
			Code: `
                async function a(foo) {
                    if (foo.bar) {
                        foo.bar = await something;
                    }
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                function* g(foo) {
                    baz = foo.bar;
                    yield something;
                    foo.bar = 1;
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                async function a(foo) {
                    if (foo.bar) {
                        foo.bar = await something;
                    }
                }
            `,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                function* g(foo) {
                    baz = foo.bar;
                    yield something;
                    foo.bar = 1;
                }
            `,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                async function a(foo) {
                    if (foo.bar) {
                        foo.bar = await something;
                    }
                }
            `,
			Options: "[{\"allowProperties\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                function* g(foo) {
                    baz = foo.bar;
                    yield something;
                    foo.bar = 1;
                }
            `,
			Options: "[{\"allowProperties\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicObjectUpdate",
				},
			},
		},
		{
			Code: `
                let foo;
                async function a() {
                    if (foo) {
                        foo = await something;
                    }
                }
            `,
			Options: "[{\"allowProperties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
		{
			Code: `
                let foo;
                function* g() {
                    baz = foo;
                    yield something;
                    foo = 1;
                }
            `,
			Options: "[{\"allowProperties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nonAtomicUpdate",
				},
			},
		},
	})
}
