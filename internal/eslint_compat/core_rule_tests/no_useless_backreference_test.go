// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessBackreferenceRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2025,\"sourceType\":\"script\"}}", "no-useless-backreference", []ValidTestCase{
		{Code: `'\1(a)'`},
		{Code: `regExp('\\1(a)')`},
		{Code: `new Regexp('\\1(a)', 'u')`},
		{Code: `RegExp.foo('\\1(a)', 'u')`},
		{Code: `new foo.RegExp('\\1(a)')`},
		{Code: `RegExp(p)`},
		{Code: `new RegExp(p, 'u')`},
		{Code: `RegExp('\\1(a)' + suffix)`},
		{Code: "new RegExp(`${prefix}\\\\1(a)`)"},
		{Code: `let RegExp; new RegExp('\\1(a)');`},
		{Code: `function foo() { var RegExp; RegExp('\\1(a)', 'u'); }`},
		{Code: `function foo(RegExp) { new RegExp('\\1(a)'); }`},
		{Code: `if (foo) { const RegExp = bar; RegExp('\\1(a)'); }`},
		{Code: `/* globals RegExp:off */ new RegExp('\\1(a)');`},
		{
			Code:            `RegExp('\\1(a)');`,
			LanguageOptions: "{\"globals\":{\"RegExp\":\"off\"}}",
		},
		{Code: `/(?:)/`},
		{Code: `/(?:a)/`},
		{Code: `new RegExp('')`},
		{Code: `RegExp('(?:a)|(?:b)*')`},
		{Code: `/^ab|[cd].\n$/`},
		{Code: `/(a)/`},
		{Code: `RegExp('(a)|(b)')`},
		{Code: `new RegExp('\\n\\d(a)')`},
		{Code: `/\0(a)/`},
		{Code: `/\0(a)/u`},
		{Code: `/(?<=(a))(b)(?=(c))/`},
		{Code: `/(?<!(a))(b)(?!(c))/`},
		{Code: `/(?<foo>a)/`},
		{Code: `RegExp('\1(a)')`},
		{Code: `RegExp('\\\\1(a)')`},
		{Code: `/\\1(a)/`},
		{Code: `/\1/`},
		{Code: `/^\1$/`},
		{Code: `/\2(a)/`},
		{Code: `/\1(?:a)/`},
		{Code: `/\1(?=a)/`},
		{Code: `/\1(?!a)/`},
		{Code: `/^[\1](a)$/`},
		{Code: `new RegExp('[\\1](a)')`},
		{Code: `/\11(a)/`},
		{Code: `/\k<foo>(a)/`},
		{Code: `/^(a)\1\2$/`},
		{Code: `/(a)\1/`},
		{Code: `/(a).\1/`},
		{Code: `RegExp('(a)\\1(b)')`},
		{Code: `/(a)(b)\2(c)/`},
		{Code: `/(?<foo>a)\k<foo>/`},
		{Code: `new RegExp('(.)\\1')`},
		{Code: `RegExp('(a)\\1(?:b)')`},
		{Code: `/(a)b\1/`},
		{Code: `/((a)\2)/`},
		{Code: `/((a)b\2c)/`},
		{Code: `/^(?:(a)\1)$/`},
		{Code: `/^((a)\2)$/`},
		{Code: `/^(((a)\3))|b$/`},
		{Code: `/a(?<foo>(.)b\2)/`},
		{Code: `/(a)?(b)*(\1)(c)/`},
		{Code: `/(a)?(b)*(\2)(c)/`},
		{Code: `/(?<=(a))b\1/`},
		{Code: `/(?<=(?=(a)\1))b/`},
		{Code: `/(?<!\1(a))b/`},
		{Code: `/(?<=\1(a))b/`},
		{Code: `/(?<!\1.(a))b/`},
		{Code: `/(?<=\1.(a))b/`},
		{Code: `/(?<=(?:\1.(a)))b/`},
		{Code: `/(?<!(?:\1)((a)))b/`},
		{Code: `/(?<!(?:\2)((a)))b/`},
		{Code: `/(?=(?<=\1(a)))b/`},
		{Code: `/(?=(?<!\1(a)))b/`},
		{Code: `/(.)(?<=\2(a))b/`},
		{Code: `/^(a)\1|b/`},
		{Code: `/^a|(b)\1/`},
		{Code: `/^a|(b|c)\1/`},
		{Code: `/^(a)|(b)\2/`},
		{Code: `/^(?:(a)|(b)\2)$/`},
		{Code: `/^a|(?:.|(b)\1)/`},
		{Code: `/^a|(?:.|(b).(\1))/`},
		{Code: `/^a|(?:.|(?:(b)).(\1))/`},
		{Code: `/^a|(?:.|(?:(b)|c).(\1))/`},
		{Code: `/^a|(?:.|(?:(b)).(\1|c))/`},
		{Code: `/^a|(?:.|(?:(b)|c).(\1|d))/`},
		{Code: `/.(?=(b))\1/`},
		{Code: `/.(?<=(b))\1/`},
		{Code: `/a(?!(b)\1)./`},
		{Code: `/a(?<!\1(b))./`},
		{Code: `/a(?!(b)(\1))./`},
		{Code: `/a(?!(?:(b)\1))./`},
		{Code: `/a(?!(?:(b))\1)./`},
		{Code: `/a(?<!(?:\1)(b))./`},
		{Code: `/a(?<!(?:(?:\1)(b)))./`},
		{Code: `/(?<!(a))(b)(?!(c))\2/`},
		{Code: `/a(?!(b|c)\1)./`},
		{Code: `RegExp('\\1(a)[')`},
		{Code: `new RegExp('\\1(a){', 'u')`},
		{Code: `new RegExp('\\1(a)\\2', 'ug')`},
		{Code: `const flags = 'gus'; RegExp('\\1(a){', flags);`},
		{Code: `RegExp('\\1(a)\\k<foo>', 'u')`},
		{Code: `new RegExp('\\k<foo>(?<foo>a)\\k<bar>')`},
		{Code: `new RegExp('([[A--B]])\\1', 'v')`},
		{Code: `new RegExp('[[]\\1](a)', 'v')`},
		{Code: `/((?<foo>bar)\k<foo>|(?<foo>baz))/`},
	}, []InvalidTestCase{
		{
			Code: `/(b)(\2a)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\2' will be ignored. It references group '(\\2a)' from within that group.",
				},
			},
		},
		{
			Code: `/\k<foo>(?<foo>bar)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' which appears later in the pattern.",
				},
			},
		},
		{
			Code: `RegExp('(a|bc)|\\1')`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\1' will be ignored. It references group '(a|bc)' which is in another alternative.",
				},
			},
		},
		{
			Code: `new RegExp('(?!(?<foo>\\n))\\1')`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\1' will be ignored. It references group '(?<foo>\\n)' which is in a negative lookaround.",
				},
			},
		},
		{
			Code: `/(?<!(a)\1)b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\1' will be ignored. It references group '(a)' which appears before in the same lookbehind.",
				},
			},
		},
		{
			Code: `new RegExp('(\\1)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/^(a\1)$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/^((a)\1)$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `new RegExp('^(a\\1b)$')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `RegExp('^((\\1))$')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/((\2))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/a(?<foo>(.)b\1)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/a(?<foo>\k<foo>)b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/^(\1)*$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/^(?:a)(?:((?:\1)))*$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/(?!(\1))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/a|(b\1c)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/(a|(\1))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/(a|(\2))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/(?:a|(\1))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/(a)?(b)*(\3)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/(?<=(a\1))b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `/\1(a)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\1.(a)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?:\1)(?:(a))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?:\1)(?:((a)))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?:\2)(?:((a)))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?:\1)(?:((?:a)))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(\2)(a)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `RegExp('(a)\\2(b)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?:a)(b)\2(c)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\k<foo>(?<foo>a)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?:a(b)\2)(c)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `new RegExp('(a)(b)\\3(c)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\1(?<=(a))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\1(?<!(a))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?<=\1)(?<=(a))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?<!\1)(?<!(a))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?=\1(a))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?!\1(a))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/(?<=(a)\1)b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?<!.(a).\1.)b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(.)(?<!(b|c)\2)d/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?<=(?:(a)\1))b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?<=(?:(a))\1)b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?<=(a)(?:\1))b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?<!(?:(a))(?:\1))b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?<!(?:(a))(?:\1)|.)b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/.(?!(?<!(a)\1))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/.(?=(?<!(a)\1))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/.(?!(?<=(a)\1))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/.(?=(?<=(a)\1))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(a)|\1b/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:(a)|\1b)$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:(a)|b(?:c|\1))$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:a|b(?:(c)|\1))$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:(a(?!b))|\1b)+$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:(?:(a)(?!b))|\1b)+$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:(a(?=a))|\1b)+$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/^(?:(a)(?=a)|\1b)+$/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/.(?:a|(b)).|(?:(\1)|c)./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/.(?!(a)|\1)./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/.(?<=\1|(a))./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "disjunctive",
				},
			},
		},
		{
			Code: `/a(?!(b)).\1/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/(?<!(a))b\1/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/(?<!(a))(?:\1)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/.(?<!a|(b)).\1/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/.(?!(a)).(?!\1)./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/.(?<!(a)).(?<!\1)./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/.(?=(?!(a))\1)./`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/.(?<!\1(?!(a)))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/\1(a)(b)\2/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\1(a)\1/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\1(a)\2(b)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\1.(?<=(a)\1)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
				{
					MessageId: "backward",
				},
			},
		},
		{
			Code: `/(?!\1(a)).\1/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
				{
					MessageId: "intoNegativeLookaround",
				},
			},
		},
		{
			Code: `/(a)\2(b)/; RegExp('(\\1)');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
				{
					MessageId: "nested",
				},
			},
		},
		{
			Code: `RegExp('\\1(a){', flags);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `const r = RegExp, p = '\\1', s = '(a)'; new r(p + s);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `new RegExp('\\1([[A--B]])', 'v')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "forward",
				},
			},
		},
		{
			Code: `/\k<foo>((?<foo>bar)|(?<foo>baz))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' and another group which appears later in the pattern.",
				},
			},
		},
		{
			Code: `/((?<foo>bar)|\k<foo>(?<foo>baz))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>baz)' which appears later in the pattern.",
				},
			},
		},
		{
			Code: `/\k<foo>((?<foo>bar)|(?<foo>baz)|(?<foo>qux))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' and other 2 groups which appears later in the pattern.",
				},
			},
		},
		{
			Code: `/((?<foo>bar)|\k<foo>(?<foo>baz)|(?<foo>qux))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>baz)' which appears later in the pattern.",
				},
			},
		},
		{
			Code: `/((?<foo>bar)|\k<foo>|(?<foo>baz))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' and another group which is in another alternative.",
				},
			},
		},
		{
			Code: `/((?<foo>bar)|\k<foo>|(?<foo>baz)|(?<foo>qux))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' and other 2 groups which is in another alternative.",
				},
			},
		},
		{
			Code: `/((?<foo>bar)|(?<foo>baz\k<foo>)|(?<foo>qux\k<foo>))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>baz\\k<foo>)' from within that group.",
				},
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>qux\\k<foo>)' from within that group.",
				},
			},
		},
		{
			Code: `/(?<=((?<foo>bar)|(?<foo>baz))\k<foo>)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' and another group which appears before in the same lookbehind.",
				},
			},
		},
		{
			Code: `/((?!(?<foo>bar))|(?!(?<foo>baz)))\k<foo>/`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Backreference '\\k<foo>' will be ignored. It references group '(?<foo>bar)' and another group which is in a negative lookaround.",
				},
			},
		},
	})
}
