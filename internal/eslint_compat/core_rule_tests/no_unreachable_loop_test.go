// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnreachableLoopRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018}}", "no-unreachable-loop", []ValidTestCase{
		{Code: `while (a) ;`},
		{Code: `while (a) {}`},
		{Code: `while (a) { bar(); }`},
		{Code: `while (a) continue;`},
		{Code: `while (a) { continue; }`},
		{Code: `while (a) { if (foo) break; }`},
		{Code: `function someFunc() { while (a) { if (foo) { return; } bar(); } }`},
		{Code: `while (a) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { while (a) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { while (a) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { while (a) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { while (a) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { while (a) { try { return bar(); } catch (e) {} } }`},
		{Code: `while (a) { continue; break; }`},
		{Code: `while (a) () => a;`},
		{Code: `while (a) { () => a }`},
		{Code: `while (a) (() => a)();`},
		{Code: `while (a) { (() => a)() }`},
		{Code: `while (a) while (a);`},
		{Code: `while (a) do ; while (a)`},
		{Code: `while (a) for (a; b; c);`},
		{Code: `while (a) for (; b;);`},
		{Code: `while (a) for (; ; c) if (foo) break;`},
		{Code: `while (a) for (;;) if (foo) break;`},
		{Code: `while (a) while (true) if (foo) break;`},
		{Code: `function someFunc() { while (a) while (foo) if (bar) return; }`},
		{Code: `while (a) for (a in b);`},
		{Code: `while (a) for (a of b);`},
		{Code: `while (a && b) ;`},
		{Code: `while (a && b) {}`},
		{Code: `while (a && b) { bar(); }`},
		{Code: `while (a && b) continue;`},
		{Code: `while (a && b) { continue; }`},
		{Code: `while (a && b) { if (foo) break; }`},
		{Code: `function someFunc() { while (a && b) { if (foo) { return; } bar(); } }`},
		{Code: `while (a && b) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { while (a && b) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { while (a && b) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { while (a && b) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { while (a && b) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { while (a && b) { try { return bar(); } catch (e) {} } }`},
		{Code: `while (a && b) { continue; break; }`},
		{Code: `while (a && b) () => a;`},
		{Code: `while (a && b) { () => a }`},
		{Code: `while (a && b) (() => a)();`},
		{Code: `while (a && b) { (() => a)() }`},
		{Code: `while (a && b) while (a);`},
		{Code: `while (a && b) do ; while (a)`},
		{Code: `while (a && b) for (a; b; c);`},
		{Code: `while (a && b) for (; b;);`},
		{Code: `while (a && b) for (; ; c) if (foo) break;`},
		{Code: `while (a && b) for (;;) if (foo) break;`},
		{Code: `while (a && b) while (true) if (foo) break;`},
		{Code: `function someFunc() { while (a && b) while (foo) if (bar) return; }`},
		{Code: `while (a && b) for (a in b);`},
		{Code: `while (a && b) for (a of b);`},
		{Code: `do ; while (a)`},
		{Code: `do {} while (a)`},
		{Code: `do { bar(); } while (a)`},
		{Code: `do continue; while (a)`},
		{Code: `do { continue; } while (a)`},
		{Code: `do { if (foo) break; } while (a)`},
		{Code: `function someFunc() { do { if (foo) { return; } bar(); } while (a) }`},
		{Code: `do { if (foo) { bar(); } else { break; } } while (a)`},
		{Code: `function someFunc() { do { if (foo) { continue; } return; } while (a) }`},
		{Code: `function someFunc() { do { switch (foo) { case 1: return; } } while (a) }`},
		{Code: `function someFunc() { do { switch (foo) { case 1: break; default: return; } } while (a) }`},
		{Code: `function someFunc() { do { switch (foo) { case 1: continue; default: return; } throw err; } while (a) }`},
		{Code: `function someFunc() { do { try { return bar(); } catch (e) {} } while (a) }`},
		{Code: `do { continue; break; } while (a)`},
		{Code: `do () => a; while (a)`},
		{Code: `do { () => a } while (a)`},
		{Code: `do (() => a)(); while (a)`},
		{Code: `do { (() => a)() } while (a)`},
		{Code: `do while (a); while (a)`},
		{Code: `do do ; while (a) while (a)`},
		{Code: `do for (a; b; c); while (a)`},
		{Code: `do for (; b;); while (a)`},
		{Code: `do for (; ; c) if (foo) break; while (a)`},
		{Code: `do for (;;) if (foo) break; while (a)`},
		{Code: `do while (true) if (foo) break; while (a)`},
		{Code: `function someFunc() { do while (foo) if (bar) return; while (a) }`},
		{Code: `do for (a in b); while (a)`},
		{Code: `do for (a of b); while (a)`},
		{Code: `do ; while (a && b)`},
		{Code: `do {} while (a && b)`},
		{Code: `do { bar(); } while (a && b)`},
		{Code: `do continue; while (a && b)`},
		{Code: `do { continue; } while (a && b)`},
		{Code: `do { if (foo) break; } while (a && b)`},
		{Code: `function someFunc() { do { if (foo) { return; } bar(); } while (a && b) }`},
		{Code: `do { if (foo) { bar(); } else { break; } } while (a && b)`},
		{Code: `function someFunc() { do { if (foo) { continue; } return; } while (a && b) }`},
		{Code: `function someFunc() { do { switch (foo) { case 1: return; } } while (a && b) }`},
		{Code: `function someFunc() { do { switch (foo) { case 1: break; default: return; } } while (a && b) }`},
		{Code: `function someFunc() { do { switch (foo) { case 1: continue; default: return; } throw err; } while (a && b) }`},
		{Code: `function someFunc() { do { try { return bar(); } catch (e) {} } while (a && b) }`},
		{Code: `do { continue; break; } while (a && b)`},
		{Code: `do () => a; while (a && b)`},
		{Code: `do { () => a } while (a && b)`},
		{Code: `do (() => a)(); while (a && b)`},
		{Code: `do { (() => a)() } while (a && b)`},
		{Code: `do while (a); while (a && b)`},
		{Code: `do do ; while (a) while (a && b)`},
		{Code: `do for (a; b; c); while (a && b)`},
		{Code: `do for (; b;); while (a && b)`},
		{Code: `do for (; ; c) if (foo) break; while (a && b)`},
		{Code: `do for (;;) if (foo) break; while (a && b)`},
		{Code: `do while (true) if (foo) break; while (a && b)`},
		{Code: `function someFunc() { do while (foo) if (bar) return; while (a && b) }`},
		{Code: `do for (a in b); while (a && b)`},
		{Code: `do for (a of b); while (a && b)`},
		{Code: `for (a; b; c) ;`},
		{Code: `for (a; b; c) {}`},
		{Code: `for (a; b; c) { bar(); }`},
		{Code: `for (a; b; c) continue;`},
		{Code: `for (a; b; c) { continue; }`},
		{Code: `for (a; b; c) { if (foo) break; }`},
		{Code: `function someFunc() { for (a; b; c) { if (foo) { return; } bar(); } }`},
		{Code: `for (a; b; c) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a; b; c) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a; b; c) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a; b; c) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a; b; c) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a; b; c) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a; b; c) { continue; break; }`},
		{Code: `for (a; b; c) () => a;`},
		{Code: `for (a; b; c) { () => a }`},
		{Code: `for (a; b; c) (() => a)();`},
		{Code: `for (a; b; c) { (() => a)() }`},
		{Code: `for (a; b; c) while (a);`},
		{Code: `for (a; b; c) do ; while (a)`},
		{Code: `for (a; b; c) for (a; b; c);`},
		{Code: `for (a; b; c) for (; b;);`},
		{Code: `for (a; b; c) for (; ; c) if (foo) break;`},
		{Code: `for (a; b; c) for (;;) if (foo) break;`},
		{Code: `for (a; b; c) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a; b; c) while (foo) if (bar) return; }`},
		{Code: `for (a; b; c) for (a in b);`},
		{Code: `for (a; b; c) for (a of b);`},
		{Code: `for (var i = 0; i < a.length; i++) ;`},
		{Code: `for (var i = 0; i < a.length; i++) {}`},
		{Code: `for (var i = 0; i < a.length; i++) { bar(); }`},
		{Code: `for (var i = 0; i < a.length; i++) continue;`},
		{Code: `for (var i = 0; i < a.length; i++) { continue; }`},
		{Code: `for (var i = 0; i < a.length; i++) { if (foo) break; }`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) { if (foo) { return; } bar(); } }`},
		{Code: `for (var i = 0; i < a.length; i++) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (var i = 0; i < a.length; i++) { continue; break; }`},
		{Code: `for (var i = 0; i < a.length; i++) () => a;`},
		{Code: `for (var i = 0; i < a.length; i++) { () => a }`},
		{Code: `for (var i = 0; i < a.length; i++) (() => a)();`},
		{Code: `for (var i = 0; i < a.length; i++) { (() => a)() }`},
		{Code: `for (var i = 0; i < a.length; i++) while (a);`},
		{Code: `for (var i = 0; i < a.length; i++) do ; while (a)`},
		{Code: `for (var i = 0; i < a.length; i++) for (a; b; c);`},
		{Code: `for (var i = 0; i < a.length; i++) for (; b;);`},
		{Code: `for (var i = 0; i < a.length; i++) for (; ; c) if (foo) break;`},
		{Code: `for (var i = 0; i < a.length; i++) for (;;) if (foo) break;`},
		{Code: `for (var i = 0; i < a.length; i++) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (var i = 0; i < a.length; i++) while (foo) if (bar) return; }`},
		{Code: `for (var i = 0; i < a.length; i++) for (a in b);`},
		{Code: `for (var i = 0; i < a.length; i++) for (a of b);`},
		{Code: `for (; b; c) ;`},
		{Code: `for (; b; c) {}`},
		{Code: `for (; b; c) { bar(); }`},
		{Code: `for (; b; c) continue;`},
		{Code: `for (; b; c) { continue; }`},
		{Code: `for (; b; c) { if (foo) break; }`},
		{Code: `function someFunc() { for (; b; c) { if (foo) { return; } bar(); } }`},
		{Code: `for (; b; c) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (; b; c) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (; b; c) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (; b; c) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (; b; c) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (; b; c) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (; b; c) { continue; break; }`},
		{Code: `for (; b; c) () => a;`},
		{Code: `for (; b; c) { () => a }`},
		{Code: `for (; b; c) (() => a)();`},
		{Code: `for (; b; c) { (() => a)() }`},
		{Code: `for (; b; c) while (a);`},
		{Code: `for (; b; c) do ; while (a)`},
		{Code: `for (; b; c) for (a; b; c);`},
		{Code: `for (; b; c) for (; b;);`},
		{Code: `for (; b; c) for (; ; c) if (foo) break;`},
		{Code: `for (; b; c) for (;;) if (foo) break;`},
		{Code: `for (; b; c) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (; b; c) while (foo) if (bar) return; }`},
		{Code: `for (; b; c) for (a in b);`},
		{Code: `for (; b; c) for (a of b);`},
		{Code: `for (; b < foo; c++) ;`},
		{Code: `for (; b < foo; c++) {}`},
		{Code: `for (; b < foo; c++) { bar(); }`},
		{Code: `for (; b < foo; c++) continue;`},
		{Code: `for (; b < foo; c++) { continue; }`},
		{Code: `for (; b < foo; c++) { if (foo) break; }`},
		{Code: `function someFunc() { for (; b < foo; c++) { if (foo) { return; } bar(); } }`},
		{Code: `for (; b < foo; c++) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (; b < foo; c++) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (; b < foo; c++) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (; b < foo; c++) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (; b < foo; c++) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (; b < foo; c++) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (; b < foo; c++) { continue; break; }`},
		{Code: `for (; b < foo; c++) () => a;`},
		{Code: `for (; b < foo; c++) { () => a }`},
		{Code: `for (; b < foo; c++) (() => a)();`},
		{Code: `for (; b < foo; c++) { (() => a)() }`},
		{Code: `for (; b < foo; c++) while (a);`},
		{Code: `for (; b < foo; c++) do ; while (a)`},
		{Code: `for (; b < foo; c++) for (a; b; c);`},
		{Code: `for (; b < foo; c++) for (; b;);`},
		{Code: `for (; b < foo; c++) for (; ; c) if (foo) break;`},
		{Code: `for (; b < foo; c++) for (;;) if (foo) break;`},
		{Code: `for (; b < foo; c++) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (; b < foo; c++) while (foo) if (bar) return; }`},
		{Code: `for (; b < foo; c++) for (a in b);`},
		{Code: `for (; b < foo; c++) for (a of b);`},
		{Code: `for (a; ; c) ;`},
		{Code: `for (a; ; c) {}`},
		{Code: `for (a; ; c) { bar(); }`},
		{Code: `for (a; ; c) continue;`},
		{Code: `for (a; ; c) { continue; }`},
		{Code: `for (a; ; c) { if (foo) break; }`},
		{Code: `function someFunc() { for (a; ; c) { if (foo) { return; } bar(); } }`},
		{Code: `for (a; ; c) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a; ; c) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a; ; c) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a; ; c) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a; ; c) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a; ; c) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a; ; c) { continue; break; }`},
		{Code: `for (a; ; c) () => a;`},
		{Code: `for (a; ; c) { () => a }`},
		{Code: `for (a; ; c) (() => a)();`},
		{Code: `for (a; ; c) { (() => a)() }`},
		{Code: `for (a; ; c) while (a);`},
		{Code: `for (a; ; c) do ; while (a)`},
		{Code: `for (a; ; c) for (a; b; c);`},
		{Code: `for (a; ; c) for (; b;);`},
		{Code: `for (a; ; c) for (; ; c) if (foo) break;`},
		{Code: `for (a; ; c) for (;;) if (foo) break;`},
		{Code: `for (a; ; c) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a; ; c) while (foo) if (bar) return; }`},
		{Code: `for (a; ; c) for (a in b);`},
		{Code: `for (a; ; c) for (a of b);`},
		{Code: `for (a = 0; ; c++) ;`},
		{Code: `for (a = 0; ; c++) {}`},
		{Code: `for (a = 0; ; c++) { bar(); }`},
		{Code: `for (a = 0; ; c++) continue;`},
		{Code: `for (a = 0; ; c++) { continue; }`},
		{Code: `for (a = 0; ; c++) { if (foo) break; }`},
		{Code: `function someFunc() { for (a = 0; ; c++) { if (foo) { return; } bar(); } }`},
		{Code: `for (a = 0; ; c++) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a = 0; ; c++) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a = 0; ; c++) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a = 0; ; c++) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a = 0; ; c++) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a = 0; ; c++) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a = 0; ; c++) { continue; break; }`},
		{Code: `for (a = 0; ; c++) () => a;`},
		{Code: `for (a = 0; ; c++) { () => a }`},
		{Code: `for (a = 0; ; c++) (() => a)();`},
		{Code: `for (a = 0; ; c++) { (() => a)() }`},
		{Code: `for (a = 0; ; c++) while (a);`},
		{Code: `for (a = 0; ; c++) do ; while (a)`},
		{Code: `for (a = 0; ; c++) for (a; b; c);`},
		{Code: `for (a = 0; ; c++) for (; b;);`},
		{Code: `for (a = 0; ; c++) for (; ; c) if (foo) break;`},
		{Code: `for (a = 0; ; c++) for (;;) if (foo) break;`},
		{Code: `for (a = 0; ; c++) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a = 0; ; c++) while (foo) if (bar) return; }`},
		{Code: `for (a = 0; ; c++) for (a in b);`},
		{Code: `for (a = 0; ; c++) for (a of b);`},
		{Code: `for (a; b;) ;`},
		{Code: `for (a; b;) {}`},
		{Code: `for (a; b;) { bar(); }`},
		{Code: `for (a; b;) continue;`},
		{Code: `for (a; b;) { continue; }`},
		{Code: `for (a; b;) { if (foo) break; }`},
		{Code: `function someFunc() { for (a; b;) { if (foo) { return; } bar(); } }`},
		{Code: `for (a; b;) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a; b;) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a; b;) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a; b;) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a; b;) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a; b;) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a; b;) { continue; break; }`},
		{Code: `for (a; b;) () => a;`},
		{Code: `for (a; b;) { () => a }`},
		{Code: `for (a; b;) (() => a)();`},
		{Code: `for (a; b;) { (() => a)() }`},
		{Code: `for (a; b;) while (a);`},
		{Code: `for (a; b;) do ; while (a)`},
		{Code: `for (a; b;) for (a; b; c);`},
		{Code: `for (a; b;) for (; b;);`},
		{Code: `for (a; b;) for (; ; c) if (foo) break;`},
		{Code: `for (a; b;) for (;;) if (foo) break;`},
		{Code: `for (a; b;) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a; b;) while (foo) if (bar) return; }`},
		{Code: `for (a; b;) for (a in b);`},
		{Code: `for (a; b;) for (a of b);`},
		{Code: `for (a = 0; b < foo; ) ;`},
		{Code: `for (a = 0; b < foo; ) {}`},
		{Code: `for (a = 0; b < foo; ) { bar(); }`},
		{Code: `for (a = 0; b < foo; ) continue;`},
		{Code: `for (a = 0; b < foo; ) { continue; }`},
		{Code: `for (a = 0; b < foo; ) { if (foo) break; }`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) { if (foo) { return; } bar(); } }`},
		{Code: `for (a = 0; b < foo; ) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a = 0; b < foo; ) { continue; break; }`},
		{Code: `for (a = 0; b < foo; ) () => a;`},
		{Code: `for (a = 0; b < foo; ) { () => a }`},
		{Code: `for (a = 0; b < foo; ) (() => a)();`},
		{Code: `for (a = 0; b < foo; ) { (() => a)() }`},
		{Code: `for (a = 0; b < foo; ) while (a);`},
		{Code: `for (a = 0; b < foo; ) do ; while (a)`},
		{Code: `for (a = 0; b < foo; ) for (a; b; c);`},
		{Code: `for (a = 0; b < foo; ) for (; b;);`},
		{Code: `for (a = 0; b < foo; ) for (; ; c) if (foo) break;`},
		{Code: `for (a = 0; b < foo; ) for (;;) if (foo) break;`},
		{Code: `for (a = 0; b < foo; ) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a = 0; b < foo; ) while (foo) if (bar) return; }`},
		{Code: `for (a = 0; b < foo; ) for (a in b);`},
		{Code: `for (a = 0; b < foo; ) for (a of b);`},
		{Code: `for (; ; c) ;`},
		{Code: `for (; ; c) {}`},
		{Code: `for (; ; c) { bar(); }`},
		{Code: `for (; ; c) continue;`},
		{Code: `for (; ; c) { continue; }`},
		{Code: `for (; ; c) { if (foo) break; }`},
		{Code: `function someFunc() { for (; ; c) { if (foo) { return; } bar(); } }`},
		{Code: `for (; ; c) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (; ; c) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (; ; c) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (; ; c) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (; ; c) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (; ; c) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (; ; c) { continue; break; }`},
		{Code: `for (; ; c) () => a;`},
		{Code: `for (; ; c) { () => a }`},
		{Code: `for (; ; c) (() => a)();`},
		{Code: `for (; ; c) { (() => a)() }`},
		{Code: `for (; ; c) while (a);`},
		{Code: `for (; ; c) do ; while (a)`},
		{Code: `for (; ; c) for (a; b; c);`},
		{Code: `for (; ; c) for (; b;);`},
		{Code: `for (; ; c) for (; ; c) if (foo) break;`},
		{Code: `for (; ; c) for (;;) if (foo) break;`},
		{Code: `for (; ; c) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (; ; c) while (foo) if (bar) return; }`},
		{Code: `for (; ; c) for (a in b);`},
		{Code: `for (; ; c) for (a of b);`},
		{Code: `for (; ; c++) ;`},
		{Code: `for (; ; c++) {}`},
		{Code: `for (; ; c++) { bar(); }`},
		{Code: `for (; ; c++) continue;`},
		{Code: `for (; ; c++) { continue; }`},
		{Code: `for (; ; c++) { if (foo) break; }`},
		{Code: `function someFunc() { for (; ; c++) { if (foo) { return; } bar(); } }`},
		{Code: `for (; ; c++) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (; ; c++) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (; ; c++) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (; ; c++) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (; ; c++) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (; ; c++) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (; ; c++) { continue; break; }`},
		{Code: `for (; ; c++) () => a;`},
		{Code: `for (; ; c++) { () => a }`},
		{Code: `for (; ; c++) (() => a)();`},
		{Code: `for (; ; c++) { (() => a)() }`},
		{Code: `for (; ; c++) while (a);`},
		{Code: `for (; ; c++) do ; while (a)`},
		{Code: `for (; ; c++) for (a; b; c);`},
		{Code: `for (; ; c++) for (; b;);`},
		{Code: `for (; ; c++) for (; ; c) if (foo) break;`},
		{Code: `for (; ; c++) for (;;) if (foo) break;`},
		{Code: `for (; ; c++) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (; ; c++) while (foo) if (bar) return; }`},
		{Code: `for (; ; c++) for (a in b);`},
		{Code: `for (; ; c++) for (a of b);`},
		{Code: `for (; b;) ;`},
		{Code: `for (; b;) {}`},
		{Code: `for (; b;) { bar(); }`},
		{Code: `for (; b;) continue;`},
		{Code: `for (; b;) { continue; }`},
		{Code: `for (; b;) { if (foo) break; }`},
		{Code: `function someFunc() { for (; b;) { if (foo) { return; } bar(); } }`},
		{Code: `for (; b;) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (; b;) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (; b;) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (; b;) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (; b;) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (; b;) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (; b;) { continue; break; }`},
		{Code: `for (; b;) () => a;`},
		{Code: `for (; b;) { () => a }`},
		{Code: `for (; b;) (() => a)();`},
		{Code: `for (; b;) { (() => a)() }`},
		{Code: `for (; b;) while (a);`},
		{Code: `for (; b;) do ; while (a)`},
		{Code: `for (; b;) for (a; b; c);`},
		{Code: `for (; b;) for (; b;);`},
		{Code: `for (; b;) for (; ; c) if (foo) break;`},
		{Code: `for (; b;) for (;;) if (foo) break;`},
		{Code: `for (; b;) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (; b;) while (foo) if (bar) return; }`},
		{Code: `for (; b;) for (a in b);`},
		{Code: `for (; b;) for (a of b);`},
		{Code: `for (; b < foo; ) ;`},
		{Code: `for (; b < foo; ) {}`},
		{Code: `for (; b < foo; ) { bar(); }`},
		{Code: `for (; b < foo; ) continue;`},
		{Code: `for (; b < foo; ) { continue; }`},
		{Code: `for (; b < foo; ) { if (foo) break; }`},
		{Code: `function someFunc() { for (; b < foo; ) { if (foo) { return; } bar(); } }`},
		{Code: `for (; b < foo; ) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (; b < foo; ) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (; b < foo; ) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (; b < foo; ) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (; b < foo; ) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (; b < foo; ) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (; b < foo; ) { continue; break; }`},
		{Code: `for (; b < foo; ) () => a;`},
		{Code: `for (; b < foo; ) { () => a }`},
		{Code: `for (; b < foo; ) (() => a)();`},
		{Code: `for (; b < foo; ) { (() => a)() }`},
		{Code: `for (; b < foo; ) while (a);`},
		{Code: `for (; b < foo; ) do ; while (a)`},
		{Code: `for (; b < foo; ) for (a; b; c);`},
		{Code: `for (; b < foo; ) for (; b;);`},
		{Code: `for (; b < foo; ) for (; ; c) if (foo) break;`},
		{Code: `for (; b < foo; ) for (;;) if (foo) break;`},
		{Code: `for (; b < foo; ) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (; b < foo; ) while (foo) if (bar) return; }`},
		{Code: `for (; b < foo; ) for (a in b);`},
		{Code: `for (; b < foo; ) for (a of b);`},
		{Code: `for (a; ;) ;`},
		{Code: `for (a; ;) {}`},
		{Code: `for (a; ;) { bar(); }`},
		{Code: `for (a; ;) continue;`},
		{Code: `for (a; ;) { continue; }`},
		{Code: `for (a; ;) { if (foo) break; }`},
		{Code: `function someFunc() { for (a; ;) { if (foo) { return; } bar(); } }`},
		{Code: `for (a; ;) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a; ;) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a; ;) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a; ;) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a; ;) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a; ;) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a; ;) { continue; break; }`},
		{Code: `for (a; ;) () => a;`},
		{Code: `for (a; ;) { () => a }`},
		{Code: `for (a; ;) (() => a)();`},
		{Code: `for (a; ;) { (() => a)() }`},
		{Code: `for (a; ;) while (a);`},
		{Code: `for (a; ;) do ; while (a)`},
		{Code: `for (a; ;) for (a; b; c);`},
		{Code: `for (a; ;) for (; b;);`},
		{Code: `for (a; ;) for (; ; c) if (foo) break;`},
		{Code: `for (a; ;) for (;;) if (foo) break;`},
		{Code: `for (a; ;) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a; ;) while (foo) if (bar) return; }`},
		{Code: `for (a; ;) for (a in b);`},
		{Code: `for (a; ;) for (a of b);`},
		{Code: `for (a = 0; ;) ;`},
		{Code: `for (a = 0; ;) {}`},
		{Code: `for (a = 0; ;) { bar(); }`},
		{Code: `for (a = 0; ;) continue;`},
		{Code: `for (a = 0; ;) { continue; }`},
		{Code: `for (a = 0; ;) { if (foo) break; }`},
		{Code: `function someFunc() { for (a = 0; ;) { if (foo) { return; } bar(); } }`},
		{Code: `for (a = 0; ;) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a = 0; ;) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a = 0; ;) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a = 0; ;) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a = 0; ;) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a = 0; ;) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a = 0; ;) { continue; break; }`},
		{Code: `for (a = 0; ;) () => a;`},
		{Code: `for (a = 0; ;) { () => a }`},
		{Code: `for (a = 0; ;) (() => a)();`},
		{Code: `for (a = 0; ;) { (() => a)() }`},
		{Code: `for (a = 0; ;) while (a);`},
		{Code: `for (a = 0; ;) do ; while (a)`},
		{Code: `for (a = 0; ;) for (a; b; c);`},
		{Code: `for (a = 0; ;) for (; b;);`},
		{Code: `for (a = 0; ;) for (; ; c) if (foo) break;`},
		{Code: `for (a = 0; ;) for (;;) if (foo) break;`},
		{Code: `for (a = 0; ;) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a = 0; ;) while (foo) if (bar) return; }`},
		{Code: `for (a = 0; ;) for (a in b);`},
		{Code: `for (a = 0; ;) for (a of b);`},
		{Code: `for (;;) ;`},
		{Code: `for (;;) {}`},
		{Code: `for (;;) { bar(); }`},
		{Code: `for (;;) continue;`},
		{Code: `for (;;) { continue; }`},
		{Code: `for (;;) { if (foo) break; }`},
		{Code: `function someFunc() { for (;;) { if (foo) { return; } bar(); } }`},
		{Code: `for (;;) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (;;) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (;;) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (;;) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (;;) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (;;) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (;;) { continue; break; }`},
		{Code: `for (;;) () => a;`},
		{Code: `for (;;) { () => a }`},
		{Code: `for (;;) (() => a)();`},
		{Code: `for (;;) { (() => a)() }`},
		{Code: `for (;;) while (a);`},
		{Code: `for (;;) do ; while (a)`},
		{Code: `for (;;) for (a; b; c);`},
		{Code: `for (;;) for (; b;);`},
		{Code: `for (;;) for (; ; c) if (foo) break;`},
		{Code: `for (;;) for (;;) if (foo) break;`},
		{Code: `for (;;) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (;;) while (foo) if (bar) return; }`},
		{Code: `for (;;) for (a in b);`},
		{Code: `for (;;) for (a of b);`},
		{Code: `for (a in b) ;`},
		{Code: `for (a in b) {}`},
		{Code: `for (a in b) { bar(); }`},
		{Code: `for (a in b) continue;`},
		{Code: `for (a in b) { continue; }`},
		{Code: `for (a in b) { if (foo) break; }`},
		{Code: `function someFunc() { for (a in b) { if (foo) { return; } bar(); } }`},
		{Code: `for (a in b) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a in b) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a in b) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a in b) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a in b) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a in b) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a in b) { continue; break; }`},
		{Code: `for (a in b) () => a;`},
		{Code: `for (a in b) { () => a }`},
		{Code: `for (a in b) (() => a)();`},
		{Code: `for (a in b) { (() => a)() }`},
		{Code: `for (a in b) while (a);`},
		{Code: `for (a in b) do ; while (a)`},
		{Code: `for (a in b) for (a; b; c);`},
		{Code: `for (a in b) for (; b;);`},
		{Code: `for (a in b) for (; ; c) if (foo) break;`},
		{Code: `for (a in b) for (;;) if (foo) break;`},
		{Code: `for (a in b) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a in b) while (foo) if (bar) return; }`},
		{Code: `for (a in b) for (a in b);`},
		{Code: `for (a in b) for (a of b);`},
		{Code: `for (a in f(b)) ;`},
		{Code: `for (a in f(b)) {}`},
		{Code: `for (a in f(b)) { bar(); }`},
		{Code: `for (a in f(b)) continue;`},
		{Code: `for (a in f(b)) { continue; }`},
		{Code: `for (a in f(b)) { if (foo) break; }`},
		{Code: `function someFunc() { for (a in f(b)) { if (foo) { return; } bar(); } }`},
		{Code: `for (a in f(b)) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a in f(b)) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a in f(b)) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a in f(b)) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a in f(b)) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a in f(b)) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a in f(b)) { continue; break; }`},
		{Code: `for (a in f(b)) () => a;`},
		{Code: `for (a in f(b)) { () => a }`},
		{Code: `for (a in f(b)) (() => a)();`},
		{Code: `for (a in f(b)) { (() => a)() }`},
		{Code: `for (a in f(b)) while (a);`},
		{Code: `for (a in f(b)) do ; while (a)`},
		{Code: `for (a in f(b)) for (a; b; c);`},
		{Code: `for (a in f(b)) for (; b;);`},
		{Code: `for (a in f(b)) for (; ; c) if (foo) break;`},
		{Code: `for (a in f(b)) for (;;) if (foo) break;`},
		{Code: `for (a in f(b)) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a in f(b)) while (foo) if (bar) return; }`},
		{Code: `for (a in f(b)) for (a in b);`},
		{Code: `for (a in f(b)) for (a of b);`},
		{Code: `for (var a in b) ;`},
		{Code: `for (var a in b) {}`},
		{Code: `for (var a in b) { bar(); }`},
		{Code: `for (var a in b) continue;`},
		{Code: `for (var a in b) { continue; }`},
		{Code: `for (var a in b) { if (foo) break; }`},
		{Code: `function someFunc() { for (var a in b) { if (foo) { return; } bar(); } }`},
		{Code: `for (var a in b) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (var a in b) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (var a in b) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (var a in b) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (var a in b) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (var a in b) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (var a in b) { continue; break; }`},
		{Code: `for (var a in b) () => a;`},
		{Code: `for (var a in b) { () => a }`},
		{Code: `for (var a in b) (() => a)();`},
		{Code: `for (var a in b) { (() => a)() }`},
		{Code: `for (var a in b) while (a);`},
		{Code: `for (var a in b) do ; while (a)`},
		{Code: `for (var a in b) for (a; b; c);`},
		{Code: `for (var a in b) for (; b;);`},
		{Code: `for (var a in b) for (; ; c) if (foo) break;`},
		{Code: `for (var a in b) for (;;) if (foo) break;`},
		{Code: `for (var a in b) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (var a in b) while (foo) if (bar) return; }`},
		{Code: `for (var a in b) for (a in b);`},
		{Code: `for (var a in b) for (a of b);`},
		{Code: `for (let a in f(b)) ;`},
		{Code: `for (let a in f(b)) {}`},
		{Code: `for (let a in f(b)) { bar(); }`},
		{Code: `for (let a in f(b)) continue;`},
		{Code: `for (let a in f(b)) { continue; }`},
		{Code: `for (let a in f(b)) { if (foo) break; }`},
		{Code: `function someFunc() { for (let a in f(b)) { if (foo) { return; } bar(); } }`},
		{Code: `for (let a in f(b)) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (let a in f(b)) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (let a in f(b)) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (let a in f(b)) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (let a in f(b)) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (let a in f(b)) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (let a in f(b)) { continue; break; }`},
		{Code: `for (let a in f(b)) () => a;`},
		{Code: `for (let a in f(b)) { () => a }`},
		{Code: `for (let a in f(b)) (() => a)();`},
		{Code: `for (let a in f(b)) { (() => a)() }`},
		{Code: `for (let a in f(b)) while (a);`},
		{Code: `for (let a in f(b)) do ; while (a)`},
		{Code: `for (let a in f(b)) for (a; b; c);`},
		{Code: `for (let a in f(b)) for (; b;);`},
		{Code: `for (let a in f(b)) for (; ; c) if (foo) break;`},
		{Code: `for (let a in f(b)) for (;;) if (foo) break;`},
		{Code: `for (let a in f(b)) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (let a in f(b)) while (foo) if (bar) return; }`},
		{Code: `for (let a in f(b)) for (a in b);`},
		{Code: `for (let a in f(b)) for (a of b);`},
		{Code: `for (a of b) ;`},
		{Code: `for (a of b) {}`},
		{Code: `for (a of b) { bar(); }`},
		{Code: `for (a of b) continue;`},
		{Code: `for (a of b) { continue; }`},
		{Code: `for (a of b) { if (foo) break; }`},
		{Code: `function someFunc() { for (a of b) { if (foo) { return; } bar(); } }`},
		{Code: `for (a of b) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a of b) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a of b) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a of b) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a of b) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a of b) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a of b) { continue; break; }`},
		{Code: `for (a of b) () => a;`},
		{Code: `for (a of b) { () => a }`},
		{Code: `for (a of b) (() => a)();`},
		{Code: `for (a of b) { (() => a)() }`},
		{Code: `for (a of b) while (a);`},
		{Code: `for (a of b) do ; while (a)`},
		{Code: `for (a of b) for (a; b; c);`},
		{Code: `for (a of b) for (; b;);`},
		{Code: `for (a of b) for (; ; c) if (foo) break;`},
		{Code: `for (a of b) for (;;) if (foo) break;`},
		{Code: `for (a of b) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a of b) while (foo) if (bar) return; }`},
		{Code: `for (a of b) for (a in b);`},
		{Code: `for (a of b) for (a of b);`},
		{Code: `for (a of f(b)) ;`},
		{Code: `for (a of f(b)) {}`},
		{Code: `for (a of f(b)) { bar(); }`},
		{Code: `for (a of f(b)) continue;`},
		{Code: `for (a of f(b)) { continue; }`},
		{Code: `for (a of f(b)) { if (foo) break; }`},
		{Code: `function someFunc() { for (a of f(b)) { if (foo) { return; } bar(); } }`},
		{Code: `for (a of f(b)) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (a of f(b)) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (a of f(b)) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (a of f(b)) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (a of f(b)) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (a of f(b)) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (a of f(b)) { continue; break; }`},
		{Code: `for (a of f(b)) () => a;`},
		{Code: `for (a of f(b)) { () => a }`},
		{Code: `for (a of f(b)) (() => a)();`},
		{Code: `for (a of f(b)) { (() => a)() }`},
		{Code: `for (a of f(b)) while (a);`},
		{Code: `for (a of f(b)) do ; while (a)`},
		{Code: `for (a of f(b)) for (a; b; c);`},
		{Code: `for (a of f(b)) for (; b;);`},
		{Code: `for (a of f(b)) for (; ; c) if (foo) break;`},
		{Code: `for (a of f(b)) for (;;) if (foo) break;`},
		{Code: `for (a of f(b)) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (a of f(b)) while (foo) if (bar) return; }`},
		{Code: `for (a of f(b)) for (a in b);`},
		{Code: `for (a of f(b)) for (a of b);`},
		{Code: `for ({ a, b } of c) ;`},
		{Code: `for ({ a, b } of c) {}`},
		{Code: `for ({ a, b } of c) { bar(); }`},
		{Code: `for ({ a, b } of c) continue;`},
		{Code: `for ({ a, b } of c) { continue; }`},
		{Code: `for ({ a, b } of c) { if (foo) break; }`},
		{Code: `function someFunc() { for ({ a, b } of c) { if (foo) { return; } bar(); } }`},
		{Code: `for ({ a, b } of c) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for ({ a, b } of c) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for ({ a, b } of c) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for ({ a, b } of c) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for ({ a, b } of c) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for ({ a, b } of c) { try { return bar(); } catch (e) {} } }`},
		{Code: `for ({ a, b } of c) { continue; break; }`},
		{Code: `for ({ a, b } of c) () => a;`},
		{Code: `for ({ a, b } of c) { () => a }`},
		{Code: `for ({ a, b } of c) (() => a)();`},
		{Code: `for ({ a, b } of c) { (() => a)() }`},
		{Code: `for ({ a, b } of c) while (a);`},
		{Code: `for ({ a, b } of c) do ; while (a)`},
		{Code: `for ({ a, b } of c) for (a; b; c);`},
		{Code: `for ({ a, b } of c) for (; b;);`},
		{Code: `for ({ a, b } of c) for (; ; c) if (foo) break;`},
		{Code: `for ({ a, b } of c) for (;;) if (foo) break;`},
		{Code: `for ({ a, b } of c) while (true) if (foo) break;`},
		{Code: `function someFunc() { for ({ a, b } of c) while (foo) if (bar) return; }`},
		{Code: `for ({ a, b } of c) for (a in b);`},
		{Code: `for ({ a, b } of c) for (a of b);`},
		{Code: `for (var a of f(b)) ;`},
		{Code: `for (var a of f(b)) {}`},
		{Code: `for (var a of f(b)) { bar(); }`},
		{Code: `for (var a of f(b)) continue;`},
		{Code: `for (var a of f(b)) { continue; }`},
		{Code: `for (var a of f(b)) { if (foo) break; }`},
		{Code: `function someFunc() { for (var a of f(b)) { if (foo) { return; } bar(); } }`},
		{Code: `for (var a of f(b)) { if (foo) { bar(); } else { break; } }`},
		{Code: `function someFunc() { for (var a of f(b)) { if (foo) { continue; } return; } }`},
		{Code: `function someFunc() { for (var a of f(b)) { switch (foo) { case 1: return; } } }`},
		{Code: `function someFunc() { for (var a of f(b)) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `function someFunc() { for (var a of f(b)) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `function someFunc() { for (var a of f(b)) { try { return bar(); } catch (e) {} } }`},
		{Code: `for (var a of f(b)) { continue; break; }`},
		{Code: `for (var a of f(b)) () => a;`},
		{Code: `for (var a of f(b)) { () => a }`},
		{Code: `for (var a of f(b)) (() => a)();`},
		{Code: `for (var a of f(b)) { (() => a)() }`},
		{Code: `for (var a of f(b)) while (a);`},
		{Code: `for (var a of f(b)) do ; while (a)`},
		{Code: `for (var a of f(b)) for (a; b; c);`},
		{Code: `for (var a of f(b)) for (; b;);`},
		{Code: `for (var a of f(b)) for (; ; c) if (foo) break;`},
		{Code: `for (var a of f(b)) for (;;) if (foo) break;`},
		{Code: `for (var a of f(b)) while (true) if (foo) break;`},
		{Code: `function someFunc() { for (var a of f(b)) while (foo) if (bar) return; }`},
		{Code: `for (var a of f(b)) for (a in b);`},
		{Code: `for (var a of f(b)) for (a of b);`},
		{Code: `async function foo() { for await (const a of b) ; }`},
		{Code: `async function foo() { for await (const a of b) {} }`},
		{Code: `async function foo() { for await (const a of b) { bar(); } }`},
		{Code: `async function foo() { for await (const a of b) continue; }`},
		{Code: `async function foo() { for await (const a of b) { continue; } }`},
		{Code: `async function foo() { for await (const a of b) { if (foo) break; } }`},
		{Code: `async function foo() { for await (const a of b) { if (foo) { return; } bar(); } }`},
		{Code: `async function foo() { for await (const a of b) { if (foo) { bar(); } else { break; } } }`},
		{Code: `async function foo() { for await (const a of b) { if (foo) { continue; } return; } }`},
		{Code: `async function foo() { for await (const a of b) { switch (foo) { case 1: return; } } }`},
		{Code: `async function foo() { for await (const a of b) { switch (foo) { case 1: break; default: return; } } }`},
		{Code: `async function foo() { for await (const a of b) { switch (foo) { case 1: continue; default: return; } throw err; } }`},
		{Code: `async function foo() { for await (const a of b) { try { return bar(); } catch (e) {} } }`},
		{Code: `async function foo() { for await (const a of b) { continue; break; } }`},
		{Code: `async function foo() { for await (const a of b) () => a; }`},
		{Code: `async function foo() { for await (const a of b) { () => a } }`},
		{Code: `async function foo() { for await (const a of b) (() => a)(); }`},
		{Code: `async function foo() { for await (const a of b) { (() => a)() } }`},
		{Code: `async function foo() { for await (const a of b) while (a); }`},
		{Code: `async function foo() { for await (const a of b) do ; while (a) }`},
		{Code: `async function foo() { for await (const a of b) for (a; b; c); }`},
		{Code: `async function foo() { for await (const a of b) for (; b;); }`},
		{Code: `async function foo() { for await (const a of b) for (; ; c) if (foo) break; }`},
		{Code: `async function foo() { for await (const a of b) for (;;) if (foo) break; }`},
		{Code: `async function foo() { for await (const a of b) while (true) if (foo) break; }`},
		{Code: `async function foo() { for await (const a of b) while (foo) if (bar) return; }`},
		{Code: `async function foo() { for await (const a of b) for (a in b); }`},
		{Code: `async function foo() { for await (const a of b) for (a of b); }`},
		{Code: `while (false) { foo(); }`},
		{Code: `while (bar) { foo(); if (true) { break; } }`},
		{Code: `do foo(); while (false)`},
		{Code: `for (x = 1; x < 10; i++) { if (x > 0) { foo(); throw err; } }`},
		{Code: `for (x of []);`},
		{Code: `for (x of [1]);`},
		{Code: `function foo() { return; while (a); }`},
		{Code: `function foo() { return; while (a) break; }`},
		{Code: `while(true); while(true);`},
		{Code: `while(true); while(true) break;`},
		{
			Code:    `while (a) break;`,
			Options: "[{\"ignore\":[\"WhileStatement\"]}]",
		},
		{
			Code:    `do break; while (a)`,
			Options: "[{\"ignore\":[\"DoWhileStatement\"]}]",
		},
		{
			Code:    `for (a; b; c) break;`,
			Options: "[{\"ignore\":[\"ForStatement\"]}]",
		},
		{
			Code:    `for (a in b) break;`,
			Options: "[{\"ignore\":[\"ForInStatement\"]}]",
		},
		{
			Code:    `for (a of b) break;`,
			Options: "[{\"ignore\":[\"ForOfStatement\"]}]",
		},
		{
			Code:    `for (var key in obj) { hasEnumerableProperties = true; break; } for (const a of b) break;`,
			Options: "[{\"ignore\":[\"ForInStatement\",\"ForOfStatement\"]}]",
		},
	}, []InvalidTestCase{
		{
			Code: `while (a) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { while (a && b) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (a && b) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do break; while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do return; while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { return; } while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do throw err; while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { throw err; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { foo(); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { break; foo(); } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do if (foo) break; else return; while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { if (foo) { return; } else { break; } bar(); } while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { if (foo) { return; } throw err; } while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { switch (foo) { default: throw err; } } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { switch (foo) { case 1: throw err; default: return; } } while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { switch (foo) { case 1: something(); default: return; } } while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { try { return bar(); } catch (e) { break; } } while (a) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { break; continue; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { () => a; break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { (() => a)(); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { while (a); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { do ; while (a) break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (a; b; c); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (; b;); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (; ; c) if (foo) break; break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for(;;) if (foo) break; break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (a in b); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (a of b); break; } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do for (;;); while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (var i = 0; ; i< 10) { foo(); } } while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do while (true); while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do break; while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do return; while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { return; } while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do throw err; while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { throw err; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { foo(); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { break; foo(); } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do if (foo) break; else return; while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { if (foo) { return; } else { break; } bar(); } while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { if (foo) { return; } throw err; } while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { switch (foo) { default: throw err; } } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { switch (foo) { case 1: throw err; default: return; } } while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { switch (foo) { case 1: something(); default: return; } } while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { do { try { return bar(); } catch (e) { break; } } while (a && b) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { break; continue; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { () => a; break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { (() => a)(); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { while (a); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { do ; while (a) break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (a; b; c); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (; b;); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (; ; c) if (foo) break; break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for(;;) if (foo) break; break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (a in b); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (a of b); break; } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do for (;;); while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (var i = 0; ; i< 10) { foo(); } } while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do while (true); while (a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b; c) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b; c) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var i = 0; i < a.length; i++) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var i = 0; i < a.length; i++) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b; c) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b; c) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; c++) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; c++) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ; c) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ; c) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ; c++) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ; c++) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; b;) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; b;) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; b < foo; ) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; b < foo; ) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; ; c++) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; ; c++) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b;) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b;) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (; b < foo; ) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (; b < foo; ) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a; ;) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a; ;) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a = 0; ;) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a = 0; ;) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (;;) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in b) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a in f(b)) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in f(b)) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a in b) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a in b) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (let a in f(b)) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (let a in f(b)) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of b) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (a of f(b)) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of f(b)) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for ({ a, b } of c) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for ({ a, b } of c) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) throw err;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { foo(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { break; foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { switch (foo) { default: throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function someFunc() { for (var a of f(b)) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { () => a; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { (() => a)(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { while (a); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { do ; while (a) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for (a; b; c); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for (; b;); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for (; ; c) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for(;;) if (foo) break; break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for (a in b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for (a of b); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) for (;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) { for (var i = 0; ; i< 10) { foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (var a of f(b)) while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) throw err; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { foo(); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { break; foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) if (foo) break; else return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { if (foo) { return; } else { break; } bar(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { if (foo) { return; } throw err; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { switch (foo) { default: throw err; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { switch (foo) { case 1: throw err; default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { switch (foo) { case 1: something(); default: return; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { try { return bar(); } catch (e) { break; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { break; continue; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { () => a; break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { (() => a)(); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { while (a); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { do ; while (a) break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for (a; b; c); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for (; b;); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for (; ; c) if (foo) break; break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for(;;) if (foo) break; break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for (a in b); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for (a of b); break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) for (;;); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) { for (var i = 0; ; i< 10) { foo(); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `async function foo() { for await (const a of b) while (true); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `while (foo) { for (a of b) { if (baz) { break; } else { throw err; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `lbl: for (var i = 0; i < 10; i++) { while (foo) break lbl; } /* outer is valid because inner can have 0 iterations */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a in b) { while (foo) { if(baz) { break; } else { break; } } break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function foo() { for (var i = 0; i < 10; i++) { do { return; } while(i) } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `lbl: while(foo) { do { break lbl; } while(baz) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `lbl: for (a in b) { while(foo) { continue lbl; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (a of b) { for(;;) { if (foo) { throw err; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `function foo () { for (a in b) { while (true) { if (bar) { return; } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do for (var i = 1; i < 10; i++) break; while(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `do { for (var i = 1; i < 10; i++) continue; break; } while(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code: `for (;;) { for (var i = 1; i < 10; i ++) break; if (foo) break; continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
					Column:    12,
				},
			},
		},
		{
			Code:    `while (a) break; do break; while (b); for (;;) break; for (c in d) break; for (e of f) break;`,
			Options: "[{\"ignore\":[]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code:    `while (a) break;`,
			Options: "[{\"ignore\":[\"DoWhileStatement\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code:    `do break; while (a)`,
			Options: "[{\"ignore\":[\"WhileStatement\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code:    `for (a in b) break; for (c of d) break;`,
			Options: "[{\"ignore\":[\"ForStatement\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
				{
					MessageId: "invalid",
				},
			},
		},
		{
			Code:    `for (a in b) break; for (;;) break; for (c of d) break;`,
			Options: "[{\"ignore\":[\"ForInStatement\",\"ForOfStatement\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalid",
				},
			},
		},
	})
}
