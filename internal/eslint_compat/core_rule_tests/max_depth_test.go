// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMaxDepthRule(t *testing.T) {
	RunRuleTester(t, "{}", "max-depth", []ValidTestCase{
		{
			Code:    `function foo() { if (true) { if (false) { if (true) { } } } }`,
			Options: "[3]",
		},
		{
			Code:    `function foo() { if (true) { } else if (false) { } else if (true) { } else if (false) {} }`,
			Options: "[3]",
		},
		{
			Code:            `var foo = () => { if (true) { if (false) { if (true) { } } } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function foo() { if (true) { if (false) { if (true) { } } } }`},
		{
			Code:    `function foo() { if (true) { if (false) { if (true) { } } } }`,
			Options: "[{\"max\":3}]",
		},
		{
			Code:            `class C { static { if (1) { if (2) {} } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (1) { if (2) {} } if (1) { if (2) {} } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (1) { if (2) {} } } static { if (1) { if (2) {} } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `if (1) { class C { static { if (1) { if (2) {} } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { if (1) { class C { static { if (1) { if (2) {} } } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { if (1) { if (2) { class C { static { if (1) { if (2) {} } if (1) { if (2) {} } } } } } if (1) { if (2) {} } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `function foo() { if (true) { if (false) { if (true) { } } } }`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:            `var foo = () => { if (true) { if (false) { if (true) { } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:    `function foo() { if (true) {} else { for(;;) {} } }`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:    `function foo() { while (true) { if (true) {} } }`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:            `function foo() { for (let x of foo) { if (true) {} } }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:    `function foo() { while (true) { if (true) { if (false) { } } } }`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code: `function foo() { if (true) { if (false) { if (true) { if (false) { if (true) { } } } } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:    `function foo() { if (true) { if (false) { if (true) { } } } }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:    `function foo() { if (a) { if (b) { if (c) { if (d) { if (e) {} } } } } }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:    `function foo() { if (true) {} }`,
			Options: "[{\"max\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
				},
			},
		},
		{
			Code:            `class C { static { if (1) { if (2) { if (3) {} } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
					Line:      1,
					Column:    38,
				},
			},
		},
		{
			Code:            `if (1) { class C { static { if (1) { if (2) { if (3) {} } } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
					Line:      1,
					Column:    47,
				},
			},
		},
		{
			Code:            `function foo() { if (1) { class C { static { if (1) { if (2) { if (3) {} } } } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
					Line:      1,
					Column:    64,
				},
			},
		},
		{
			Code:            `function foo() { if (1) { class C { static { if (1) { if (2) {} } } } if (2) { if (3) {} } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooDeeply",
					Line:      1,
					Column:    80,
				},
			},
		},
	})
}
