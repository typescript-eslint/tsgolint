// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoObjectConstructorRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":\"latest\",\"sourceType\":\"script\"}}", "no-object-constructor", []ValidTestCase{
		{Code: `new Object(x)`},
		{Code: `Object(x)`},
		{Code: `new globalThis.Object`},
		{Code: `const createObject = Object => new Object()`},
		{Code: `var Object; new Object;`},
		{
			Code:            `new Object()`,
			LanguageOptions: "{\"globals\":{\"Object\":\"off\"}}",
		},
	}, []InvalidTestCase{
		{
			Code: `new Object`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `({})`,
						},
					},
				},
			},
		},
		{
			Code: `Object()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `({})`,
						},
					},
				},
			},
		},
		{
			Code: `const fn = () => Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `const fn = () => ({});`,
						},
					},
				},
			},
		},
		{
			Code: `Object() instanceof Object;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `({}) instanceof Object;`,
						},
					},
				},
			},
		},
		{
			Code: `const obj = Object?.();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `const obj = {};`,
						},
					},
				},
			},
		},
		{
			Code: `(new Object() instanceof Object);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `({} instanceof Object);`,
						},
					},
				},
			},
		},
		{
			Code: `
                foo
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                foo
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                foo()
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                foo()
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                new foo
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                new foo
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                (a++)
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                (a++)
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                ++a
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                ++a
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                const foo = function() {}
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                const foo = function() {}
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                const foo = class {}
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                const foo = class {}
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                foo = this.return
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                foo = this.return
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                var yield = bar.yield
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                var yield = bar.yield
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                var foo = { bar: baz }
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                var foo = { bar: baz }
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                <foo />
                Object()
                `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                <foo />
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                <foo></foo>
                Object()
                `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteralAfterSemicolon",
							Output: `
                <foo></foo>
                ;({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                {}
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                {}
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                function foo() {}
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                function foo() {}
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                class Foo {}
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                class Foo {}
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `foo: Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `foo: ({});`,
						},
					},
				},
			},
		},
		{
			Code: `foo();Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `foo();({});`,
						},
					},
				},
			},
		},
		{
			Code: `{ Object(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `{ ({}); }`,
						},
					},
				},
			},
		},
		{
			Code: `if (a) Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `if (a) ({});`,
						},
					},
				},
			},
		},
		{
			Code: `if (a); else Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `if (a); else ({});`,
						},
					},
				},
			},
		},
		{
			Code: `while (a) Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `while (a) ({});`,
						},
					},
				},
			},
		},
		{
			Code: `
                do Object();
                while (a);
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                do ({});
                while (a);
                `,
						},
					},
				},
			},
		},
		{
			Code: `for (let i = 0; i < 10; i++) Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `for (let i = 0; i < 10; i++) ({});`,
						},
					},
				},
			},
		},
		{
			Code: `for (const prop in obj) Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `for (const prop in obj) ({});`,
						},
					},
				},
			},
		},
		{
			Code: `for (const element of iterable) Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `for (const element of iterable) ({});`,
						},
					},
				},
			},
		},
		{
			Code: `with (obj) Object();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output:    `with (obj) ({});`,
						},
					},
				},
			},
		},
		{
			Code: `
                const foo = () => {}
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                const foo = () => {}
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                a++
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                a++
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                a--
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                a--
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                function foo() {
                    return
                    Object();
                }
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                function foo() {
                    return
                    ({});
                }
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                function * foo() {
                    yield
                    Object();
                }
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                function * foo() {
                    yield
                    ({});
                }
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                do {}
                while (a)
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                do {}
                while (a)
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                debugger
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                debugger
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                for (;;) {
                    break
                    Object()
                }
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                for (;;) {
                    break
                    ({})
                }
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                for (;;) {
                    continue
                    Object()
                }
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                for (;;) {
                    continue
                    ({})
                }
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                foo: break foo
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                foo: break foo
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                foo: while (true) continue foo
                Object()
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                foo: while (true) continue foo
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                const foo = bar
                export { foo }
                Object()
                `,
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                const foo = bar
                export { foo }
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                export { foo } from 'bar'
                Object()
                `,
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                export { foo } from 'bar'
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                export * as foo from 'bar'
                Object()
                `,
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                export * as foo from 'bar'
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                import foo from 'bar'
                Object()
                `,
			LanguageOptions: "{\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                import foo from 'bar'
                ({})
                `,
						},
					},
				},
			},
		},
		{
			Code: `
                var yield = 5;

                yield: while (foo) {
                    if (bar)
                        break yield
                    new Object();
                }
                `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferLiteral",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "useLiteral",
							Output: `
                var yield = 5;

                yield: while (foo) {
                    if (bar)
                        break yield
                    ({});
                }
                `,
						},
					},
				},
			},
		},
	})
}
