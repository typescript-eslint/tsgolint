// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoRestrictedSyntaxRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-restricted-syntax", []ValidTestCase{
		{Code: `doSomething();`},
		{
			Code:    `var foo = 42;`,
			Options: "[\"ConditionalExpression\"]",
		},
		{
			Code:    `foo += 42;`,
			Options: "[\"VariableDeclaration\",\"FunctionExpression\"]",
		},
		{
			Code:    `foo;`,
			Options: "[\"Identifier[name=\\\"bar\\\"]\"]",
		},
		{
			Code:            `() => 5`,
			Options:         "[\"ArrowFunctionExpression > BlockStatement\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `({ foo: 1, bar: 2 })`,
			Options: "[\"Property > Literal.key\"]",
		},
		{
			Code:    `A: for (;;) break;`,
			Options: "[\"BreakStatement[label]\"]",
		},
		{
			Code:    `function foo(bar, baz) {}`,
			Options: "[\"FunctionDeclaration[params.length>2]\"]",
		},
		{
			Code:    `var foo = 42;`,
			Options: "[{\"selector\":\"ConditionalExpression\"}]",
		},
		{
			Code:    `({ foo: 1, bar: 2 })`,
			Options: "[{\"selector\":\"Property > Literal.key\"}]",
		},
		{
			Code:    `({ foo: 1, bar: 2 })`,
			Options: "[{\"selector\":\"FunctionDeclaration[params.length>2]\",\"message\":\"custom error message.\"}]",
		},
		{
			Code:    `console.log(/a/);`,
			Options: "[\"Literal[regex.flags=/./]\"]",
		},
	}, []InvalidTestCase{
		{
			Code:    `var foo = 41;`,
			Options: "[\"VariableDeclaration\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `;function lol(a) { return 42; }`,
			Options: "[\"EmptyStatement\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `try { voila(); } catch (e) { oops(); }`,
			Options: "[\"TryStatement\",\"CallExpression\",\"CatchClause\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
				{
					MessageId: "restrictedSyntax",
				},
				{
					MessageId: "restrictedSyntax",
				},
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `bar;`,
			Options: "[\"Identifier[name=\\\"bar\\\"]\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `bar;`,
			Options: "[\"Identifier\",\"Identifier[name=\\\"bar\\\"]\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:            `() => {}`,
			Options:         "[\"ArrowFunctionExpression > BlockStatement\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `({ foo: 1, 'bar': 2 })`,
			Options: "[\"Property > Literal.key\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `A: for (;;) break A;`,
			Options: "[\"BreakStatement[label]\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `function foo(bar, baz, qux) {}`,
			Options: "[\"FunctionDeclaration[params.length>2]\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `var foo = 41;`,
			Options: "[{\"selector\":\"VariableDeclaration\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `function foo(bar, baz, qux) {}`,
			Options: "[{\"selector\":\"FunctionDeclaration[params.length>2]\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `function foo(bar, baz, qux) {}`,
			Options: "[{\"selector\":\"FunctionDeclaration[params.length>2]\",\"message\":\"custom error message.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `function foo(bar, baz, qux) {}`,
			Options: "[{\"selector\":\"FunctionDeclaration[params.length>2]\",\"message\":\"custom message with {{selector}}\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:    `console.log(/a/i);`,
			Options: "[\"Literal[regex.flags=/./]\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:            `var foo = foo?.bar?.();`,
			Options:         "[\"ChainExpression\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:            `var foo = foo?.bar?.();`,
			Options:         "[\"[optional=true]\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:            `a?.b`,
			Options:         "[\":nth-child(1)\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
		{
			Code:            `const foo = [<div/>, <div/>]`,
			Options:         "[\"* ~ *\"]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedSyntax",
				},
			},
		},
	})
}
