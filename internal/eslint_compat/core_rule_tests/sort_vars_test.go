// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSortVarsRule(t *testing.T) {
	RunRuleTester(t, "{}", "sort-vars", []ValidTestCase{
		{Code: `var a=10, b=4, c='abc'`},
		{Code: `var a, b, c, d`},
		{Code: `var b; var a; var d;`},
		{Code: `var _a, a`},
		{Code: `var A, a`},
		{Code: `var A, b`},
		{
			Code:    `var a, A;`,
			Options: "[{\"ignoreCase\":true}]",
		},
		{
			Code:    `var A, a;`,
			Options: "[{\"ignoreCase\":true}]",
		},
		{
			Code:    `var a, B, c;`,
			Options: "[{\"ignoreCase\":true}]",
		},
		{
			Code:    `var A, b, C;`,
			Options: "[{\"ignoreCase\":true}]",
		},
		{
			Code:            `var {a, b, c} = x;`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {A, b, C} = x;`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var test = [1,2,3];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a,b} = [1,2];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, B, c] = [1, 2, 3];`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [A, B, c] = [1, 2, 3];`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [A, b, C] = [1, 2, 3];`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {a, b, c} = x;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let [a, b, c] = [1, 2, 3];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const {a, b, c} = {a: 1, b: true, c: "Moo"};`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const [a, b, c] = [1, true, "Moo"];`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const [c, a, b] = [1, true, "Moo"];`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a, x: {b, c}} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {c, x: {a, c}} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a, x: [b, c]} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, {b, c}] = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, {x: {b, c}}] = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var a = 42, {b, c } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var b = 42, {a, c } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [b, {x: {a, c}}] = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [b, d, a, c] = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var e, [a, c, d] = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var a, [E, c, D] = [];`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var a, f, [e, c, d] = [1,2,3];`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `export default class {
    render () {
        let {
            b
        } = this,
            a,
            c;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var {} = 1, a`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code:   `var b, a`,
			Output: `var a, b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var b , a`,
			Output: `var a , b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var b,
    a;`,
			Output: `var a,
    b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var b=10, a=20;`,
			Output: `var a=20, b=10;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var b=10, a=20, c=30;`,
			Output: `var a=20, b=10, c=30;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var all=10, a = 1`,
			Output: `var a = 1, all=10`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var b, c, a, d`,
			Output: `var a, b, c, d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var c, d, a, b`,
			Output: `var a, b, c, d`,
			Errors: []InvalidTestCaseError{
				{},
				{},
			},
		},
		{
			Code:   `var a, A;`,
			Output: `var A, a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var a, B;`,
			Output: `var B, a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:   `var a, B, c;`,
			Output: `var B, a, c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:    `var B, a;`,
			Output:  `var a, B;`,
			Options: "[{\"ignoreCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:    `var B, A, c;`,
			Output:  `var A, B, c;`,
			Options: "[{\"ignoreCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:            `var d, a, [b, c] = {};`,
			Output:          `var a, d, [b, c] = {};`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:            `var d, a, [b, {x: {c, e}}] = {};`,
			Output:          `var a, d, [b, {x: {c, e}}] = {};`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:            `var {} = 1, b, a`,
			Output:          `var {} = 1, a, b`,
			Options:         "[{\"ignoreCase\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var b=10, a=f();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var b=10, a=b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:            "var b = 0, a = `${b}`;",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:            "var b = 0, a = `${f()}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var b = 0, c = b, a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var b = 0, c = 0, a = b + c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var b = f(), c, d, a;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code:            "var b = `${f()}`, c, d, a;",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
		{
			Code: `var c, a = b = 0`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "sortVars",
				},
			},
		},
	})
}
