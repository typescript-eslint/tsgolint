// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMaxClassesPerFileRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"script\"}}", "max-classes-per-file", []ValidTestCase{
		{Code: `class Foo {}`},
		{Code: `var x = class {};`},
		{Code: `var x = 5;`},
		{
			Code:    `class Foo {}`,
			Options: "[1]",
		},
		{
			Code: `class Foo {}
class Bar {}`,
			Options: "[2]",
		},
		{
			Code:    `class Foo {}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code: `class Foo {}
class Bar {}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code: `
                class Foo {}
                const myExpression = class {}
            `,
			Options: "[{\"ignoreExpressions\":true,\"max\":1}]",
		},
		{
			Code: `
                class Foo {}
                class Bar {}
                const myExpression = class {}
            `,
			Options: "[{\"ignoreExpressions\":true,\"max\":2}]",
		},
	}, []InvalidTestCase{
		{
			Code: `class Foo {}
class Bar {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code: `class Foo {}
const myExpression = class {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code: `var x = class {};
var y = class {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code: `class Foo {}
var x = class {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code:    `class Foo {} class Bar {}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code:    `class Foo {} class Bar {} class Baz {}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code: `
                class Foo {}
                class Bar {}
                const myExpression = class {}
            `,
			Options: "[{\"ignoreExpressions\":true,\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
		{
			Code: `
                class Foo {}
                class Bar {}
                class Baz {}
                const myExpression = class {}
            `,
			Options: "[{\"ignoreExpressions\":true,\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "maximumExceeded",
				},
			},
		},
	})
}
