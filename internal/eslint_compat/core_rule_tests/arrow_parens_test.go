// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrowParensRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "arrow-parens", []ValidTestCase{
		{Code: `() => {}`},
		{Code: `(a) => {}`},
		{Code: `(a) => a`},
		{Code: `(a) => {
}`},
		{Code: `a.then((foo) => {});`},
		{Code: `a.then((foo) => { if (true) {}; });`},
		{Code: `const f = (/* */a) => a + a;`},
		{Code: `const f = (a/** */) => a + a;`},
		{Code: `const f = (a//
) => a + a;`},
		{Code: `const f = (//
a) => a + a;`},
		{Code: `const f = (/*
 */a//
) => a + a;`},
		{Code: `const f = (/** @type {number} */a/**hello*/) => a + a;`},
		{
			Code:            `a.then(async (foo) => { if (true) {}; });`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:    `() => {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `(a) => {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `(a) => a`,
			Options: "[\"always\"]",
		},
		{
			Code: `(a) => {
}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `a.then((foo) => {});`,
			Options: "[\"always\"]",
		},
		{
			Code:    `a.then((foo) => { if (true) {}; });`,
			Options: "[\"always\"]",
		},
		{
			Code:            `a.then(async (foo) => { if (true) {}; });`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(a: T) => a`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `(a): T => a`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:    `() => {}`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `a => {}`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `a => a`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `a => (a)`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `(a => a)`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `((a => a))`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `([a, b]) => {}`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a, b }) => {}`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `(a = 10) => {}`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `(...a) => a[0]`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `(a, b) => {}`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:            `async a => a`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async ([a, b]) => {}`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async (a, b) => {}`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(a: T) => a`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `(a): T => a`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:    `() => {}`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `a => a`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `a => (a)`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `(a => a)`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `((a => a))`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `([a, b]) => {}`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `([a, b]) => a`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `({ a, b }) => {}`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `({ a, b }) => a + b`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `(a = 10) => {}`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `(...a) => a[0]`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `(a, b) => {}`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:    `a => ({})`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
		},
		{
			Code:            `async a => ({})`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async a => a`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(a: T) => a`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `(a): T => a`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:    `const f = (/** @type {number} */a/**hello*/) => a + a;`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `const f = (/* */a) => a + a;`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `const f = (a/** */) => a + a;`,
			Options: "[\"as-needed\"]",
		},
		{
			Code: `const f = (a//
) => a + a;`,
			Options: "[\"as-needed\"]",
		},
		{
			Code: `const f = (//
a) => a + a;`,
			Options: "[\"as-needed\"]",
		},
		{
			Code: `const f = (/*
 */a//
) => a + a;`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:            `var foo = (a,/**/) => b;`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `var foo = (a , /**/) => b;`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `var foo = (a
,
/**/) => b;`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `var foo = (a,//
) => b;`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `const i = (a/**/,) => a + a;`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `const i = (a 
 /**/,) => a + a;`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:    `var bar = ({/*comment here*/a}) => a`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `var bar = (/*comment here*/{a}) => a`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:            `<T>(a) => b`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T>(a) => b`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T>(a) => b`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `async <T>(a) => b`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `async <T>(a) => b`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `async <T>(a) => b`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T>() => b`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T>() => b`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T>() => b`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T extends A>(a) => b`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T extends A>(a) => b`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T extends A>(a) => b`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T extends (A | B) & C>(a) => b`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T extends (A | B) & C>(a) => b`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<T extends (A | B) & C>(a) => b`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code:   `a => {}`,
			Output: `(a) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code:   `a => a`,
			Output: `(a) => a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a => {
}`,
			Output: `(a) => {
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code:   `a.then(foo => {});`,
			Output: `a.then((foo) => {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    8,
					EndColumn: 11,
				},
			},
		},
		{
			Code:   `a.then(foo => a);`,
			Output: `a.then((foo) => a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    8,
					EndColumn: 11,
				},
			},
		},
		{
			Code:   `a(foo => { if (true) {}; });`,
			Output: `a((foo) => { if (true) {}; });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    3,
					EndColumn: 6,
				},
			},
		},
		{
			Code:            `a(async foo => { if (true) {}; });`,
			Output:          `a(async (foo) => { if (true) {}; });`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    9,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `(a) => a`,
			Output:  `a => a`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:    `(  a  ) => b`,
			Output:  `a => b`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    4,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `(
a
) => b`,
			Output:  `a => b`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      2,
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code:            `(a,) => a`,
			Output:          `a => a`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:            `async (a) => a`,
			Output:          `async a => a`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    8,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `async(a) => a`,
			Output:          `async a => a`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    7,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `typeof((a) => {})`,
			Output:  `typeof(a => {})`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    9,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `function *f() { yield(a) => a; }`,
			Output:  `function *f() { yield a => a; }`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    23,
					EndColumn: 24,
				},
			},
		},
		{
			Code:    `a => {}`,
			Output:  `(a) => {}`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParensBlock",
					Line:      1,
					Column:    1,
					EndColumn: 2,
				},
			},
		},
		{
			Code:    `(a) => a`,
			Output:  `a => a`,
			Options: "[\"as-needed\",{\"requireForBlockBody\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParensInline",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:            `async a => {}`,
			Output:          `async (a) => {}`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParensBlock",
					Line:      1,
					Column:    7,
					EndColumn: 8,
				},
			},
		},
		{
			Code:            `async (a) => a`,
			Output:          `async a => a`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParensInline",
					Line:      1,
					Column:    8,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `async(a) => a`,
			Output:          `async a => a`,
			Options:         "[\"as-needed\",{\"requireForBlockBody\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParensInline",
					Line:      1,
					Column:    7,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `const f = /** @type {number} */(a)/**hello*/ => a + a;`,
			Output:  `const f = /** @type {number} */a/**hello*/ => a + a;`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      1,
					Column:    33,
					EndLine:   1,
					EndColumn: 34,
				},
			},
		},
		{
			Code: `const f = //
(a) => a + a;`,
			Output: `const f = //
a => a + a;`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedParens",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:   `var foo = /**/ a => b;`,
			Output: `var foo = /**/ (a) => b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:   `var bar = a /**/ =>  b;`,
			Output: `var bar = (a) /**/ =>  b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `const foo = a => {};

// comment between 'a' and an unrelated closing paren

bar();`,
			Output: `const foo = (a) => {};

// comment between 'a' and an unrelated closing paren

bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedParens",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
	})
}
