// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestIdLengthRule(t *testing.T) {
	RunRuleTester(t, "{}", "id-length", []ValidTestCase{
		{Code: `var xyz;`},
		{Code: `var xy = 1;`},
		{Code: `function xyz() {};`},
		{Code: `function xyz(abc, de) {};`},
		{Code: `var obj = { abc: 1, de: 2 };`},
		{Code: `var obj = { 'a': 1, bc: 2 };`},
		{Code: `var obj = {}; obj['a'] = 2;`},
		{Code: `abc = d;`},
		{Code: `try { blah(); } catch (err) { /* pass */ }`},
		{Code: `var handler = function ($e) {};`},
		{Code: `var _a = 2`},
		{Code: `var _ad$$ = new $;`},
		{Code: `var xyz = new Œ£Œ£();`},
		{Code: `unrelatedExpressionThatNeedsToBeIgnored();`},
		{Code: `var obj = { 'a': 1, bc: 2 }; obj.tk = obj.a;`},
		{Code: `var query = location.query.q || '';`},
		{Code: `var query = location.query.q ? location.query.q : ''`},
		{
			Code:            `let {a: foo} = bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let foo = { [a]: 1 };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let foo = { [a + b]: 1 };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var x = Foo(42)`,
			Options: "[{\"min\":1}]",
		},
		{
			Code:    `var x = Foo(42)`,
			Options: "[{\"min\":0}]",
		},
		{
			Code:    `foo.$x = Foo(42)`,
			Options: "[{\"min\":1}]",
		},
		{
			Code:    `var lalala = Foo(42)`,
			Options: "[{\"max\":6}]",
		},
		{
			Code:    `for (var q, h=0; h < 10; h++) { console.log(h); q++; }`,
			Options: "[{\"exceptions\":[\"h\",\"q\"]}]",
		},
		{
			Code:            `(num) => { num * num };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo(num = 0) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class MyClass { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Foo { method() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo(...args) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { prop } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { [a]: prop } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { a: foo } = {};`,
			Options:         "[{\"min\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { prop: foo } = {};`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { longName: foo } = {};`,
			Options:         "[{\"min\":3,\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { foo: a } = {};`,
			Options:         "[{\"exceptions\":[\"a\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { a: { b: { c: longName } } } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: obj.x.y.z } = {});`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import something from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export var num = 0;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as something from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { x } from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { x as x } from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { 'x' as x } from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { x as foo } from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { longName } from 'y';`,
			Options:         "[{\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { x as bar } from 'y';`,
			Options:         "[{\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `({ prop: obj.x.y.something } = {});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ prop: obj.longName } = {});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var obj = { a: 1, bc: 2 };`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:            `var obj = { [a]: 2 };`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var obj = {}; obj.a = 1; obj.bc = 2;`,
			Options: "[{\"properties\":\"never\"}]",
		},
		{
			Code:            `({ prop: obj.x } = {});`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var obj = { aaaaa: 1 };`,
			Options: "[{\"max\":4,\"properties\":\"never\"}]",
		},
		{
			Code:    `var obj = {}; obj.aaaaa = 1;`,
			Options: "[{\"max\":4,\"properties\":\"never\"}]",
		},
		{
			Code:            `({ a: obj.x.y.z } = {});`,
			Options:         "[{\"max\":4,\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ prop: obj.xxxxx } = {});`,
			Options:         "[{\"max\":4,\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var arr = [i,j,f,b]`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo([arr]) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x} = foo;`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x, y: {z}} = foo;`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let foo = { [a]: 1 };`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let foo = { [a + b]: 1 };`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function BEFORE_send() {};`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"^BEFORE_\"]}]",
		},
		{
			Code:    `function BEFORE_send() {};`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"^BEFORE_\",\"send$\"]}]",
		},
		{
			Code:    `function BEFORE_send() {};`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"^BEFORE_\",\"^A\",\"^Z\"]}]",
		},
		{
			Code:    `function BEFORE_send() {};`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"^A\",\"^BEFORE_\",\"^Z\"]}]",
		},
		{
			Code:    `var x = 1 ;`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"[x-z]\"]}]",
		},
		{
			Code:            `class Foo { #xyz() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { xyz = 1 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { #xyz = 1 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { #abc() {} }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { abc = 1 }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class Foo { #abc = 1 }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `var †Æü = 2`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var ËëõÛ†ÑÄ = 2`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var a = { êåò: 1 };`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(êåò) => { êåò * êåò };`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class †Æü { }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class F { êåò() {} }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class F { #êåò() {} }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class F { êåò = 1 }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class F { #êåò = 1 }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function f(...êåò) { }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function f([êåò]) { }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [ êåò ] = a;`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { p: [êåò]} = {};`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function f({êåò}) { }`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { êåò } = {};`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { p: êåò} = {};`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ prop: o.êåò } = {});`,
			Options:         "[{\"min\":1,\"max\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import foo from 'foo.json' with { type: 'json' }`,
			Options:         "[{\"min\":1,\"max\":3,\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `export * from 'foo.json' with { type: 'json' }`,
			Options:         "[{\"min\":1,\"max\":3,\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `export { default } from 'foo.json' with { type: 'json' }`,
			Options:         "[{\"min\":1,\"max\":3,\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { with: { type: 'json' } })`,
			Options:         "[{\"min\":1,\"max\":3,\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { 'with': { type: 'json' } })`,
			Options:         "[{\"min\":1,\"max\":3,\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { with: { type } })`,
			Options:         "[{\"min\":1,\"max\":3,\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
	}, []InvalidTestCase{
		{
			Code: `var x = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `var x;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `obj.e = document.body;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `function x() {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `function xyz(a) {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `var obj = { a: 1, bc: 2 };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `try { blah(); } catch (e) { /* pass */ }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `var handler = function (e) {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `for (var i=0; i < 10; i++) { console.log(i); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code: `var j=0; while (j > -10) { console.log(--j); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var [i] = arr;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var [,i,a] = arr;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo([a]) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `import x from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `import { x as z } from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Column:    15,
				},
			},
		},
		{
			Code:            `import { foo as z } from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Column:    17,
				},
			},
		},
		{
			Code:            `import { 'foo' as z } from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Column:    19,
				},
			},
		},
		{
			Code:            `import * as x from 'module';`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `import longName from 'module';`,
			Options:         "[{\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:            `import * as longName from 'module';`,
			Options:         "[{\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:            `import { foo as longName } from 'module';`,
			Options:         "[{\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
					Column:    17,
				},
			},
		},
		{
			Code:    `var _$xt_$ = Foo(42)`,
			Options: "[{\"min\":2,\"max\":4}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:    `var _$x$_t$ = Foo(42)`,
			Options: "[{\"min\":2,\"max\":4}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:    `var toString;`,
			Options: "[{\"max\":5}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:            `(a) => { a * a };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo(x = 0) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class x { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class Foo { x() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo(...x) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo({x}) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo({x: a}) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo({x: a, longName}) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo({ longName: a }) {}`,
			Options:         "[{\"min\":3,\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo({ prop: longName }) {};`,
			Options:         "[{\"min\":3,\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:            `function foo({ a: b }) {};`,
			Options:         "[{\"exceptions\":[\"a\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `var hasOwnProperty;`,
			Options: "[{\"max\":10,\"exceptions\":[]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:            `function foo({ a: { b: { c: d, e } } }) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    29,
				},
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    32,
				},
			},
		},
		{
			Code:            `var { x} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { x: a} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { a: a} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { prop: a } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { longName: a } = {};`,
			Options:         "[{\"min\":3,\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { prop: [x] } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { prop: [[x]] } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { prop: longName } = {};`,
			Options:         "[{\"min\":3,\"max\":5}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:            `var { x: a} = {};`,
			Options:         "[{\"exceptions\":[\"x\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:            `var { a: { b: { c: d } } } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:            `var { a: { b: { c: d, e } } } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    20,
				},
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:            `var { a: { b: { c, e: longName } } } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:            `var { a: { b: { c: d, e: longName } } } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:            `var { a, b: { c: d, e: longName } } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    7,
				},
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:            `import x from 'y';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `export var x = 0;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `({ a: obj.x.y.z } = {});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `({ prop: obj.x } = {});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:    `var x = 1;`,
			Options: "[{\"properties\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var {prop: x} = foo;`,
			Options:         "[{\"properties\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:            `var foo = {x: prop};`,
			Options:         "[{\"properties\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:    `function BEFORE_send() {};`,
			Options: "[{\"min\":3,\"max\":5}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:    `function NOTMATCHED_send() {};`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"^BEFORE_\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:    `function N() {};`,
			Options: "[{\"min\":3,\"max\":5,\"exceptionPatterns\":[\"^BEFORE_\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class Foo { #x() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShortPrivate",
				},
			},
		},
		{
			Code:            `class Foo { x = 1 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class Foo { #x = 1 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShortPrivate",
				},
			},
		},
		{
			Code:            `class Foo { #abcdefg() {} }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLongPrivate",
				},
			},
		},
		{
			Code:            `class Foo { abcdefg = 1 }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLong",
				},
			},
		},
		{
			Code:            `class Foo { #abcdefg = 1 }`,
			Options:         "[{\"max\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooLongPrivate",
				},
			},
		},
		{
			Code:            `var †Æü = 2`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var ËëõÛ†ÑÄ = 2`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var myObj = { êåò: 1 };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `(êåò) => { êåò * êåò };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class †Æü { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class Foo { êåò() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class Foo1 { #êåò() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShortPrivate",
				},
			},
		},
		{
			Code:            `class Foo2 { êåò = 1 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `class Foo3 { #êåò = 1 }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShortPrivate",
				},
			},
		},
		{
			Code:            `function foo1(...êåò) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo([êåò]) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var [ êåò ] = arr;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { prop: [êåò]} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `function foo({êåò}) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { êåò } = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `var { prop: êåò} = {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
		{
			Code:            `({ prop: obj.êåò } = {});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "tooShort",
				},
			},
		},
	})
}
