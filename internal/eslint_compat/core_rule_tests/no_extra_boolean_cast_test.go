// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoExtraBooleanCastRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-extra-boolean-cast", []ValidTestCase{
		{Code: `Boolean(bar, !!baz);`},
		{Code: `var foo = !!bar;`},
		{Code: `function foo() { return !!bar; }`},
		{Code: `var foo = bar() ? !!baz : !!bat`},
		{Code: `for(!!foo;;) {}`},
		{Code: `for(;; !!foo) {}`},
		{Code: `var foo = Boolean(bar);`},
		{Code: `function foo() { return Boolean(bar); }`},
		{Code: `var foo = bar() ? Boolean(baz) : Boolean(bat)`},
		{Code: `for(Boolean(foo);;) {}`},
		{Code: `for(;; Boolean(foo)) {}`},
		{Code: `if (new Boolean(foo)) {}`},
		{Code: `if ((Boolean(1), 2)) {}`},
		{
			Code:    `var foo = bar || !!baz`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = bar && !!baz`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = bar || (baz && !!bat)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `function foo() { return (!!bar || baz); }`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = bar() ? (!!baz && bat) : (!!bat && qux)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `for(!!(foo && bar);;) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `for(;; !!(foo || bar)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = Boolean(bar) || baz;`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = bar || Boolean(baz);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = Boolean(bar) || Boolean(baz);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `function foo() { return (Boolean(bar) || baz); }`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `var foo = bar() ? Boolean(baz) || bat : Boolean(bat)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `for(Boolean(foo) || bar;;) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `for(;; Boolean(foo) || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `if (new Boolean(foo) || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{Code: `if (!!foo || bar) {}`},
		{
			Code:    `if (!!foo || bar) {}`,
			Options: "[{}]",
		},
		{
			Code:    `if (!!foo || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":false}]",
		},
		{
			Code:    `if ((!!foo || bar) === baz) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:            `if (!!foo ?? bar) {}`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `var foo = bar || !!baz`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = bar && !!baz`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = bar || (baz && !!bat)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `function foo() { return (!!bar || baz); }`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = bar() ? (!!baz && bat) : (!!bat && qux)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `for(!!(foo && bar);;) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `for(;; !!(foo || bar)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = Boolean(bar) || baz;`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = bar || Boolean(baz);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = Boolean(bar) || Boolean(baz);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `function foo() { return (Boolean(bar) || baz); }`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `var foo = bar() ? Boolean(baz) || bat : Boolean(bat)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `for(Boolean(foo) || bar;;) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `for(;; Boolean(foo) || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `if (new Boolean(foo) || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:    `if (!!foo || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":false}]",
		},
		{
			Code:    `if ((!!foo || bar) === baz) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code:            `if (!!foo ?? bar) {}`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if ((1, Boolean(2), 3)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
		},
		{
			Code: `Boolean((1, 2, Boolean(3)))`,
		},
		{
			Code:    `Boolean((1, 2, Boolean(3)))`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `Boolean((1, 2, Boolean(3)))`,
			Options: "[{\"enforceForLogicalOperands\":false}]",
		},
		{
			Code: `Boolean(foo ? Boolean(bar) : Boolean(baz))`,
		},
		{
			Code:    `Boolean(foo ? Boolean(bar) : Boolean(baz))`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `Boolean(foo ? Boolean(bar) : Boolean(baz))`,
			Options: "[{\"enforceForLogicalOperands\":false}]",
		},
		{
			Code: `Boolean(foo ?? Boolean(bar))`,
		},
		{
			Code:    `Boolean(foo ?? Boolean(bar))`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
		},
		{
			Code:    `Boolean(foo ?? Boolean(bar))`,
			Options: "[{\"enforceForLogicalOperands\":false}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `if (!!foo) {}`,
			Output: `if (foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    5,
					EndColumn: 10,
				},
			},
		},
		{
			Code:   `do {} while (!!foo)`,
			Output: `do {} while (foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    14,
				},
			},
		},
		{
			Code:   `while (!!foo) {}`,
			Output: `while (foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    8,
				},
			},
		},
		{
			Code:   `!!foo ? bar : baz`,
			Output: `foo ? bar : baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    1,
				},
			},
		},
		{
			Code:   `for (; !!foo;) {}`,
			Output: `for (; foo;) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    8,
				},
			},
		},
		{
			Code:   `!!!foo`,
			Output: `!foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    2,
				},
			},
		},
		{
			Code:   `Boolean(!!foo)`,
			Output: `Boolean(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    9,
				},
			},
		},
		{
			Code:   `new Boolean(!!foo)`,
			Output: `new Boolean(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    13,
				},
			},
		},
		{
			Code:   `if (Boolean(foo)) {}`,
			Output: `if (foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (Boolean(foo))`,
			Output: `do {} while (foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (Boolean(foo)) {}`,
			Output: `while (foo) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean(foo) ? bar : baz`,
			Output: `foo ? bar : baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; Boolean(foo);) {}`,
			Output: `for (; foo;) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(foo)`,
			Output: `!foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(foo && bar)`,
			Output: `!(foo && bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(foo + bar)`,
			Output: `!(foo + bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(+foo)`,
			Output: `!+foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(foo())`,
			Output: `!foo()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(foo = bar)`,
			Output: `!(foo = bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `!Boolean(...foo);`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!Boolean(foo, bar());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean((foo, bar()));`,
			Output: `!(foo, bar());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean();`,
			Output: `true;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!(Boolean());`,
			Output: `true;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (!Boolean()) { foo() }`,
			Output: `if (true) { foo() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!Boolean()) { foo() }`,
			Output: `while (true) { foo() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `var foo = Boolean() ? bar() : baz()`,
			Output: `var foo = false ? bar() : baz()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (Boolean()) { foo() }`,
			Output: `if (false) { foo() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (Boolean()) { foo() }`,
			Output: `while (false) { foo() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean(Boolean(foo))`,
			Output: `Boolean(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean(!!foo, bar)`,
			Output: `Boolean(foo, bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield!!a ? b : c }`,
			Output:          `function *foo() { yield a ? b : c }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield!! a ? b : c }`,
			Output:          `function *foo() { yield a ? b : c }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield! !a ? b : c }`,
			Output:          `function *foo() { yield a ? b : c }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield !!a ? b : c }`,
			Output:          `function *foo() { yield a ? b : c }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield(!!a) ? b : c }`,
			Output:          `function *foo() { yield(a) ? b : c }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield/**/!!a ? b : c }`,
			Output:          `function *foo() { yield/**/a ? b : c }`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `x=!!a ? b : c `,
			Output: `x=a ? b : c `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `void!Boolean()`,
			Output: `void true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `void! Boolean()`,
			Output: `void true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `typeof!Boolean()`,
			Output: `typeof true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `(!Boolean())`,
			Output: `(true)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `+!Boolean()`,
			Output: `+true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `void !Boolean()`,
			Output: `void true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `void(!Boolean())`,
			Output: `void(true)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `void/**/!Boolean()`,
			Output: `void/**/true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!/**/!!foo`,
			Output: `!/**/foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code: `!!/**/!foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code: `!!!/**/foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!!foo/**/`,
			Output: `!foo/**/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code: `if(!/**/!foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code: `(!!/**/foo ? 1 : 2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!/**/Boolean(foo)`,
			Output: `!/**/foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!Boolean/**/(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!Boolean(/**/foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!Boolean(foo/**/)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(foo)/**/`,
			Output: `!foo/**/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `if(Boolean/**/(foo));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `(Boolean(foo/**/) ? 1 : 2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `/**/!Boolean()`,
			Output: `/**/true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!/**/Boolean()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!Boolean/**/()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `!Boolean(/**/)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean()/**/`,
			Output: `true/**/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `if(!/**/Boolean());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `(!Boolean(/**/) ? 1 : 2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if(/**/Boolean());`,
			Output: `if(/**/false);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `if(Boolean/**/());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `if(Boolean(/**/));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if(Boolean()/**/);`,
			Output: `if(false/**/);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `(Boolean/**/() ? 1 : 2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!foo || bar) {}`,
			Output:  `if (foo || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    5,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `if (!!foo && bar) {}`,
			Output:  `if (foo && bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    5,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `if ((!!foo || bar) && bat) {}`,
			Output:  `if ((foo || bar) && bat) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    6,
					EndColumn: 11,
				},
			},
		},
		{
			Code:    `if (foo && !!bar) {}`,
			Output:  `if (foo && bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    12,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `do {} while (!!foo || bar)`,
			Output:  `do {} while (foo || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    14,
				},
			},
		},
		{
			Code:    `while (!!foo || bar) {}`,
			Output:  `while (foo || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    8,
				},
			},
		},
		{
			Code:    `!!foo && bat ? bar : baz`,
			Output:  `foo && bat ? bar : baz`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    1,
				},
			},
		},
		{
			Code:    `for (; !!foo || bar;) {}`,
			Output:  `for (; foo || bar;) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    8,
				},
			},
		},
		{
			Code:    `!!!foo || bar`,
			Output:  `!foo || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    2,
				},
			},
		},
		{
			Code:    `Boolean(!!foo || bar)`,
			Output:  `Boolean(foo || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    9,
				},
			},
		},
		{
			Code:    `new Boolean(!!foo || bar)`,
			Output:  `new Boolean(foo || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    13,
				},
			},
		},
		{
			Code:    `if (Boolean(foo) || bar) {}`,
			Output:  `if (foo || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `do {} while (Boolean(foo) || bar)`,
			Output:  `do {} while (foo || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `while (Boolean(foo) || bar) {}`,
			Output:  `while (foo || bar) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `Boolean(foo) || bat ? bar : baz`,
			Output:  `foo || bat ? bar : baz`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `for (; Boolean(foo) || bar;) {}`,
			Output:  `for (; foo || bar;) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo) || bar`,
			Output:  `!foo || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo && bar) || bat`,
			Output:  `!(foo && bar) || bat`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo + bar) || bat`,
			Output:  `!(foo + bar) || bat`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(+foo)  || bar`,
			Output:  `!+foo  || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo()) || bar`,
			Output:  `!foo() || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo() || bar)`,
			Output:  `!(foo() || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo = bar) || bat`,
			Output:  `!(foo = bar) || bat`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `!Boolean(...foo) || bar;`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo, bar()) || bar;`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean((foo, bar()) || bat);`,
			Output:  `!((foo, bar()) || bat);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean() || bar;`,
			Output:  `true || bar;`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!(Boolean()) || bar;`,
			Output:  `true || bar;`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!Boolean() || bar) { foo() }`,
			Output:  `if (true || bar) { foo() }`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `while (!Boolean() || bar) { foo() }`,
			Output:  `while (true || bar) { foo() }`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `var foo = Boolean() || bar ? bar() : baz()`,
			Output:  `var foo = false || bar ? bar() : baz()`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (Boolean() || bar) { foo() }`,
			Output:  `if (false || bar) { foo() }`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `while (Boolean() || bar) { foo() }`,
			Output:  `while (false || bar) { foo() }`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `function *foo() { yield(!!a || d) ? b : c }`,
			Output:          `function *foo() { yield(a || d) ? b : c }`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield(!! a || d) ? b : c }`,
			Output:          `function *foo() { yield(a || d) ? b : c }`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield(! !a || d) ? b : c }`,
			Output:          `function *foo() { yield(a || d) ? b : c }`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield (!!a || d) ? b : c }`,
			Output:          `function *foo() { yield (a || d) ? b : c }`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield/**/(!!a || d) ? b : c }`,
			Output:          `function *foo() { yield/**/(a || d) ? b : c }`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `x=!!a || d ? b : c `,
			Output:  `x=a || d ? b : c `,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `void(!Boolean() || bar)`,
			Output:  `void(true || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `void(! Boolean() || bar)`,
			Output:  `void(true || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `typeof(!Boolean() || bar)`,
			Output:  `typeof(true || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(!Boolean() || bar)`,
			Output:  `(true || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `void/**/(!Boolean() || bar)`,
			Output:  `void/**/(true || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!/**/(!!foo || bar)`,
			Output:  `!/**/(foo || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!!/**/!foo || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!!!/**/foo || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!(!!foo || bar)/**/`,
			Output:  `!(foo || bar)/**/`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if(!/**/!foo || bar);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `(!!/**/foo || bar ? 1 : 2)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!/**/(Boolean(foo) || bar)`,
			Output:  `!/**/(foo || bar)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean/**/(foo) || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(/**/foo) || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo/**/) || bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!(Boolean(foo)|| bar)/**/`,
			Output:  `!(foo|| bar)/**/`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean/**/(foo) || bar);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(Boolean(foo/**/)|| bar ? 1 : 2)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `/**/!Boolean()|| bar`,
			Output:  `/**/true|| bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!/**/Boolean()|| bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean/**/()|| bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(/**/)|| bar`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(!Boolean()|| bar)/**/`,
			Output:  `(true|| bar)/**/`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(!/**/Boolean()|| bar);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(!Boolean(/**/) || bar ? 1 : 2)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(/**/Boolean()|| bar);`,
			Output:  `if(/**/false|| bar);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean/**/()|| bar);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean(/**/)|| bar);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean()|| bar/**/);`,
			Output:  `if(false|| bar/**/);`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(Boolean/**/()|| bar ? 1 : 2)`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a && !!(b ? c : d)){}`,
			Output:  `if (a && (b ? c : d)){}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    10,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `function *foo() { yield!!a || d ? b : c }`,
			Output:          `function *foo() { yield a || d ? b : c }`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    24,
					EndColumn: 27,
				},
			},
		},
		{
			Code:    `if (!!foo || bar) {}`,
			Output:  `if (foo || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    5,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `if (!!foo && bar) {}`,
			Output:  `if (foo && bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    5,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `if ((!!foo || bar) && bat) {}`,
			Output:  `if ((foo || bar) && bat) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    6,
					EndColumn: 11,
				},
			},
		},
		{
			Code:    `if (foo && !!bar) {}`,
			Output:  `if (foo && bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    12,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `do {} while (!!foo || bar)`,
			Output:  `do {} while (foo || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    14,
				},
			},
		},
		{
			Code:    `while (!!foo || bar) {}`,
			Output:  `while (foo || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    8,
				},
			},
		},
		{
			Code:    `!!foo && bat ? bar : baz`,
			Output:  `foo && bat ? bar : baz`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    1,
				},
			},
		},
		{
			Code:    `for (; !!foo || bar;) {}`,
			Output:  `for (; foo || bar;) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    8,
				},
			},
		},
		{
			Code:    `!!!foo || bar`,
			Output:  `!foo || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    2,
				},
			},
		},
		{
			Code:    `Boolean(!!foo || bar)`,
			Output:  `Boolean(foo || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    9,
				},
			},
		},
		{
			Code:    `new Boolean(!!foo || bar)`,
			Output:  `new Boolean(foo || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    13,
				},
			},
		},
		{
			Code:    `if (Boolean(foo) || bar) {}`,
			Output:  `if (foo || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `do {} while (Boolean(foo) || bar)`,
			Output:  `do {} while (foo || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `while (Boolean(foo) || bar) {}`,
			Output:  `while (foo || bar) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `Boolean(foo) || bat ? bar : baz`,
			Output:  `foo || bat ? bar : baz`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `for (; Boolean(foo) || bar;) {}`,
			Output:  `for (; foo || bar;) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo) || bar`,
			Output:  `!foo || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo && bar) || bat`,
			Output:  `!(foo && bar) || bat`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo + bar) || bat`,
			Output:  `!(foo + bar) || bat`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(+foo)  || bar`,
			Output:  `!+foo  || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo()) || bar`,
			Output:  `!foo() || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo() || bar)`,
			Output:  `!(foo() || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo = bar) || bat`,
			Output:  `!(foo = bar) || bat`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `!Boolean(...foo) || bar;`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo, bar()) || bar;`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean((foo, bar()) || bat);`,
			Output:  `!((foo, bar()) || bat);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean() || bar;`,
			Output:  `true || bar;`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!(Boolean()) || bar;`,
			Output:  `true || bar;`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!Boolean() || bar) { foo() }`,
			Output:  `if (true || bar) { foo() }`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `while (!Boolean() || bar) { foo() }`,
			Output:  `while (true || bar) { foo() }`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `var foo = Boolean() || bar ? bar() : baz()`,
			Output:  `var foo = false || bar ? bar() : baz()`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (Boolean() || bar) { foo() }`,
			Output:  `if (false || bar) { foo() }`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `while (Boolean() || bar) { foo() }`,
			Output:  `while (false || bar) { foo() }`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `function *foo() { yield(!!a || d) ? b : c }`,
			Output:          `function *foo() { yield(a || d) ? b : c }`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield(!! a || d) ? b : c }`,
			Output:          `function *foo() { yield(a || d) ? b : c }`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield(! !a || d) ? b : c }`,
			Output:          `function *foo() { yield(a || d) ? b : c }`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield (!!a || d) ? b : c }`,
			Output:          `function *foo() { yield (a || d) ? b : c }`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `function *foo() { yield/**/(!!a || d) ? b : c }`,
			Output:          `function *foo() { yield/**/(a || d) ? b : c }`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `x=!!a || d ? b : c `,
			Output:  `x=a || d ? b : c `,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `void(!Boolean() || bar)`,
			Output:  `void(true || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `void(! Boolean() || bar)`,
			Output:  `void(true || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `typeof(!Boolean() || bar)`,
			Output:  `typeof(true || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(!Boolean() || bar)`,
			Output:  `(true || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `void/**/(!Boolean() || bar)`,
			Output:  `void/**/(true || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!/**/(!!foo || bar)`,
			Output:  `!/**/(foo || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!!/**/!foo || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!!!/**/foo || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!(!!foo || bar)/**/`,
			Output:  `!(foo || bar)/**/`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if(!/**/!foo || bar);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `(!!/**/foo || bar ? 1 : 2)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `!/**/(Boolean(foo) || bar)`,
			Output:  `!/**/(foo || bar)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean/**/(foo) || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(/**/foo) || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(foo/**/) || bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!(Boolean(foo)|| bar)/**/`,
			Output:  `!(foo|| bar)/**/`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean/**/(foo) || bar);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(Boolean(foo/**/)|| bar ? 1 : 2)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `/**/!Boolean()|| bar`,
			Output:  `/**/true|| bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!/**/Boolean()|| bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean/**/()|| bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `!Boolean(/**/)|| bar`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(!Boolean()|| bar)/**/`,
			Output:  `(true|| bar)/**/`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(!/**/Boolean()|| bar);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(!Boolean(/**/) || bar ? 1 : 2)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(/**/Boolean()|| bar);`,
			Output:  `if(/**/false|| bar);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean/**/()|| bar);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean(/**/)|| bar);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if(Boolean()|| bar/**/);`,
			Output:  `if(false|| bar/**/);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `(Boolean/**/()|| bar ? 1 : 2)`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a && !!(b ? c : d)){}`,
			Output:  `if (a && (b ? c : d)){}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    10,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `function *foo() { yield!!a || d ? b : c }`,
			Output:          `function *foo() { yield a || d ? b : c }`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
					Column:    24,
					EndColumn: 27,
				},
			},
		},
		{
			Code:   `Boolean(!!(a, b))`,
			Output: `Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(Boolean((a, b)))`,
			Output: `Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean((!!(a, b)))`,
			Output: `Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean((Boolean((a, b))))`,
			Output: `Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean(!(!(a, b)))`,
			Output: `Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean((!(!(a, b))))`,
			Output: `Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(!!(a = b))`,
			Output: `Boolean(a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean((!!(a = b)))`,
			Output: `Boolean((a = b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(Boolean(a = b))`,
			Output: `Boolean(a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean(Boolean((a += b)))`,
			Output: `Boolean(a += b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean(!!(a === b))`,
			Output: `Boolean(a === b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(!!((a !== b)))`,
			Output: `Boolean(a !== b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(!!a.b)`,
			Output: `Boolean(a.b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(Boolean((a)))`,
			Output: `Boolean(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `Boolean((!!(a)))`,
			Output: `Boolean((a))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(!!(a, b))`,
			Output: `new Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(Boolean((a, b)))`,
			Output: `new Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `new Boolean((!!(a, b)))`,
			Output: `new Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean((Boolean((a, b))))`,
			Output: `new Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `new Boolean(!(!(a, b)))`,
			Output: `new Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean((!(!(a, b))))`,
			Output: `new Boolean((a, b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(!!(a = b))`,
			Output: `new Boolean(a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean((!!(a = b)))`,
			Output: `new Boolean((a = b))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(Boolean(a = b))`,
			Output: `new Boolean(a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `new Boolean(Boolean((a += b)))`,
			Output: `new Boolean(a += b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `new Boolean(!!(a === b))`,
			Output: `new Boolean(a === b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(!!((a !== b)))`,
			Output: `new Boolean(a !== b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(!!a.b)`,
			Output: `new Boolean(a.b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `new Boolean(Boolean((a)))`,
			Output: `new Boolean(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `new Boolean((!!(a)))`,
			Output: `new Boolean((a))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (!!(a, b));`,
			Output: `if (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (Boolean((a, b)));`,
			Output: `if (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (!(!(a, b)));`,
			Output: `if (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (!!(a = b));`,
			Output: `if (a = b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (Boolean(a = b));`,
			Output: `if (a = b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (!!(a > b));`,
			Output: `if (a > b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (Boolean(a === b));`,
			Output: `if (a === b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (!!f(a));`,
			Output: `if (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (Boolean(f(a)));`,
			Output: `if (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (!!(f(a)));`,
			Output: `if (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if ((!!f(a)));`,
			Output: `if ((f(a)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if ((Boolean(f(a))));`,
			Output: `if ((f(a)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `if (!!a);`,
			Output: `if (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `if (Boolean(a));`,
			Output: `if (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!!(a, b));`,
			Output: `while (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while (Boolean((a, b)));`,
			Output: `while (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!(!(a, b)));`,
			Output: `while (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while (!!(a = b));`,
			Output: `while (a = b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while (Boolean(a = b));`,
			Output: `while (a = b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!!(a > b));`,
			Output: `while (a > b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while (Boolean(a === b));`,
			Output: `while (a === b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!!f(a));`,
			Output: `while (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while (Boolean(f(a)));`,
			Output: `while (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!!(f(a)));`,
			Output: `while (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while ((!!f(a)));`,
			Output: `while ((f(a)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while ((Boolean(f(a))));`,
			Output: `while ((f(a)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `while (!!a);`,
			Output: `while (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `while (Boolean(a));`,
			Output: `while (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (!!(a, b));`,
			Output: `do {} while (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while (Boolean((a, b)));`,
			Output: `do {} while (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (!(!(a, b)));`,
			Output: `do {} while (a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while (!!(a = b));`,
			Output: `do {} while (a = b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while (Boolean(a = b));`,
			Output: `do {} while (a = b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (!!(a > b));`,
			Output: `do {} while (a > b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while (Boolean(a === b));`,
			Output: `do {} while (a === b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (!!f(a));`,
			Output: `do {} while (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while (Boolean(f(a)));`,
			Output: `do {} while (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (!!(f(a)));`,
			Output: `do {} while (f(a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while ((!!f(a)));`,
			Output: `do {} while ((f(a)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while ((Boolean(f(a))));`,
			Output: `do {} while ((f(a)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `do {} while (!!a);`,
			Output: `do {} while (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `do {} while (Boolean(a));`,
			Output: `do {} while (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; !!(a, b););`,
			Output: `for (; a, b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; Boolean((a, b)););`,
			Output: `for (; a, b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; !(!(a, b)););`,
			Output: `for (; a, b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; !!(a = b););`,
			Output: `for (; a = b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; Boolean(a = b););`,
			Output: `for (; a = b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; !!(a > b););`,
			Output: `for (; a > b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; Boolean(a === b););`,
			Output: `for (; a === b;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; !!f(a););`,
			Output: `for (; f(a););`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; Boolean(f(a)););`,
			Output: `for (; f(a););`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; !!(f(a)););`,
			Output: `for (; f(a););`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; (!!f(a)););`,
			Output: `for (; (f(a)););`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; (Boolean(f(a))););`,
			Output: `for (; (f(a)););`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `for (; !!a;);`,
			Output: `for (; a;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `for (; Boolean(a););`,
			Output: `for (; a;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!(a, b) ? c : d`,
			Output: `(a, b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `(!!(a, b)) ? c : d`,
			Output: `(a, b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean((a, b)) ? c : d`,
			Output: `(a, b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!(a = b) ? c : d`,
			Output: `(a = b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(a -= b) ? c : d`,
			Output: `(a -= b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `(Boolean((a *= b))) ? c : d`,
			Output: `(a *= b) ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!(a ? b : c) ? d : e`,
			Output: `(a ? b : c) ? d : e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(a ? b : c) ? d : e`,
			Output: `(a ? b : c) ? d : e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!(a || b) ? c : d`,
			Output: `a || b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(a && b) ? c : d`,
			Output: `a && b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!(a === b) ? c : d`,
			Output: `a === b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(a < b) ? c : d`,
			Output: `a < b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!((a !== b)) ? c : d`,
			Output: `a !== b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean((a >= b)) ? c : d`,
			Output: `a >= b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!+a ? b : c`,
			Output: `+a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!+(a) ? b : c`,
			Output: `+(a) ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(!a) ? b : c`,
			Output: `!a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!f(a) ? b : c`,
			Output: `f(a) ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `(!!f(a)) ? b : c`,
			Output: `(f(a)) ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(a.b) ? c : d`,
			Output: `a.b ? c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!a ? b : c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `Boolean(a) ? b : c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(a, b)`,
			Output: `!(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean((a, b))`,
			Output: `!(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(a = b)`,
			Output: `!(a = b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!(!(a += b))`,
			Output: `!(a += b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!(!!(a += b))`,
			Output: `!(a += b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean(a -= b)`,
			Output: `!(a -= b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean((a -= b))`,
			Output: `!(a -= b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!(Boolean(a -= b))`,
			Output: `!(a -= b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(a || b)`,
			Output: `!(a || b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean(a || b)`,
			Output: `!(a || b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(a && b)`,
			Output: `!(a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean(a && b)`,
			Output: `!(a && b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(a != b)`,
			Output: `!(a != b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!!(a === b)`,
			Output: `!(a === b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `var x = !Boolean(a > b)`,
			Output: `var x = !(a > b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(a - b)`,
			Output: `!(a - b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `!!!(a ** b)`,
			Output:          `!(a ** b)`,
			LanguageOptions: "{\"ecmaVersion\":2016}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `!Boolean(a ** b)`,
			Output:          `!(a ** b)`,
			LanguageOptions: "{\"ecmaVersion\":2016}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `async function f() { !!!(await a) }`,
			Output:          `async function f() { !await a }`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `async function f() { !Boolean(await a) }`,
			Output:          `async function f() { !await a }`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!!a`,
			Output: `!!a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!(!(!a))`,
			Output: `!!a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean(!a)`,
			Output: `!!a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean((!a))`,
			Output: `!!a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(!(a))`,
			Output: `!!(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!(Boolean(!a))`,
			Output: `!(!a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!+a`,
			Output: `!+a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!!(+a)`,
			Output: `!+a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!(!+a)`,
			Output: `!+a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!(!!+a)`,
			Output: `!(+a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean((-a))`,
			Output: `!-a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!Boolean(-(a))`,
			Output: `!-(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!(--a)`,
			Output: `!--a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean(a++)`,
			Output: `!a++`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:   `!!!f(a)`,
			Output: `!f(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!!(f(a))`,
			Output: `!f(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!!!a`,
			Output: `!a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:   `!Boolean(a)`,
			Output: `!a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a, b) || !!(c, d)) {}`,
			Output:  `if ((a, b) || (c, d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean((a, b)) || Boolean((c, d))) {}`,
			Output:  `if ((a, b) || (c, d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((!!((a, b))) || (!!((c, d)))) {}`,
			Output:  `if ((a, b) || (c, d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!(a, b) && !!(c, d)) {}`,
			Output:  `if ((a, b) && (c, d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean((a, b)) && Boolean((c, d))) {}`,
			Output:  `if ((a, b) && (c, d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((!!((a, b))) && (!!((c, d)))) {}`,
			Output:  `if ((a, b) && (c, d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!(a = b) || !!(c = d)) {}`,
			Output:  `if ((a = b) || (c = d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a /= b) || Boolean(c /= d)) {}`,
			Output:  `if ((a /= b) || (c /= d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a >>= b) && !!(c >>= d)) {}`,
			Output:  `if ((a >>= b) && (c >>= d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `if (Boolean(a **= b) && Boolean(c **= d)) {}`,
			Output:          `if ((a **= b) && (c **= d)) {}`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2016}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a ? b : c) || !!(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) || (d ? e : f)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a ? b : c) || Boolean(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) || (d ? e : f)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a ? b : c) && !!(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) && (d ? e : f)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a ? b : c) && Boolean(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) && (d ? e : f)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a || b) || !!(c || d)) {}`,
			Output:  `if (a || b || (c || d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a || b) || Boolean(c || d)) {}`,
			Output:  `if (a || b || (c || d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a || b) && !!(c || d)) {}`,
			Output:  `if ((a || b) && (c || d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a || b) && Boolean(c || d)) {}`,
			Output:  `if ((a || b) && (c || d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a && b) || !!(c && d)) {}`,
			Output:  `if (a && b || c && d) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a && b) || Boolean(c && d)) {}`,
			Output:  `if (a && b || c && d) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a && b) && !!(c && d)) {}`,
			Output:  `if (a && b && (c && d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a && b) && Boolean(c && d)) {}`,
			Output:  `if (a && b && (c && d)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a !== b) || !!(c !== d)) {}`,
			Output:  `if (a !== b || c !== d) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a != b) || Boolean(c != d)) {}`,
			Output:  `if (a != b || c != d) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a === b) && !!(c === d)) {}`,
			Output:  `if (a === b && c === d) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!(a > b) || !!(c < d)) {}`,
			Output:  `if (a > b || c < d) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(!a) || Boolean(+b)) {}`,
			Output:  `if (!a || +b) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!f(a) && !!b.c) {}`,
			Output:  `if (f(a) && b.c) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a) || !!b) {}`,
			Output:  `if (a || b) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!a && Boolean(b)) {}`,
			Output:  `if (a && b) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((!!a) || (Boolean(b))) {}`,
			Output:  `if ((a) || (b)) {}`,
			Options: "[{\"enforceForLogicalOperands\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `if (Boolean(a ?? b) || c) {}`,
			Output:          `if ((a ?? b) || c) {}`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `if (Boolean?.(foo)) {};`,
			Output:          `if (foo) {};`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `if (Boolean?.(a ?? b) || c) {}`,
			Output:          `if ((a ?? b) || c) {}`,
			Options:         "[{\"enforceForLogicalOperands\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `if (!Boolean(a as any)) { }`,
			Output:          `if (!(a as any)) { }`,
			LanguageOptions: "{\"parser\":{},\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((1, 2, Boolean(3))) {}`,
			Output:  `if ((1, 2, 3)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a ?? Boolean(b)) {}`,
			Output:  `if (a ?? b) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((a, b, c ?? (d, e, f ?? Boolean(g)))) {}`,
			Output:  `if ((a, b, c ?? (d, e, f ?? g))) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a, b) || !!(c, d)) {}`,
			Output:  `if ((a, b) || (c, d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean((a, b)) || Boolean((c, d))) {}`,
			Output:  `if ((a, b) || (c, d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((!!((a, b))) || (!!((c, d)))) {}`,
			Output:  `if ((a, b) || (c, d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!(a, b) && !!(c, d)) {}`,
			Output:  `if ((a, b) && (c, d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean((a, b)) && Boolean((c, d))) {}`,
			Output:  `if ((a, b) && (c, d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((!!((a, b))) && (!!((c, d)))) {}`,
			Output:  `if ((a, b) && (c, d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!(a = b) || !!(c = d)) {}`,
			Output:  `if ((a = b) || (c = d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a /= b) || Boolean(c /= d)) {}`,
			Output:  `if ((a /= b) || (c /= d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a >>= b) && !!(c >>= d)) {}`,
			Output:  `if ((a >>= b) && (c >>= d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:            `if (Boolean(a **= b) && Boolean(c **= d)) {}`,
			Output:          `if ((a **= b) && (c **= d)) {}`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2016}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a ? b : c) || !!(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) || (d ? e : f)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a ? b : c) || Boolean(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) || (d ? e : f)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a ? b : c) && !!(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) && (d ? e : f)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a ? b : c) && Boolean(d ? e : f)) {}`,
			Output:  `if ((a ? b : c) && (d ? e : f)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a || b) || !!(c || d)) {}`,
			Output:  `if (a || b || (c || d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a || b) || Boolean(c || d)) {}`,
			Output:  `if (a || b || (c || d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a || b) && !!(c || d)) {}`,
			Output:  `if ((a || b) && (c || d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a || b) && Boolean(c || d)) {}`,
			Output:  `if ((a || b) && (c || d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a && b) || !!(c && d)) {}`,
			Output:  `if (a && b || c && d) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a && b) || Boolean(c && d)) {}`,
			Output:  `if (a && b || c && d) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a && b) && !!(c && d)) {}`,
			Output:  `if (a && b && (c && d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a && b) && Boolean(c && d)) {}`,
			Output:  `if (a && b && (c && d)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a !== b) || !!(c !== d)) {}`,
			Output:  `if (a !== b || c !== d) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a != b) || Boolean(c != d)) {}`,
			Output:  `if (a != b || c != d) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!(a === b) && !!(c === d)) {}`,
			Output:  `if (a === b && c === d) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!(a > b) || !!(c < d)) {}`,
			Output:  `if (a > b || c < d) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(!a) || Boolean(+b)) {}`,
			Output:  `if (!a || +b) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (!!f(a) && !!b.c) {}`,
			Output:  `if (f(a) && b.c) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (Boolean(a) || !!b) {}`,
			Output:  `if (a || b) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `if (!!a && Boolean(b)) {}`,
			Output:  `if (a && b) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if ((!!a) || (Boolean(b))) {}`,
			Output:  `if ((a) || (b)) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `if (Boolean(a ?? b) || c) {}`,
			Output:          `if ((a ?? b) || c) {}`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:            `if (Boolean?.(a ?? b) || c) {}`,
			Output:          `if ((a ?? b) || c) {}`,
			Options:         "[{\"enforceForInnerExpressions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a ? Boolean(b) : c) {}`,
			Output:  `if (a ? b : c) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a ? b : Boolean(c)) {}`,
			Output:  `if (a ? b : c) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a ? b : Boolean(c ? d : e)) {}`,
			Output:  `if (a ? b : c ? d : e) {}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `const ternary = Boolean(bar ? !!baz : bat);`,
			Output:  `const ternary = Boolean(bar ? baz : bat);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code:    `const commaOperator = Boolean((bar, baz, !!bat));`,
			Output:  `const commaOperator = Boolean((bar, baz, bat));`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNegation",
				},
			},
		},
		{
			Code: `
for (let i = 0; (console.log(i), Boolean(i < 10)); i++) {
    // ...
}`,
			Output: `
for (let i = 0; (console.log(i), i < 10); i++) {
    // ...
}`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `const nullishCoalescingOperator = Boolean(bar ?? Boolean(baz));`,
			Output:  `const nullishCoalescingOperator = Boolean(bar ?? baz);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a ? Boolean(b = c) : Boolean(d = e));`,
			Output:  `if (a ? b = c : d = e);`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code:    `if (a ? Boolean((b, c)) : Boolean((d, e)));`,
			Output:  `if (a ? (b, c) : (d, e));`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
				{
					MessageId: "unexpectedCall",
				},
			},
		},
		{
			Code: `
function * generator() {
    if (a ? Boolean(yield y) : x) {
        return a;
    };
}
`,
			Output: `
function * generator() {
    if (a ? yield y : x) {
        return a;
    };
}
`,
			Options: "[{\"enforceForInnerExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedCall",
				},
			},
		},
	})
}
