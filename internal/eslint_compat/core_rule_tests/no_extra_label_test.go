// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoExtraLabelRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-extra-label", []ValidTestCase{
		{Code: `A: break A;`},
		{Code: `A: { if (a) break A; }`},
		{Code: `A: { while (b) { break A; } }`},
		{Code: `A: { switch (b) { case 0: break A; } }`},
		{Code: `A: while (a) { while (b) { break; } break; }`},
		{Code: `A: while (a) { while (b) { break A; } }`},
		{Code: `A: while (a) { while (b) { continue A; } }`},
		{Code: `A: while (a) { switch (b) { case 0: break A; } }`},
		{Code: `A: while (a) { switch (b) { case 0: continue A; } }`},
		{Code: `A: switch (a) { case 0: while (b) { break A; } }`},
		{Code: `A: switch (a) { case 0: switch (b) { case 0: break A; } }`},
		{Code: `A: for (;;) { while (b) { break A; } }`},
		{Code: `A: do { switch (b) { case 0: break A; break; } } while (a);`},
		{Code: `A: for (a in obj) { while (b) { break A; } }`},
		{
			Code:            `A: for (a of ary) { switch (b) { case 0: break A; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code:   `A: while (a) break A;`,
			Output: `A: while (a) break;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `A: while (a) { B: { continue A; } }`,
			Output: `A: while (a) { B: { continue; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `X: while (x) { A: while (a) { B: { break A; break B; continue X; } } }`,
			Output: `X: while (x) { A: while (a) { B: { break; break B; continue X; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `A: do { break A; } while (a);`,
			Output: `A: do { break; } while (a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `A: for (;;) { break A; }`,
			Output: `A: for (;;) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `A: for (a in obj) { break A; }`,
			Output: `A: for (a in obj) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `A: for (a of ary) { break A; }`,
			Output:          `A: for (a of ary) { break; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `A: switch (a) { case 0: break A; }`,
			Output: `A: switch (a) { case 0: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `X: while (x) { A: switch (a) { case 0: break A; } }`,
			Output: `X: while (x) { A: switch (a) { case 0: break; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `X: switch (a) { case 0: A: while (b) break A; }`,
			Output: `X: switch (a) { case 0: A: while (b) break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `                A: while (true) {
                    break A;
                    while (true) {
                        break A;
                    }
                }
            `,
			Output: `                A: while (true) {
                    break;
                    while (true) {
                        break A;
                    }
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
				},
			},
		},
		{
			Code:   `A: while(true) { /*comment*/break A; }`,
			Output: `A: while(true) { /*comment*/break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `A: while(true) { break/**/ A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `A: while(true) { continue /**/ A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `A: while(true) { break /**/A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `A: while(true) { continue/**/A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `A: while(true) { continue A/*comment*/; }`,
			Output: `A: while(true) { continue/*comment*/; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `A: while(true) { break A//comment
 }`,
			Output: `A: while(true) { break//comment
 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `A: while(true) { break A/*comment*/
foo() }`,
			Output: `A: while(true) { break/*comment*/
foo() }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
