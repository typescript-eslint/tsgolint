// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoConstAssignRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "no-const-assign", []ValidTestCase{
		{Code: `const x = 0; { let x; x = 1; }`},
		{Code: `const x = 0; function a(x) { x = 1; }`},
		{Code: `const x = 0; foo(x);`},
		{Code: `for (const x in [1,2,3]) { foo(x); }`},
		{Code: `for (const x of [1,2,3]) { foo(x); }`},
		{Code: `const x = {key: 0}; x.key = 1;`},
		{Code: `var x = 0; x = 1;`},
		{Code: `let x = 0; x = 1;`},
		{Code: `function x() {} x = 1;`},
		{Code: `function foo(x) { x = 1; }`},
		{Code: `class X {} X = 1;`},
		{Code: `try {} catch (x) { x = 1; }`},
	}, []InvalidTestCase{
		{
			Code: `const x = 0; x = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const {a: x} = {a: 0}; x = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; ({x} = {x: 1});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; ({a: x = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; x += 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; ++x;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `for (const i = 0; i < 10; ++i) { foo(i); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; x = 1; x = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "const",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `const x = 0; function foo() { x = x + 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; function foo(a) { x = a; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
		{
			Code: `const x = 0; while (true) { x = x + 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "const",
				},
			},
		},
	})
}
