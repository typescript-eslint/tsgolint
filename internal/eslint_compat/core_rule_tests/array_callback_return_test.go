// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrayCallbackReturnRule(t *testing.T) {
	RunRuleTester(t, "{}", "array-callback-return", []ValidTestCase{
		{Code: `foo.every(function(){}())`},
		{Code: `foo.every(function(){ return function() { return true; }; }())`},
		{Code: `foo.every(function(){ return function() { return; }; })`},
		{Code: `foo.forEach(bar || function(x) { var a=0; })`},
		{Code: `foo.forEach(bar || function(x) { return a; })`},
		{Code: `foo.forEach(function() {return function() { var a = 0;}}())`},
		{Code: `foo.forEach(function(x) { var a=0; })`},
		{Code: `foo.forEach(function(x) { return a;})`},
		{Code: `foo.forEach(function(x) { return; })`},
		{Code: `foo.forEach(function(x) { if (a === b) { return;} var a=0; })`},
		{Code: `foo.forEach(function(x) { if (a === b) { return x;} var a=0; })`},
		{Code: `foo.bar().forEach(function(x) { return; })`},
		{Code: `["foo","bar","baz"].forEach(function(x) { return x; })`},
		{
			Code:            `foo.forEach(x => { var a=0; })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach(x => { if (a === b) { return;} var a=0; })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach(x => x)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach(val => y += val)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.map(async function(){})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo.map(async () => {})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `foo.map(function* () {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `Array.from(x, function() { return true; })`,
			Options: "[{\"allowImplicit\":false}]",
		},
		{
			Code:    `Int32Array.from(x, function() { return true; })`,
			Options: "[{\"allowImplicit\":false}]",
		},
		{Code: `foo.every(function() { return true; })`},
		{Code: `foo.filter(function() { return true; })`},
		{Code: `foo.find(function() { return true; })`},
		{Code: `foo.findIndex(function() { return true; })`},
		{Code: `foo.findLast(function() { return true; })`},
		{Code: `foo.findLastIndex(function() { return true; })`},
		{Code: `foo.flatMap(function() { return true; })`},
		{Code: `foo.forEach(function() { return; })`},
		{Code: `foo.map(function() { return true; })`},
		{Code: `foo.reduce(function() { return true; })`},
		{Code: `foo.reduceRight(function() { return true; })`},
		{Code: `foo.some(function() { return true; })`},
		{Code: `foo.sort(function() { return 0; })`},
		{Code: `foo.toSorted(function() { return 0; })`},
		{
			Code:            `foo.every(() => { return true; })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `foo.every(function() { if (a) return true; else return false; })`},
		{Code: `foo.every(function() { switch (a) { case 0: bar(); default: return true; } })`},
		{Code: `foo.every(function() { try { bar(); return true; } catch (err) { return false; } })`},
		{Code: `foo.every(function() { try { bar(); } finally { return true; } })`},
		{
			Code:    `Array.from(x, function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `Int32Array.from(x, function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.every(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.filter(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.find(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.findIndex(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.findLast(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.findLastIndex(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.flatMap(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.forEach(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.map(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.reduce(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.reduceRight(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.some(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.sort(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.toSorted(function() { return; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:            `foo.every(() => { return; })`,
			Options:         "[{\"allowImplicit\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo.every(function() { if (a) return; else return a; })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.every(function() { switch (a) { case 0: bar(); default: return; } })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.every(function() { try { bar(); return; } catch (err) { return; } })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.every(function() { try { bar(); } finally { return; } })`,
			Options: "[{\"allowImplicit\":true}]",
		},
		{
			Code:    `foo.forEach(function(x) { return; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.forEach(function(x) { var a=0; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.forEach(function(x) { if (a === b) { return;} var a=0; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.forEach(function() {return function() { if (a == b) { return; }}}())`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:            `foo.forEach(x => { var a=0; })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach(x => { if (a === b) { return;} var a=0; })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach(x => { x })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo.forEach(bar || function(x) { return; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `Array.from(x, function() { return true; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `Int32Array.from(x, function() { return true; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:            `foo.every(() => { return true; })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo.every(function() { if (a) return 1; else return a; })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.every(function() { switch (a) { case 0: return bar(); default: return a; } })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.every(function() { try { bar(); return 1; } catch (err) { return err; } })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.every(function() { try { bar(); } finally { return 1; } })`,
			Options: "[{\"checkForEach\":true}]",
		},
		{
			Code:    `foo.every(function() { return; })`,
			Options: "[{\"allowImplicit\":true,\"checkForEach\":true}]",
		},
		{
			Code:            `foo.forEach((x) => void x)`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach((x) => void bar(x))`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach(function (x) { return void bar(x); })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach((x) => { return void bar(x); })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.forEach((x) => { if (a === b) { return void a; } bar(x) })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Arrow.from(x, function() {})`},
		{Code: `foo.abc(function() {})`},
		{Code: `every(function() {})`},
		{Code: `foo[every](function() {})`},
		{Code: `var every = function() {}`},
		{
			Code:            "foo[`${every}`](function() {})",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `foo.every(() => true)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `Array.from(x, function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `Array.from(x, function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `Int32Array.from(x, function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `Int32Array.from(x, function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.every(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.every(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.filter(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.filter(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.find(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.find(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.findLast(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.findLast(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.findIndex(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.findIndex(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.findLastIndex(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.findLastIndex(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.flatMap(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.flatMap(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.map(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.map(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.reduce(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.reduce(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.reduceRight(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.reduceRight(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.some(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.some(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.sort(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.sort(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.toSorted(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.toSorted(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.bar.baz.every(function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo.bar.baz.every(function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo["every"](function() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code: `foo["every"](function foo() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            "foo[`every`](function() {})",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            "foo[`every`](function foo() {})",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            `foo.every(() => {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a return value from arrow function.",
					Column:             14,
				},
			},
		},
		{
			Code: `foo.every(function() { if (a) return true; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a value to be returned at the end of function.",
					Column:             11,
				},
			},
		},
		{
			Code: `foo.every(function cb() { if (a) return true; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a value to be returned at the end of function 'cb'.",
					Column:             11,
				},
			},
		},
		{
			Code: `foo.every(function() { switch (a) { case 0: break; default: return true; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAtEnd",
				},
			},
		},
		{
			Code: `foo.every(function foo() { switch (a) { case 0: break; default: return true; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAtEnd",
				},
			},
		},
		{
			Code: `foo.every(function() { try { bar(); } catch (err) { return true; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAtEnd",
				},
			},
		},
		{
			Code: `foo.every(function foo() { try { bar(); } catch (err) { return true; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAtEnd",
				},
			},
		},
		{
			Code: `foo.every(function() { return; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code: `foo.every(function foo() { return; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code: `foo.every(function() { if (a) return; })`,
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a value to be returned at the end of function."},
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code: `foo.every(function foo() { if (a) return; })`,
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a value to be returned at the end of function 'foo'."},
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code: `foo.every(function() { if (a) return; else return; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
				},
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code: `foo.every(function foo() { if (a) return; else return; })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
				},
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code: `foo.every(cb || function() {})`,
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a return value from function."},
			},
		},
		{
			Code: `foo.every(cb || function foo() {})`,
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a return value from function 'foo'."},
			},
		},
		{
			Code: `foo.every(a ? function() {} : function() {})`,
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a return value from function."},
				{MessageDescription: "Array.prototype.every() expects a return value from function."},
			},
		},
		{
			Code: `foo.every(a ? function foo() {} : function bar() {})`,
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a return value from function 'foo'."},
				{MessageDescription: "Array.prototype.every() expects a return value from function 'bar'."},
			},
		},
		{
			Code: `foo.every(function(){ return function() {}; }())`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a return value from function.",
					Column:             30,
				},
			},
		},
		{
			Code: `foo.every(function(){ return function foo() {}; }())`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a return value from function 'foo'.",
					Column:             30,
				},
			},
		},
		{
			Code:            `foo.every(() => {})`,
			Options:         "[{\"allowImplicit\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a return value from arrow function.",
				},
			},
		},
		{
			Code:            `foo.every(() => {})`,
			Options:         "[{\"allowImplicit\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Array.prototype.every() expects a return value from arrow function.",
				},
			},
		},
		{
			Code:    `Array.from(x, function() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.every(function() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.filter(function foo() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.find(function foo() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.map(function() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.reduce(function() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.reduceRight(function() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.bar.baz.every(function foo() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.every(cb || function() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a return value from function."},
			},
		},
		{
			Code:    `["foo","bar"].sort(function foo() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `["foo","bar"].toSorted(function foo() {})`,
			Options: "[{\"allowImplicit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            `foo.forEach(x => x)`,
			Options:         "[{\"allowImplicit\":true,\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(x => {x})`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.forEach(function(x) { if (a == b) {return x;}})`,
			Options: "[{\"allowImplicit\":true,\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `foo.forEach(function bar(x) { return x;})`,
			Options: "[{\"allowImplicit\":true,\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:            `foo.forEach(x => x)`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(x => {x})`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach(x => (x))`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(x => {(x)})`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach(val => y += val)`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(val => {y += val})`,
						},
					},
				},
			},
		},
		{
			Code:            `["foo","bar"].forEach(x => ++x)`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `["foo","bar"].forEach(x => {++x})`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.bar().forEach(x => x === y)`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.bar().forEach(x => {x === y})`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.forEach(function() {return function() { if (a == b) { return a; }}}())`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `foo.forEach(function(x) { if (a == b) {return x;}})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `foo.forEach(function(x) { if (a == b) {return undefined;}})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `foo.forEach(function bar(x) { return x;})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `foo.bar().forEach(function bar(x) { return x;})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `["foo","bar"].forEach(function bar(x) { return x;})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { return x;})`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:    `Array.from(x, function() {})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.every(function() {})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.filter(function foo() {})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:    `foo.filter(function foo() { return; })`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
				},
			},
		},
		{
			Code:    `foo.every(cb || function() {})`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{MessageDescription: "Array.prototype.every() expects a return value from function."},
			},
		},
		{
			Code:            `foo.forEach((x) => void x)`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach((x) => {void x})`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => void bar(x))`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach((x) => {void bar(x)})`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { return void bar(x); })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { if (a === b) { return void a; } bar(x) })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
				},
			},
		},
		{
			Code:            `foo.forEach(x => x)`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(x => {x})`,
						},
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach(x => void x)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach(x => !x)`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(x => {!x})`,
						},
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach(x => void !x)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach(x => (x))`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(x => {(x)})`,
						},
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach(x => void (x))`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { return x; })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { return void x; })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { return !x; })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { return void !x; })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { return(x); })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { return void (x); })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { return (x + 1); })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { return void (x + 1); })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { if (a === b) { return x; } })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { if (a === b) { return void x; } })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { if (a === b) { return !x; } })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { if (a === b) { return void !x; } })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((x) => { if (a === b) { return (x + a); } })`,
			Options:         "[{\"checkForEach\":true,\"allowVoid\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "prependVoid",
							Output:    `foo.forEach((x) => { if (a === b) { return void (x + a); } })`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.filter(bar => { baz(); } )`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `foo.filter(
() => {} )`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 6,
				},
			},
		},
		{
			Code:            `foo.filter(bar || ((baz) => {}) )`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code:            `foo.filter(bar => { return; })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code:            `Array.from(foo, bar => { bar })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `foo.forEach(bar => bar)`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 19,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach(bar => {bar})`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((function () { return (bar) => bar; })())`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Line:      1,
					Column:    41,
					EndLine:   1,
					EndColumn: 43,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output:    `foo.forEach((function () { return (bar) => {bar}; })())`,
						},
					},
				},
			},
		},
		{
			Code: `foo.forEach((() => {
 return bar => bar; })())`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Line:      2,
					Column:    13,
					EndLine:   2,
					EndColumn: 15,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "wrapBraces",
							Output: `foo.forEach((() => {
 return bar => {bar}; })())`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.forEach((bar) => { if (bar) { return; } else { return bar ; } })`,
			Options:         "[{\"checkForEach\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Line:      1,
					Column:    52,
					EndLine:   1,
					EndColumn: 64,
				},
			},
		},
		{
			Code: `foo.filter(function(){})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `foo.filter(function (){})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code: `foo.filter(function
(){})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `foo.filter(function bar(){})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `foo.filter(function bar  (){})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `foo.filter(function
 bar() {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `Array.from(foo, function bar(){})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `Array.from(foo, bar ? function (){} : baz)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code: `foo.filter(function bar() { return 
 })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedReturnValue",
					Line:      1,
					Column:    29,
					EndLine:   1,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `foo.forEach(function () { 
if (baz) return bar
else return
 })`,
			Options: "[{\"checkForEach\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedNoReturnValue",
					Line:      2,
					Column:    10,
					EndLine:   2,
					EndColumn: 20,
				},
			},
		},
		{
			Code:            `foo?.filter(() => { console.log('hello') })`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            `(foo?.filter)(() => { console.log('hello') })`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            `Array?.from([], () => { console.log('hello') })`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            `(Array?.from)([], () => { console.log('hello') })`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
		{
			Code:            `foo?.filter((function() { return () => { console.log('hello') } })?.())`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedInside",
				},
			},
		},
	})
}
