// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestQuotesRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "quotes", []ValidTestCase{
		{Code: `var foo = "bar";`},
		{
			Code:    `var foo = 'bar';`,
			Options: "[\"single\"]",
		},
		{
			Code:    `var foo = "bar";`,
			Options: "[\"double\"]",
		},
		{
			Code:    `var foo = 1;`,
			Options: "[\"single\"]",
		},
		{
			Code:    `var foo = 1;`,
			Options: "[\"double\"]",
		},
		{
			Code:    `var foo = "'";`,
			Options: "[\"single\",{\"avoidEscape\":true}]",
		},
		{
			Code:    `var foo = '"';`,
			Options: "[\"double\",{\"avoidEscape\":true}]",
		},
		{
			Code:            `var foo = <>Hello world</>;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <>Hello world</>;`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <>Hello world</>;`,
			Options:         "[\"double\",{\"avoidEscape\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <>Hello world</>;`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <div>Hello world</div>;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <div id="foo"></div>;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <div>Hello world</div>;`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <div>Hello world</div>;`,
			Options:         "[\"double\",{\"avoidEscape\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            "var foo = `bar`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `bar 'baz'`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = ` + "`" + `bar "baz"` + "`" + `;`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = 1;`,
			Options: "[\"backtick\"]",
		},
		{
			Code:    `var foo = "a string containing ` + "`" + `backtick` + "`" + ` quotes";`,
			Options: "[\"backtick\",{\"avoidEscape\":true}]",
		},
		{
			Code:            `var foo = <div id="foo"></div>;`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `var foo = <div>Hello world</div>;`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `class C { "f"; "m"() {} }`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'f'; 'm'() {} }`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `var foo = ` + "`" + `back
tick` + "`" + `;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `back\\rtick`;",
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `back tick`;",
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `back tick`;",
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var foo = ` + "`" + `back\\
tick` + "`" + `;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var foo = ` + "`" + `back\\\\
tick` + "`" + `;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var foo = ` + "`" + `
` + "`" + `;`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `back${x}tick`;",
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = tag`backtick`;",
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `bar 'foo' baz` + 'bar';",
			Options:         "[\"single\",{\"allowTemplateLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = ` + "`" + `bar 'foo' baz` + "`" + ` + "bar";`,
			Options:         "[\"double\",{\"allowTemplateLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `bar 'foo' baz` + `bar`;",
			Options:         "[\"backtick\",{\"allowTemplateLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `"use strict"; var foo = ` + "`" + `backtick` + "`" + `;`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `"use strict"; 'use strong'; "use asm"; var foo = ` + "`" + `backtick` + "`" + `;`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo() { "use strict"; "use strong"; "use asm"; var foo = ` + "`" + `backtick` + "`" + `; }`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "(function() { 'use strict'; 'use strong'; 'use asm'; var foo = `backtick`; })();",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => { "use strict"; "use strong"; "use asm"; var foo = ` + "`" + `backtick` + "`" + `; })();`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import "a"; import 'b';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import a from "a"; import b from 'b';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * from "a"; export * from 'b';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { "a" as b, 'c' as d } from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a, c; export { a as "b", c as 'd' };`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a", 'b' } from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { a as "b", c as 'd' } from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a" as b, 'c' as d } from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a" as "b", 'c' as 'd' } from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as "a" from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as 'a' from 'mod';`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var obj = {"key0": 0, 'key1': 1};`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Foo { 'bar'(){} }`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Foo { static ''(){} }`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { "double"; 'single'; }`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:   `var foo = 'bar';`,
			Output: `var foo = "bar";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = "bar";`,
			Output:  `var foo = 'bar';`,
			Options: "[\"single\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "var foo = `bar`;",
			Output:          `var foo = 'bar';`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:   `var foo = 'don\'t';`,
			Output: `var foo = "don't";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var msg = "Plugin '" + name + "' not found"`,
			Output:  `var msg = 'Plugin \'' + name + '\' not found'`,
			Options: "[\"single\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
					Column:    11,
				},
				{
					MessageId: "wrongQuotes",
					Column:    31,
				},
			},
		},
		{
			Code:    `var foo = 'bar';`,
			Output:  `var foo = "bar";`,
			Options: "[\"double\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "var foo = `bar`;",
			Output:          `var foo = "bar";`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = "bar";`,
			Output:  `var foo = 'bar';`,
			Options: "[\"single\",{\"avoidEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = 'bar';`,
			Output:  `var foo = "bar";`,
			Options: "[\"double\",{\"avoidEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = '\\';`,
			Output:  `var foo = "\\";`,
			Options: "[\"double\",{\"avoidEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = "bar";`,
			Output:  `var foo = 'bar';`,
			Options: "[\"single\",{\"allowTemplateLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = 'bar';`,
			Output:  `var foo = "bar";`,
			Options: "[\"double\",{\"allowTemplateLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = 'bar';`,
			Output:          "var foo = `bar`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = 'b${x}a$r';`,
			Output:          "var foo = `b\\${x}a$r`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = "bar";`,
			Output:          "var foo = `bar`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = "bar";`,
			Output:          "var foo = `bar`;",
			Options:         "[\"backtick\",{\"avoidEscape\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = 'bar';`,
			Output:          "var foo = `bar`;",
			Options:         "[\"backtick\",{\"avoidEscape\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = ` + "`" + `backtick` + "`" + `; "use strict";`,
			Output:          "var foo = `backtick`; `use strict`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `{ "use strict"; var foo = ` + "`" + `backtick` + "`" + `; }`,
			Output:          "{ `use strict`; var foo = `backtick`; }",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `if (1) { "use strict"; var foo = ` + "`" + `backtick` + "`" + `; }`,
			Output:          "if (1) { `use strict`; var foo = `backtick`; }",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var obj = {["key0"]: 0, ['key1']: 1};`,
			Output:          "var obj = {[`key0`]: 0, [`key1`]: 1};",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class Foo { ['a'](){} static ['b'](){} }`,
			Output:          "class Foo { [`a`](){} static [`b`](){} }",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `<div blah={"blah"} />`,
			Output:          `<div blah={'blah'} />`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `<div blah={'blah'} />`,
			Output:          `<div blah={"blah"} />`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `<div blah={'blah'} />`,
			Output:          "<div blah={`blah`} />",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}},\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "`use strict`;",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "function foo() { `use strict`; foo(); }",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "foo = function() { `use strict`; foo(); }",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "() => { `use strict`; foo(); }",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "() => { foo(); `use strict`; }",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "foo(); `use strict`;",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "var foo = `foo\\nbar`;",
			Output:          `var foo = "foo\nbar";`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code: `var foo = ` + "`" + `foo\
bar` + "`" + `;`,
			Output: `var foo = "foo\
bar";`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code: `var foo = ` + "`" + `foo\\\
bar` + "`" + `;`,
			Output: `var foo = "foo\\\
bar";`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "````",
			Output:          `""` + "`" + `` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var foo = "\1"`,
			Output:  `var foo = '\1'`,
			Options: "[\"single\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:    `var foo = '\1'`,
			Output:  `var foo = "\1"`,
			Options: "[\"double\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var notoctal = '\0'`,
			Output:          "var notoctal = `\\0`",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = '\1'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = "\1"`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = '\01'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = '\0\1'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = '\08'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = 'prefix \33'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var foo = 'prefix \75 suffix'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `var nonOctalDecimalEscape = '\8'`,
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class C { 'foo'; }`,
			Output:          `class C { "foo"; }`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class C { 'foo'() {} }`,
			Output:          `class C { "foo"() {} }`,
			Options:         "[\"double\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class C { "foo"; }`,
			Output:          `class C { 'foo'; }`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class C { "foo"() {} }`,
			Output:          `class C { 'foo'() {} }`,
			Options:         "[\"single\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class C { ["foo"]; }`,
			Output:          "class C { [`foo`]; }",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `class C { foo = "foo"; }`,
			Output:          "class C { foo = `foo`; }",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "() => { foo(); (`use strict`); }",
			Output:          `() => { foo(); ("use strict"); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            `('foo'); "bar";`,
			Output:          "(`foo`); `bar`;",
			Options:         "[\"backtick\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:   `; 'use asm';`,
			Output: `; "use asm";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "{ `foobar`; }",
			Output:          `{ "foobar"; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
		{
			Code:            "foo(() => `bar`);",
			Output:          `foo(() => "bar");`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongQuotes",
				},
			},
		},
	})
}
