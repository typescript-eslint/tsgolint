// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSpaceInParensRule(t *testing.T) {
	RunRuleTester(t, "{}", "space-in-parens", []ValidTestCase{
		{
			Code:    `foo()`,
			Options: "[\"never\"]",
		},
		{
			Code:    `foo()`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo( )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo( bar )`,
			Options: "[\"always\"]",
		},
		{
			Code: `foo
(
bar
)
`,
			Options: "[\"always\"]",
		},
		{
			Code: `foo
(  
bar
 )
`,
			Options: "[\"always\"]",
		},
		{
			Code: `foo
(
 bar  
)
`,
			Options: "[\"always\"]",
		},
		{
			Code: `foo
( 
  bar 
  )
`,
			Options: "[\"always\"]",
		},
		{
			Code: `foo
(	
bar
)`,
			Options: "[\"always\"]",
		},
		{
			Code: `	foo(
		bar
	)`,
			Options: "[\"always\"]",
		},
		{
			Code: `	foo
(	
		bar	
	)`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var x = ( 1 + 2 ) * 3`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var x = 'foo(bar)'`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var x = 'bar( baz )'`,
			Options: "[\"always\"]",
		},
		{
			Code:            "var foo = `(bar)`;",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `(bar ${baz})`;",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `(bar ${( 1 + 2 )})`;",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `bar(baz)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x = (4 + 5) * 6`,
			Options: "[\"never\"]",
		},
		{
			Code: `foo
(
bar
)
`,
			Options: "[\"never\"]",
		},
		{
			Code: `foo
(  
bar
 )
`,
			Options: "[\"never\"]",
		},
		{
			Code: `foo
(
 bar  
)
`,
			Options: "[\"never\"]",
		},
		{
			Code: `foo
( 
  bar 
  )
`,
			Options: "[\"never\"]",
		},
		{
			Code:            "var foo = `( bar )`;",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `( bar ${baz} )`;",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `(bar ${(1 + 2)})`;",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo( /* bar */ )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo( /* bar */baz )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo( /* bar */ baz )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo( baz/* bar */ )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo( baz /* bar */ )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `foo(/* bar */)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `foo(/* bar */ baz)`,
			Options: "[\"never\"]",
		},
		{Code: `foo( //some comment
bar
)
`},
		{
			Code: `foo(//some comment
bar
)
`,
			Options: "[\"never\"]",
		},
		{
			Code: `foo( //some comment
bar
)
`,
			Options: "[\"never\"]",
		},
		{
			Code:    `foo({ bar: 'baz' })`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( { bar: 'baz' } )`,
			Options: "[\"always\",{\"exceptions\":[\"[]\",\"()\"]}]",
		},
		{
			Code:    `( (foo(bar() ) ) );`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo( 1, { bar: 'baz' })`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo({ bar: 'baz' }, 1 )`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code: `foo({
bar: 'baz',
baz: 'bar'
})`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo({ bar: 'baz' })`,
			Options: "[\"never\",{\"exceptions\":[\"[]\",\"()\"]}]",
		},
		{
			Code:    `foo( { bar: 'baz' } )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo(1, { bar: 'baz' } )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( { bar: 'baz' }, 1)`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code: `foo( {
bar: 'baz',
baz: 'bar'
} )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo([ 1, 2 ])`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo( [ 1, 2 ] )`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( 1, [ 1, 2 ])`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo([ 1, 2 ], 1 )`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code: `foo([
1,
2
])`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo([ 1, 2 ])`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( [ 1, 2 ] )`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo(1, [ 1, 2 ] )`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo( [ 1, 2 ], 1)`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code: `foo( [
1,
2
] )`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo(( 1 + 2 ))`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo( ( 1 + 2 ) )`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( 1 / ( 1 + 2 ))`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo(( 1 + 2 ) / 1 )`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code: `foo((
1 + 2
))`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo((1 + 2))`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( (1 + 2) )`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo(1 / (1 + 2) )`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo( (1 + 2) / 1)`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code: `foo( (
1 + 2
) )`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
		},
		{
			Code:    `foo()`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
		},
		{
			Code:    `foo( )`,
			Options: "[\"never\",{\"exceptions\":[\"empty\"]}]",
		},
		{
			Code:    `foo()`,
			Options: "[\"always\",{\"exceptions\":[\"empty\"]}]",
		},
		{
			Code:    `foo( )`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
		},
		{
			Code:    `foo(( x, {bar:'baz'} ))`,
			Options: "[\"always\",{\"exceptions\":[\"empty\",\"()\"]}]",
		},
		{
			Code:    `foo( [1, 2], 1 )`,
			Options: "[\"always\",{\"exceptions\":[\"empty\",\"()\"]}]",
		},
		{
			Code: `foo(
1 + 2
)`,
			Options: "[\"always\",{\"exceptions\":[\"empty\"]}]",
		},
		{
			Code: `foo( 
1 + 2
 )`,
			Options: "[\"never\",{\"exceptions\":[\"empty\"]}]",
		},
		{
			Code:    `foo({ bar: 'baz' }, [ 1, 2 ])`,
			Options: "[\"always\",{\"exceptions\":[\"{}\",\"[]\"]}]",
		},
		{
			Code: `foo({
bar: 'baz'
}, [
1,
2
])`,
			Options: "[\"always\",{\"exceptions\":[\"{}\",\"[]\"]}]",
		},
		{
			Code:    `foo(); bar({bar:'baz'}); baz([1,2])`,
			Options: "[\"always\",{\"exceptions\":[\"{}\",\"[]\",\"()\",\"empty\"]}]",
		},
		{
			Code:    `foo( { bar: 'baz' }, [ 1, 2 ] )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\",\"[]\"]}]",
		},
		{
			Code: `foo( {
bar: 'baz'
}, [
1,
2
] )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\",\"[]\"]}]",
		},
		{
			Code:    `foo( ); bar( {bar:'baz'} ); baz( [1,2] )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\",\"[]\",\"empty\"]}]",
		},
		{
			Code:    `foo( { bar: 'baz' } )`,
			Options: "[\"always\",{\"exceptions\":[]}]",
		},
		{
			Code:    `foo( { bar: 'baz' } )`,
			Options: "[\"always\",{}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `bar(baz )`,
			Output:  `bar(baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `bar( baz )`,
			Output:  `bar(baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
					EndColumn: 6,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    9,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `bar(  baz  )`,
			Output:  `bar(baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
					EndColumn: 7,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    10,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `foo( )`,
			Output:  `foo()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
					EndColumn: 6,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    5,
					EndColumn: 6,
				},
			},
		},
		{
			Code:    `foo(  )`,
			Output:  `foo()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
					EndColumn: 7,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    5,
					EndColumn: 7,
				},
			},
		},
		{
			Code:    `foo(bar() )`,
			Output:  `foo(bar())`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code: `foo
(
bar )`,
			Output: `foo
(
bar)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
					Line:      3,
					Column:    4,
				},
			},
		},
		{
			Code: `foo
(bar
)
`,
			Output: `foo
( bar
)
`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:    `foo( bar)`,
			Output:  `foo( bar )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:    `foo(bar)`,
			Output:  `foo( bar )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    4,
					EndColumn: 5,
				},
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    8,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `var x = ( 1 + 2) * 3`,
			Output:  `var x = ( 1 + 2 ) * 3`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:    `var x = (1 + 2 ) * 3`,
			Output:  `var x = ( 1 + 2 ) * 3`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:    `var x = ( 4 + 5) * 6`,
			Output:  `var x = (4 + 5) * 6`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
			},
		},
		{
			Code:    `var x = (4 + 5 ) * 6`,
			Output:  `var x = (4 + 5) * 6`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo(/* bar */)`,
			Output:  `foo( /* bar */ )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo(/* bar */baz )`,
			Output:  `foo( /* bar */baz )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
			},
		},
		{
			Code:    `foo(/* bar */ baz )`,
			Output:  `foo( /* bar */ baz )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
			},
		},
		{
			Code:    `foo( baz/* bar */)`,
			Output:  `foo( baz/* bar */ )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo( baz /* bar */)`,
			Output:  `foo( baz /* bar */ )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo( /* bar */ )`,
			Output:  `foo(/* bar */)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo( /* bar */ baz)`,
			Output:  `foo(/* bar */ baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `foo()`,
			Output:  `foo( )`,
			Options: "[\"never\",{\"exceptions\":[\"empty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    4,
				},
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `foo( )`,
			Output:  `foo()`,
			Options: "[\"always\",{\"exceptions\":[\"()\",\"empty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `foo( )`,
			Output:  `foo()`,
			Options: "[\"always\",{\"exceptions\":[\"empty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `foo( bar() )`,
			Output:  `foo( bar())`,
			Options: "[\"always\",{\"exceptions\":[\"()\",\"empty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:    `foo(bar())`,
			Output:  `foo(bar() )`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:    `foo( bar() )`,
			Output:  `foo(bar( ))`,
			Options: "[\"never\",{\"exceptions\":[\"empty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    10,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:    `foo([1,2], bar() )`,
			Output:  `foo( [1,2], bar())`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    4,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz' })`,
			Output:  `foo( { bar: 'baz' } )`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo( { bar: 'baz' } )`,
			Output:  `foo({ bar: 'baz' })`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz' })`,
			Output:  `foo( { bar: 'baz' } )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo( { bar: 'baz' } )`,
			Output:  `foo({ bar: 'baz' })`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo( { bar: 'baz' })`,
			Output:  `foo({ bar: 'baz' })`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
			},
		},
		{
			Code:    `foo( { bar: 'baz' })`,
			Output:  `foo( { bar: 'baz' } )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz' } )`,
			Output:  `foo({ bar: 'baz' })`,
			Options: "[\"always\",{\"exceptions\":[\"{}\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo({ bar: 'baz' } )`,
			Output:  `foo( { bar: 'baz' } )`,
			Options: "[\"never\",{\"exceptions\":[\"{}\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
			},
		},
		{
			Code:    `foo([ 1, 2 ])`,
			Output:  `foo( [ 1, 2 ] )`,
			Options: "[\"always\",{\"exceptions\":[\"empty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo( [ 1, 2 ] )`,
			Output:  `foo([ 1, 2 ])`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo([ 1, 2 ])`,
			Output:  `foo( [ 1, 2 ] )`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `foo( [ 1, 2 ] )`,
			Output:  `foo([ 1, 2 ])`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo([ 1, 2 ] )`,
			Output:  `foo([ 1, 2 ])`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `foo([ 1, 2 ] )`,
			Output:  `foo( [ 1, 2 ] )`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
			},
		},
		{
			Code:    `foo( [ 1, 2 ])`,
			Output:  `foo([ 1, 2 ])`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
			},
		},
		{
			Code:    `foo( [ 1, 2 ])`,
			Output:  `foo( [ 1, 2 ] )`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `(( 1 + 2 ))`,
			Output:  `( ( 1 + 2 ) )`,
			Options: "[\"always\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
				},
				{
					MessageId: "missingClosingSpace",
				},
			},
		},
		{
			Code:    `( ( 1 + 2 ) )`,
			Output:  `(( 1 + 2 ))`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:    `( ( 1 + 2 ) )`,
			Output:  `((1 + 2))`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    4,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    10,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:    `( ( 1 + 2 ) )`,
			Output:  `((1 + 2))`,
			Options: "[\"never\",{\"exceptions\":[\"[]\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedOpeningSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
				{
					MessageId: "rejectedClosingSpace",
				},
			},
		},
		{
			Code:    `((1 + 2))`,
			Output:  `(( 1 + 2 ))`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `((1 + 2))`,
			Output:  `( (1 + 2) )`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:    `((1 + 2) )`,
			Output:  `( (1 + 2) )`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var result = ( 1 / ( 1 + 2 ) ) + 3`,
			Output:  `var result = ( 1 / ( 1 + 2 )) + 3`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    29,
				},
			},
		},
		{
			Code:    `var result = (1 / (1 + 2)) + 3`,
			Output:  `var result = (1 / (1 + 2) ) + 3`,
			Options: "[\"never\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:    `var result = (1 / ( 1 + 2) ) + 3`,
			Output:  `var result = ( 1 / ( 1 + 2 )) + 3`,
			Options: "[\"always\",{\"exceptions\":[\"()\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "missingClosingSpace",
					Line:      1,
					Column:    26,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:            "var foo = `(bar ${( 1 + 2 )})`;",
			Output:          "var foo = `(bar ${(1 + 2)})`;",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "rejectedOpeningSpace",
					Line:      1,
					Column:    20,
				},
				{
					MessageId: "rejectedClosingSpace",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:            "var foo = `(bar ${(1 + 2 )})`;",
			Output:          "var foo = `(bar ${( 1 + 2 )})`;",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningSpace",
					Line:      1,
					Column:    19,
				},
			},
		},
	})
}
