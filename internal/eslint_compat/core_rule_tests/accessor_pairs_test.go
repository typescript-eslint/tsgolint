// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestAccessorPairsRule(t *testing.T) {
	RunRuleTester(t, "{}", "accessor-pairs", []ValidTestCase{
		{
			Code:            `var { get: foo } = bar; ({ set: foo } = bar);`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { set } = foo; ({ get } = foo);`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var o = { get a() {} }`},
		{
			Code:    `var o = { get a() {} }`,
			Options: "[{}]",
		},
		{
			Code:    `var o = {};`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { a: 1 };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:            `var o = { a };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var o = { a: get };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { a: set };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { get: function(){} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { set: function(foo){} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:            `var o = { get };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { set };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { [get]: function() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { [set]: function(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { set(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var o = { get a() {} };`,
			Options: "[{\"setWithoutGet\":false,\"getWithoutSet\":false}]",
		},
		{
			Code:    `var o = { get a() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":false}]",
		},
		{
			Code:    `var o = { set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":false,\"getWithoutSet\":false}]",
		},
		{
			Code:    `var o = { set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":false,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":false}]",
		},
		{
			Code:    `var o = { get a() {}, set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":false,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { get a() {}, set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":false}]",
		},
		{
			Code:    `var o = { get a() {}, set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { set a(foo) {}, get a() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { get 'a'() {}, set 'a'(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { get a() {}, set 'a'(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:            `var o = { get ['abc']() {}, set ['abc'](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [1e2]() {}, set 100(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var o = { get abc() {}, set [`abc`](foo) {} };",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get ['123']() {}, set 123(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [a]() {}, set [a](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [a]() {}, set [(a)](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [(a)]() {}, set [a](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [a]() {}, set [ a ](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [/*comment*/a/*comment*/]() {}, set [a](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [f()]() {}, set [f()](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [f(a)]() {}, set [f(a)](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get [a + b]() {}, set [a + b](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var o = { get [`${a}`]() {}, set [`${a}`](foo) {} };",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var o = { get a() {}, set a(foo) {}, get b() {}, set b(bar) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { get a() {}, set c(foo) {}, set a(bar) {}, get b() {}, get c() {}, set b(baz) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:    `var o = { get a() {}, set a(foo) {}, b: bar };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
		},
		{
			Code:            `var o = { get a() {}, b, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get a() {}, ...b, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var o = { get a() {}, set a(foo) {}, ...a };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var o = { get a() {}, get a() {}, set a(foo) {}, };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get a() {}, set a(foo) {}, get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get a() {}, set a(foo) {}, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { set a(bar) {}, get a() {}, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get a() {}, get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { set a(foo) {}, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get a() {}, set a(foo) {}, a };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { a, get a() {}, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var o = { get a() {}, a:1, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var o = {a: 1};
 Object.defineProperty(o, 'b', 
{set: function(value) {
 val = value; 
},
 get: function() {
 return val; 
} 
});`},
		{Code: `var o = {set: function() {}}`},
		{Code: `Object.defineProperties(obj, {set: {value: function() {}}});`},
		{Code: `Object.create(null, {set: {value: function() {}}});`},
		{
			Code:    `var o = {get: function() {}}`,
			Options: "[{\"getWithoutSet\":true}]",
		},
		{
			Code:            `var o = {[set]: function() {}}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var set = 'value'; Object.defineProperty(obj, 'foo', {[set]: function(value) {}});`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} }`,
			Options:         "[{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get #a() {} }`,
			Options:         "[{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
		},
		{
			Code:            `class A { set a(foo) {} }`,
			Options:         "[{\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} set b(foo) {} static get c() {} static set d(bar) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class A { get a() {} set b(foo) {} static get c() {} static set d(bar) {} });`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":false,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":false,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} set b(foo) {} static get c() {} static set d(bar) {} }`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":false,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A {}`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class {})`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { constructor () {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static a() {} 'b'() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { [a]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { a() {} static a() {} b() {} static c() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { set a(foo) {} get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static get a() {} static set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static set a(foo) {} static get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class { set a(foo) {} get a() {} });`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get 'a'() {} set ['a'](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "class A { set [`a`](foo) {} get a() {} }",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get 'a'() {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { static get 1e2() {} static set [100](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get [a]() {} set [a](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { set [(f())](foo) {} get [(f())]() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static set [f(a)](foo) {} static get [f(a)]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} set b(foo) {} set a(bar) {} get b() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} set a(bar) {} b() {} set c(foo) {} get c() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class { get a() {} static set a(foo) {} set a(bar) {} static get a() {} });`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} b() {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { set a(foo) {} get a() {} b() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} get b() {} c() {} set b(foo) {} d() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} set a(foo) {} static a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { static get a() {} static b() {} static set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { static set a(foo) {} static get a() {} a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} get a() {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get [a]() {} set [a](foo) {} set [a](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "class A { get a() {} set 'a'(foo) {} get [`a`]() {} }",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { get a() {} set a(foo) {} a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `A = class { a() {} get a() {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static set a(foo) {} static set a(foo) {} static get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static get a() {} static set a(foo) {} static get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static set a(foo) {} static get a() {} static a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { get a() {} a() {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static set a(foo) {} static a() {} static get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `var o = { set a(value) {} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { set a(value) {} };`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { set a(value) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { set a(value) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { get a() {} };`,
			Options: "[{\"setWithoutGet\":false,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { get a() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { get a() {} };`,
			Options: "[{\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
				},
			},
		},
		{
			Code:    `var o = { get abc() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'abc'.",
				},
			},
		},
		{
			Code:    `var o = { get 'abc'() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'abc'.",
				},
			},
		},
		{
			Code:    `var o = { get 123() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter '123'.",
				},
			},
		},
		{
			Code:    `var o = { get 1e2() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter '100'.",
				},
			},
		},
		{
			Code:            `var o = { get ['abc']() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'abc'.",
				},
			},
		},
		{
			Code:            "var o = { get [`abc`]() {} };",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'abc'.",
				},
			},
		},
		{
			Code:            `var o = { get [123]() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter '123'.",
				},
			},
		},
		{
			Code:            `var o = { get [abc]() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
				},
			},
		},
		{
			Code:            `var o = { get [f(abc)]() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
				},
			},
		},
		{
			Code:            `var o = { get [a + b]() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
				},
			},
		},
		{
			Code:    `var o = { set abc(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'abc'.",
				},
			},
		},
		{
			Code:    `var o = { set 'abc'(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'abc'.",
				},
			},
		},
		{
			Code:    `var o = { set 123(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter '123'.",
				},
			},
		},
		{
			Code:    `var o = { set 1e2(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter '100'.",
				},
			},
		},
		{
			Code:            `var o = { set ['abc'](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'abc'.",
				},
			},
		},
		{
			Code:            "var o = { set [`abc`](foo) {} };",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'abc'.",
				},
			},
		},
		{
			Code:            `var o = { set [123](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter '123'.",
				},
			},
		},
		{
			Code:            `var o = { set [abc](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter.",
				},
			},
		},
		{
			Code:            `var o = { set [f(abc)](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter.",
				},
			},
		},
		{
			Code:            `var o = { set [a + b](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter.",
				},
			},
		},
		{
			Code:    `var o = { get a() {}, set b(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'b'.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { set a(foo) {}, get b() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for getter 'b'.",
					Column:             26,
				},
			},
		},
		{
			Code:    `var o = { get 1() {}, set b(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter '1'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'b'.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { get a() {}, set 1(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter '1'.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { get a() {}, set 'a '(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'a '.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { get ' a'() {}, set 'a'(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter ' a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             26,
				},
			},
		},
		{
			Code:    `var o = { get ''() {}, set ' '(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter ''.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter ' '.",
					Column:             24,
				},
			},
		},
		{
			Code:    `var o = { get ''() {}, set null(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter ''.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'null'.",
					Column:             24,
				},
			},
		},
		{
			Code:            "var o = { get [`a`]() {}, set b(foo) {} };",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'b'.",
					Column:             27,
				},
			},
		},
		{
			Code:            `var o = { get [a]() {}, set [b](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter.",
					Column:             25,
				},
			},
		},
		{
			Code:            `var o = { get [a]() {}, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             25,
				},
			},
		},
		{
			Code:            `var o = { get a() {}, set [a](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter.",
					Column:             23,
				},
			},
		},
		{
			Code:            `var o = { get [a + b]() {}, set [a - b](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter.",
					Column:             29,
				},
			},
		},
		{
			Code:            "var o = { get [`${0} `]() {}, set [`${0}`](foo) {} };",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter.",
					Column:             31,
				},
			},
		},
		{
			Code:    `var o = { get a() {}, get b() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for getter 'b'.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { set a(foo) {}, set b(bar) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'b'.",
					Column:             26,
				},
			},
		},
		{
			Code:    `var o = { get a() {}, set b(foo) {}, set c(foo) {}, get d() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'b'.",
					Column:             23,
				},
				{
					MessageDescription: "Getter is not present for setter 'c'.",
					Column:             38,
				},
				{
					MessageDescription: "Setter is not present for getter 'd'.",
					Column:             53,
				},
			},
		},
		{
			Code:    `var o1 = { get a() {} }, o2 = { set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             12,
				},
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             33,
				},
			},
		},
		{
			Code:    `var o1 = { set a(foo) {} }, o2 = { get a() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             12,
				},
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             36,
				},
			},
		},
		{
			Code:    `var o = { get a() {}, get b() {}, set b(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:    `var o = { get b() {}, get a() {}, set b(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { get b() {}, set b(foo) {}, get a() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             38,
				},
			},
		},
		{
			Code:    `var o = { set a(foo) {}, get b() {}, set b(bar) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:    `var o = { get b() {}, set a(foo) {}, set b(bar) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             23,
				},
			},
		},
		{
			Code:    `var o = { get b() {}, set b(bar) {}, set a(foo) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             38,
				},
			},
		},
		{
			Code:    `var o = { get v1() {}, set i1(foo) {}, get v2() {}, set v2(bar) {}, get i2() {}, set v1(baz) {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'i1'.",
					Column:             24,
				},
				{
					MessageDescription: "Setter is not present for getter 'i2'.",
					Column:             69,
				},
			},
		},
		{
			Code:            `var o = { get a() {}, get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             23,
				},
			},
		},
		{
			Code:            `var o = { set a(foo) {}, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             26,
				},
			},
		},
		{
			Code:            `var o = { a, get b() {}, c };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'b'.",
					Column:             14,
				},
			},
		},
		{
			Code:            `var o = { a, get b() {}, c, set d(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'b'.",
					Column:             14,
				},
				{
					MessageDescription: "Getter is not present for setter 'd'.",
					Column:             29,
				},
			},
		},
		{
			Code:            `var o = { get a() {}, a:1 };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `var o = { a, get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             14,
				},
			},
		},
		{
			Code:            `var o = { set a(foo) {}, a:1 };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `var o = { a, set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             14,
				},
			},
		},
		{
			Code:            `var o = { get a() {}, ...b };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `var o = { get a() {}, ...a };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `var o = { set a(foo) {}, ...a };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:    `var o = { get b() {} };`,
			Options: "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'b'.",
					Line:               1,
					Column:             11,
					EndLine:            1,
					EndColumn:          16,
				},
			},
		},
		{
			Code: `var o = {
  set [
 a](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for setter.",
					Line:               2,
					Column:             3,
					EndLine:            3,
					EndColumn:          4,
				},
			},
		},
		{
			Code: `var o = {d: 1};
 Object.defineProperty(o, 'c', 
{set: function(value) {
 val = value; 
} 
});`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code: `Reflect.defineProperty(obj, 'foo', {set: function(value) {}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code: `Object.defineProperties(obj, {foo: {set: function(value) {}}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code: `Object.create(null, {foo: {set: function(value) {}}});`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code: `var o = {d: 1};
 Object?.defineProperty(o, 'c', 
{set: function(value) {
 val = value; 
} 
});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `Reflect?.defineProperty(obj, 'foo', {set: function(value) {}});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `Object?.defineProperties(obj, {foo: {set: function(value) {}}});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `Object?.create(null, {foo: {set: function(value) {}}});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code: `var o = {d: 1};
 (Object?.defineProperty)(o, 'c', 
{set: function(value) {
 val = value; 
} 
});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `(Reflect?.defineProperty)(obj, 'foo', {set: function(value) {}});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `(Object?.defineProperties)(obj, {foo: {set: function(value) {}}});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `(Object?.create)(null, {foo: {set: function(value) {}}});`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present in property descriptor.",
				},
			},
		},
		{
			Code:            `class A { set a(foo) {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
				},
			},
		},
		{
			Code:            `class A { get a() {} set b(foo) {} }`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'b'.",
				},
			},
		},
		{
			Code:            `class A { get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
				},
			},
		},
		{
			Code:            `class A { set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
				},
			},
		},
		{
			Code:            `class A { static get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
				},
			},
		},
		{
			Code:            `class A { static set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
				},
			},
		},
		{
			Code:            `A = class { get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
				},
			},
		},
		{
			Code:            `A = class { get a() {} set b(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
				},
				{
					MessageDescription: "Getter is not present for class setter 'b'.",
				},
			},
		},
		{
			Code:            `class A { set a(value) {} }`,
			Options:         "[{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
				},
			},
		},
		{
			Code:            `class A { static set a(value) {} }`,
			Options:         "[{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
				},
			},
		},
		{
			Code:            `A = class { set a(value) {} };`,
			Options:         "[{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
				},
			},
		},
		{
			Code:            `(class A { static set a(value) {} });`,
			Options:         "[{\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
				},
			},
		},
		{
			Code:            `class A { set '#a'(foo) {} }`,
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter '#a'.",
				},
			},
		},
		{
			Code:            `class A { set #a(foo) {} }`,
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class private setter #a.",
				},
			},
		},
		{
			Code:            `class A { static set '#a'(foo) {} }`,
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter '#a'.",
				},
			},
		},
		{
			Code:            `class A { static set #a(foo) {} }`,
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static private setter #a.",
				},
			},
		},
		{
			Code:            `class A { set a(value) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":false,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
				},
			},
		},
		{
			Code:            `A = class { static set a(value) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
				},
			},
		},
		{
			Code:            `let foo = class A { get a() {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
				},
			},
		},
		{
			Code:            `class A { static get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
				},
			},
		},
		{
			Code:            `(class { get a() {} });`,
			Options:         "[{\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
				},
			},
		},
		{
			Code:            `class A { get '#a'() {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter '#a'.",
				},
			},
		},
		{
			Code:            `class A { get #a() {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class private getter #a.",
				},
			},
		},
		{
			Code:            `class A { static get '#a'() {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter '#a'.",
				},
			},
		},
		{
			Code:            `class A { static get #a() {} };`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static private getter #a.",
				},
			},
		},
		{
			Code:            `class A { get abc() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'abc'.",
				},
			},
		},
		{
			Code:            `A = class { static set 'abc'(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'abc'.",
				},
			},
		},
		{
			Code:            `(class { get 123() {} });`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter '123'.",
				},
			},
		},
		{
			Code:            `class A { static get 1e2() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter '100'.",
				},
			},
		},
		{
			Code:            `A = class { get ['abc']() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'abc'.",
				},
			},
		},
		{
			Code:            "class A { set [`abc`](foo) {} }",
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'abc'.",
				},
			},
		},
		{
			Code:            `class A { static get [123]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter '123'.",
				},
			},
		},
		{
			Code:            `class A { get [abc]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter.",
				},
			},
		},
		{
			Code:            `class A { static get [f(abc)]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter.",
				},
			},
		},
		{
			Code:            `A = class { set [a + b](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter.",
				},
			},
		},
		{
			Code:            `class A { get ['constructor']() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'constructor'.",
				},
			},
		},
		{
			Code:            `class A { get a() {} set b(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter 'b'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `A = class { set a(foo) {} get b() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Setter is not present for class getter 'b'.",
					Column:             27,
				},
			},
		},
		{
			Code:            `A = class { static get a() {} static set b(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Getter is not present for class static setter 'b'.",
					Column:             31,
				},
			},
		},
		{
			Code:            `class A { get a() {} set b(foo) {} }`,
			Options:         "[{\"setWithoutGet\":false,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `class A { get a() {} set b(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":false,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'b'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `class A { get 'a '() {} set 'a'(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a '.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             25,
				},
			},
		},
		{
			Code:            `class A { get 'a'() {} set 1(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter '1'.",
					Column:             24,
				},
			},
		},
		{
			Code:            `class A { get 1() {} set 2(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter '1'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter '2'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `class A { get ''() {} set null(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter ''.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter 'null'.",
					Column:             23,
				},
			},
		},
		{
			Code:            `class A { get a() {} set [a](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter.",
					Column:             22,
				},
			},
		},
		{
			Code:            `class A { get [a]() {} set [b](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter.",
					Column:             24,
				},
			},
		},
		{
			Code:            `class A { get [a]() {} set [a++](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter.",
					Column:             24,
				},
			},
		},
		{
			Code:            `class A { get [a + b]() {} set [a - b](foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter.",
					Column:             28,
				},
			},
		},
		{
			Code:            `class A { get #a() {} set '#a'(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class private getter #a.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter '#a'.",
					Column:             23,
				},
			},
		},
		{
			Code:            `class A { get '#a'() {} set #a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":13}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter '#a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class private setter #a.",
					Column:             25,
				},
			},
		},
		{
			Code:            `class A { get a() {} static set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `A = class { static get a() {} set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             31,
				},
			},
		},
		{
			Code:            `class A { set [a](foo) {} static get [a]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for class static getter.",
					Column:             27,
				},
			},
		},
		{
			Code:            `class A { static set [a](foo) {} get [a]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             34,
				},
			},
		},
		{
			Code:            `class A { get a() {} get b() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for class getter 'b'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `A = class { get a() {} get [b]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             24,
				},
			},
		},
		{
			Code:            `class A { get [a]() {} get [b]() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             24,
				},
			},
		},
		{
			Code:            `A = class { set a(foo) {} set b(bar) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Getter is not present for class setter 'b'.",
					Column:             27,
				},
			},
		},
		{
			Code:            `class A { static get a() {} static get b() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for class static getter 'b'.",
					Column:             29,
				},
			},
		},
		{
			Code:            `A = class { static set a(foo) {} static set b(bar) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Getter is not present for class static setter 'b'.",
					Column:             34,
				},
			},
		},
		{
			Code:            `class A { static get a() {} set b(foo) {} static set c(bar) {} get d() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter 'b'.",
					Column:             29,
				},
				{
					MessageDescription: "Getter is not present for class static setter 'c'.",
					Column:             43,
				},
				{
					MessageDescription: "Setter is not present for class getter 'd'.",
					Column:             64,
				},
			},
		},
		{
			Code:            `class A { get a() {} } class B { set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             34,
				},
			},
		},
		{
			Code:            `A = class { set a(foo) {} }, class { get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             38,
				},
			},
		},
		{
			Code:            `A = class { get a() {} }, { set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Getter is not present for setter 'a'.",
					Column:             29,
				},
			},
		},
		{
			Code:            `A = { get a() {} }, class { set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for getter 'a'.",
					Column:             7,
				},
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             29,
				},
			},
		},
		{
			Code:            `class A { get a() {} get b() {} set b(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `A = class { get b() {} get a() {} set b(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             24,
				},
			},
		},
		{
			Code:            `class A { set b(foo) {} get b() {} set a(bar) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             36,
				},
			},
		},
		{
			Code:            `A = class { static get b() {} set a(foo) {} static set b(bar) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             31,
				},
			},
		},
		{
			Code:            `class A { static set a(foo) {} get b() {} set b(bar) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `class A { get b() {} static get a() {} set b(bar) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `class A { static set b(foo) {} static get a() {} static get b() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             32,
				},
			},
		},
		{
			Code:            `class A { get [v1](){} static set i1(foo){} static set v2(bar){} get [i2](){} static get i3(){} set [v1](baz){} static get v2(){} set i4(quux){} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'i1'.",
					Column:             24,
				},
				{
					MessageDescription: "Setter is not present for class getter.",
					Column:             66,
				},
				{
					MessageDescription: "Setter is not present for class static getter 'i3'.",
					Column:             79,
				},
				{
					MessageDescription: "Getter is not present for class setter 'i4'.",
					Column:             131,
				},
			},
		},
		{
			Code:            `class A { get a() {} get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             22,
				},
			},
		},
		{
			Code:            `A = class { set a(foo) {} set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             27,
				},
			},
		},
		{
			Code:            `A = class { static get a() {} static get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             13,
				},
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             31,
				},
			},
		},
		{
			Code:            `class A { set a(foo) {} set a(foo) {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             11,
				},
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             25,
				},
			},
		},
		{
			Code:            `class A { a() {} get b() {} c() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'b'.",
					Column:             18,
				},
			},
		},
		{
			Code:            `A = class { a() {} get b() {} c() {} set d(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'b'.",
					Column:             20,
				},
				{
					MessageDescription: "Getter is not present for class setter 'd'.",
					Column:             38,
				},
			},
		},
		{
			Code:            `class A { static a() {} get b() {} static c() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'b'.",
					Column:             25,
				},
			},
		},
		{
			Code:            `class A { a() {} get a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Column:             18,
				},
			},
		},
		{
			Code:            `A = class { static a() {} set a(foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter 'a'.",
					Column:             27,
				},
			},
		},
		{
			Code:            `class A { a() {} static get b() {} c() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'b'.",
					Column:             18,
				},
			},
		},
		{
			Code:            `A = class { static a() {} static set b(foo) {} static c() {} d() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'b'.",
					Column:             27,
				},
			},
		},
		{
			Code:            `class A { a() {} static get a() {} a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'a'.",
					Column:             18,
				},
			},
		},
		{
			Code:            `class A { static set a(foo) {} static a() {} }`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class static setter 'a'.",
					Column:             11,
				},
			},
		},
		{
			Code:            `class A { get a() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class getter 'a'.",
					Line:               1,
					Column:             11,
					EndLine:            1,
					EndColumn:          16,
				},
			},
		},
		{
			Code: `A = class {
  set [
 a](foo) {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Getter is not present for class setter.",
					Line:               2,
					Column:             3,
					EndLine:            3,
					EndColumn:          4,
				},
			},
		},
		{
			Code:            `class A { static get b() {} };`,
			Options:         "[{\"setWithoutGet\":true,\"getWithoutSet\":true,\"enforceForClassMembers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Setter is not present for class static getter 'b'.",
					Line:               1,
					Column:             11,
					EndLine:            1,
					EndColumn:          23,
				},
			},
		},
	})
}
