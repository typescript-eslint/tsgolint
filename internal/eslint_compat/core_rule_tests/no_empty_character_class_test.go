// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoEmptyCharacterClassRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-empty-character-class", []ValidTestCase{
		{Code: `var foo = /^abc[a-zA-Z]/;`},
		{Code: `var regExp = new RegExp("^abc[]");`},
		{Code: `var foo = /^abc/;`},
		{Code: `var foo = /[\[]/;`},
		{Code: `var foo = /[\]]/;`},
		{Code: `var foo = /\[][\]]/;`},
		{Code: `var foo = /[a-zA-Z\[]/;`},
		{Code: `var foo = /[[]/;`},
		{Code: `var foo = /[\[a-z[]]/;`},
		{Code: `var foo = /[\-\[\]\/\{\}\(\)\*\+\?\.\\^\$\|]/g;`},
		{Code: `var foo = /\s*:\s*/gim;`},
		{Code: `var foo = /[^]/;`},
		{Code: `var foo = /\[][^]/;`},
		{
			Code:            `var foo = /[\]]/uy;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = /[\]]/s;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var foo = /[\]]/d;`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `var foo = /\[]/`},
		{
			Code:            `var foo = /[[^]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[[\]]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[[\[]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[a--b]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[a&&b]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[[a][b]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[\q{}]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var foo = /[[^]--\p{ASCII}]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo = /^abc[]/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var foo = /foo[]bar/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (foo.match(/^abc[]/)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (/^abc[]/.test(foo)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var foo = /[]]/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var foo = /\[[]/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var foo = /\[\[\]a-z[]/;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[]]/d;`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[(]\u{0}*[]/u;`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[[]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[[a][]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[a[[b[]c]]d]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[a--[]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[[]--b]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[a&&[]]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var foo = /[[]&&b]/v;`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
