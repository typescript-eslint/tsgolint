// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNewParensRule(t *testing.T) {
	RunRuleTester(t, "{}", "new-parens", []ValidTestCase{
		{Code: `var a = new Date();`},
		{Code: `var a = new Date(function() {});`},
		{Code: `var a = new (Date)();`},
		{Code: `var a = new ((Date))();`},
		{Code: `var a = (new Date());`},
		{Code: `var a = new foo.Bar();`},
		{Code: `var a = (new Foo()).bar;`},
		{
			Code:            `new Storage<RootState>('state');`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:    `var a = new Date();`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var a = new foo.Bar();`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var a = (new Foo()).bar;`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var a = new Date;`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new Date(function() {});`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new (Date);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new ((Date));`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = (new Date);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new foo.Bar;`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = (new Foo).bar;`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new Person('Name')`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new Person('Name', 12)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = new ((Person))('Name');`,
			Options: "[\"never\"]",
		},
	}, []InvalidTestCase{
		{
			Code:   `var a = new Date;`,
			Output: `var a = new Date();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = new Date`,
			Output: `var a = new Date()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = new (Date);`,
			Output: `var a = new (Date)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = new (Date)`,
			Output: `var a = new (Date)()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = (new Date)`,
			Output: `var a = (new Date())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = (new Date)()`,
			Output: `var a = (new Date())()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = new foo.Bar;`,
			Output: `var a = new foo.Bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `var a = (new Foo).bar;`,
			Output: `var a = (new Foo()).bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var a = new Date;`,
			Output:  `var a = new Date();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var a = new foo.Bar;`,
			Output:  `var a = new foo.Bar();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var a = (new Foo).bar;`,
			Output:  `var a = (new Foo()).bar;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var a = new new Foo()`,
			Output:  `var a = new new Foo()()`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var a = new Date();`,
			Output:  `var a = (new Date);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = new Date()`,
			Output:  `var a = (new Date)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = new (Date)();`,
			Output:  `var a = (new (Date));`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = new (Date)()`,
			Output:  `var a = (new (Date))`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = (new Date())`,
			Output:  `var a = ((new Date))`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = (new Date())()`,
			Output:  `var a = ((new Date))()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = new foo.Bar();`,
			Output:  `var a = (new foo.Bar);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = (new Foo()).bar;`,
			Output:  `var a = ((new Foo)).bar;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
		{
			Code:    `var a = new new Foo()`,
			Output:  `var a = new (new Foo)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessary",
				},
			},
		},
	})
}
