// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoExtraSemiRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-extra-semi", []ValidTestCase{
		{Code: `var x = 5;`},
		{Code: `function foo(){}`},
		{Code: `for(;;);`},
		{Code: `while(0);`},
		{Code: `do;while(0);`},
		{Code: `for(a in b);`},
		{
			Code:            `for(a of b);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `if(true);`},
		{Code: `if(true); else;`},
		{Code: `foo: ;`},
		{Code: `with(foo);`},
		{
			Code:            `class A { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var A = class { };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() { this; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var A = class { a() { this; } };`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { } a;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { field; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { field = 0; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { static { foo; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export const x = 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export default 42;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
	}, []InvalidTestCase{
		{
			Code:   `var x = 5;;`,
			Output: `var x = 5;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `function foo(){};`,
			Output: `function foo(){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for(;;);;`,
			Output: `for(;;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `while(0);;`,
			Output: `while(0);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `do;while(0);;`,
			Output: `do;while(0);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `for(a in b);;`,
			Output: `for(a in b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `for(a of b);;`,
			Output:          `for(a of b);`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `if(true);;`,
			Output: `if(true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `if(true){} else;;`,
			Output: `if(true){} else;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `if(true){;} else {;}`,
			Output: `if(true){} else {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo:;;`,
			Output: `foo:;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `with(foo);;`,
			Output: `with(foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `with(foo){;}`,
			Output: `with(foo){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class A { static { ; } }`,
			Output:          `class A { static {  } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    20,
				},
			},
		},
		{
			Code:            `class A { static { a;; } }`,
			Output:          `class A { static { a; } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    22,
				},
			},
		},
		{
			Code:            `class A { ; }`,
			Output:          `class A {  }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    11,
				},
			},
		},
		{
			Code:            `class A { /*a*/; }`,
			Output:          `class A { /*a*/ }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    16,
				},
			},
		},
		{
			Code:            `class A { ; a() {} }`,
			Output:          `class A {  a() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    11,
				},
			},
		},
		{
			Code:            `class A { a() {}; }`,
			Output:          `class A { a() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    17,
				},
			},
		},
		{
			Code:            `class A { a() {}; b() {} }`,
			Output:          `class A { a() {} b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    17,
				},
			},
		},
		{
			Code:            `class A {; a() {}; b() {}; }`,
			Output:          `class A { a() {} b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    10,
				},
				{
					MessageId: "unexpected",
					Column:    18,
				},
				{
					MessageId: "unexpected",
					Column:    26,
				},
			},
		},
		{
			Code:            `class A { a() {}; get b() {} }`,
			Output:          `class A { a() {} get b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    17,
				},
			},
		},
		{
			Code:            `class A { field;; }`,
			Output:          `class A { field; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    17,
				},
			},
		},
		{
			Code:            `class A { static {}; }`,
			Output:          `class A { static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    20,
				},
			},
		},
		{
			Code:            `class A { static { a; }; foo(){} }`,
			Output:          `class A { static { a; } foo(){} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    24,
				},
			},
		},
		{
			Code: `; 'use strict'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `; ; 'use strict'`,
			Output: ` ; 'use strict'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `debugger;
;
'use strict'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() { ; 'bar'; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `{ ; 'foo'; }`,
			Output: `{  'foo'; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `; ('use strict');`,
			Output: ` ('use strict');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `; 1;`,
			Output: ` 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
