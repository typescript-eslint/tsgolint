// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestRadixRule(t *testing.T) {
	RunRuleTester(t, "{}", "radix", []ValidTestCase{
		{Code: `parseInt("10", 10);`},
		{Code: `parseInt("10", 2);`},
		{Code: `parseInt("10", 36);`},
		{Code: `parseInt("10", 0x10);`},
		{Code: `parseInt("10", 1.6e1);`},
		{Code: `parseInt("10", 10.0);`},
		{Code: `parseInt("10", foo);`},
		{Code: `Number.parseInt("10", foo);`},
		{
			Code:    `parseInt("10", 10);`,
			Options: "[\"always\"]",
		},
		{
			Code:    `parseInt("10");`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `parseInt("10", 8);`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `parseInt("10", foo);`,
			Options: "[\"as-needed\"]",
		},
		{Code: `parseInt`},
		{Code: `Number.foo();`},
		{Code: `Number[parseInt]();`},
		{
			Code:            `class C { #parseInt; foo() { Number.#parseInt(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #parseInt; foo() { Number.#parseInt(foo); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #parseInt; foo() { Number.#parseInt(foo, 'bar'); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #parseInt; foo() { Number.#parseInt(foo, 10); } }`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `var parseInt; parseInt();`},
		{
			Code:    `var parseInt; parseInt(foo);`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var parseInt; parseInt(foo, 10);`,
			Options: "[\"as-needed\"]",
		},
		{Code: `var Number; Number.parseInt();`},
		{
			Code:    `var Number; Number.parseInt(foo);`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var Number; Number.parseInt(foo, 10);`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `/* globals parseInt:off */ parseInt(foo);`,
			Options: "[\"always\"]",
		},
		{
			Code:            `Number.parseInt(foo, 10);`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"globals\":{\"Number\":\"off\"}}",
		},
	}, []InvalidTestCase{
		{
			Code:    `parseInt();`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingParameters",
				},
			},
		},
		{
			Code: `parseInt();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingParameters",
				},
			},
		},
		{
			Code: `parseInt("10");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `parseInt("10", 10);`,
						},
					},
				},
			},
		},
		{
			Code:            `parseInt("10",);`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `parseInt("10", 10,);`,
						},
					},
				},
			},
		},
		{
			Code: `parseInt((0, "10"));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `parseInt((0, "10"), 10);`,
						},
					},
				},
			},
		},
		{
			Code:            `parseInt((0, "10"),);`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `parseInt((0, "10"), 10,);`,
						},
					},
				},
			},
		},
		{
			Code: `parseInt("10", null);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", undefined);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", "foo");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", "123");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", 37);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `parseInt("10", 10.5);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `Number.parseInt();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingParameters",
				},
			},
		},
		{
			Code:    `Number.parseInt();`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingParameters",
				},
			},
		},
		{
			Code: `Number.parseInt("10");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `Number.parseInt("10", 10);`,
						},
					},
				},
			},
		},
		{
			Code: `Number.parseInt("10", 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `Number.parseInt("10", 37);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code: `Number.parseInt("10", 10.5);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidRadix",
				},
			},
		},
		{
			Code:    `parseInt("10", 10);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantRadix",
				},
			},
		},
		{
			Code:            `parseInt?.("10");`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `parseInt?.("10", 10);`,
						},
					},
				},
			},
		},
		{
			Code:            `Number.parseInt?.("10");`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `Number.parseInt?.("10", 10);`,
						},
					},
				},
			},
		},
		{
			Code:            `Number?.parseInt("10");`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `Number?.parseInt("10", 10);`,
						},
					},
				},
			},
		},
		{
			Code:            `(Number?.parseInt)("10");`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingRadix",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addRadixParameter10",
							Output:    `(Number?.parseInt)("10", 10);`,
						},
					},
				},
			},
		},
	})
}
