// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestIdMatchRule(t *testing.T) {
	RunRuleTester(t, "{}", "id-match", []ValidTestCase{
		{
			Code:    `__foo = "Matthieu"`,
			Options: "[\"^[a-z]+$\",{\"onlyDeclarations\":true}]",
		},
		{
			Code:    `firstname = "Matthieu"`,
			Options: "[\"^[a-z]+$\"]",
		},
		{
			Code:    `first_name = "Matthieu"`,
			Options: "[\"[a-z]+\"]",
		},
		{
			Code:    `firstname = "Matthieu"`,
			Options: "[\"^f\"]",
		},
		{
			Code:    `last_Name = "Larcher"`,
			Options: "[\"^[a-z]+(_[A-Z][a-z]+)*$\"]",
		},
		{
			Code:    `param = "none"`,
			Options: "[\"^[a-z]+(_[A-Z][a-z])*$\"]",
		},
		{
			Code:    `function noUnder(){}`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `no_under()`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `foo.no_under2()`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var foo = bar.no_under3;`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var foo = bar.no_under4.something;`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `foo.no_under5.qux = bar.no_under6.something;`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `if (bar.no_under7) {}`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var obj = { key: foo.no_under8 };`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var arr = [foo.no_under9];`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `[foo.no_under10]`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var arr = [foo.no_under11.qux];`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `[foo.no_under12.nesting]`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `if (foo.no_under13 === boom.no_under14) { [foo.no_under15] }`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var myArray = new Array(); var myDate = new Date();`,
			Options: "[\"^[a-z$]+([A-Z][a-z]+)*$\"]",
		},
		{
			Code:    `var x = obj._foo;`,
			Options: "[\"^[^_]+$\"]",
		},
		{
			Code:    `var obj = {key: no_under}`,
			Options: "[\"^[^_]+$\",{\"properties\":true,\"onlyDeclarations\":true}]",
		},
		{
			Code:            `var {key_no_under: key} = {}`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id: category_id } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { category_id = 1 } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var o = {key: 1}`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
		},
		{
			Code:    `var o = {no_under16: 1}`,
			Options: "[\"^[^_]+$\",{\"properties\":false}]",
		},
		{
			Code:    `obj.no_under17 = 2;`,
			Options: "[\"^[^_]+$\",{\"properties\":false}]",
		},
		{
			Code: `var obj = {
 no_under18: 1 
};
 obj.no_under19 = 2;`,
			Options: "[\"^[^_]+$\",{\"properties\":false}]",
		},
		{
			Code:    `obj.no_under20 = function(){};`,
			Options: "[\"^[^_]+$\",{\"properties\":false}]",
		},
		{
			Code:    `var x = obj._foo2;`,
			Options: "[\"^[^_]+$\",{\"properties\":false}]",
		},
		{
			Code: `
            const foo = Object.keys(bar);
            const a = Array.from(b);
            const bar = () => Array;
            `,
			Options:         "[\"^\\\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            const foo = {
                foo_one: 1,
                bar_one: 2,
                fooBar: 3
            };
            `,
			Options:         "[\"^[^_]+$\",{\"properties\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            const foo = {
                foo_one: 1,
                bar_one: 2,
                fooBar: 3
            };
            `,
			Options:         "[\"^[^_]+$\",{\"onlyDeclarations\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            const foo = {
                foo_one: 1,
                bar_one: 2,
                fooBar: 3
            };
            `,
			Options:         "[\"^[^_]+$\",{\"properties\":false,\"onlyDeclarations\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            const foo = {
                [a]: 1,
            };
            `,
			Options:         "[\"^[^a]\",{\"properties\":true,\"onlyDeclarations\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class x { foo() {} }`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class x { #foo() {} }`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class x { _foo = 1; }`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class x { _foo = 1; }`,
			Options:         "[\"^[^_]+$\",{\"classFields\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class x { #_foo = 1; }`,
			Options:         "[\"^[^_]+$\",{\"classFields\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class x { #_foo = 1; }`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `import foo from 'foo.json' with { type: 'json' }`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `export * from 'foo.json' with { type: 'json' }`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `export { default } from 'foo.json' with { type: 'json' }`,
			Options:         "[\"^def\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { with: { type: 'json' } })`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { 'with': { type: 'json' } })`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { with: { type } })`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
	}, []InvalidTestCase{
		{
			Code:    `var __foo = "Matthieu"`,
			Options: "[\"^[a-z]+$\",{\"onlyDeclarations\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `first_name = "Matthieu"`,
			Options: "[\"^[a-z]+$\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `first_name = "Matthieu"`,
			Options: "[\"^z\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `Last_Name = "Larcher"`,
			Options: "[\"^[a-z]+(_[A-Z][a-z])*$\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `var obj = {key: no_under}`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_under' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:    `function no_under21(){}`,
			Options: "[\"^[^_]+$\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `obj.no_under22 = function(){};`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `no_under23.foo = function(){};`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `[no_under24.baz]`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `if (foo.bar_baz === boom.bam_pow) { [no_under25.baz] }`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `foo.no_under26 = boom.bam_pow`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `var foo = { no_under27: boom.bam_pow }`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `foo.qux.no_under28 = { bar: boom.bam_pow }`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `var o = {no_under29: 1}`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:    `obj.no_under30 = 2;`,
			Options: "[\"^[^_]+$\",{\"properties\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notMatch",
				},
			},
		},
		{
			Code:            `var { category_id: category_alias } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'category_alias' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `var { category_id: category_alias } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'category_alias' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `var { category_id: categoryId, ...other_props } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"ignoreDestructuring\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'other_props' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `var { category_id } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'category_id' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `var { category_id = 1 } = query;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'category_id' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import no_camelcased from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import * as no_camelcased from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `export * as no_camelcased from "external-module";`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import { no_camelcased } from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import { no_camelcased as no_camel_cased } from "external module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camel_cased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import { camelCased as no_camel_cased } from "external module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camel_cased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import { camelCased, no_camelcased } from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import { no_camelcased as camelCased, another_no_camelcased } from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'another_no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import camelCased, { no_camelcased } from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `import no_camelcased, { another_no_camelcased as camelCased } from "external-module";`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `function foo({ no_camelcased }) {};`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `function foo({ no_camelcased = 'default value' }) {};`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `const no_camelcased = 0; function foo({ camelcased_value = no_camelcased }) {}`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
				{
					MessageDescription: "Identifier 'camelcased_value' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `const { bar: no_camelcased } = foo;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `function foo({ value_1: my_default }) {}`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'my_default' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `function foo({ isCamelcased: no_camelcased }) {};`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `var { foo: bar_baz = 1 } = quz;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'bar_baz' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `const { no_camelcased = false } = bar;`,
			Options:         "[\"^[^_]+$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'no_camelcased' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code: `
            const foo_variable = 1;
            class MyClass {
            }
            let a = new MyClass();
            let b = {id: 1};
            let c = Object.keys(b);
            let d = Array.from(b);
            let e = (Object) => Object.keys(obj, prop); // not global Object
            let f = (Array) => Array.from(obj, prop); // not global Array
            foo.Array = 5; // not global Array
            `,
			Options:         "[\"^\\\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'foo_variable' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               2,
					Column:             19,
				},
				{
					MessageDescription: "Identifier 'MyClass' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               3,
					Column:             19,
				},
				{
					MessageDescription: "Identifier 'Object' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               9,
					Column:             22,
				},
				{
					MessageDescription: "Identifier 'Object' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               9,
					Column:             33,
				},
				{
					MessageDescription: "Identifier 'Array' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               10,
					Column:             22,
				},
				{
					MessageDescription: "Identifier 'Array' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               10,
					Column:             32,
				},
				{
					MessageDescription: "Identifier 'Array' does not match the pattern '^\\$?[a-z]+([A-Z0-9][a-z0-9]+)*$'.",
					Line:               11,
					Column:             17,
				},
			},
		},
		{
			Code:            `class x { _foo() {} }`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier '_foo' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `class x { #_foo() {} }`,
			Options:         "[\"^[^_]+$\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier '#_foo' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `class x { _foo = 1; }`,
			Options:         "[\"^[^_]+$\",{\"classFields\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier '_foo' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code:            `class x { #_foo = 1; }`,
			Options:         "[\"^[^_]+$\",{\"classFields\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier '#_foo' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code: `
            const foo = {
                foo_one: 1,
                bar_one: 2,
                fooBar: 3
            };
            `,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"onlyDeclarations\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'foo_one' does not match the pattern '^[^_]+$'.",
				},
				{
					MessageDescription: "Identifier 'bar_one' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code: `
            const foo = {
                foo_one: 1,
                bar_one: 2,
                fooBar: 3
            };
            `,
			Options:         "[\"^[^_]+$\",{\"properties\":true,\"onlyDeclarations\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'foo_one' does not match the pattern '^[^_]+$'.",
				},
				{
					MessageDescription: "Identifier 'bar_one' does not match the pattern '^[^_]+$'.",
				},
			},
		},
		{
			Code: `
            const foo = {
                [a]: 1,
            };
            `,
			Options:         "[\"^[^a]\",{\"properties\":true,\"onlyDeclarations\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'a' does not match the pattern '^[^a]'.",
				},
			},
		},
		{
			Code: `
            const foo = {
                [a]: 1,
            };
            `,
			Options:         "[\"^[^a]\",{\"properties\":false,\"onlyDeclarations\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'a' does not match the pattern '^[^a]'.",
				},
			},
		},
		{
			Code:            `import('foo.json', { with: { [type]: 'json' } })`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'type' does not match the pattern '^foo'.",
				},
			},
		},
		{
			Code:            `import('foo.json', { with: { type: json } })`,
			Options:         "[\"^foo\",{\"properties\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Identifier 'json' does not match the pattern '^foo'.",
				},
			},
		},
	})
}
