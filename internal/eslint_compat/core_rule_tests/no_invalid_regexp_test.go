// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoInvalidRegexpRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-invalid-regexp", []ValidTestCase{
		{Code: `RegExp('')`},
		{Code: `RegExp()`},
		{Code: `RegExp('.', 'g')`},
		{Code: `new RegExp('.')`},
		{Code: `new RegExp`},
		{Code: `new RegExp('.', 'im')`},
		{Code: `global.RegExp('\\')`},
		{Code: `new RegExp('.', y)`},
		{Code: `new RegExp('.', 'y')`},
		{Code: `new RegExp('.', 'u')`},
		{Code: `new RegExp('.', 'yu')`},
		{Code: `new RegExp('/', 'yu')`},
		{Code: `new RegExp('\/', 'yu')`},
		{Code: `new RegExp('\\u{65}', 'u')`},
		{Code: `new RegExp('\\u{65}*', 'u')`},
		{Code: `new RegExp('[\\u{0}-\\u{1F}]', 'u')`},
		{Code: `new RegExp('.', 's')`},
		{Code: `new RegExp('(?<=a)b')`},
		{Code: `new RegExp('(?<!a)b')`},
		{Code: `new RegExp('(?<a>b)\k<a>')`},
		{Code: `new RegExp('(?<a>b)\k<a>', 'u')`},
		{Code: `new RegExp('\\p{Letter}', 'u')`},
		{Code: `RegExp('{', flags)`},
		{Code: `new RegExp('{', flags)`},
		{Code: `RegExp('\\u{0}*', flags)`},
		{Code: `new RegExp('\\u{0}*', flags)`},
		{
			Code:    `RegExp('{', flags)`,
			Options: "[{\"allowConstructorFlags\":[\"u\"]}]",
		},
		{
			Code:    `RegExp('\\u{0}*', flags)`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{Code: `new RegExp(pattern, 'g')`},
		{Code: `new RegExp('.' + '', 'g')`},
		{Code: `new RegExp(pattern, '')`},
		{Code: `new RegExp(pattern)`},
		{Code: `new RegExp('(?<\\ud835\\udc9c>.)', 'g')`},
		{Code: `new RegExp('(?<\\u{1d49c}>.)', 'g')`},
		{Code: `new RegExp('(?<𝒜>.)', 'g');`},
		{Code: `new RegExp('\\p{Script=Nandinagari}', 'u');`},
		{Code: `new RegExp('a+(?<Z>z)?', 'd')`},
		{Code: `new RegExp('\\p{Script=Cpmn}', 'u')`},
		{Code: `new RegExp('\\p{Script=Cypro_Minoan}', 'u')`},
		{Code: `new RegExp('\\p{Script=Old_Uyghur}', 'u')`},
		{Code: `new RegExp('\\p{Script=Ougr}', 'u')`},
		{Code: `new RegExp('\\p{Script=Tangsa}', 'u')`},
		{Code: `new RegExp('\\p{Script=Tnsa}', 'u')`},
		{Code: `new RegExp('\\p{Script=Toto}', 'u')`},
		{Code: `new RegExp('\\p{Script=Vith}', 'u')`},
		{Code: `new RegExp('\\p{Script=Vithkuqi}', 'u')`},
		{Code: `new RegExp('[A--B]', 'v')`},
		{Code: `new RegExp('[A&&B]', 'v')`},
		{Code: `new RegExp('[A--[0-9]]', 'v')`},
		{Code: `new RegExp('[\\p{Basic_Emoji}--\\q{a|bc|def}]', 'v')`},
		{Code: `new RegExp('[A--B]', flags)`},
		{Code: `new RegExp('[[]\\u{0}*', flags)`},
		{Code: `new RegExp('((?<k>a)|(?<k>b))')`},
		{Code: `new RegExp('(?ims:foo)')`},
		{Code: `new RegExp('(?ims-:foo)')`},
		{Code: `new RegExp('(?-ims:foo)')`},
		{Code: `new RegExp('(?s-i:foo)')`},
		{
			Code:    `new RegExp('.', 'g')`,
			Options: "[{\"allowConstructorFlags\":[]}]",
		},
		{
			Code:    `new RegExp('.', 'g')`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{
			Code:    `new RegExp('.', 'a')`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{
			Code:    `new RegExp('.', 'ag')`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{
			Code:    `new RegExp('.', 'ga')`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{
			Code:    `new RegExp(pattern, 'ga')`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{
			Code:    `new RegExp('.' + '', 'ga')`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
		},
		{
			Code:    `new RegExp('.', 'a')`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
		},
		{
			Code:    `new RegExp('.', 'z')`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
		},
		{
			Code:    `new RegExp('.', 'az')`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
		},
		{
			Code:    `new RegExp('.', 'za')`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
		},
		{
			Code:    `new RegExp('.', 'agz')`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
		},
	}, []InvalidTestCase{
		{
			Code: `RegExp('[');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `RegExp('.', 'z');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `RegExp('.', 'a');`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'a');`,
			Options: "[{\"allowConstructorFlags\":[]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'z');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `RegExp('.', 'a');`,
			Options: "[{\"allowConstructorFlags\":[\"A\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `RegExp('.', 'A');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'az');`,
			Options: "[{\"allowConstructorFlags\":[\"z\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'aa');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'aa');`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'aA');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'aaz');`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'azz');`,
			Options: "[{\"allowConstructorFlags\":[\"a\",\"z\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'aga');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'uu');`,
			Options: "[{\"allowConstructorFlags\":[\"u\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.', 'ouo');`,
			Options: "[{\"allowConstructorFlags\":[\"u\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp(')');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('\\a', 'u');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('\\a', 'u');`,
			Options: "[{\"allowConstructorFlags\":[\"u\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `RegExp('\\u{0}*');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('\\u{0}*');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('\\u{0}*', '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('\\u{0}*', 'a');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `RegExp('\\u{0}*');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('\\');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `RegExp(')' + '', 'a');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp('.' + '', 'az');`,
			Options: "[{\"allowConstructorFlags\":[\"z\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code:    `new RegExp(pattern, 'az');`,
			Options: "[{\"allowConstructorFlags\":[\"a\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('[[]', 'v');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('.', 'uv');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp(pattern, 'uv');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: "new RegExp('[A--B]' /* valid only with `v` flag */, 'u')",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: "new RegExp('[[]\\\\u{0}*' /* valid only with `u` flag */, 'v')",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?<k>a)(?<k>b)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?ii:foo)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?-ii:foo)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?i-i:foo)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?-:foo)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?g:foo)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
		{
			Code: `new RegExp('(?-u:foo)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regexMessage",
				},
			},
		},
	})
}
