// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferTemplateRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"script\"}}", "prefer-template", []ValidTestCase{
		{Code: `'use strict';`},
		{Code: `var foo = 'foo' + '\0';`},
		{Code: `var foo = 'bar';`},
		{Code: `var foo = 'bar' + 'baz';`},
		{Code: `var foo = foo + +'100';`},
		{Code: "var foo = `bar`;"},
		{Code: "var foo = `hello, ${name}!`;"},
		{Code: `var foo = ` + "`" + `foo` + "`" + ` + ` + "`" + `bar` + "`" + ` + "hoge";`},
		{Code: `var foo = ` + "`" + `foo` + "`" + ` +
    ` + "`" + `bar` + "`" + ` +
    "hoge";`},
	}, []InvalidTestCase{
		{
			Code:   `var foo = 'hello, ' + name + '!';`,
			Output: "var foo = `hello, ${  name  }!`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = bar + 'baz';`,
			Output: "var foo = `${bar  }baz`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "var foo = bar + `baz`;",
			Output: "var foo = `${bar  }baz`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = +100 + 'yen';`,
			Output: "var foo = `${+100  }yen`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = 'bar' + baz;`,
			Output: "var foo = `bar${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = '￥' + (n * 1000) + '-'`,
			Output: "var foo = `￥${  n * 1000  }-`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = 'aaa' + aaa; var bar = 'bbb' + bbb;`,
			Output: "var foo = `aaa${  aaa}`; var bar = `bbb${  bbb}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var string = (number + 1) + 'px';`,
			Output: "var string = `${number + 1  }px`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = 'bar' + baz + 'qux';`,
			Output: "var foo = `bar${  baz  }qux`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = '0 backslashes: ${bar}' + baz;`,
			Output: "var foo = `0 backslashes: \\${bar}${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = '1 backslash: \${bar}' + baz;`,
			Output: "var foo = `1 backslash: \\${bar}${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = '2 backslashes: \\${bar}' + baz;`,
			Output: "var foo = `2 backslashes: \\\\\\${bar}${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = '3 backslashes: \\\${bar}' + baz;`,
			Output: "var foo = `3 backslashes: \\\\\\${bar}${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "var foo = bar + 'this is a backtick: `' + baz;",
			Output: "var foo = `${bar  }this is a backtick: \\`${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "var foo = bar + 'this is a backtick preceded by a backslash: \\`' + baz;",
			Output: "var foo = `${bar  }this is a backtick preceded by a backslash: \\`${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "var foo = bar + 'this is a backtick preceded by two backslashes: \\\\`' + baz;",
			Output: "var foo = `${bar  }this is a backtick preceded by two backslashes: \\\\\\`${  baz}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "var foo = bar + `${baz}foo`;",
			Output: "var foo = `${bar  }${baz}foo`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `var foo = 'favorites: ' + favorites.map(f => {
    return f.name;
}) + ';';`,
			Output: `var foo = ` + "`" + `favorites: ${  favorites.map(f => {
    return f.name;
})  };` + "`" + `;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = bar + baz + 'qux';`,
			Output: "var foo = `${bar + baz  }qux`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `var foo = 'favorites: ' +
    favorites.map(f => {
        return f.name;
    }) +
';';`,
			Output: `var foo = ` + "`" + `favorites: ${ 
    favorites.map(f => {
        return f.name;
    }) 
};` + "`" + `;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = /* a */ 'bar' /* b */ + /* c */ baz /* d */ + 'qux' /* e */ ;`,
			Output: "var foo = /* a */ `bar${ /* b */  /* c */ baz /* d */  }qux` /* e */ ;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = bar + ('baz') + 'qux' + (boop);`,
			Output: "var foo = `${bar  }baz` + `qux${  boop}`;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + 'unescapes an escaped single quote in a single-quoted string: \''`,
			Output: "`${foo  }unescapes an escaped single quote in a single-quoted string: '`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + "unescapes an escaped double quote in a double-quoted string: \""`,
			Output: `` + "`" + `${foo  }unescapes an escaped double quote in a double-quoted string: "` + "`" + ``,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + 'does not unescape an escaped double quote in a single-quoted string: \"'`,
			Output: `` + "`" + `${foo  }does not unescape an escaped double quote in a single-quoted string: \"` + "`" + ``,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + "does not unescape an escaped single quote in a double-quoted string: \'"`,
			Output: "`${foo  }does not unescape an escaped single quote in a double-quoted string: \\'`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + 'handles unicode escapes correctly: \x27'`,
			Output: "`${foo  }handles unicode escapes correctly: \\x27`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `foo + 'does not autofix octal escape sequence' + '\033'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `foo + 'does not autofix non-octal decimal escape sequence' + '\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `foo + '\n other text \033'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `foo + '\0\1'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `foo + '\08'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + '\\033'`,
			Output: "`${foo  }\\\\033`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + '\0'`,
			Output: "`${foo  }\\0`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code: `"default-src 'self' https://*.google.com;"
            + "frame-ancestors 'none';"
            + "report-to " + foo + ";"`,
			Output: `` + "`" + `default-src 'self' https://*.google.com;` + "`" + `
            + ` + "`" + `frame-ancestors 'none';` + "`" + `
            + ` + "`" + `report-to ${  foo  };` + "`" + ``,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo`,
			Output: "`a` + `b${  foo}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + 'c' + 'd'`,
			Output: "`a` + `b${  foo  }c` + `d`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b + c' + foo + 'd' + 'e'`,
			Output: "`a` + `b + c${  foo  }d` + `e`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('c' + 'd')`,
			Output: "`a` + `b${  foo  }c` + `d`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('a' + 'b')`,
			Output: "`a` + `b${  foo  }a` + `b`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('c' + 'd') + ('e' + 'f')`,
			Output: "`a` + `b${  foo  }c` + `d` + `e` + `f`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + ('a' + 'b') + ('c' + 'd')`,
			Output: "`${foo  }a` + `b` + `c` + `d`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + foo + ('b' + 'c') + ('d' + bar + 'e')`,
			Output: "`a${  foo  }b` + `c` + `d${  bar  }e`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + ('b' + 'c') + ('d' + bar + 'e')`,
			Output: "`${foo  }b` + `c` + `d${  bar  }e`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('c' + 'd' + 'e')`,
			Output: "`a` + `b${  foo  }c` + `d` + `e`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('c' + bar + 'd')`,
			Output: "`a` + `b${  foo  }c${  bar  }d`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('c' + bar + ('d' + 'e') + 'f')`,
			Output: "`a` + `b${  foo  }c${  bar  }d` + `e` + `f`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + 'b' + foo + ('c' + bar + 'e') + 'f' + test`,
			Output: "`a` + `b${  foo  }c${  bar  }e` + `f${  test}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + foo + ('b' + bar + 'c') + ('d' + test)`,
			Output: "`a${  foo  }b${  bar  }c` + `d${  test}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + foo + ('b' + 'c') + ('d' + bar)`,
			Output: "`a${  foo  }b` + `c` + `d${  bar}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `foo + ('a' + bar + 'b') + 'c' + test`,
			Output: "`${foo  }a${  bar  }b` + `c${  test}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "'a' + '`b`' + c",
			Output: "`a` + `\\`b\\`${  c}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "'a' + '`b` + `c`' + d",
			Output: "`a` + `\\`b\\` + \\`c\\`${  d}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "'a' + b + ('`c`' + '`d`')",
			Output: "`a${  b  }\\`c\\`` + `\\`d\\``",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "'`a`' + b + ('`c`' + '`d`')",
			Output: "`\\`a\\`${  b  }\\`c\\`` + `\\`d\\``",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "foo + ('`a`' + bar + '`b`') + '`c`' + test",
			Output: "`${foo  }\\`a\\`${  bar  }\\`b\\`` + `\\`c\\`${  test}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + ('b' + 'c') + d`,
			Output: "`a` + `b` + `c${  d}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "'a' + ('`b`' + '`c`') + d",
			Output: "`a` + `\\`b\\`` + `\\`c\\`${  d}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `a + ('b' + 'c') + d`,
			Output: "`${a  }b` + `c${  d}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `a + ('b' + 'c') + (d + 'e')`,
			Output: "`${a  }b` + `c${  d  }e`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "a + ('`b`' + '`c`') + d",
			Output: "`${a  }\\`b\\`` + `\\`c\\`${  d}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   "a + ('`b` + `c`' + '`d`') + e",
			Output: "`${a  }\\`b\\` + \\`c\\`` + `\\`d\\`${  e}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + ('b' + 'c' + 'd') + e`,
			Output: "`a` + `b` + `c` + `d${  e}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'a' + ('b' + 'c' + 'd' + (e + 'f') + 'g' +'h' + 'i') + j`,
			Output: "`a` + `b` + `c` + `d${  e  }fg` +`h` + `i${  j}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `a + (('b' + 'c') + 'd')`,
			Output: "`${a  }b` + `c` + `d`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `(a + 'b') + ('c' + 'd') + e`,
			Output: "`${a  }b` + `c` + `d${  e}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `var foo = "Hello " + "world " + "another " + test`,
			Output: "var foo = `Hello ` + `world ` + `another ${  test}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `'Hello ' + '"world" ' + test`,
			Output: `` + "`" + `Hello ` + "`" + ` + ` + "`" + `"world" ${  test}` + "`" + ``,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
		{
			Code:   `"Hello " + "'world' " + test`,
			Output: "`Hello ` + `'world' ${  test}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedStringConcatenation",
				},
			},
		},
	})
}
