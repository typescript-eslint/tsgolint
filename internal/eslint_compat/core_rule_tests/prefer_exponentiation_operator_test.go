// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferExponentiationOperatorRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "prefer-exponentiation-operator", []ValidTestCase{
		{Code: `Object.pow(a, b)`},
		{Code: `Math.max(a, b)`},
		{Code: `Math`},
		{Code: `Math(a, b)`},
		{Code: `pow`},
		{Code: `pow(a, b)`},
		{Code: `Math.pow`},
		{Code: `Math.Pow(a, b)`},
		{Code: `math.pow(a, b)`},
		{Code: `foo.Math.pow(a, b)`},
		{Code: `new Math.pow(a, b)`},
		{Code: `Math[pow](a, b)`},
		{
			Code:            `globalThis.Object.pow(a, b)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `globalThis.Math.max(a, b)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: `/* globals Math:off*/ Math.pow(a, b)`},
		{Code: `let Math; Math.pow(a, b);`},
		{Code: `if (foo) { const Math = 1; Math.pow(a, b); }`},
		{Code: `var x = function Math() { Math.pow(a, b); }`},
		{Code: `function foo(Math) { Math.pow(a, b); }`},
		{Code: `function foo() { Math.pow(a, b); var Math; }`},
		{
			Code:            `globalThis.Math.pow(a, b)`,
			LanguageOptions: "{\"ecmaVersion\":2019}",
		},
		{
			Code:            `globalThis.Math.pow(a, b)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `globalThis.Math.pow(a, b)`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                var globalThis = bar;
                globalThis.Math.pow(a, b)
            `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: `class C { #pow; foo() { Math.#pow(a, b); } }`},
	}, []InvalidTestCase{
		{
			Code:   `Math.pow(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math).pow(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math['pow'](a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math)['pow'](a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `var x=Math
.  pow( a, 
 b )`,
			Output: `var x=a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:            `globalThis.Math.pow(a, b)`,
			Output:          `a**b`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code:            `globalThis.Math['pow'](a, b)`,
			Output:          `a**b`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code:   "Math[`pow`](a, b)",
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   "Math[`${'pow'}`](a, b)",
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math['p' + 'o' + 'w'](a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `var x = Math.pow(a, b);`,
			Output: `var x = a**b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `if(Math.pow(a, b)){}`,
			Output: `if(a**b){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `for(;Math.pow(a, b);){}`,
			Output: `for(;a**b;){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `switch(foo){ case Math.pow(a, b): break; }`,
			Output: `switch(foo){ case a**b: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `{ foo: Math.pow(a, b) }`,
			Output: `{ foo: a**b }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `function foo(bar, baz = Math.pow(a, b), quux){}`,
			Output: `function foo(bar, baz = a**b, quux){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   "`${Math.pow(a, b)}`",
			Output: "`${a**b}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `class C extends Math.pow(a, b) {}`,
			Output: `class C extends (a**b) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `+ Math.pow(a, b)`,
			Output: `+ (a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `- Math.pow(a, b)`,
			Output: `- (a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `! Math.pow(a, b)`,
			Output: `! (a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `typeof Math.pow(a, b)`,
			Output: `typeof (a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `void Math.pow(a, b)`,
			Output: `void (a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b) .toString()`,
			Output: `(a**b) .toString()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b) ()`,
			Output: `(a**b) ()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   "Math.pow(a, b) ``",
			Output: "(a**b) ``",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(class extends Math.pow(a, b) {})`,
			Output: `(class extends (a**b) {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `+(Math.pow(a, b))`,
			Output: `+(a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math.pow(a, b)).toString()`,
			Output: `(a**b).toString()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(class extends (Math.pow(a, b)) {})`,
			Output: `(class extends (a**b) {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `class C extends (Math.pow(a, b)) {}`,
			Output: `class C extends (a**b) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `f(Math.pow(a, b))`,
			Output: `f(a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `f(foo, Math.pow(a, b))`,
			Output: `f(foo, a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `f(Math.pow(a, b), foo)`,
			Output: `f(a**b, foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `f(foo, Math.pow(a, b), bar)`,
			Output: `f(foo, a**b, bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `new F(Math.pow(a, b))`,
			Output: `new F(a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `new F(foo, Math.pow(a, b))`,
			Output: `new F(foo, a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `new F(Math.pow(a, b), foo)`,
			Output: `new F(a**b, foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `new F(foo, Math.pow(a, b), bar)`,
			Output: `new F(foo, a**b, bar)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `obj[Math.pow(a, b)]`,
			Output: `obj[a**b]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `[foo, Math.pow(a, b), bar]`,
			Output: `[foo, a**b, bar]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a * Math.pow(b, c)`,
			Output: `a * b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b) * c`,
			Output: `a**b * c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a + Math.pow(b, c)`,
			Output: `a + b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b)/c`,
			Output: `a**b/c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a < Math.pow(b, c)`,
			Output: `a < b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b) > c`,
			Output: `a**b > c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a === Math.pow(b, c)`,
			Output: `a === b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a ? Math.pow(b, c) : d`,
			Output: `a ? b**c : d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a = Math.pow(b, c)`,
			Output: `a = b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a += Math.pow(b, c)`,
			Output: `a += b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `function *f() { yield Math.pow(a, b) }`,
			Output: `function *f() { yield a**b }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a, Math.pow(b, c), d`,
			Output: `a, b**c, d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a ** Math.pow(b, c)`,
			Output: `a ** b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b) ** c`,
			Output: `(a**b) ** c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b ** c)`,
			Output: `a**b ** c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a ** b, c)`,
			Output: `(a ** b)**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a ** Math.pow(b ** c, d ** e) ** f`,
			Output: `a ** ((b ** c)**d ** e) ** f`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math.pow(a, b))`,
			Output: `(a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `foo + (Math.pow(a, b))`,
			Output: `foo + (a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math.pow(a, b)) + foo`,
			Output: `(a**b) + foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   "`${(Math.pow(a, b))}`",
			Output: "`${(a**b)}`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(2, 3)`,
			Output: `2**3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a.foo, b)`,
			Output: `a.foo**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b.foo)`,
			Output: `a**b.foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a(), b)`,
			Output: `a()**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b())`,
			Output: `a**b()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(++a, ++b)`,
			Output: `++a**++b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a++, ++b)`,
			Output: `a++**++b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a--, b--)`,
			Output: `a--**b--`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(--a, b--)`,
			Output: `--a**b--`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow((a), (b))`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(((a)), ((b)))`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow((a.foo), b)`,
			Output: `a.foo**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, (b.foo))`,
			Output: `a**b.foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow((a()), b)`,
			Output: `a()**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, (b()))`,
			Output: `a**b()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(+a, b)`,
			Output: `(+a)**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, +b)`,
			Output: `a**+b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(-a, b)`,
			Output: `(-a)**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, -b)`,
			Output: `a**-b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(-2, 3)`,
			Output: `(-2)**3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(2, -3)`,
			Output: `2**-3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `async () => Math.pow(await a, b)`,
			Output: `async () => (await a)**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `async () => Math.pow(a, await b)`,
			Output: `async () => a**await b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a * b, c)`,
			Output: `(a * b)**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b * c)`,
			Output: `a**(b * c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a / b, c)`,
			Output: `(a / b)**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b / c)`,
			Output: `a**(b / c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a + b, 3)`,
			Output: `(a + b)**3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(2, a - b)`,
			Output: `2**(a - b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a + b, c + d)`,
			Output: `(a + b)**(c + d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a = b, c = d)`,
			Output: `(a = b)**(c = d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a += b, c -= d)`,
			Output: `(a += b)**(c -= d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow((a, b), (c, d))`,
			Output: `(a, b)**(c, d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `function *f() { Math.pow(yield, yield) }`,
			Output: `function *f() { (yield)**(yield) }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow((a + b), (c + d))`,
			Output: `(a + b)**(c + d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+Math.pow(b, c)+d`,
			Output: `a+b**c+d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+Math.pow(++b, c)`,
			Output: `a+ ++b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(a)+(Math).pow((++b), c)`,
			Output: `(a)+ ++b**c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b)in c`,
			Output: `a**b in c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, (b))in (c)`,
			Output: `a**b in (c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+Math.pow(++b, c)in d`,
			Output: `a+ ++b**c in d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+Math.pow( ++b, c )in d`,
			Output: `a+ ++b**c in d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+ Math.pow(++b, c) in d`,
			Output: `a+ ++b**c in d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+/**/Math.pow(++b, c)/**/in d`,
			Output: `a+/**/++b**c/**/in d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `a+(Math.pow(++b, c))in d`,
			Output: `a+(++b**c)in d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `+Math.pow(++a, b)`,
			Output: `+(++a**b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b + c)in d`,
			Output: `a**(b + c)in d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b) + Math.pow(c,
 d)`,
			Output: `a**b + c**d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "useExponentiation",
					Line:      1,
					Column:    18,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code:   `Math.pow(Math.pow(a, b), Math.pow(c, d))`,
			Output: `Math.pow(a, b)**Math.pow(c, d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
					Column:    1,
					EndColumn: 41,
				},
				{
					MessageId: "useExponentiation",
					Column:    10,
					EndColumn: 24,
				},
				{
					MessageId: "useExponentiation",
					Column:    26,
					EndColumn: 40,
				},
			},
		},
		{
			Code:   `Math.pow(a, b)**Math.pow(c, d)`,
			Output: `(a**b)**c**d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
					Column:    1,
					EndColumn: 15,
				},
				{
					MessageId: "useExponentiation",
					Column:    17,
					EndColumn: 31,
				},
			},
		},
		{
			Code: `Math.pow()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b, c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b, c, d)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(...a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(...a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, ...b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b, ...c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `/* comment */Math.pow(a, b)`,
			Output: `/* comment */a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math/**/.pow(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math//
.pow(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math[//
'pow'](a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math['pow'/**/](a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math./**/pow(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow/**/(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow//
(a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(/**/a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a,//
 b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b/**/)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b//
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow(a, b)/* comment */;`,
			Output: `a**b/* comment */;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code: `Math.pow(a, b)// comment
;`,
			Output: `a**b// comment
;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math.pow?.(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math?.pow(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `Math?.pow?.(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math?.pow)(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:   `(Math?.pow)?.(a, b)`,
			Output: `a**b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:            `Math.pow(a, b as any)`,
			Output:          `a**(b as any)`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:            `Math.pow(a as any, b)`,
			Output:          `(a as any)**b`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
		{
			Code:            `Math.pow(a, b) as any`,
			Output:          `(a**b) as any`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useExponentiation",
				},
			},
		},
	})
}
