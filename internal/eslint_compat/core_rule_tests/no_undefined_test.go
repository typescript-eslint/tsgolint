// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUndefinedRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "no-undefined", []ValidTestCase{
		{Code: `void 0`},
		{Code: `void!0`},
		{Code: `void-0`},
		{Code: `void+0`},
		{Code: `null`},
		{Code: `undefine`},
		{Code: `ndefined`},
		{Code: `a.undefined`},
		{Code: `this.undefined`},
		{Code: `global['undefined']`},
		{Code: `({ undefined: bar })`},
		{Code: `({ undefined: bar } = foo)`},
		{Code: `({ undefined() {} })`},
		{Code: `class Foo { undefined() {} }`},
		{Code: `(class { undefined() {} })`},
		{
			Code:            `import { undefined as a } from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { undefined } from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { undefined as a } from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { a as undefined } from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
	}, []InvalidTestCase{
		{
			Code: `undefined`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `undefined.a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `a[undefined]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `undefined[0]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `f(undefined)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `function f(undefined) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `function f() { var undefined; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `function f() { undefined = true; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `var undefined;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `try {} catch(undefined) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `function undefined() {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `(function undefined(){}())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `var foo = function undefined() {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `foo = function undefined() {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `undefined = true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `var undefined = true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `({ undefined })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `({ [undefined]: foo })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `({ bar: undefined })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `({ bar: undefined } = foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `var { undefined } = foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `var { bar: undefined } = foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `({ undefined: function undefined() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
					Column:    24,
				},
			},
		},
		{
			Code: `({ foo: function undefined() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `class Foo { [undefined]() {} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `(class { [undefined]() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `var undefined = true; undefined = false;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
					Column:    5,
				},
				{
					MessageId: "unexpectedUndefined",
					Column:    23,
				},
			},
		},
		{
			Code:            `import undefined from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code:            `import * as undefined from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code:            `import { undefined } from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code:            `import { a as undefined } from 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `let a = [b, ...undefined]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `[a, ...undefined] = b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
		{
			Code: `[a = undefined] = b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUndefined",
				},
			},
		},
	})
}
