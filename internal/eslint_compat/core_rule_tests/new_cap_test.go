// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNewCapRule(t *testing.T) {
	RunRuleTester(t, "{}", "new-cap", []ValidTestCase{
		{Code: `var x = new Constructor();`},
		{Code: `var x = new a.b.Constructor();`},
		{Code: `var x = new a.b['Constructor']();`},
		{Code: `var x = new a.b[Constructor]();`},
		{Code: `var x = new a.b[constructor]();`},
		{Code: `var x = new function(){};`},
		{Code: `var x = new _;`},
		{Code: `var x = new $;`},
		{Code: `var x = new Σ;`},
		{Code: `var x = new _x;`},
		{Code: `var x = new $x;`},
		{Code: `var x = new this;`},
		{Code: `var x = Array(42)`},
		{Code: `var x = Boolean(42)`},
		{Code: `var x = Date(42)`},
		{Code: `var x = Date.UTC(2000, 0)`},
		{Code: `var x = Error('error')`},
		{Code: `var x = Function('return 0')`},
		{Code: `var x = Number(42)`},
		{Code: `var x = Object(null)`},
		{Code: `var x = RegExp(42)`},
		{Code: `var x = String(42)`},
		{Code: `var x = Symbol('symbol')`},
		{Code: `var x = BigInt('1n')`},
		{Code: `var x = _();`},
		{Code: `var x = $();`},
		{
			Code:    `var x = Foo(42)`,
			Options: "[{\"capIsNew\":false}]",
		},
		{
			Code:    `var x = bar.Foo(42)`,
			Options: "[{\"capIsNew\":false}]",
		},
		{
			Code:    `var x = Foo.bar(42)`,
			Options: "[{\"capIsNew\":false}]",
		},
		{Code: `var x = bar[Foo](42)`},
		{
			Code:    `var x = bar['Foo'](42)`,
			Options: "[{\"capIsNew\":false}]",
		},
		{Code: `var x = Foo.bar(42)`},
		{
			Code:    `var x = new foo(42)`,
			Options: "[{\"newIsCap\":false}]",
		},
		{Code: `var o = { 1: function() {} }; o[1]();`},
		{Code: `var o = { 1: function() {} }; new o[1]();`},
		{
			Code:    `var x = Foo(42);`,
			Options: "[{\"capIsNew\":true,\"capIsNewExceptions\":[\"Foo\"]}]",
		},
		{
			Code:    `var x = Foo(42);`,
			Options: "[{\"capIsNewExceptionPattern\":\"^Foo\"}]",
		},
		{
			Code:    `var x = new foo(42);`,
			Options: "[{\"newIsCap\":true,\"newIsCapExceptions\":[\"foo\"]}]",
		},
		{
			Code:    `var x = new foo(42);`,
			Options: "[{\"newIsCapExceptionPattern\":\"^foo\"}]",
		},
		{
			Code:    `var x = Object(42);`,
			Options: "[{\"capIsNewExceptions\":[\"Foo\"]}]",
		},
		{
			Code:    `var x = Foo.Bar(42);`,
			Options: "[{\"capIsNewExceptions\":[\"Bar\"]}]",
		},
		{
			Code:    `var x = Foo.Bar(42);`,
			Options: "[{\"capIsNewExceptions\":[\"Foo.Bar\"]}]",
		},
		{
			Code:    `var x = Foo.Bar(42);`,
			Options: "[{\"capIsNewExceptionPattern\":\"^Foo\\\\..\"}]",
		},
		{
			Code:    `var x = new foo.bar(42);`,
			Options: "[{\"newIsCapExceptions\":[\"bar\"]}]",
		},
		{
			Code:    `var x = new foo.bar(42);`,
			Options: "[{\"newIsCapExceptions\":[\"foo.bar\"]}]",
		},
		{
			Code:    `var x = new foo.bar(42);`,
			Options: "[{\"newIsCapExceptionPattern\":\"^foo\\\\..\"}]",
		},
		{
			Code:    `var x = new foo.bar(42);`,
			Options: "[{\"properties\":false}]",
		},
		{
			Code:    `var x = Foo.bar(42);`,
			Options: "[{\"properties\":false}]",
		},
		{
			Code:    `var x = foo.Bar(42);`,
			Options: "[{\"capIsNew\":false,\"properties\":false}]",
		},
		{
			Code:            `foo?.bar();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `(foo?.bar)();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `new (foo?.Bar)();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `(foo?.Bar)();`,
			Options:         "[{\"properties\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `new (foo?.bar)();`,
			Options:         "[{\"properties\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `Date?.UTC();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `(Date?.UTC)();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
	}, []InvalidTestCase{
		{
			Code: `var x = new c();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `var x = new φ;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `var x = new a.b.c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `var x = new a.b['c'];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var b = Foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `var b = a.Foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `var b = a['Foo']();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `var b = a.Date.UTC();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `var b = UTC();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `var a = B.C();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `var a = B
.C();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var a = new B.c();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `var a = new B.
c();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var a = new c();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `var a = new b[ ( 'foo' ) ]();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            "var a = new b[`foo`];",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var a = b[` + "`" + `\
Foo` + "`" + `]();`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Line:      1,
					Column:    11,
					EndLine:   2,
					EndColumn: 5,
				},
			},
		},
		{
			Code:    `var x = Foo.Bar(42);`,
			Options: "[{\"capIsNewExceptions\":[\"Foo\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
				},
			},
		},
		{
			Code:    `var x = Bar.Foo(42);`,
			Options: "[{\"capIsNewExceptionPattern\":\"^Foo\\\\..\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
				},
			},
		},
		{
			Code:    `var x = new foo.bar(42);`,
			Options: "[{\"newIsCapExceptions\":[\"foo\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
				},
			},
		},
		{
			Code:    `var x = new bar.foo(42);`,
			Options: "[{\"newIsCapExceptionPattern\":\"^foo\\\\..\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
				},
			},
		},
		{
			Code:            `new (foo?.bar)();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "lower",
					Column:    11,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `foo?.Bar();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Column:    6,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `(foo?.Bar)();`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "upper",
					Column:    7,
					EndColumn: 10,
				},
			},
		},
	})
}
