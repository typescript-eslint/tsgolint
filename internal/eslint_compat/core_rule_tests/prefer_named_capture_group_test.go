// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferNamedCaptureGroupRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018}}", "prefer-named-capture-group", []ValidTestCase{
		{Code: `/normal_regex/`},
		{Code: `/(?:[0-9]{4})/`},
		{Code: `/(?<year>[0-9]{4})/`},
		{Code: `/\u{1F680}/u`},
		{Code: `new RegExp()`},
		{Code: `new RegExp(foo)`},
		{Code: `new RegExp('')`},
		{Code: `new RegExp('(?<year>[0-9]{4})')`},
		{Code: `RegExp()`},
		{Code: `RegExp(foo)`},
		{Code: `RegExp('')`},
		{Code: `RegExp('(?<year>[0-9]{4})')`},
		{Code: `RegExp('(')`},
		{Code: `RegExp('\\u{1F680}', 'u')`},
		{Code: `new globalThis.RegExp('([0-9]{4})')`},
		{
			Code:            `new globalThis.RegExp('([0-9]{4})')`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `new globalThis.RegExp('([0-9]{4})')`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `new globalThis.RegExp()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `new globalThis.RegExp(foo)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `globalThis.RegExp(foo)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `
                var globalThis = bar;
                globalThis.RegExp(foo);
                `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `
                function foo () {
                    var globalThis = bar;
                    new globalThis.RegExp(baz);
                }
                `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: `new RegExp('(?<c>[[A--B]])', 'v')`},
		{Code: `new RegExp('([\\q])', 'v')`},
		{
			Code:            `/(?i:foo)bar/`,
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{Code: `new RegExp('(?i:foo)bar')`},
		{
			Code:            `/(?-i:foo)bar/`,
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{Code: `new RegExp('(?-i:foo)bar')`},
	}, []InvalidTestCase{
		{
			Code: `/([0-9]{4})/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp1>[0-9]{4})/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?:[0-9]{4})/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('([0-9]{4})')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `new RegExp('(?<temp1>[0-9]{4})')`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `new RegExp('(?:[0-9]{4})')`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp('([0-9]{4})')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 21,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `RegExp('(?<temp1>[0-9]{4})')`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `RegExp('(?:[0-9]{4})')`,
						},
					},
				},
			},
		},
		{
			Code: "new RegExp(`a(bc)d`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    "new RegExp(`a(?<temp1>bc)d`)",
						},
						{
							MessageId: "addNonCapture",
							Output:    "new RegExp(`a(?:bc)d`)",
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('ሴ噸(?:a)(b)');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `new RegExp('ሴ噸(?:a)(?<temp1>b)');`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `new RegExp('ሴ噸(?:a)(?:b)');`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('\u1234\u5678(?:a)(b)');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `/([0-9]{4})-(\w{5})/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 21,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp1>[0-9]{4})-(\w{5})/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?:[0-9]{4})-(\w{5})/`,
						},
					},
				},
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 21,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/([0-9]{4})-(?<temp1>\w{5})/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/([0-9]{4})-(?:\w{5})/`,
						},
					},
				},
			},
		},
		{
			Code: `/([0-9]{4})-(5)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 17,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp1>[0-9]{4})-(5)/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?:[0-9]{4})-(5)/`,
						},
					},
				},
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 17,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/([0-9]{4})-(?<temp1>5)/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/([0-9]{4})-(?:5)/`,
						},
					},
				},
			},
		},
		{
			Code: `/(?<temp2>(a))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 16,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp2>(?<temp3>a))/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?<temp2>(?:a))/`,
						},
					},
				},
			},
		},
		{
			Code: `/(?<temp2>(a)(?<temp5>b))/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 27,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp2>(?<temp6>a)(?<temp5>b))/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?<temp2>(?:a)(?<temp5>b))/`,
						},
					},
				},
			},
		},
		{
			Code: `/(?<temp1>[0-9]{4})-(\w{5})/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 29,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp1>[0-9]{4})-(?<temp2>\w{5})/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?<temp1>[0-9]{4})-(?:\w{5})/`,
						},
					},
				},
			},
		},
		{
			Code: `/(?<temp1>[0-9]{4})-(5)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp1>[0-9]{4})-(?<temp2>5)/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?<temp1>[0-9]{4})-(?:5)/`,
						},
					},
				},
			},
		},
		{
			Code: `/(?<temp1>a)(?<temp2>a)(a)(?<temp3>a)/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 39,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `/(?<temp1>a)(?<temp2>a)(?<temp4>a)(?<temp3>a)/`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `/(?<temp1>a)(?<temp2>a)(?:a)(?<temp3>a)/`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('(' + 'a)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `new RegExp('a(bc)d' + 'e')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `new RegExp("foo" + "(a)" + "(b)");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `new RegExp("foo" + "(?:a)" + "(b)");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `RegExp('(a)'+'')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `RegExp( '' + '(ab)')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: "new RegExp(`(ab)${''}`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `new RegExp(` + "`" + `(a)
` + "`" + `)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output: `new RegExp(` + "`" + `(?<temp1>a)
` + "`" + `)`,
						},
						{
							MessageId: "addNonCapture",
							Output: `new RegExp(` + "`" + `(?:a)
` + "`" + `)`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp(` + "`" + `a(b
c)d` + "`" + `)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output: `RegExp(` + "`" + `a(?<temp1>b
c)d` + "`" + `)`,
						},
						{
							MessageId: "addNonCapture",
							Output: `RegExp(` + "`" + `a(?:b
c)d` + "`" + `)`,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('a(b)\'')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: `RegExp('(a)\\d')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code: "RegExp(`\\a(b)`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
				},
			},
		},
		{
			Code:            `new globalThis.RegExp('([0-9]{4})')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 36,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `new globalThis.RegExp('(?<temp1>[0-9]{4})')`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `new globalThis.RegExp('(?:[0-9]{4})')`,
						},
					},
				},
			},
		},
		{
			Code:            `globalThis.RegExp('([0-9]{4})')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					EndColumn: 32,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `globalThis.RegExp('(?<temp1>[0-9]{4})')`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `globalThis.RegExp('(?:[0-9]{4})')`,
						},
					},
				},
			},
		},
		{
			Code: `
                function foo() { var globalThis = bar; }
                new globalThis.RegExp('([0-9]{4})');
            `,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      3,
					Column:    17,
					EndColumn: 52,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output: `
                function foo() { var globalThis = bar; }
                new globalThis.RegExp('(?<temp1>[0-9]{4})');
            `,
						},
						{
							MessageId: "addNonCapture",
							Output: `
                function foo() { var globalThis = bar; }
                new globalThis.RegExp('(?:[0-9]{4})');
            `,
						},
					},
				},
			},
		},
		{
			Code: `new RegExp('([[A--B]])', 'v')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "required",
					Line:      1,
					Column:    1,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "addGroupName",
							Output:    `new RegExp('(?<temp1>[[A--B]])', 'v')`,
						},
						{
							MessageId: "addNonCapture",
							Output:    `new RegExp('(?:[[A--B]])', 'v')`,
						},
					},
				},
			},
		},
	})
}
