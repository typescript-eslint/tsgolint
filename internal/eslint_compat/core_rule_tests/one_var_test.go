// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestOneVarRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"script\"}}", "one-var", []ValidTestCase{
		{Code: `function foo() { var bar = true; }`},
		{Code: `function foo() { var bar = true, baz = 1; if (qux) { bar = false; } }`},
		{Code: `var foo = function() { var bar = true; baz(); }`},
		{
			Code:    `function foo() { var bar = true, baz = false; }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo() { var bar = true; var baz = false; }`,
			Options: "[\"never\"]",
		},
		{
			Code:    `for (var i = 0, len = arr.length; i < len; i++) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var bar = true; var baz = false;`,
			Options: "[{\"initialized\":\"never\"}]",
		},
		{
			Code:    `var bar = true, baz = false;`,
			Options: "[{\"initialized\":\"always\"}]",
		},
		{
			Code:    `var bar, baz;`,
			Options: "[{\"initialized\":\"never\"}]",
		},
		{
			Code:    `var bar; var baz;`,
			Options: "[{\"uninitialized\":\"never\"}]",
		},
		{
			Code:    `var bar, baz;`,
			Options: "[{\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var bar = true, baz = false;`,
			Options: "[{\"uninitialized\":\"never\"}]",
		},
		{
			Code:    `var bar = true, baz = false, a, b;`,
			Options: "[{\"uninitialized\":\"always\",\"initialized\":\"always\"}]",
		},
		{
			Code:    `var bar = true; var baz = false; var a; var b;`,
			Options: "[{\"uninitialized\":\"never\",\"initialized\":\"never\"}]",
		},
		{
			Code:    `var bar, baz; var a = true; var b = false;`,
			Options: "[{\"uninitialized\":\"always\",\"initialized\":\"never\"}]",
		},
		{
			Code:    `var bar = true, baz = false; var a; var b;`,
			Options: "[{\"uninitialized\":\"never\",\"initialized\":\"always\"}]",
		},
		{
			Code:    `var bar; var baz; var a = true, b = false;`,
			Options: "[{\"uninitialized\":\"never\",\"initialized\":\"always\"}]",
		},
		{
			Code:    `function foo() { var a = [1, 2, 3]; var [b, c, d] = a; }`,
			Options: "[\"never\"]",
		},
		{
			Code:    `function foo() { let a = 1; var c = true; if (a) {let c = true; } }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo() { const a = 1; var c = true; if (a) {const c = true; } }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo() { if (true) { const a = 1; }; if (true) {const a = true; } }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo() { let a = 1; let b = true; }`,
			Options: "[\"never\"]",
		},
		{
			Code:    `function foo() { const a = 1; const b = true; }`,
			Options: "[\"never\"]",
		},
		{
			Code:    `function foo() { let a = 1; const b = false; var c = true; }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo() { let a = 1, b = false; var c = true; }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo() { let a = 1; let b = 2; const c = false; const d = true; var e = true, f = false; }`,
			Options: "[{\"var\":\"always\",\"let\":\"never\",\"const\":\"never\"}]",
		},
		{
			Code:    `let foo = true; for (let i = 0; i < 1; i++) { let foo = false; }`,
			Options: "[{\"var\":\"always\",\"let\":\"always\",\"const\":\"never\"}]",
		},
		{
			Code:    `let foo = true; for (let i = 0; i < 1; i++) { let foo = false; }`,
			Options: "[{\"var\":\"always\"}]",
		},
		{
			Code:    `let foo = true, bar = false;`,
			Options: "[{\"var\":\"never\"}]",
		},
		{
			Code:    `let foo = true, bar = false;`,
			Options: "[{\"const\":\"never\"}]",
		},
		{
			Code:    `let foo = true, bar = false;`,
			Options: "[{\"uninitialized\":\"never\"}]",
		},
		{
			Code:    `let foo, bar`,
			Options: "[{\"initialized\":\"never\"}]",
		},
		{
			Code:    `let foo = true, bar = false; let a; let b;`,
			Options: "[{\"uninitialized\":\"never\"}]",
		},
		{
			Code:    `let foo, bar; let a = true; let b = true;`,
			Options: "[{\"initialized\":\"never\"}]",
		},
		{
			Code:    `var foo, bar; const a=1; const b=2; let c, d`,
			Options: "[{\"var\":\"always\",\"let\":\"always\"}]",
		},
		{
			Code:    `var foo; var bar; const a=1, b=2; let c; let d`,
			Options: "[{\"const\":\"always\"}]",
		},
		{
			Code:    `for (let x of foo) {}; for (let y of foo) {}`,
			Options: "[{\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `for (let x in foo) {}; for (let y in foo) {}`,
			Options: "[{\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x; for (var y in foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x, y; for (y in foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x, y; for (var z in foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x; for (var y in foo) {var bar = y; for (var z in bar) {}}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var a = 1; var b = 2; var x, y; for (var z in foo) {var baz = z; for (var d in baz) {}}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x; for (var y of foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x, y; for (y of foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x, y; for (var z of foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var x; for (var y of foo) {var bar = y; for (var z of bar) {}}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var a = 1; var b = 2; var x, y; for (var z of foo) {var baz = z; for (var d of baz) {}}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var foo = require('foo'), bar;`,
			Options: "[{\"separateRequires\":false,\"var\":\"always\"}]",
		},
		{
			Code:    `var foo = require('foo'), bar = require('bar');`,
			Options: "[{\"separateRequires\":true,\"var\":\"always\"}]",
		},
		{
			Code:    `var bar = 'bar'; var foo = require('foo');`,
			Options: "[{\"separateRequires\":true,\"var\":\"always\"}]",
		},
		{
			Code:    `var foo = require('foo'); var bar = 'bar';`,
			Options: "[{\"separateRequires\":true,\"var\":\"always\"}]",
		},
		{
			Code:    `var a = 0, b, c;`,
			Options: "[\"consecutive\"]",
		},
		{
			Code:    `var a = 0, b = 1, c = 2;`,
			Options: "[\"consecutive\"]",
		},
		{
			Code:    `var a = 0, b = 1; foo(); var c = 2;`,
			Options: "[\"consecutive\"]",
		},
		{
			Code:            `let a = 0, b, c;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a = 0, b = 1, c = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a = 0, b = 1; foo(); let c = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0, b = 1; foo(); const c = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; var b = 1;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; let b = 1;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a = 0; const b = 1; var c = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const foo = require('foo'); const bar = 'bar';`,
			Options:         "[{\"const\":\"consecutive\",\"separateRequires\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a = 0, b = 1; var c, d;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:    `var a = 0; var b, c; var d = 1;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
		},
		{
			Code:            `let a = 0, b = 1; let c, d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a = 0; let b, c; let d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0, b = 1; let c, d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; let b, c; const d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a = 0, b = 1; var c; var d;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
		},
		{
			Code:    `var a = 0; var b; var c; var d = 1;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
		},
		{
			Code:            `let a = 0, b = 1; let c; let d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a = 0; let b; let c; let d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0, b = 1; let c; let d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; let b; let c; const d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a, b; var c = 0, d = 1;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
		},
		{
			Code:    `var a; var b = 0, c = 1; var d;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
		},
		{
			Code:            `let a, b; let c = 0, d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a; let b = 0, c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a, b; const c = 0, d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a; const b = 0, c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a, b; var c = 0; var d = 1;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
		},
		{
			Code:    `var a; var b = 0; var c = 1; var d;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
		},
		{
			Code:            `let a, b; let c = 0; let d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a; let b = 0; let c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a, b; const c = 0; const d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a; const b = 0; const c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a = 0, b = 1;`,
			Options: "[{\"var\":\"consecutive\"}]",
		},
		{
			Code:    `var a = 0; foo; var b = 1;`,
			Options: "[{\"var\":\"consecutive\"}]",
		},
		{
			Code:            `let a = 0, b = 1;`,
			Options:         "[{\"let\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a = 0; foo; let b = 1;`,
			Options:         "[{\"let\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0, b = 1;`,
			Options:         "[{\"const\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; foo; const b = 1;`,
			Options:         "[{\"const\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a, b; const c = 0, d = 1;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a; const b = 0, c = 1; let d;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a, b; const c = 0; const d = 1;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let a; const b = 0; const c = 1; let d;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0, b = 1; let c, d;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; let b, c; const d = 1;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0, b = 1; let c; let d;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 0; let b; let c; const d = 1;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a = 1, b = 2; foo(); var c = 3, d = 4;`,
			Options: "[{\"initialized\":\"consecutive\"}]",
		},
		{
			Code:    `var bar, baz;`,
			Options: "[\"consecutive\"]",
		},
		{
			Code:    `var bar = 1, baz = 2; qux(); var qux = 3, quux;`,
			Options: "[\"consecutive\"]",
		},
		{
			Code:            `let a, b; var c; var d; let e;`,
			Options:         "[{\"var\":\"never\",\"let\":\"consecutive\",\"const\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const a = 1, b = 2; var d; var e; const f = 3;`,
			Options:         "[{\"var\":\"never\",\"let\":\"consecutive\",\"const\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var a, b; const c = 1; const d = 2; let e; let f; `,
			Options:         "[{\"var\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var a = 1, b = 2; var c; var d; var e = 3, f = 4;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
		},
		{
			Code:    `var a; somethingElse(); var b;`,
			Options: "[{\"var\":\"never\"}]",
		},
		{
			Code: `var foo = 1;
let bar = function() { var x; };
var baz = 2;`,
			Options: "[{\"var\":\"never\"}]",
		},
		{
			Code:            `class C { static { var a; let b; const c = 0; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `const a = 0; class C { static { const b = 0; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { const b = 0; } } const a = 0; `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `let a; class C { static { let b; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let b; } } let a;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `var a; class C { static { var b; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var b; } } var a; `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `var a; class C { static { if (foo) { var b; } } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (foo) { var b; } } } var a; `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { const a = 0; if (foo) { const b = 0; } } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; if (foo) { let b; } } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { const a = 0; const b = 0; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; let b; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var a; var b; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; foo; let b; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; const b = 0; let c; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var a; foo; var b; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var a; let b; var c; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; if (foo) { let b; } } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (foo) { let b; } let a;  } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { const a = 0; if (foo) { const b = 0; } } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (foo) { const b = 0; } const a = 0; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var a; if (foo) var b; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (foo) var b; var a; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (foo) { var b; } var a; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let a; let b = 0; } }`,
			Options:         "[{\"initialized\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var a; var b = 0; } }`,
			Options:         "[{\"initialized\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `var bar = true, baz = false;`,
			Output:  `var bar = true; var baz = false;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `function foo() { var bar = true, baz = false; }`,
			Output:  `function foo() { var bar = true; var baz = false; }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `if (foo) { var bar = true, baz = false; }`,
			Output:  `if (foo) { var bar = true; var baz = false; }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `switch (foo) { case bar: var baz = true, quux = false; }`,
			Output:  `switch (foo) { case bar: var baz = true; var quux = false; }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `switch (foo) { default: var baz = true, quux = false; }`,
			Output:  `switch (foo) { default: var baz = true; var quux = false; }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `function foo() { var bar = true; var baz = false; }`,
			Output:  `function foo() { var bar = true,  baz = false; }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `var a = 1; for (var b = 2;;) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { var foo = true, bar = false; }`,
			Output:  `function foo() { var foo = true; var bar = false; }`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
				},
			},
		},
		{
			Code:    `function foo() { var foo, bar; }`,
			Output:  `function foo() { var foo; var bar; }`,
			Options: "[{\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
				},
			},
		},
		{
			Code:    `function foo() { var bar, baz; var a = true; var b = false; var c, d;}`,
			Output:  `function foo() { var bar, baz; var a = true; var b = false,  c, d;}`,
			Options: "[{\"uninitialized\":\"always\",\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
				},
			},
		},
		{
			Code:    `function foo() { var bar = true, baz = false; var a; var b; var c = true, d = false; }`,
			Output:  `function foo() { var bar = true, baz = false; var a; var b,  c = true, d = false; }`,
			Options: "[{\"uninitialized\":\"never\",\"initialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
				},
			},
		},
		{
			Code:    `function foo() { var bar = true, baz = false; var a, b;}`,
			Output:  `function foo() { var bar = true; var baz = false; var a; var b;}`,
			Options: "[{\"uninitialized\":\"never\",\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `function foo() { var bar = true; var baz = false; var a; var b;}`,
			Output:  `function foo() { var bar = true,  baz = false,  a,  b;}`,
			Options: "[{\"uninitialized\":\"always\",\"initialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
				{
					MessageId: "combine",
				},
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { var a = [1, 2, 3]; var [b, c, d] = a; }`,
			Output:  `function foo() { var a = [1, 2, 3],  [b, c, d] = a; }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { let a = 1; let b = 2; }`,
			Output:  `function foo() { let a = 1,  b = 2; }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { const a = 1; const b = 2; }`,
			Output:  `function foo() { const a = 1,  b = 2; }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { let a = 1; let b = 2; }`,
			Output:  `function foo() { let a = 1,  b = 2; }`,
			Options: "[{\"let\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { const a = 1; const b = 2; }`,
			Output:  `function foo() { const a = 1,  b = 2; }`,
			Options: "[{\"const\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `function foo() { let a = 1, b = 2; }`,
			Output:  `function foo() { let a = 1; let b = 2; }`,
			Options: "[{\"let\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `function foo() { let a = 1, b = 2; }`,
			Output:  `function foo() { let a = 1; let b = 2; }`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
				},
			},
		},
		{
			Code:    `function foo() { let a, b; }`,
			Output:  `function foo() { let a; let b; }`,
			Options: "[{\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
				},
			},
		},
		{
			Code:    `function foo() { const a = 1, b = 2; }`,
			Output:  `function foo() { const a = 1; const b = 2; }`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
				},
			},
		},
		{
			Code:    `function foo() { const a = 1, b = 2; }`,
			Output:  `function foo() { const a = 1; const b = 2; }`,
			Options: "[{\"const\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `let foo = true; switch(foo) { case true: let bar = 2; break; case false: let baz = 3; break; }`,
			Options: "[{\"var\":\"always\",\"let\":\"always\",\"const\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    74,
				},
			},
		},
		{
			Code: `var one = 1, two = 2;
var three;`,
			Output: `var one = 1, two = 2,
 three;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:    `var i = [0], j;`,
			Output:  `var i = [0]; var j;`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
				},
			},
		},
		{
			Code:    `var i = [0], j;`,
			Output:  `var i = [0]; var j;`,
			Options: "[{\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
				},
			},
		},
		{
			Code:    `for (var x of foo) {}; for (var y of foo) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:    `for (var x in foo) {}; for (var y in foo) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:   `var foo = function() { var bar = true; var baz = false; }`,
			Output: `var foo = function() { var bar = true,  baz = false; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    40,
				},
			},
		},
		{
			Code: `function foo() { var bar = true; if (qux) { var baz = false; } else { var quxx = 42; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    45,
				},
				{
					MessageId: "combine",
					Line:      1,
					Column:    71,
				},
			},
		},
		{
			Code:            `var foo = () => { var bar = true; var baz = false; }`,
			Output:          `var foo = () => { var bar = true,  baz = false; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    35,
				},
			},
		},
		{
			Code: `var foo = function() { var bar = true; if (qux) { var baz = false; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    51,
				},
			},
		},
		{
			Code:   `var foo; var bar;`,
			Output: `var foo,  bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:    `var x = 1, y = 2; for (var z in foo) {}`,
			Output:  `var x = 1; var y = 2; for (var z in foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var x = 1, y = 2; for (var z of foo) {}`,
			Output:  `var x = 1; var y = 2; for (var z of foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var x; var y; for (var z in foo) {}`,
			Output:  `var x,  y; for (var z in foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `var x; var y; for (var z of foo) {}`,
			Output:  `var x,  y; for (var z of foo) {}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `var x; for (var y in foo) {var bar = y; var a; for (var z of bar) {}}`,
			Output:  `var x; for (var y in foo) {var bar = y,  a; for (var z of bar) {}}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    41,
				},
			},
		},
		{
			Code:    `var a = 1; var b = 2; var x, y; for (var z of foo) {var c = 3, baz = z; for (var d in baz) {}}`,
			Output:  `var a = 1; var b = 2; var x, y; for (var z of foo) {var c = 3; var baz = z; for (var d in baz) {}}`,
			Options: "[{\"initialized\":\"never\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    53,
				},
			},
		},
		{
			Code:            `var {foo} = 1, [bar] = 2;`,
			Output:          `var {foo} = 1; var [bar] = 2;`,
			Options:         "[{\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `const foo = 1,
    bar = 2;`,
			Output: `const foo = 1;
    const bar = 2;`,
			Options:         "[{\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = 1,
    bar = 2;`,
			Output: `var foo = 1;
    var bar = 2;`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = 1, // comment
    bar = 2;`,
			Output: `var foo = 1; // comment
    var bar = 2;`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var f, k /* test */, l;`,
			Output:  `var f; var k /* test */; var l;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var f,          /* test */ l;`,
			Output:  `var f;          /* test */ var l;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `var f, k /* test 
 some more comment 
 even more */, l = 1, P;`,
			Output: `var f; var k /* test 
 some more comment 
 even more */; var l = 1; var P;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var a = 1, b = 2`,
			Output:  `var a = 1; var b = 2`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var foo = require('foo'), bar;`,
			Options: "[{\"separateRequires\":true,\"var\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitRequires",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `var foo, bar = require('bar');`,
			Options: "[{\"separateRequires\":true,\"var\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitRequires",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `let foo, bar = require('bar');`,
			Options: "[{\"separateRequires\":true,\"let\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitRequires",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `const foo = 0, bar = require('bar');`,
			Options: "[{\"separateRequires\":true,\"const\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitRequires",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `const foo = require('foo'); const bar = require('bar');`,
			Output:  `const foo = require('foo'),  bar = require('bar');`,
			Options: "[{\"separateRequires\":true,\"const\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    29,
				},
			},
		},
		{
			Code:    `var a = 1, b; var c;`,
			Output:  `var a = 1, b,  c;`,
			Options: "[\"consecutive\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:    `var a = 0, b = 1; var c = 2;`,
			Output:  `var a = 0, b = 1,  c = 2;`,
			Options: "[\"consecutive\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `let a = 1, b; let c;`,
			Output:          `let a = 1, b,  c;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `let a = 0, b = 1; let c = 2;`,
			Output:          `let a = 0, b = 1,  c = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `const a = 0, b = 1; const c = 2;`,
			Output:          `const a = 0, b = 1,  c = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:            `const a = 0; var b = 1; var c = 2; const d = 3;`,
			Output:          `const a = 0; var b = 1,  c = 2; const d = 3;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:    `var a = true; var b = false;`,
			Output:  `var a = true,  b = false;`,
			Options: "[{\"separateRequires\":true,\"var\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `const a = 0; let b = 1; let c = 2; const d = 3;`,
			Output:          `const a = 0; let b = 1,  c = 2; const d = 3;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:            `let a = 0; const b = 1; const c = 1; var d = 2;`,
			Output:          `let a = 0; const b = 1,  c = 1; var d = 2;`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:    `var a = 0; var b; var c; var d = 1`,
			Output:  `var a = 0; var b,  c; var d = 1`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `var a = 0; var b = 1; var c; var d;`,
			Output:  `var a = 0,  b = 1; var c,  d;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:            `let a = 0; let b; let c; let d = 1;`,
			Output:          `let a = 0; let b,  c; let d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `let a = 0; let b = 1; let c; let d;`,
			Output:          `let a = 0,  b = 1; let c,  d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:            `const a = 0; let b; let c; const d = 1;`,
			Output:          `const a = 0; let b,  c; const d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:            `const a = 0; const b = 1; let c; let d;`,
			Output:          `const a = 0,  b = 1; let c,  d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code:    `var a = 0; var b = 1; var c, d;`,
			Output:  `var a = 0,  b = 1; var c; var d;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:    `var a = 0; var b, c; var d = 1;`,
			Output:  `var a = 0; var b; var c; var d = 1;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:            `let a = 0; let b = 1; let c, d;`,
			Output:          `let a = 0,  b = 1; let c; let d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:            `let a = 0; let b, c; let d = 1;`,
			Output:          `let a = 0; let b; let c; let d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:            `const a = 0; const b = 1; let c, d;`,
			Output:          `const a = 0,  b = 1; let c; let d;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:            `const a = 0; let b, c; const d = 1;`,
			Output:          `const a = 0; let b; let c; const d = 1;`,
			Options:         "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:    `var a; var b; var c = 0; var d = 1;`,
			Output:  `var a,  b; var c = 0,  d = 1;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:    `var a; var b = 0; var c = 1; var d;`,
			Output:  `var a; var b = 0,  c = 1; var d;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `let a; let b; let c = 0; let d = 1;`,
			Output:          `let a,  b; let c = 0,  d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:            `let a; let b = 0; let c = 1; let d;`,
			Output:          `let a; let b = 0,  c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `let a; let b; const c = 0; const d = 1;`,
			Output:          `let a,  b; const c = 0,  d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code:            `let a; const b = 0; const c = 1; let d;`,
			Output:          `let a; const b = 0,  c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:    `var a; var b; var c = 0, d = 1;`,
			Output:  `var a,  b; var c = 0; var d = 1;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:    `var a; var b = 0, c = 1; var d;`,
			Output:  `var a; var b = 0; var c = 1; var d;`,
			Options: "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:            `let a; let b; let c = 0, d = 1;`,
			Output:          `let a,  b; let c = 0; let d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `let a; let b = 0, c = 1; let d;`,
			Output:          `let a; let b = 0; let c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:            `let a; let b; const c = 0, d = 1;`,
			Output:          `let a,  b; const c = 0; const d = 1;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineUninitialized",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `let a; const b = 0, c = 1; let d;`,
			Output:          `let a; const b = 0; const c = 1; let d;`,
			Options:         "[{\"uninitialized\":\"consecutive\",\"initialized\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `var a = 0; var b = 1;`,
			Output:  `var a = 0,  b = 1;`,
			Options: "[{\"var\":\"consecutive\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:            `let a = 0; let b = 1;`,
			Output:          `let a = 0,  b = 1;`,
			Options:         "[{\"let\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code:            `const a = 0; const b = 1;`,
			Output:          `const a = 0,  b = 1;`,
			Options:         "[{\"const\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:            `let a; let b; const c = 0; const d = 1;`,
			Output:          `let a,  b; const c = 0,  d = 1;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "combine",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code:            `let a; const b = 0; const c = 1; let d;`,
			Output:          `let a; const b = 0,  c = 1; let d;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:            `let a; let b; const c = 0, d = 1;`,
			Output:          `let a,  b; const c = 0; const d = 1;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "split",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `let a; const b = 0, c = 1; let d;`,
			Output:          `let a; const b = 0; const c = 1; let d;`,
			Options:         "[{\"let\":\"consecutive\",\"const\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:            `const a = 0; const b = 1; let c; let d;`,
			Output:          `const a = 0,  b = 1; let c,  d;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "combine",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code:            `const a = 0; let b; let c; const d = 1;`,
			Output:          `const a = 0; let b,  c; const d = 1;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:            `const a = 0; const b = 1; let c, d;`,
			Output:          `const a = 0,  b = 1; let c; let d;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "split",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:            `const a = 0; let b, c; const d = 1;`,
			Output:          `const a = 0; let b; let c; const d = 1;`,
			Options:         "[{\"const\":\"consecutive\",\"let\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:    `var bar; var baz;`,
			Output:  `var bar,  baz;`,
			Options: "[\"consecutive\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:    `var bar = 1; var baz = 2; qux(); var qux = 3; var quux;`,
			Output:  `var bar = 1,  baz = 2; qux(); var qux = 3,  quux;`,
			Options: "[\"consecutive\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "combine",
					Line:      1,
					Column:    47,
				},
			},
		},
		{
			Code:            `let a, b; let c; var d, e;`,
			Output:          `let a, b,  c; var d; var e;`,
			Options:         "[{\"var\":\"never\",\"let\":\"consecutive\",\"const\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "split",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:    `var a; var b;`,
			Output:  `var a,  b;`,
			Options: "[{\"var\":\"consecutive\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code:    `var a = 1; var b = 2; var c, d; var e = 3; var f = 4;`,
			Output:  `var a = 1,  b = 2; var c; var d; var e = 3,  f = 4;`,
			Options: "[{\"initialized\":\"consecutive\",\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "splitUninitialized",
					Line:      1,
					Column:    23,
				},
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    44,
				},
			},
		},
		{
			Code:    `var a = 1; var b = 2; foo(); var c = 3; var d = 4;`,
			Output:  `var a = 1,  b = 2; foo(); var c = 3,  d = 4;`,
			Options: "[{\"initialized\":\"consecutive\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    12,
				},
				{
					MessageId: "combineInitialized",
					Line:      1,
					Column:    41,
				},
			},
		},
		{
			Code: `var a
var b`,
			Output: `var a,
 b`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:            `export const foo=1, bar=2;`,
			Output:          `export const foo=1; export const bar=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code: `const foo=1,
 bar=2;`,
			Output: `const foo=1;
 const bar=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code: `export const foo=1,
 bar=2;`,
			Output: `export const foo=1;
 export const bar=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code: `export const foo=1
, bar=2;`,
			Output: `export const foo=1
; export const bar=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `export const foo= a, bar=2;`,
			Output:          `export const foo= a; export const bar=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `export const foo=() => a, bar=2;`,
			Output:          `export const foo=() => a; export const bar=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `export const foo= a, bar=2, bar2=2;`,
			Output:          `export const foo= a; export const bar=2; export const bar2=2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `export const foo = 1,bar = 2;`,
			Output:          `export const foo = 1; export const bar = 2;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2021,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `if (foo) var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `if (foo) var x, y;`,
			Options: "[{\"var\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `if (foo) var x, y;`,
			Options: "[{\"uninitialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitUninitialized",
				},
			},
		},
		{
			Code:    `if (foo) var x = 1, y = 1;`,
			Options: "[{\"initialized\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "splitInitialized",
				},
			},
		},
		{
			Code:    `if (foo) {} else var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `while (foo) var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `do var x, y; while (foo);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `do var x = f(), y = b(); while (x < y);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `for (;;) var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `for (foo in bar) var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `for (foo of bar) var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `with (foo) var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:    `label: var x, y;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `class C { static { let x, y; } }`,
			Output:          `class C { static { let x; let y; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `class C { static { var x, y; } }`,
			Output:          `class C { static { var x; var y; } }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "split",
				},
			},
		},
		{
			Code:            `class C { static { let x; let y; } }`,
			Output:          `class C { static { let x,  y; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { var x; var y; } }`,
			Output:          `class C { static { var x,  y; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { let x; foo; let y; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { var x; foo; var y; } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { var x; if (foo) { var y; } } }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { let x; let y; } }`,
			Output:          `class C { static { let x,  y; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { var x; var y; } }`,
			Output:          `class C { static { var x,  y; } }`,
			Options:         "[\"consecutive\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combine",
				},
			},
		},
		{
			Code:            `class C { static { let a = 0; let b = 1; } }`,
			Output:          `class C { static { let a = 0,  b = 1; } }`,
			Options:         "[{\"initialized\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
				},
			},
		},
		{
			Code:            `class C { static { var a = 0; var b = 1; } }`,
			Output:          `class C { static { var a = 0,  b = 1; } }`,
			Options:         "[{\"initialized\":\"consecutive\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combineInitialized",
				},
			},
		},
	})
}
