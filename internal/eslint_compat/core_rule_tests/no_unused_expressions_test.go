// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnusedExpressionsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"parser\":{\"version\":\"8.30.1\",\"meta\":{\"name\":\"typescript-eslint/parser\",\"version\":\"8.30.1\"}}}}", "no-unused-expressions", []ValidTestCase{
		{Code: `
		test.age?.toLocaleString();
	  `},
		{Code: `
		let a = (a?.b).c;
	  `},
		{Code: `
		let b = a?.['b'];
	  `},
		{Code: `
		let c = one[2]?.[3][4];
	  `},
		{Code: `
		one[2]?.[3][4]?.();
	  `},
		{Code: `
		a?.['b']?.c();
	  `},
		{Code: `
		module Foo {
		  'use strict';
		}
	  `},
		{Code: `
		namespace Foo {
		  'use strict';
  
		  export class Foo {}
		  export class Bar {}
		}
	  `},
		{Code: `
		function foo() {
		  'use strict';
  
		  return null;
		}
	  `},
		{Code: `
		import('./foo');
	  `},
		{Code: `
		import('./foo').then(() => {});
	  `},
		{Code: `
		class Foo<T> {}
		new Foo<string>();
	  `},
		{
			Code:    `foo && foo?.();`,
			Options: "[{\"allowShortCircuit\":true}]",
		},
		{
			Code:    `foo && import('./foo');`,
			Options: "[{\"allowShortCircuit\":true}]",
		},
		{
			Code:    `foo ? import('./foo') : import('./bar');`,
			Options: "[{\"allowTernary\":true}]",
		},
		{
			Code:            `<div/> as any`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:    `foo && foo()!;`,
			Options: "[{\"allowShortCircuit\":true}]",
		},
		{
			Code: `
				declare const foo:  Function | undefined;
				<any>(foo && foo()!)
			`,
			Options: "[{\"allowShortCircuit\":true}]",
		},
		{
			Code: `
				(Foo && Foo())<string, number>;
			`,
			Options: "[{\"allowShortCircuit\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `
  if (0) 0;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             10,
				},
			},
		},
		{
			Code: `
  f(0), {};
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  a, b();
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  a() &&
	function namedFunctionInExpressionContext() {
	  f();
	};
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  a?.b;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  (a?.b).c;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  a?.['b'];
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  (a?.['b']).c;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  a?.b()?.c;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  (a?.b()).c;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  one[2]?.[3][4];
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  one.two?.three.four;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               2,
					Column:             3,
				},
			},
		},
		{
			Code: `
  module Foo {
	const foo = true;
	'use strict';
  }
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               4,
					Column:             2,
					EndLine:            4,
					EndColumn:          15,
				},
			},
		},
		{
			Code: `
  namespace Foo {
	export class Foo {}
	export class Bar {}
  
	'use strict';
  }
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               6,
					Column:             2,
					EndLine:            6,
					EndColumn:          15,
				},
			},
		},
		{
			Code: `
  function foo() {
	const foo = true;
  
	'use strict';
  }
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               5,
					Column:             2,
					EndLine:            5,
					EndColumn:          15,
				},
			},
		},
		{
			Code:    `foo && foo?.bar;`,
			Options: "[{\"allowShortCircuit\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               1,
					Column:             1,
					EndLine:            1,
					EndColumn:          17,
				},
			},
		},
		{
			Code:    `foo ? foo?.bar : bar.baz;`,
			Options: "[{\"allowTernary\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               1,
					Column:             1,
					EndLine:            1,
					EndColumn:          26,
				},
			},
		},
		{
			Code: `
  class Foo<T> {}
  Foo<string>;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               3,
					Column:             3,
					EndLine:            3,
					EndColumn:          15,
				},
			},
		},
		{
			Code: `Map<string, string>;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               1,
					Column:             1,
					EndLine:            1,
					EndColumn:          21,
				},
			},
		},
		{
			Code: `
  declare const foo: number | undefined;
  foo;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               3,
					Column:             3,
					EndLine:            3,
					EndColumn:          7,
				},
			},
		},
		{
			Code: `
  declare const foo: number | undefined;
  foo as any;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               3,
					Column:             3,
					EndLine:            3,
					EndColumn:          14,
				},
			},
		},
		{
			Code: `
  declare const foo: number | undefined;
  <any>foo;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               3,
					Column:             3,
					EndLine:            3,
					EndColumn:          12,
				},
			},
		},
		{
			Code: `
  declare const foo: number | undefined;
  foo!;
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Expected an assignment or function call and instead saw an expression.",
					Line:               3,
					Column:             3,
					EndLine:            3,
					EndColumn:          8,
				},
			},
		},
	})
}
