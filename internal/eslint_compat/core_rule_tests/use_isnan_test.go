// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestUseIsnanRule(t *testing.T) {
	RunRuleTester(t, "{}", "use-isnan", []ValidTestCase{
		{Code: `var x = NaN;`},
		{Code: `isNaN(NaN) === true;`},
		{Code: `isNaN(123) !== true;`},
		{Code: `Number.isNaN(NaN) === true;`},
		{Code: `Number.isNaN(123) !== true;`},
		{Code: `foo(NaN + 1);`},
		{Code: `foo(1 + NaN);`},
		{Code: `foo(NaN - 1)`},
		{Code: `foo(1 - NaN)`},
		{Code: `foo(NaN * 2)`},
		{Code: `foo(2 * NaN)`},
		{Code: `foo(NaN / 2)`},
		{Code: `foo(2 / NaN)`},
		{Code: `var x; if (x = NaN) { }`},
		{Code: `var x = Number.NaN;`},
		{Code: `isNaN(Number.NaN) === true;`},
		{Code: `Number.isNaN(Number.NaN) === true;`},
		{Code: `foo(Number.NaN + 1);`},
		{Code: `foo(1 + Number.NaN);`},
		{Code: `foo(Number.NaN - 1)`},
		{Code: `foo(1 - Number.NaN)`},
		{Code: `foo(Number.NaN * 2)`},
		{Code: `foo(2 * Number.NaN)`},
		{Code: `foo(Number.NaN / 2)`},
		{Code: `foo(2 / Number.NaN)`},
		{Code: `var x; if (x = Number.NaN) { }`},
		{Code: `x === Number[NaN];`},
		{Code: `x === (NaN, 1)`},
		{Code: `x === (doStuff(), NaN, 1)`},
		{Code: `x === (doStuff(), Number.NaN, 1)`},
		{
			Code:    `switch(NaN) { case foo: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(foo) { case NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(NaN) { case NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(foo) { case bar: break; case NaN: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(foo) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case bar: NaN; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { default: NaN; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(Nan) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch('NaN') { default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo(NaN)) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo.NaN) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case Nan: break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case 'NaN': break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case foo(NaN): break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case foo.NaN: break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case bar: break; case 1: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(Number.NaN) { case foo: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(foo) { case Number.NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(NaN) { case Number.NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(foo) { case bar: break; case Number.NaN: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":false}]",
		},
		{
			Code:    `switch(foo) { case bar: Number.NaN; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { default: Number.NaN; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(Number.Nan) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch('Number.NaN') { default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo(Number.NaN)) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo.Number.NaN) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case Number.Nan: break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case 'Number.NaN': break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case foo(Number.NaN): break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch(foo) { case foo.Number.NaN: break }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch((NaN, doStuff(), 1)) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{
			Code:    `switch((Number.NaN, doStuff(), 1)) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
		},
		{Code: `foo.indexOf(NaN)`},
		{Code: `foo.lastIndexOf(NaN)`},
		{Code: `foo.indexOf(Number.NaN)`},
		{Code: `foo.lastIndexOf(Number.NaN)`},
		{
			Code:    `foo.indexOf(NaN)`,
			Options: "[{}]",
		},
		{
			Code:    `foo.lastIndexOf(NaN)`,
			Options: "[{}]",
		},
		{
			Code:    `foo.indexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":false}]",
		},
		{
			Code:    `foo.lastIndexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":false}]",
		},
		{
			Code:    `indexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `lastIndexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `new foo.indexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.bar(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.IndexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo[indexOf](NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo[lastIndexOf](NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `indexOf.foo(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf()`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf()`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf(a)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf(Nan)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf(a, NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf(NaN, b, c)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf(a, b)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf(NaN, NaN, b)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:            `foo.indexOf(...NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo.lastIndexOf(NaN())`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf(Number.NaN)`,
			Options: "[{}]",
		},
		{
			Code:    `foo.lastIndexOf(Number.NaN)`,
			Options: "[{}]",
		},
		{
			Code:    `foo.indexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":false}]",
		},
		{
			Code:    `foo.lastIndexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":false}]",
		},
		{
			Code:    `indexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `lastIndexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `new foo.indexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.bar(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.IndexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo[indexOf](Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo[lastIndexOf](Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `indexOf.foo(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf(Number.Nan)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf(a, Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf(Number.NaN, b, c)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf(Number.NaN, NaN, b)`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:            `foo.indexOf(...Number.NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `foo.lastIndexOf(Number.NaN())`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf((NaN, 1))`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf((NaN, 1))`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.indexOf((Number.NaN, 1))`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
		{
			Code:    `foo.lastIndexOf((Number.NaN, 1))`,
			Options: "[{\"enforceForIndexOf\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `123 == NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN(123);`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `Number.isNaN(Number(123));`,
						},
					},
				},
			},
		},
		{
			Code: `123 === NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN(123);`,
						},
					},
				},
			},
		},
		{
			Code: `NaN === "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN("abc");`,
						},
					},
				},
			},
		},
		{
			Code: `NaN == "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN("abc");`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `Number.isNaN(Number("abc"));`,
						},
					},
				},
			},
		},
		{
			Code: `123 != NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN(123);`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `!Number.isNaN(Number(123));`,
						},
					},
				},
			},
		},
		{
			Code: `123 !== NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN(123);`,
						},
					},
				},
			},
		},
		{
			Code: `NaN !== "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN("abc");`,
						},
					},
				},
			},
		},
		{
			Code: `NaN != "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN("abc");`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `!Number.isNaN(Number("abc"));`,
						},
					},
				},
			},
		},
		{
			Code: `NaN < "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" < NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `NaN > "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" > NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `NaN <= "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" <= NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `NaN >= "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" >= NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `123 == Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN(123);`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `Number.isNaN(Number(123));`,
						},
					},
				},
			},
		},
		{
			Code: `123 === Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN(123);`,
						},
					},
				},
			},
		},
		{
			Code: `Number.NaN === "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN("abc");`,
						},
					},
				},
			},
		},
		{
			Code: `Number.NaN == "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN("abc");`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `Number.isNaN(Number("abc"));`,
						},
					},
				},
			},
		},
		{
			Code: `123 != Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN(123);`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `!Number.isNaN(Number(123));`,
						},
					},
				},
			},
		},
		{
			Code: `123 !== Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN(123);`,
						},
					},
				},
			},
		},
		{
			Code: `Number.NaN !== "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN("abc");`,
						},
					},
				},
			},
		},
		{
			Code: `Number.NaN != "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN("abc");`,
						},
						{
							MessageId: "replaceWithCastingAndIsNaN",
							Output:    `!Number.isNaN(Number("abc"));`,
						},
					},
				},
			},
		},
		{
			Code: `Number.NaN < "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" < Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `Number.NaN > "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" > Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `Number.NaN <= "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" <= Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `Number.NaN >= "abc";`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `"abc" >= Number.NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `x === Number?.NaN;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN(x);`,
						},
					},
				},
			},
		},
		{
			Code:            `x !== Number?.NaN;`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `!Number.isNaN(x);`,
						},
					},
				},
			},
		},
		{
			Code: `x === Number['NaN'];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN(x);`,
						},
					},
				},
			},
		},
		{
			Code: `/* just
                adding */ x /* some */ === /* comments */ NaN; // here`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output: `/* just
                adding */ Number.isNaN(x); // here`,
						},
					},
				},
			},
		},
		{
			Code: `(1, 2) === NaN;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithIsNaN",
							Output:    `Number.isNaN((1, 2));`,
						},
					},
				},
			},
		},
		{
			Code: `x === (doStuff(), NaN);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `x === (doStuff(), Number.NaN);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `x == (doStuff(), NaN);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `x == (doStuff(), Number.NaN);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "comparisonWithNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code: `switch(NaN) { case foo: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case NaN: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(NaN) { case foo: break; }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(foo) { case NaN: break; }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(NaN) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(NaN) { case foo: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(NaN) { default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(NaN) { case foo: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(foo) { case NaN: }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(foo) { case NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(foo) { case (NaN): break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(foo) { case bar: break; case NaN: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    32,
				},
			},
		},
		{
			Code:    `switch(foo) { case bar: case NaN: default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    25,
				},
			},
		},
		{
			Code:    `switch(foo) { case bar: break; case NaN: break; case baz: break; case NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    32,
				},
				{
					MessageId: "caseNaN",
					Column:    66,
				},
			},
		},
		{
			Code:    `switch(NaN) { case NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code: `switch(Number.NaN) { case foo: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code: `switch(foo) { case Number.NaN: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(Number.NaN) { case foo: break; }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(foo) { case Number.NaN: break; }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(Number.NaN) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(Number.NaN) { case foo: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(Number.NaN) { default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(Number.NaN) { case foo: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch(foo) { case Number.NaN: }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(foo) { case Number.NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(foo) { case (Number.NaN): break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    15,
				},
			},
		},
		{
			Code:    `switch(foo) { case bar: break; case Number.NaN: break; default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    32,
				},
			},
		},
		{
			Code:    `switch(foo) { case bar: case Number.NaN: default: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    25,
				},
			},
		},
		{
			Code:    `switch(foo) { case bar: break; case NaN: break; case baz: break; case Number.NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "caseNaN",
					Column:    32,
				},
				{
					MessageId: "caseNaN",
					Column:    66,
				},
			},
		},
		{
			Code:    `switch(Number.NaN) { case Number.NaN: break; }`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
				{
					MessageId: "caseNaN",
					Column:    22,
				},
			},
		},
		{
			Code:    `switch((doStuff(), NaN)) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `switch((doStuff(), Number.NaN)) {}`,
			Options: "[{\"enforceForSwitchCase\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "switchNaN",
					Column:    1,
				},
			},
		},
		{
			Code:    `foo.indexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.findIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.lastIndexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.findLastIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo['indexOf'](NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo["findIndex"](Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    "foo[`indexOf`](NaN)",
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo["findIndex"](Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo['lastIndexOf'](NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo["findLastIndex"](Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo().indexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo().findIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.bar.lastIndexOf(NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.bar.findLastIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.indexOf?.(NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.findIndex?.(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo?.indexOf(NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo?.findIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `(foo?.indexOf)(NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `(foo?.findIndex)(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.indexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.findIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.lastIndexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.findLastIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo['indexOf'](Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo["findIndex"](Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo['lastIndexOf'](Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo["findLastIndex"](Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo().indexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo().findIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:    `foo.bar.lastIndexOf(Number.NaN)`,
			Options: "[{\"enforceForIndexOf\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.bar.findLastIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.indexOf?.(Number.NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo.findIndex?.(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo?.indexOf(Number.NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `foo?.findIndex(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `(foo?.indexOf)(Number.NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "replaceWithFindIndex",
							Output:    `(foo?.findIndex)(Number.isNaN)`,
						},
					},
				},
			},
		},
		{
			Code:            `foo.indexOf((1, NaN))`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.indexOf((1, Number.NaN))`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.lastIndexOf((1, NaN))`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.lastIndexOf((1, Number.NaN))`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.indexOf(NaN, 1)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.lastIndexOf(NaN, 1)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.indexOf(NaN, b)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.lastIndexOf(NaN, b)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.indexOf(Number.NaN, b)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.lastIndexOf(Number.NaN, b)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.lastIndexOf(NaN, NaN)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.indexOf((1, NaN), 1)`,
			Options:         "[{\"enforceForIndexOf\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "indexOfNaN",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
	})
}
