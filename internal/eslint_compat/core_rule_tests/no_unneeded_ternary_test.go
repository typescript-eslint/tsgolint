// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnneededTernaryRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-unneeded-ternary", []ValidTestCase{
		{Code: `config.newIsCap = config.newIsCap !== false`},
		{Code: `var a = x === 2 ? 'Yes' : 'No';`},
		{Code: `var a = x === 2 ? true : 'No';`},
		{Code: `var a = x === 2 ? 'Yes' : false;`},
		{Code: `var a = x === 2 ? 'true' : 'false';`},
		{Code: `var a = foo ? foo : bar;`},
		{Code: `var value = 'a';var canSet = true;var result = value || (canSet ? 'unset' : 'can not set')`},
		{Code: `var a = foo ? bar : foo;`},
		{Code: `foo ? bar : foo;`},
		{Code: `var a = f(x ? x : 1)`},
		{Code: `f(x ? x : 1);`},
		{Code: `foo ? foo : bar;`},
		{Code: `var a = foo ? 'Yes' : foo;`},
		{
			Code:    `var a = foo ? 'Yes' : foo;`,
			Options: "[{\"defaultAssignment\":false}]",
		},
		{
			Code:    `var a = foo ? bar : foo;`,
			Options: "[{\"defaultAssignment\":false}]",
		},
		{
			Code:    `foo ? bar : foo;`,
			Options: "[{\"defaultAssignment\":false}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `var a = x === 2 ? true : false;`,
			Output: `var a = x === 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code:   `var a = x >= 2 ? true : false;`,
			Output: `var a = x >= 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:   `var a = x ? true : false;`,
			Output: `var a = !!x;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:   `var a = x === 1 ? false : true;`,
			Output: `var a = x !== 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code:   `var a = x != 1 ? false : true;`,
			Output: `var a = x == 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:   `var a = foo() ? false : true;`,
			Output: `var a = !foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code:   `var a = !foo() ? false : true;`,
			Output: `var a = !!foo();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:   `var a = foo + bar ? false : true;`,
			Output: `var a = !(foo + bar);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code:   `var a = x instanceof foo ? false : true;`,
			Output: `var a = !(x instanceof foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code:   `var a = foo ? false : false;`,
			Output: `var a = false;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code: `var a = foo() ? false : false;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:   `var a = x instanceof foo ? true : false;`,
			Output: `var a = x instanceof foo;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code:   `var a = !foo ? true : false;`,
			Output: `var a = !foo;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 28,
				},
			},
		},
		{
			Code: `
                var value = 'a'
                var canSet = true
                var result = value ? value : canSet ? 'unset' : 'can not set'
            `,
			Output: `
                var value = 'a'
                var canSet = true
                var result = value || (canSet ? 'unset' : 'can not set')
            `,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      4,
					Column:    30,
					EndLine:   4,
					EndColumn: 78,
				},
			},
		},
		{
			Code:    `foo ? foo : (bar ? baz : qux)`,
			Output:  `foo || (bar ? baz : qux)`,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:            `function* fn() { foo ? foo : yield bar }`,
			Output:          `function* fn() { foo || (yield bar) }`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 39,
				},
			},
		},
		{
			Code:    `var a = foo ? foo : 'No';`,
			Output:  `var a = foo || 'No';`,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:    `var a = ((foo)) ? (((((foo))))) : ((((((((((((((bar))))))))))))));`,
			Output:  `var a = ((foo)) || ((((((((((((((bar))))))))))))));`,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 66,
				},
			},
		},
		{
			Code:            `var a = b ? b : c => c;`,
			Output:          `var a = b || (c => c);`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `var a = b ? b : c = 0;`,
			Output:          `var a = b || (c = 0);`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `var a = b ? b : (c => c);`,
			Output:          `var a = b || (c => c);`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 25,
				},
			},
		},
		{
			Code:            `var a = b ? b : (c = 0);`,
			Output:          `var a = b || (c = 0);`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `var a = b ? b : (c) => (c);`,
			Output:          `var a = b || ((c) => (c));`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `var a = b ? b : c, d; // this is ((b ? b : c), (d))`,
			Output:          `var a = b || c, d; // this is ((b ? b : c), (d))`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `var a = b ? b : (c, d);`,
			Output:          `var a = b || (c, d);`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:    `f(x ? x : 1);`,
			Output:  `f(x || 1);`,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `x ? x : 1;`,
			Output:  `x || 1;`,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `var a = foo ? foo : bar;`,
			Output:  `var a = foo || bar;`,
			Options: "[{\"defaultAssignment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `var a = foo ? foo : a ?? b;`,
			Output:          `var a = foo || (a ?? b);`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `foo as any ? false : true`,
			Output:          `!(foo as any)`,
			LanguageOptions: "{\"parser\":{},\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalExpression",
				},
			},
		},
		{
			Code:            `foo ? foo : bar as any`,
			Output:          `foo || (bar as any)`,
			Options:         "[{\"defaultAssignment\":false}]",
			LanguageOptions: "{\"parser\":{},\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryConditionalAssignment",
				},
			},
		},
	})
}
