// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoControlRegexRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-control-regex", []ValidTestCase{
		{Code: `var regex = /x1f/`},
		{Code: `var regex = /\\x1f/`},
		{Code: `var regex = new RegExp('x1f')`},
		{Code: `var regex = RegExp('x1f')`},
		{Code: `new RegExp('[')`},
		{Code: `RegExp('[')`},
		{Code: `new (function foo(){})('\x1f')`},
		{
			Code:            `/\u{20}/u`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{Code: `/\u{1F}/`},
		{Code: `/\u{1F}/g`},
		{Code: `new RegExp("\\u{20}", "u")`},
		{Code: `new RegExp("\\u{1F}")`},
		{Code: `new RegExp("\\u{1F}", "g")`},
		{Code: `new RegExp("\\u{1F}", flags)`},
		{Code: `new RegExp("[\\q{\\u{20}}]", "v")`},
		{
			Code:            `/[\u{20}--B]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
	}, []InvalidTestCase{
		{
			Code: `var regex = /\x1f/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = /\\\x1f\\x1e/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = /\\\x1fFOO\\x00/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = /FOO\\\x1fFOO\\x1f/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = new RegExp('\x1f\x1e')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = new RegExp('\x1fFOO\x00')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = new RegExp('FOO\x1fFOO\x1f')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var regex = RegExp('\x1f')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var regex = /(?<a>\x1f)/`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `var regex = /(?<\u{1d49c}>.)\x1f/`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new RegExp("\\u001F", flags)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `/\u{1111}*\x1F/u`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `new RegExp("\\u{1111}*\\x1F", "u")`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `/\u{1F}/u`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `/\u{1F}/gui`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new RegExp("\\u{1F}", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new RegExp("\\u{1F}", "gui")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `new RegExp("[\\q{\\u{1F}}]", "v")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `/[\u{1F}--B]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `/\x11/; RegExp("foo", "uv");`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    1,
				},
			},
		},
	})
}
