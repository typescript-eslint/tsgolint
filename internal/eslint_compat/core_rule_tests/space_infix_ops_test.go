// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSpaceInfixOpsRule(t *testing.T) {
	RunRuleTester(t, "{}", "space-infix-ops", []ValidTestCase{
		{Code: `a + b`},
		{Code: `a + ++b`},
		{Code: `a++ + b`},
		{Code: `a++ + ++b`},
		{Code: `a     + b`},
		{Code: `(a) + (b)`},
		{Code: `((a)) + ((b))`},
		{Code: `(((a))) + (((b)))`},
		{Code: `a + +b`},
		{Code: `a + (b)`},
		{Code: `a + +(b)`},
		{Code: `a + (+(b))`},
		{Code: `(a + b) + (c + d)`},
		{Code: `a = b`},
		{Code: `a ? b : c`},
		{Code: `var a = b`},
		{
			Code:            `const my_object = {key: 'value'};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a = 0} = bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo(a = 0) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a ** b`,
			LanguageOptions: "{\"ecmaVersion\":7}",
		},
		{
			Code:    `a|0`,
			Options: "[{\"int32Hint\":true}]",
		},
		{
			Code:    `a |0`,
			Options: "[{\"int32Hint\":true}]",
		},
		{
			Code:            `function foo(a: number = 0) { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
		{
			Code:            `function foo(): Bar { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
		{
			Code:            `var foo: Bar = '';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
		{
			Code:            `const foo = function(a: number = 0): Bar { };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
		{
			Code:            `type Foo<T> = T;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
		},
		{
			Code:            `a &&= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `a ||= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `a ??= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `class C { a; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { a = b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { 'a' = b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { [a] = b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { #a = b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:   `a+b`,
			Output: `a + b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:   `a +b`,
			Output: `a + b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    3,
					EndColumn: 4,
				},
			},
		},
		{
			Code:   `a+ b`,
			Output: `a + b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:   `a||b`,
			Output: `a || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 4,
				},
			},
		},
		{
			Code:   `a ||b`,
			Output: `a || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    3,
					EndColumn: 5,
				},
			},
		},
		{
			Code:   `a|| b`,
			Output: `a || b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 4,
				},
			},
		},
		{
			Code:   `a=b`,
			Output: `a = b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
				},
			},
		},
		{
			Code:   `a= b`,
			Output: `a = b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
				},
			},
		},
		{
			Code:   `a =b`,
			Output: `a = b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    3,
				},
			},
		},
		{
			Code:   `a?b:c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    4,
					EndColumn: 5,
				},
			},
		},
		{
			Code:   `a? b :c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `a ?b: c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    3,
					EndColumn: 4,
				},
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    5,
					EndColumn: 6,
				},
			},
		},
		{
			Code:   `a?b : c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:   `a ? b:c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `a? b : c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndColumn: 3,
				},
			},
		},
		{
			Code:   `a ?b : c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    3,
					EndColumn: 4,
				},
			},
		},
		{
			Code:   `a ? b: c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `a ? b :c`,
			Output: `a ? b : c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    7,
					EndColumn: 8,
				},
			},
		},
		{
			Code:   `var a=b;`,
			Output: `var a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:   `var a= b;`,
			Output: `var a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:   `var a =b;`,
			Output: `var a = b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:   `var a = b, c=d;`,
			Output: `var a = b, c = d;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:    `a| 0`,
			Output:  `a | 0`,
			Options: "[{\"int32Hint\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
				},
			},
		},
		{
			Code:   `var output = test || (test && test.value) ||(test2 && test2.value);`,
			Output: `var output = test || (test && test.value) || (test2 && test2.value);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    43,
				},
			},
		},
		{
			Code:   `var output = a ||(b && c.value) || (d && e.value);`,
			Output: `var output = a || (b && c.value) || (d && e.value);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:   `var output = a|| (b && c.value) || (d && e.value);`,
			Output: `var output = a || (b && c.value) || (d && e.value);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `const my_object={key: 'value'}`,
			Output:          `const my_object = {key: 'value'}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:            `var {a=0}=bar;`,
			Output:          `var {a = 0} = bar;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    7,
				},
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:            `function foo(a=0) { }`,
			Output:          `function foo(a = 0) { }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:            `a**b`,
			Output:          `a ** b`,
			LanguageOptions: "{\"ecmaVersion\":7}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
				},
			},
		},
		{
			Code:   `'foo'in{}`,
			Output: `'foo' in {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:   `'foo'instanceof{}`,
			Output: `'foo' instanceof {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:            `var a: Foo= b;`,
			Output:          `var a: Foo = b;`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code:            `function foo(a: number=0): Foo { }`,
			Output:          `function foo(a: number = 0): Foo { }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:            `a&&=b`,
			Output:          `a &&= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code:            `a ||=b`,
			Output:          `a ||= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code:            `a??= b`,
			Output:          `a ??= b`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code:            `class C { a=b; }`,
			Output:          `class C { a = b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `class C { [a ]= b; }`,
			Output:          `class C { [a ] = b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingSpace",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
	})
}
