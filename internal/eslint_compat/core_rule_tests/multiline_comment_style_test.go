// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMultilineCommentStyleRule(t *testing.T) {
	RunRuleTester(t, "{}", "multiline-comment-style", []ValidTestCase{
		{Code: `
            /*
             * this is
             * a comment
             */
        `},
		{Code: `
            /**
             * this is
             * a JSDoc comment
             */
        `},
		{Code: `
            /* eslint semi: [
              "error"
            ] */
        `},
		{Code: `
            // this is a single-line comment
        `},
		{Code: `
            /* foo */
        `},
		{Code: `
            // this is a comment
            foo();
            // this is another comment
        `},
		{Code: `
            /*
             * Function overview
             * ...
             */

            // Step 1: Do the first thing
            foo();
        `},
		{Code: `
            /*
             * Function overview
             * ...
             */

            /*
             * Step 1: Do the first thing.
             * The first thing is foo().
             */
            foo();
        `},
		{Code: `		/**
		 * this comment
		 * is tab-aligned
		 */`},
		{Code: `/**` + "\r" + `
 * this comment` + "\r" + `
 * uses windows linebreaks` + "\r" + `
 */`},
		{Code: `/**  * this comment  * uses paragraph separators  */`},
		{Code: `
            foo(/* this is an
                inline comment */);
        `},
		{Code: `
            // The following line comment
            // contains '*/'.
        `},
		{
			Code: `
                // The following line comment
                // contains '*/'.
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /*
                 * this is
                 * a comment
                 */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /**
                 * this is
                 * a JSDoc comment
                 */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /* eslint semi: [
                  "error"
                ] */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                // this is a single-line comment
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /* foo */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /*
                 * foo
                 */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /* foo */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /*
                   foo */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /*
                   foo
                */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /*
              foo */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /*
            foo
        */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                // this is
                // a comment
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                /* this is
                   a comment */ foo;
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                // a comment

                // another comment
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                // a comment

                // another comment
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                // a comment

                // another comment
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /* eslint semi: "error" */
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                /**
                 * This is
                 * a JSDoc comment
                 */
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                /**
                 * This is
                 * a JSDoc comment
                 */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /**
                 * This is
                 * a JSDoc comment
                 */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /* This is
                   a comment */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /* This is
                         a comment */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /* eslint semi: [
                    "error"
                ] */
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                /* The value of 5
                 + 4 is 9, and the value of 5
                 * 4 is 20. */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /*
                 *    foo
                 *  bar
                 *   baz
                 * qux
                 */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /*    foo
                 *  bar
                 *   baz
                 * qux
                 */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /**
                 *    JSDoc blocks
                 *  are
                 *   ignored
                 * !
                 */
            `,
			Options: "[\"bare-block\"]",
		},
		{
			Code: `
                /**
                 *    JSDoc blocks
                 *  are
                 *   ignored
                 * !
                 */
            `,
			Options: "[\"starred-block\"]",
		},
		{
			Code: `
                /**
                 *    JSDoc blocks
                 *  are
                 *   ignored
                 * !
                 */
            `,
			Options: "[\"separate-lines\"]",
		},
		{
			Code: `
                /*
                 * // a line comment
                 *some.code();
                 */
            `,
			Options: "[\"starred-block\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `
                // these are
                // line comments
            `,
			Output: `
                /*
                 * these are
                 * line comments
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                //foo
                ///bar
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
                // bar

                // baz
                // qux
            `,
			Output: `
                /*
                 * foo
                 * bar
                 */

                /*
                 * baz
                 * qux
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
				{
					MessageId: "expectedBlock",
					Line:      5,
				},
			},
		},
		{
			Code: `
                //  foo
                // bar
                //    baz
                // qux
            `,
			Output: `
                /*
                 *  foo
                 * bar
                 *    baz
                 * qux
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                //  foo
                //
                //    baz
                // qux
            `,
			Output: `
                /*
                 *  foo
                 * 
                 *    baz
                 * qux
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                //    foo
                     // bar
           //  baz
                // qux
            `,
			Output: `
                /*
                 *    foo
                 * bar
                 *  baz
                 * qux
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /* this block
                 * is missing a newline at the start
                 */
            `,
			Output: `
                /*
                 * this block
                 * is missing a newline at the start
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "startNewline",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /** this JSDoc comment
                 * is missing a newline at the start
                 */
            `,
			Output: `
                /**
                 * this JSDoc comment
                 * is missing a newline at the start
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "startNewline",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 * this block
                 * is missing a newline at the end*/
            `,
			Output: `
                /*
                 * this block
                 * is missing a newline at the end
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "endNewline",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the following line
                   is missing a '*' at the start
                 */
            `,
			Output: `
                /*
                 * the following line
                 * is missing a '*' at the start
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the following line
                 is missing a '*' at the start
                 */
            `,
			Output: `
                /*
                 * the following line
                 * is missing a '*' at the start
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the following line
                is missing a '*' at the start
                 */
            `,
			Output: `
                /*
                 * the following line
                 * is missing a '*' at the start
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the following line
                      * has a '*' with the wrong offset at the start
                 */
            `,
			Output: `
                /*
                 * the following line
                 * has a '*' with the wrong offset at the start
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alignment",
					Line:      4,
				},
			},
		},
		{
			Code: `
                  /*
                   * the following line
                 * has a '*' with the wrong offset at the start
                   */
            `,
			Output: `
                  /*
                   * the following line
                   * has a '*' with the wrong offset at the start
                   */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alignment",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the last line of this comment
                 * is misaligned
                   */
            `,
			Output: `
                /*
                 * the last line of this comment
                 * is misaligned
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alignment",
					Line:      5,
				},
			},
		},
		{
			Code: `
                /*
                 * the following line
                *
                 * is blank
                 */
            `,
			Output: `
                /*
                 * the following line
                 *
                 * is blank
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alignment",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the following line
                  *
                 * is blank
                 */
            `,
			Output: `
                /*
                 * the following line
                 *
                 * is blank
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alignment",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 * the last line of this comment
                 * is misaligned
                   */ foo
            `,
			Output: `
                /*
                 * the last line of this comment
                 * is misaligned
                 */ foo
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alignment",
					Line:      5,
				},
			},
		},
		{
			Code: `
                /*
                 * foo
                 * bar
                 */
            `,
			Output: `
                // foo
                // bar
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /**
                 * JSDoc
                 * Comment
                 */
            `,
			Output: `
                // JSDoc
                // Comment
            `,
			Options: "[\"separate-lines\",{\"checkJSDoc\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /* foo
                 *bar
                 baz
                 qux*/
            `,
			Output: `
                // foo
                // bar
                // baz
                // qux
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
                // bar
            `,
			Output: `
                /* foo
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
                //
                // bar
            `,
			Output: `
                /* foo
                   
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                //foo
                //bar
            `,
			Output: `
                /* foo
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                //   foo
                //   bar
            `,
			Output: `
                /*   foo
                     bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
              // bar
            `,
			Output: `
                /* foo
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                //    foo
                     // bar
           //  baz
                // qux
            `,
			Output: `
                /*    foo
                   bar
                    baz
                   qux */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                * foo
                * bar
                */
            `,
			Output: `
                /* foo
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                *foo
                *bar
                */
            `,
			Output: `
                /* foo
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                *   foo
                *   bar
                */
            `,
			Output: `
                /*   foo
                     bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                * foo
             * bar
                */
            `,
			Output: `
                /* foo
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *    foo
                 *  bar
                 *   baz
                 * qux
                 */
            `,
			Output: `
                /*    foo
                    bar
                     baz
                   qux */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                {
                    "foo": 1,
                    "bar": 2
                }
                */
            `,
			Output: `
                /*
                 *{
                 *    "foo": 1,
                 *    "bar": 2
                 *}
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "missingStar",
					Line:      5,
				},
				{
					MessageId: "missingStar",
					Line:      6,
				},
				{
					MessageId: "alignment",
					Line:      7,
				},
			},
		},
		{
			Code: `
                /*
                {
                	"foo": 1,
                	"bar": 2
                }
                */
            `,
			Output: `
                /*
                 *{
                 *	"foo": 1,
                 *	"bar": 2
                 *}
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "missingStar",
					Line:      5,
				},
				{
					MessageId: "missingStar",
					Line:      6,
				},
				{
					MessageId: "alignment",
					Line:      7,
				},
			},
		},
		{
			Code: `
                /*
                {
                	  "foo": 1,
                	  "bar": 2
                }
                */
            `,
			Output: `
                /*
                 *{
                 *	  "foo": 1,
                 *	  "bar": 2
                 *}
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "missingStar",
					Line:      5,
				},
				{
					MessageId: "missingStar",
					Line:      6,
				},
				{
					MessageId: "alignment",
					Line:      7,
				},
			},
		},
		{
			Code: `
                /*
                {
               	"foo": 1,
               	"bar": 2
                }
                */
            `,
			Output: `
                /*
                 *{
                 *"foo": 1,
                 *"bar": 2
                 *}
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "missingStar",
					Line:      5,
				},
				{
					MessageId: "missingStar",
					Line:      6,
				},
				{
					MessageId: "alignment",
					Line:      7,
				},
			},
		},
		{
			Code: `
                	 /*
                      	    {
                  	    "foo": 1,
                	   "bar": 2
                }
                */
            `,
			Output: `
                	 /*
                	  *{
                	  *"foo": 1,
                	  *"bar": 2
                	  *}
                	  */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "missingStar",
					Line:      5,
				},
				{
					MessageId: "missingStar",
					Line:      6,
				},
				{
					MessageId: "alignment",
					Line:      7,
				},
			},
		},
		{
			Code: `
                //{
                //    "foo": 1,
                //    "bar": 2
                //}
            `,
			Output: `
                /*
                 * {
                 *     "foo": 1,
                 *     "bar": 2
                 * }
                 */
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 * {
                 *     "foo": 1,
                 *     "bar": 2
                 * }
                 */
            `,
			Output: `
                // {
                //     "foo": 1,
                //     "bar": 2
                // }
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *
                 * {
                 *     "foo": 1,
                 *     "bar": 2
                 * }
                 *
                 */
            `,
			Output: `
                // 
                // {
                //     "foo": 1,
                //     "bar": 2
                // }
                // 
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *
                 * {
                 *     "foo": 1,
                 *     "bar": 2
                 * }
                 *
                 */
            `,
			Output: `
                /* 
                   {
                       "foo": 1,
                       "bar": 2
                   }
                    */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *
                 *{
                 *    "foo": 1,
                 *    "bar": 2
                 *}
                 *
                 */
            `,
			Output: `
                /* 
                   {
                       "foo": 1,
                       "bar": 2
                   }
                    */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *{
                 *    "foo": 1,
                 *    "bar": 2
                 *}
                 */
            `,
			Output: `
                // {
                //     "foo": 1,
                //     "bar": 2
                // }
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *   {
                 *       "foo": 1,
                 *       "bar": 2
                 *   }
                 */
            `,
			Output: `
                //   {
                //       "foo": 1,
                //       "bar": 2
                //   }
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
            *{
                 *    "foo": 1,
                    *    "bar": 2
                 *}
                  */
            `,
			Output: `
                // {
                //     "foo": 1,
                //     "bar": 2
                // }
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 *   {
                 *       "foo": 1,
                 *       "bar": 2
           *}
                 */
            `,
			Output: `
                //    {
                //        "foo": 1,
                //        "bar": 2
                // }
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                {
                    "foo": 1,
                    "bar": 2
                }
                */
            `,
			Output: `
                // 
                // {
                //     "foo": 1,
                //     "bar": 2
                // }
                // 
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /* {
                       "foo": 1,
                       "bar": 2
                   } */
            `,
			Output: `
                // {
                //     "foo": 1,
                //     "bar": 2
                // } 
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 * foo
                 *
                 * bar
                 */
            `,
			Output: `
                // foo
                // 
                // bar
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 * foo
                 * 
                 * bar
                 */
            `,
			Output: `
                // foo
                // 
                // bar
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 * foo
                 *
                 * bar
                 */
            `,
			Output: `
                /* foo
                   
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                 * foo
                 * 
                 * bar
                 */
            `,
			Output: `
                /* foo
                   
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBareBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
                //
                // bar
            `,
			Output: `
                /*
                 * foo
                 * 
                 * bar
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
                // 
                // bar
            `,
			Output: `
                /*
                 * foo
                 * 
                 * bar
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // foo
                // 
                // bar
            `,
			Output: `
                /* foo
                   
                   bar */
            `,
			Options: "[\"bare-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /* foo

                   bar */
            `,
			Output: `
                // foo
                // 
                // bar 
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /* foo
                   
                   bar */
            `,
			Output: `
                // foo
                // 
                // bar 
            `,
			Options: "[\"separate-lines\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLines",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /* foo

                   bar */
            `,
			Output: `
                /*
                 * foo
                 * 
                 * bar 
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "startNewline",
					Line:      2,
				},
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "endNewline",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /* foo
                   
                   bar */
            `,
			Output: `
                /*
                 * foo
                 * 
                 * bar 
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "startNewline",
					Line:      2,
				},
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "endNewline",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*foo

                  bar */
            `,
			Output: `
                /*
                 *foo
                 *
                 *bar 
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "startNewline",
					Line:      2,
				},
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "endNewline",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*foo
                   
                  bar */
            `,
			Output: `
                /*
                 *foo
                 * 
                 *bar 
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "startNewline",
					Line:      2,
				},
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "endNewline",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 // a line comment
                 some.code();
                 */
            `,
			Output: `
                /*
                 * // a line comment
                 *some.code();
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
			},
		},
		{
			Code: `
                /*
                 // a line comment
                 * some.code();
                 */
            `,
			Output: `
                /*
                 * // a line comment
                 * some.code();
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
			},
		},
		{
			Code: `
                ////This comment is in
                //` + "`" + `separate-lines` + "`" + ` format.
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                // // This comment is in
                // ` + "`" + `separate-lines` + "`" + ` format.
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      2,
				},
			},
		},
		{
			Code: `
                /*
                {
                	"foo": 1,
                	//"bar": 2
                }
                */
            `,
			Output: `
                /*
                 *{
                 *	"foo": 1,
                 *	//"bar": 2
                 *}
                 */
            `,
			Options: "[\"starred-block\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingStar",
					Line:      3,
				},
				{
					MessageId: "missingStar",
					Line:      4,
				},
				{
					MessageId: "missingStar",
					Line:      5,
				},
				{
					MessageId: "missingStar",
					Line:      6,
				},
				{
					MessageId: "alignment",
					Line:      7,
				},
			},
		},
	})
}
