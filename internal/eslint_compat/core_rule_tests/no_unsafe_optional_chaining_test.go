// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnsafeOptionalChainingRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021,\"sourceType\":\"module\"}}", "no-unsafe-optional-chaining", []ValidTestCase{
		{Code: `var foo;`},
		{Code: `class Foo {}`},
		{Code: `!!obj?.foo`},
		{Code: `obj?.foo();`},
		{Code: `obj?.foo?.();`},
		{Code: `(obj?.foo ?? bar)();`},
		{Code: `(obj?.foo)?.()`},
		{Code: `(obj?.foo ?? bar?.baz)?.()`},
		{Code: `(obj.foo)?.();`},
		{Code: `obj?.foo.bar;`},
		{Code: `obj?.foo?.bar;`},
		{Code: `(obj?.foo)?.bar;`},
		{Code: `(obj?.foo)?.bar.baz;`},
		{Code: `(obj?.foo)?.().bar`},
		{Code: `(obj?.foo ?? bar).baz;`},
		{Code: "(obj?.foo ?? val)`template`"},
		{Code: `new (obj?.foo ?? val)()`},
		{Code: `new bar();`},
		{Code: `obj?.foo?.()();`},
		{Code: `const {foo} = obj?.baz || {};`},
		{Code: `const foo = obj?.bar`},
		{Code: `foo = obj?.bar`},
		{Code: `foo.bar = obj?.bar`},
		{Code: `bar(...obj?.foo ?? []);`},
		{Code: `var bar = {...foo?.bar};`},
		{Code: `foo?.bar in {};`},
		{Code: `foo?.bar < foo?.baz;`},
		{Code: `foo?.bar <= foo?.baz;`},
		{Code: `foo?.bar > foo?.baz;`},
		{Code: `foo?.bar >= foo?.baz;`},
		{Code: `[foo = obj?.bar] = [];`},
		{Code: `[foo.bar = obj?.bar] = [];`},
		{Code: `({foo = obj?.bar} = obj);`},
		{Code: `({foo: obj.bar = obj?.baz} = obj);`},
		{Code: `(foo?.bar, bar)();`},
		{Code: `(foo?.bar ? baz : qux)();`},
		{Code: `
        async function func() {
          await obj?.foo();
          await obj?.foo?.();
          (await obj?.foo)?.();
          (await obj?.foo)?.bar;
          await bar?.baz;
          await (foo ?? obj?.foo.baz);
          (await bar?.baz ?? bar).baz;
          (await bar?.baz ?? await bar).baz;
          await (foo?.bar ? baz : qux);
        }
        `},
		{Code: `(obj?.foo ?? bar?.baz ?? qux)();`},
		{Code: `((obj?.foo ?? bar?.baz) || qux)();`},
		{Code: `((obj?.foo || bar?.baz) || qux)();`},
		{Code: `((obj?.foo && bar?.baz) || qux)();`},
		{Code: `obj?.foo - bar;`},
		{Code: `obj?.foo + bar;`},
		{Code: `obj?.foo * bar;`},
		{Code: `obj?.foo / bar;`},
		{Code: `obj?.foo % bar;`},
		{Code: `obj?.foo ** bar;`},
		{Code: `+obj?.foo;`},
		{Code: `-obj?.foo;`},
		{Code: `bar += obj?.foo;`},
		{Code: `bar -= obj?.foo;`},
		{Code: `bar %= obj?.foo;`},
		{Code: `bar **= obj?.foo;`},
		{Code: `bar *= obj?.boo`},
		{Code: `bar /= obj?.boo`},
		{Code: `async function func() {
            await obj?.foo + await obj?.bar;
            await obj?.foo - await obj?.bar;
            await obj?.foo * await obj?.bar;
            +await obj?.foo;
            -await obj?.foo;
            bar += await obj?.foo;
            bar -= await obj?.foo;
            bar %= await obj?.foo;
            bar **= await obj?.foo;
            bar *= await obj?.boo;
            bar /= await obj?.boo;
        }
        `},
		{
			Code:    `obj?.foo | bar`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `obj?.foo & bar`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `obj?.foo >> obj?.bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `obj?.foo << obj?.bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `obj?.foo >>> obj?.bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo || baz) + bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo ?? baz) + bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo ?? baz) - bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo ?? baz) * bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo ?? baz) / bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo ?? baz) % bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `(obj?.foo ?? baz) ** bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `void obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `typeof obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `!obj?.foo`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `~obj?.foo`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `+(obj?.foo ?? bar)`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `-(obj?.foo ?? bar)`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar |= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar &= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar ^= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar <<= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar >>= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar >>>= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar ||= obj?.foo`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar &&= obj?.foo`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar += (obj?.foo ?? baz);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar -= (obj?.foo ?? baz)`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar *= (obj?.foo ?? baz)`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar /= (obj?.foo ?? baz)`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar %= (obj?.foo ?? baz);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `bar **= (obj?.foo ?? baz)`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code: `async function foo() {
              (await obj?.foo || baz) + bar;
              (await obj?.foo ?? baz) + bar;
              (await obj?.foo ?? baz) - bar;
              (await obj?.foo ?? baz) * bar;
              (await obj?.foo ?? baz) / bar;
              (await obj?.foo ?? baz) % bar;
              "(await obj?.foo ?? baz) ** bar;",
              "void await obj?.foo;",
              "typeof await obj?.foo;",
              "!await obj?.foo",
              "~await obj?.foo",
              "+(await obj?.foo ?? bar)",
              "-(await obj?.foo ?? bar)",
              bar |= await obj?.foo;
              bar &= await obj?.foo;
              bar ^= await obj?.foo;
              bar <<= await obj?.foo;
              bar >>= await obj?.foo;
              bar >>>= await obj?.foo
              bar += ((await obj?.foo) ?? baz);
              bar -= ((await obj?.foo) ?? baz);
              bar /= ((await obj?.foo) ?? baz);
              bar %= ((await obj?.foo) ?? baz);
              bar **= ((await obj?.foo) ?? baz);
            }`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
		},
		{
			Code:    `obj?.foo - bar;`,
			Options: "[{}]",
		},
		{
			Code:    `obj?.foo - bar;`,
			Options: "[{\"disallowArithmeticOperators\":false}]",
		},
	}, []InvalidTestCase{
		{
			Code: `(obj?.foo)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj.foo ?? bar?.baz)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj.foo || bar?.baz)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj?.foo && bar)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(bar && obj?.foo)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj?.foo?.())();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj?.foo).bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj?.foo)[1];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: "(obj?.foo)`template`",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `new (obj?.foo)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `new (obj?.foo?.())()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `new (obj?.foo?.() || obj?.bar)()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() {
              (await obj?.foo)();
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() {
              (await obj?.foo).bar;
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() {
              (bar?.baz ?? await obj?.foo)();
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() {
              (bar && await obj?.foo)();
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() {
              (await (bar && obj?.foo))();
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `[...obj?.foo];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `bar(...obj?.foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `new Bar(...obj?.foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `const {foo} = obj?.bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `const {foo} = obj?.bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `const {foo: bar} = obj?.bar();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `const [foo] = obj?.bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `const [foo] = obj?.bar || obj?.foo;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `([foo] = obj?.bar);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `const [foo] = obj?.bar?.();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `[{ foo } = obj?.bar] = [];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `({bar: [ foo ] = obj?.prop} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `[[ foo ] = obj?.bar] = [];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { const {foo} = await obj?.bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { const {foo} = await obj?.bar(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { const [foo] = await obj?.bar || await obj?.foo; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { ([foo] = await obj?.bar); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `class A extends obj?.foo {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { class A extends (await obj?.foo) {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `var a = class A extends obj?.foo {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { var a = class A extends (await obj?.foo) {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `foo instanceof obj?.prop`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { foo instanceof await obj?.prop }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `1 in foo?.bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { 1 in await foo?.bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `for (foo of obj?.bar);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { for (foo of await obj?.bar);}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(foo, obj?.foo)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(foo, obj?.foo)[1];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (await (foo, obj?.foo))(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { ((foo, await obj?.foo))(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (foo, await obj?.foo)[1]; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (await (foo, obj?.foo)) [1]; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(a ? obj?.foo : b)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(a ? b : obj?.foo)();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(a ? obj?.foo : b)[1];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(a ? b : obj?.foo).bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (await (a ? obj?.foo : b))(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (a ? await obj?.foo : b)(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (await (a ? b : obj?.foo))(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (await (a ? obj?.foo : b))[1]; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (await (a ? b : obj?.foo)).bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `async function foo() { (a ? b : await obj?.foo).bar; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
				},
			},
		},
		{
			Code: `(obj?.foo && obj?.baz).bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
					Line:      1,
					Column:    2,
				},
				{
					MessageId: "unsafeOptionalChain",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:            `with (obj?.foo) {};`,
			LanguageOptions: "{\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:            `async function foo() { with ( await obj?.foo) {}; }`,
			LanguageOptions: "{\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
					Line:      1,
					Column:    37,
				},
			},
		},
		{
			Code: `(foo ? obj?.foo : obj?.bar).bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeOptionalChain",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "unsafeOptionalChain",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `obj?.foo + bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `(foo || obj?.foo) + bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar + (foo || obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `(a ? obj?.foo : b) + bar`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `(a ? b : obj?.foo) + bar`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `(foo, bar, baz?.qux) + bar`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `obj?.foo - bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `obj?.foo * bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `obj?.foo / bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `obj?.foo % bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `obj?.foo ** bar;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `+obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `-obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `+(foo ?? obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `+(foo || obj?.bar);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `+(obj?.bar && foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `+(foo ? obj?.foo : bar);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `+(foo ? bar : obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar += obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar -= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar %= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar **= obj?.foo;`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar *= obj?.boo`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar /= obj?.boo`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar += (foo ?? obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar += (foo || obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar += (foo && obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar += (foo ? obj?.foo : bar);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `bar += (foo ? bar : obj?.foo);`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `async function foo() { await obj?.foo + bar; }`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `async function foo() { (foo || await obj?.foo) + bar;}`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
		{
			Code:    `async function foo() { bar + (foo || await obj?.foo); }`,
			Options: "[{\"disallowArithmeticOperators\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeArithmetic",
				},
			},
		},
	})
}
