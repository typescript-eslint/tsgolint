// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestFuncStyleRule(t *testing.T) {
	RunRuleTester(t, "{}", "func-style", []ValidTestCase{
		{
			Code: `function foo(){}
 function bar(){}`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `foo.bar = function(){};`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `(function() { /* code */ }());`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `var module = (function() { return {}; }());`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `var object = { foo: function(){} };`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `Array.prototype.foo = function(){};`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `foo.bar = function(){};`,
			Options: "[\"expression\"]",
		},
		{
			Code: `var foo = function(){};
 var bar = function(){};`,
			Options: "[\"expression\"]",
		},
		{
			Code: `var foo = () => {};
 var bar = () => {}`,
			Options:         "[\"expression\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = function() { this; }.bind(this);`,
			Options: "[\"declaration\"]",
		},
		{
			Code:            `var foo = () => { this; };`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C extends D { foo() { var bar = () => { super.baz(); }; } }`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var obj = { foo() { var bar = () => super.baz; } }`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `export default function () {};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var foo = () => {};`,
			Options:         "[\"declaration\",{\"allowArrowFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = () => { function foo() { this; } };`,
			Options:         "[\"declaration\",{\"allowArrowFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = () => ({ bar() { super.baz(); } });`,
			Options:         "[\"declaration\",{\"allowArrowFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"declaration\"]",
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
		{
			Code:    `export var foo = function(){};`,
			Options: "[\"expression\"]",
		},
		{
			Code:    `export var foo = function(){};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
		},
		{
			Code:    `export var foo = function(){};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
		},
		{
			Code:    `export var foo = function(){};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
		{
			Code:    `export var foo = function(){};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"declaration\",{\"allowArrowFunctions\":true,\"overrides\":{\"namedExports\":\"expression\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"expression\",{\"allowArrowFunctions\":true,\"overrides\":{\"namedExports\":\"expression\"}}]",
		},
		{
			Code:    `export var foo = () => {};`,
			Options: "[\"declaration\",{\"allowArrowFunctions\":true,\"overrides\":{\"namedExports\":\"ignore\"}}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `var foo = function(){};`,
			Options: "[\"declaration\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `var foo = () => {};`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `var foo = () => { function foo() { this; } };`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `var foo = () => ({ bar() { super.baz(); } });`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:    `function foo(){}`,
			Options: "[\"expression\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expression",
				},
			},
		},
		{
			Code:    `export function foo(){}`,
			Options: "[\"expression\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expression",
				},
			},
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"declaration\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expression",
				},
			},
		},
		{
			Code:    `export function foo() {};`,
			Options: "[\"expression\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expression",
				},
			},
		},
		{
			Code:            `export var foo = function(){};`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `export var foo = function(){};`,
			Options:         "[\"expression\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `export var foo = function(){};`,
			Options:         "[\"declaration\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `export var foo = () => {};`,
			Options:         "[\"declaration\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `export var b = () => {};`,
			Options:         "[\"expression\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `export var c = () => {};`,
			Options:         "[\"declaration\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `function foo() {};`,
			Options:         "[\"expression\",{\"overrides\":{\"namedExports\":\"declaration\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expression",
				},
			},
		},
		{
			Code:            `var foo = function() {};`,
			Options:         "[\"declaration\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
		{
			Code:            `var foo = () => {};`,
			Options:         "[\"declaration\",{\"overrides\":{\"namedExports\":\"expression\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "declaration",
				},
			},
		},
	})
}
