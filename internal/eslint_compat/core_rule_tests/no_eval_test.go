// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoEvalRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-eval", []ValidTestCase{
		{Code: `Eval(foo)`},
		{Code: `setTimeout('foo')`},
		{Code: `setInterval('foo')`},
		{Code: `window.setTimeout('foo')`},
		{Code: `window.setInterval('foo')`},
		{Code: `window.eval('foo')`},
		{
			Code:            `window.eval('foo')`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `window.noeval('foo')`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `function foo() { var eval = 'foo'; window[eval]('foo') }`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{Code: `global.eval('foo')`},
		{
			Code:            `global.noeval('foo')`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `function foo() { var eval = 'foo'; global[eval]('foo') }`,
			LanguageOptions: "{\"sourceType\":\"commonjs\",\"globals\":{\"global\":\"readonly\"}}",
		},
		{Code: `globalThis.eval('foo')`},
		{
			Code:            `globalThis.eval('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `globalThis.noneval('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `function foo() { var eval = 'foo'; globalThis[eval]('foo') }`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: `this.noeval('foo');`},
		{Code: `function foo() { 'use strict'; this.eval('foo'); }`},
		{
			Code:            `'use strict'; this.eval('foo');`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code:            `this.eval('foo');`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `function foo() { this.eval('foo'); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `function foo() { this.eval('foo'); }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"impliedStrict\":true}}}",
		},
		{Code: `var obj = {foo: function() { this.eval('foo'); }}`},
		{Code: `var obj = {}; obj.foo = function() { this.eval('foo'); }`},
		{
			Code:            `() => { this.eval('foo') }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `function f() { 'use strict'; () => { this.eval('foo') } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(function f() { 'use strict'; () => { this.eval('foo') } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C extends function () { this.eval('foo'); } {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { foo() { this.eval(); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static foo() { this.eval(); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { field = this.eval(); }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { field = () => this.eval(); }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { static { this.eval(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `array.findLast(function (x) { return this.eval.includes(x); }, { eval: ['foo', 'bar'] });`},
		{Code: `callbacks.findLastIndex(function (cb) { return cb(this.eval); }, this);`},
		{Code: `['1+1'].flatMap(function (str) { return this.eval(str); }, new Evaluator);`},
		{
			Code:    `(0, eval)('foo')`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:            `(0, window.eval)('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `(0, window['eval'])('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:    `var EVAL = eval; EVAL('foo')`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:    `var EVAL = this.eval; EVAL('foo')`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:    `(function(exe){ exe('foo') })(eval);`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:            `window.eval('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `window.window.eval('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `window.window['eval']('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `global.eval('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `global.global.eval('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:    `this.eval('foo')`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:    `function foo() { this.eval('foo') }`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:            `(0, globalThis.eval)('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `(0, globalThis['eval'])('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `var EVAL = globalThis.eval; EVAL('foo')`,
			Options: "[{\"allowIndirect\":true}]",
		},
		{
			Code:            `function foo() { globalThis.eval('foo') }`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `globalThis.globalThis.eval('foo');`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `eval?.('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `window?.eval('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `(window?.eval)('foo')`,
			Options:         "[{\"allowIndirect\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"globals\":{\"window\":\"readonly\"}}",
		},
	}, []InvalidTestCase{
		{
			Code: `eval(foo)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `eval('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `function foo(eval) { eval('foo') }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    22,
					EndColumn: 26,
				},
			},
		},
		{
			Code:    `eval(foo)`,
			Options: "[{\"allowIndirect\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    1,
					EndColumn: 5,
				},
			},
		},
		{
			Code:    `eval('foo')`,
			Options: "[{\"allowIndirect\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    1,
					EndColumn: 5,
				},
			},
		},
		{
			Code:    `function foo(eval) { eval('foo') }`,
			Options: "[{\"allowIndirect\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    22,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `(0, eval)('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    5,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `(0, window.eval)('foo')`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    12,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `(0, window['eval'])('foo')`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    12,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `var EVAL = eval; EVAL('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    12,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `var EVAL = this.eval; EVAL('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    17,
					EndColumn: 21,
				},
			},
		},
		{
			Code: `'use strict'; var EVAL = this.eval; EVAL('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    31,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `function foo() { ('use strict'); this.eval; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    39,
					EndColumn: 43,
				},
			},
		},
		{
			Code:            `() => { this.eval('foo'); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    14,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `() => { 'use strict'; this.eval('foo'); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    28,
					EndColumn: 32,
				},
			},
		},
		{
			Code:            `'use strict'; () => { this.eval('foo'); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    28,
					EndColumn: 32,
				},
			},
		},
		{
			Code:            `() => { 'use strict'; () => { this.eval('foo'); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    36,
					EndColumn: 40,
				},
			},
		},
		{
			Code: `(function(exe){ exe('foo') })(eval);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    31,
					EndColumn: 35,
				},
			},
		},
		{
			Code:            `window.eval('foo')`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    8,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `window.window.eval('foo')`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    15,
					EndColumn: 19,
				},
			},
		},
		{
			Code:            `window.window['eval']('foo')`,
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    15,
					EndColumn: 21,
				},
			},
		},
		{
			Code:            `global.eval('foo')`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    8,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `global.global.eval('foo')`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    15,
					EndColumn: 19,
				},
			},
		},
		{
			Code:            "global.global[`eval`]('foo')",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"commonjs\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    15,
					EndColumn: 21,
				},
			},
		},
		{
			Code: `this.eval('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    6,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `'use strict'; this.eval('foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    20,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `function foo() { this.eval('foo') }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    23,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `var EVAL = globalThis.eval; EVAL('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    23,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `globalThis.eval('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    12,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `globalThis.globalThis.eval('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    23,
					EndColumn: 27,
				},
			},
		},
		{
			Code:            `globalThis.globalThis['eval']('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    23,
					EndColumn: 29,
				},
			},
		},
		{
			Code:            `(0, globalThis.eval)('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    16,
					EndColumn: 20,
				},
			},
		},
		{
			Code:            `(0, globalThis['eval'])('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    16,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `window?.eval('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(window?.eval)('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `(window?.window).eval('foo')`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class C { [this.eval('foo')] }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `'use strict'; class C { [this.eval('foo')] }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `class A { static {} [this.eval()]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `function foo() { 'use strict'; this.eval(); }`,
			LanguageOptions: "{\"ecmaVersion\":3}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `array.findLast(x => this.eval.includes(x), { eval: 'abc' });`,
			LanguageOptions: "{\"ecmaVersion\":2023}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `callbacks.findLastIndex(function (cb) { return cb(eval); }, this);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `['1+1'].flatMap(function (str) { return this.eval(str); });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `['1'].reduce(function (a, b) { return this.eval(a) ? a : b; }, '0');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
