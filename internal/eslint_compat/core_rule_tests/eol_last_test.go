// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestEolLastRule(t *testing.T) {
	RunRuleTester(t, "{}", "eol-last", []ValidTestCase{
		{Code: ``},
		{Code: `
`},
		{Code: `var a = 123;
`},
		{Code: `var a = 123;

`},
		{Code: `var a = 123;
   
`},
		{Code: `` + "\r" + `
`},
		{Code: `var a = 123;` + "\r" + `
`},
		{Code: `var a = 123;` + "\r" + `
` + "\r" + `
`},
		{Code: `var a = 123;` + "\r" + `
   ` + "\r" + `
`},
		{
			Code:    `var a = 123;`,
			Options: "[\"never\"]",
		},
		{
			Code: `var a = 123;
var b = 456;`,
			Options: "[\"never\"]",
		},
		{
			Code: `var a = 123;` + "\r" + `
var b = 456;`,
			Options: "[\"never\"]",
		},
		{
			Code:    ``,
			Options: "[\"unix\"]",
		},
		{
			Code: `
`,
			Options: "[\"unix\"]",
		},
		{
			Code: `var a = 123;
`,
			Options: "[\"unix\"]",
		},
		{
			Code: `var a = 123;

`,
			Options: "[\"unix\"]",
		},
		{
			Code: `var a = 123;
   
`,
			Options: "[\"unix\"]",
		},
		{
			Code:    ``,
			Options: "[\"windows\"]",
		},
		{
			Code: `
`,
			Options: "[\"windows\"]",
		},
		{
			Code: `` + "\r" + `
`,
			Options: "[\"windows\"]",
		},
		{
			Code: `var a = 123;` + "\r" + `
`,
			Options: "[\"windows\"]",
		},
		{
			Code: `var a = 123;` + "\r" + `
` + "\r" + `
`,
			Options: "[\"windows\"]",
		},
		{
			Code: `var a = 123;` + "\r" + `
   ` + "\r" + `
`,
			Options: "[\"windows\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `var a = 123;`,
			Output: `var a = 123;
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var a = 123;
   `,
			Output: `var a = 123;
   
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    4,
				},
			},
		},
		{
			Code: `var a = 123;
`,
			Output:  `var a = 123;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 123;` + "\r" + `
`,
			Output:  `var a = 123;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 123;` + "\r" + `
` + "\r" + `
`,
			Output:  `var a = 123;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 123;
var b = 456;
`,
			Output: `var a = 123;
var b = 456;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    13,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 123;` + "\r" + `
var b = 456;` + "\r" + `
`,
			Output: `var a = 123;` + "\r" + `
var b = 456;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    13,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 123;

`,
			Output:  `var a = 123;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 123;`,
			Output: `var a = 123;
`,
			Options: "[\"unix\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var a = 123;
   `,
			Output: `var a = 123;
   
`,
			Options: "[\"unix\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    4,
				},
			},
		},
		{
			Code: `var a = 123;`,
			Output: `var a = 123;` + "\r" + `
`,
			Options: "[\"windows\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var a = 123;` + "\r" + `
   `,
			Output: `var a = 123;` + "\r" + `
   ` + "\r" + `
`,
			Options: "[\"windows\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      2,
					Column:    4,
				},
			},
		},
	})
}
