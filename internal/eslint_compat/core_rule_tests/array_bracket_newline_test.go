// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrayBracketNewlineRule(t *testing.T) {
	RunRuleTester(t, "{}", "array-bracket-newline", []ValidTestCase{
		{Code: `var foo = [];`},
		{Code: `var foo = [1];`},
		{Code: `var foo = /* any comment */[1];`},
		{Code: `var foo = /* any comment */
[1];`},
		{Code: `var foo = [1, 2];`},
		{Code: `var foo = [ // any comment
1, 2
];`},
		{Code: `var foo = [
// any comment
1, 2
];`},
		{Code: `var foo = [
1, 2
// any comment
];`},
		{Code: `var foo = [
1,
2
];`},
		{Code: `var foo = [
function foo() {
return dosomething();
}
];`},
		{Code: `var foo = [/* 
any comment
 */];`},
		{Code: `var foo = [/* single line multiline comment for no real reason */];`},
		{Code: `var foo = [[1,2]]`},
		{
			Code: `var foo = [
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
1
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
// any
1
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
/* any */
1
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
1, 2
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
1, 2 // any comment
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
1, 2 /* any comment */
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
1,
2
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[\"always\"]",
		},
		{
			Code: `
            var foo = [
                [
                    1,2
                ]
            ]
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
            var foo = [
                0,
                [
                    1,2
                ],
                3
            ]
            `,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [/* any comment */1];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [1,
2];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [1,
/* any comment */
2];`,
			Options: "[\"never\"]",
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = [[1,2],3];`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var a = []`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [
]`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var a = [1]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [
1
]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [//
1
]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [/**/
1
]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [/*
*/1
]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [//
]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [
                [1,2]
            ]`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `var a = [
                [[1,2]]
            ]`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = /* any comment */[1];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = /* any comment */
[1];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [ // any comment
1, 2
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
// any comment
1, 2
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
1, 2
// any comment
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
1,
2
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
function foo() {
return dosomething();
}
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [/* 
any comment
 */];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
1,
2,
[3,4],
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var foo = [
1,
2,
[
3,
4
],
];`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code:    `var foo = [1]/* any comment*/;`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code: `var foo = [1]
/* any comment*/
;`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code: `var foo = [1,
2];`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code: `var foo = [function foo() {
return dosomething();
}];`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code: `var foo = [1,
2,[3,
4]];`,
			Options: "[{\"multiline\":false}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code: `var foo = [
1, 2
];`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code: `var foo = [
1,
2
];`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code: `var foo = [
                1,[
                    2,3
                ]
            ];`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code: `var foo = [[
                1,2
            ]]`,
			Options: "[{\"minItems\":2}]",
		},
		{
			Code: `var foo = [
];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [
1
];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [
1, 2
];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [
1,
2
];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"minItems\":0}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code: `var foo = [1,
2];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[{\"minItems\":null}]",
		},
		{
			Code:    `var foo = [];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
		},
		{
			Code:    `var foo = [1, 2];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
		},
		{
			Code: `var foo = [
1,
2
];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
		},
		{
			Code:    `var a = [];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code:    `var b = [1];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code: `var b = [ // any comment
1
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code:    `var b = [ /* any comment */ 1];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code: `var c = [
1, 2
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code: `var c = [
/* any comment */1, 2
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code: `var c = [
1, /* any comment */ 2
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code: `var d = [
1,
2
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code: `var e = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
		},
		{
			Code:            `var [] = foo`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var /* any comment */[a] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var /* any comment */
[a] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, b] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [ // any comment
a, b
] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
// any comment
a, b
] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a, b
// any comment
] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a,
b
] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
// any
a
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
/* any */
a
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a, b
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a, b // any comment
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a, b /* any comment */
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a,
b
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [//
a
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [/**/
a
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [/*
*/a
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [//
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var /* any comment */[a] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var /* any comment */
[a] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [a, b] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [ // any comment
a, b
] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
// any comment
a, b
] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a, b
// any comment
] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var [
a,
b
] = foo;`,
			Options:         "[{\"multiline\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo = [
                [1,2]
            ]`,
			Output: `var foo = [[1,2]]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    13,
					EndLine:   3,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `var foo = [[2,
3]]`,
			Output: `var foo = [
[
2,
3
]
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `var foo = [[1,2]]`,
			Output: `var foo = [
[
1,2
]
]`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `var foo = [];`,
			Output: `var foo = [
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var foo = [1];`,
			Output: `var foo = [
1
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var foo = [ // any comment
1];`,
			Output: `var foo = [ // any comment
1
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var foo = [ /* any comment */
1];`,
			Output: `var foo = [ /* any comment */
1
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [1, 2];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `var foo = [1, 2 // any comment
];`,
			Output: `var foo = [
1, 2 // any comment
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code: `var foo = [1, 2 /* any comment */];`,
			Output: `var foo = [
1, 2 /* any comment */
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    34,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Output: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [[
                1,2],3];`,
			Output:  `var foo = [[1,2],3];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var foo = [ /* any comment */
1, 2
];`,
			Output: `var foo = [ /* any comment */
1, 2];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1, 2
/* any comment */];`,
			Output: `var foo = [1, 2
/* any comment */];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    18,
				},
			},
		},
		{
			Code: `var foo = [ // any comment
1, 2
];`,
			Output: `var foo = [ // any comment
1, 2];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1,
2
];`,
			Output: `var foo = [1,
2];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Output: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `var a = [[1,2]
            ]`,
			Output:  `var a = [[1,2]]`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    13,
					EndLine:   2,
					EndColumn: 14,
				},
			},
		},
		{
			Code: `var a = [
[
[1,2]]
]`,
			Output: `var a = [
[
[1,2]
]
]`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      3,
					Column:    6,
					EndLine:   3,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `var foo = [
1]`,
			Output: `var foo = [
1
]`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var foo = [1
]`,
			Output:  `var foo = [1]`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var foo = [//
1]`,
			Output: `var foo = [//
1
]`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
// any comment
];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1, 2
];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Output: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [1,[
2,3
]
];`,
			Output: `var foo = [
1,[
2,3
]
];`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `var foo = [[1,2
]]`,
			Output: `var foo = [[
1,2
]]`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [1, 2];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Output: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[{\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [];`,
			Output: `var foo = [
];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    12,
				},
			},
		},
		{
			Code: `var foo = [1];`,
			Output: `var foo = [
1
];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var foo = [1, 2];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Output: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"minItems\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1, 2
];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1,
2
];`,
			Output: `var foo = [1,
2];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Output: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[{\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1, 2
];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Output: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true,\"minItems\":null}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [1, 2];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code: `var foo = [1,
2];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [function foo() {
dosomething();
}];`,
			Output: `var foo = [
function foo() {
dosomething();
}
];`,
			Options: "[{\"multiline\":true,\"minItems\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var foo = [
1, 2];`,
			Output: `var foo = [
1, 2
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `var foo = [	1, 2];`,
			Output: `var foo = [
	1, 2
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = [1,
2
];`,
			Output: `var foo = [
1,
2
];`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
			},
		},
		{
			Code: `var foo = [
];`,
			Output:  `var foo = [];`,
			Options: "[{\"multiline\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1
];`,
			Output:  `var foo = [1];`,
			Options: "[{\"multiline\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1, 2
];`,
			Output:  `var foo = [1, 2];`,
			Options: "[{\"multiline\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
1,
2
];`,
			Output: `var foo = [1,
2];`,
			Options: "[{\"multiline\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `var foo = [
function foo() {
dosomething();
}
];`,
			Output: `var foo = [function foo() {
dosomething();
}];`,
			Options: "[{\"multiline\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    11,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `var [] = foo;`,
			Output: `var [
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code: `var [a] = foo;`,
			Output: `var [
a
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code: `var [ // any comment
a] = foo;`,
			Output: `var [ // any comment
a
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var [ /* any comment */
a] = foo;`,
			Output: `var [ /* any comment */
a
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var [a, b] = foo;`,
			Output: `var [
a, b
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `var [a, b // any comment
] = foo;`,
			Output: `var [
a, b // any comment
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `var [a, b /* any comment */] = foo;`,
			Output: `var [
a, b /* any comment */
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code: `var [a,
b] = foo;`,
			Output: `var [
a,
b
] = foo;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var [
a] = foo`,
			Output: `var [
a
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var [a
] = foo`,
			Output:          `var [a] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var [//
a] = foo`,
			Output: `var [//
a
] = foo`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `var [
] = foo;`,
			Output:          `var [] = foo;`,
			Options:         "[{\"minItems\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var [
a
] = foo;`,
			Output:          `var [a] = foo;`,
			Options:         "[{\"minItems\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "unexpectedClosingLinebreak",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var [a, b] = foo;`,
			Output: `var [
a, b
] = foo;`,
			Options:         "[{\"minItems\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `var [a,
b] = foo;`,
			Output: `var [
a,
b
] = foo;`,
			Options:         "[{\"minItems\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingOpeningLinebreak",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "missingClosingLinebreak",
					Line:      2,
					Column:    2,
				},
			},
		},
	})
}
