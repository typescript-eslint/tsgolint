// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestIdDenylistRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "id-denylist", []ValidTestCase{
		{
			Code:    `foo = "bar"`,
			Options: "[\"bar\"]",
		},
		{
			Code:    `bar = "bar"`,
			Options: "[\"foo\"]",
		},
		{
			Code:    `foo = "bar"`,
			Options: "[\"f\",\"fo\",\"fooo\",\"bar\"]",
		},
		{
			Code:    `function foo(){}`,
			Options: "[\"bar\"]",
		},
		{
			Code:    `foo()`,
			Options: "[\"f\",\"fo\",\"fooo\",\"bar\"]",
		},
		{
			Code:            `import { foo as bar } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { foo as bar } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:    `foo.bar()`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"baz\"]",
		},
		{
			Code:    `var foo = bar.baz;`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\"]",
		},
		{
			Code:    `var foo = bar.baz.bing;`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `foo.bar.baz = bing.bong.bash;`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `if (foo.bar) {}`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `var obj = { key: foo.bar };`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:            `const {foo: bar} = baz`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `const {foo: {bar: baz}} = qux`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ bar: baz }) {}`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ bar: {baz: qux} }) {}`,
			Options:         "[\"bar\",\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({baz} = obj.qux) {}`,
			Options:         "[\"qux\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo({ foo: {baz} = obj.qux }) {}`,
			Options:         "[\"qux\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({a: bar = obj.baz});`,
			Options:         "[\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({foo: {a: bar = obj.baz}} = qux);`,
			Options:         "[\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var arr = [foo.bar];`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `[foo.bar]`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `[foo.bar.nesting]`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `if (foo.bar === bar.baz) { [foo.bar] }`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
		},
		{
			Code:    `var myArray = new Array(); var myDate = new Date();`,
			Options: "[\"array\",\"date\",\"mydate\",\"myarray\",\"new\",\"var\"]",
		},
		{
			Code:    `foo()`,
			Options: "[\"foo\"]",
		},
		{
			Code:    `foo.bar()`,
			Options: "[\"bar\"]",
		},
		{
			Code:    `foo.bar`,
			Options: "[\"bar\"]",
		},
		{
			Code:            `({foo: obj.bar.bar.bar.baz} = {});`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[obj.bar]: a = baz} = qux);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `Number.parseInt()`,
			Options: "[\"Number\"]",
		},
		{
			Code:    `x = Number.NaN;`,
			Options: "[\"Number\"]",
		},
		{
			Code:    `var foo = undefined;`,
			Options: "[\"undefined\"]",
		},
		{
			Code:    `if (foo === undefined);`,
			Options: "[\"undefined\"]",
		},
		{
			Code:    `obj[undefined] = 5;`,
			Options: "[\"undefined\"]",
		},
		{
			Code:            `foo = { [myGlobal]: 1 };`,
			Options:         "[\"myGlobal\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"myGlobal\":\"readonly\"}}",
		},
		{
			Code:            `({ myGlobal } = foo);`,
			Options:         "[\"myGlobal\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"globals\":{\"myGlobal\":\"writable\"}}",
		},
		{
			Code:    `/* global myGlobal: readonly */ myGlobal = 5;`,
			Options: "[\"myGlobal\"]",
		},
		{
			Code:            `var foo = [Map];`,
			Options:         "[\"Map\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = { bar: window.baz };`,
			Options:         "[\"window\"]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
		},
		{
			Code:            `class C { camelCase; #camelCase; #camelCase2() {} }`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { snake_case; #snake_case; #snake_case2() {} }`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `import foo from 'foo.json' with { type: 'json' }`,
			Options:         "[\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * from 'foo.json' with { type: 'json' }`,
			Options:         "[\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { default } from 'foo.json' with { type: 'json' }`,
			Options:         "[\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import('foo.json', { with: { type: 'json' } })`,
			Options:         "[\"with\",\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { 'with': { type: 'json' } })`,
			Options:         "[\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
		{
			Code:            `import('foo.json', { with: { type } })`,
			Options:         "[\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
		},
	}, []InvalidTestCase{
		{
			Code:    `foo = "bar"`,
			Options: "[\"foo\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `bar = "bar"`,
			Options: "[\"bar\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `foo = "bar"`,
			Options: "[\"f\",\"fo\",\"foo\",\"bar\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `function foo(){}`,
			Options: "[\"f\",\"fo\",\"foo\",\"bar\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `import foo from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `import * as foo from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `export * as foo from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `import { foo } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `import { foo as bar } from 'mod'`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `import { foo as bar } from 'mod'`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `import { foo as foo } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `import { foo, foo as bar } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
			},
		},
		{
			Code:            `import { foo as bar, foo } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    22,
				},
			},
		},
		{
			Code:            `import foo, { foo as bar } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    8,
				},
			},
		},
		{
			Code:            `var foo; export { foo as bar };`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    26,
				},
			},
		},
		{
			Code:            `var foo; export { foo };`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    5,
				},
				{
					MessageId: "restricted",
					Column:    19,
				},
			},
		},
		{
			Code:            `var foo; export { foo as bar };`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    5,
				},
				{
					MessageId: "restricted",
					Column:    19,
				},
			},
		},
		{
			Code:            `var foo; export { foo as foo };`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    5,
				},
				{
					MessageId: "restricted",
					Column:    19,
				},
				{
					MessageId: "restricted",
					Column:    26,
				},
			},
		},
		{
			Code:            `var foo; export { foo as bar };`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    5,
				},
				{
					MessageId: "restricted",
					Column:    19,
				},
				{
					MessageId: "restricted",
					Column:    26,
				},
			},
		},
		{
			Code:            `export { foo } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `export { foo as bar } from 'mod'`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `export { foo as bar } from 'mod'`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `export { foo as foo } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `export { foo, foo as bar } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
			},
		},
		{
			Code:            `export { foo as bar, foo } from 'mod'`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    22,
				},
			},
		},
		{
			Code:    `foo.bar()`,
			Options: "[\"f\",\"fo\",\"foo\",\"b\",\"ba\",\"baz\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `foo[bar] = baz;`,
			Options: "[\"bar\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `baz = foo[bar];`,
			Options: "[\"bar\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var foo = bar.baz;`,
			Options: "[\"f\",\"fo\",\"foo\",\"b\",\"ba\",\"barr\",\"bazz\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var foo = bar.baz;`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"bar\",\"bazz\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `if (foo.bar) {}`,
			Options: "[\"f\",\"fo\",\"foo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var obj = { key: foo.bar };`,
			Options: "[\"obj\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var obj = { key: foo.bar };`,
			Options: "[\"key\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var obj = { key: foo.bar };`,
			Options: "[\"foo\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var arr = [foo.bar];`,
			Options: "[\"arr\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var arr = [foo.bar];`,
			Options: "[\"foo\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `[foo.bar]`,
			Options: "[\"f\",\"fo\",\"foo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `if (foo.bar === bar.baz) { [bing.baz] }`,
			Options: "[\"f\",\"fo\",\"foo\",\"b\",\"ba\",\"barr\",\"bazz\",\"bingg\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `if (foo.bar === bar.baz) { [foo.bar] }`,
			Options: "[\"f\",\"fo\",\"fooo\",\"b\",\"ba\",\"bar\",\"bazz\",\"bingg\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var myArray = new Array(); var myDate = new Date();`,
			Options: "[\"array\",\"date\",\"myDate\",\"myarray\",\"new\",\"var\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var myArray = new Array(); var myDate = new Date();`,
			Options: "[\"array\",\"date\",\"mydate\",\"myArray\",\"new\",\"var\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `foo.bar = 1`,
			Options: "[\"bar\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `foo.bar.baz = 1`,
			Options: "[\"bar\",\"baz\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `const {foo} = baz`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    8,
				},
			},
		},
		{
			Code:            `const {foo: bar} = baz`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    13,
				},
			},
		},
		{
			Code:            `const {[foo]: bar} = baz`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    9,
				},
				{
					MessageId: "restricted",
					Column:    15,
				},
			},
		},
		{
			Code:            `const {foo: {bar: baz}} = qux`,
			Options:         "[\"foo\",\"bar\",\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    19,
				},
			},
		},
		{
			Code:            `const {foo: {[bar]: baz}} = qux`,
			Options:         "[\"foo\",\"bar\",\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    15,
				},
				{
					MessageId: "restricted",
					Column:    21,
				},
			},
		},
		{
			Code:            `const {[foo]: {[bar]: baz}} = qux`,
			Options:         "[\"foo\",\"bar\",\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    9,
				},
				{
					MessageId: "restricted",
					Column:    17,
				},
				{
					MessageId: "restricted",
					Column:    23,
				},
			},
		},
		{
			Code:            `function foo({ bar: baz }) {}`,
			Options:         "[\"bar\",\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    21,
				},
			},
		},
		{
			Code:            `function foo({ bar: {baz: qux} }) {}`,
			Options:         "[\"bar\",\"baz\",\"qux\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    27,
				},
			},
		},
		{
			Code:            `({foo: obj.bar} = baz);`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    12,
				},
			},
		},
		{
			Code:            `({foo: obj.bar.bar.bar.baz} = {});`,
			Options:         "[\"foo\",\"bar\",\"baz\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    24,
				},
			},
		},
		{
			Code:            `({[foo]: obj.bar} = baz);`,
			Options:         "[\"foo\",\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    4,
				},
				{
					MessageId: "restricted",
					Column:    14,
				},
			},
		},
		{
			Code:            `({foo: { a: obj.bar }} = baz);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `({a: obj.bar = baz} = qux);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
			},
		},
		{
			Code:            `({a: obj.bar.bar.baz = obj.qux} = obj.qux);`,
			Options:         "[\"a\",\"bar\",\"baz\",\"qux\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    18,
				},
			},
		},
		{
			Code:            `({a: obj[bar] = obj.qux} = obj.qux);`,
			Options:         "[\"a\",\"bar\",\"baz\",\"qux\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
			},
		},
		{
			Code:            `({a: [obj.bar] = baz} = qux);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    11,
				},
			},
		},
		{
			Code:            `({foo: { a: obj.bar = baz}} = qux);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    17,
				},
			},
		},
		{
			Code:            `({foo: { [a]: obj.bar }} = baz);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    19,
				},
			},
		},
		{
			Code:            `({...obj.bar} = baz);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
			},
		},
		{
			Code:            `([obj.bar] = baz);`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    7,
				},
			},
		},
		{
			Code:            `const [bar] = baz;`,
			Options:         "[\"bar\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    8,
				},
			},
		},
		{
			Code:    `foo.undefined = 1;`,
			Options: "[\"undefined\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var foo = { undefined: 1 };`,
			Options: "[\"undefined\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var foo = { undefined: undefined };`,
			Options: "[\"undefined\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    13,
				},
			},
		},
		{
			Code:            `var foo = { Number() {} };`,
			Options:         "[\"Number\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `class Foo { Number() {} }`,
			Options:         "[\"Number\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `myGlobal: while(foo) { break myGlobal; } `,
			Options:         "[\"myGlobal\"]",
			LanguageOptions: "{\"globals\":{\"myGlobal\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    1,
				},
				{
					MessageId: "restricted",
					Column:    30,
				},
			},
		},
		{
			Code:            `const foo = 1; bar = foo;`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    7,
				},
				{
					MessageId: "restricted",
					Column:    22,
				},
			},
		},
		{
			Code:            `let foo; foo = bar;`,
			Options:         "[\"foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    5,
				},
				{
					MessageId: "restricted",
					Column:    10,
				},
			},
		},
		{
			Code:    `bar = foo; var foo;`,
			Options: "[\"foo\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    7,
				},
				{
					MessageId: "restricted",
					Column:    16,
				},
			},
		},
		{
			Code:    `function foo() {} var bar = foo;`,
			Options: "[\"foo\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
				{
					MessageId: "restricted",
					Column:    29,
				},
			},
		},
		{
			Code:            `class Foo {} var bar = Foo;`,
			Options:         "[\"Foo\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    7,
				},
				{
					MessageId: "restricted",
					Column:    24,
				},
			},
		},
		{
			Code:            `let undefined; undefined = 1;`,
			Options:         "[\"undefined\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    5,
				},
				{
					MessageId: "restricted",
					Column:    16,
				},
			},
		},
		{
			Code:    `foo = undefined; var undefined;`,
			Options: "[\"undefined\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    7,
				},
				{
					MessageId: "restricted",
					Column:    22,
				},
			},
		},
		{
			Code:    `function undefined(){} x = undefined;`,
			Options: "[\"undefined\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    10,
				},
				{
					MessageId: "restricted",
					Column:    28,
				},
			},
		},
		{
			Code:            `class Number {} x = Number.NaN;`,
			Options:         "[\"Number\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    7,
				},
				{
					MessageId: "restricted",
					Column:    21,
				},
			},
		},
		{
			Code:            `/* globals myGlobal */ window.myGlobal = 5; foo = myGlobal;`,
			Options:         "[\"myGlobal\"]",
			LanguageOptions: "{\"globals\":{\"window\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    31,
				},
			},
		},
		{
			Code:            `var foo = undefined;`,
			Options:         "[\"undefined\"]",
			LanguageOptions: "{\"globals\":{\"undefined\":\"off\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `/* globals Number: off */ Number.parseInt()`,
			Options: "[\"Number\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:    `var foo = [Map];`,
			Options: "[\"Map\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `if (foo) { let undefined; bar = undefined; }`,
			Options:         "[\"undefined\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    16,
				},
				{
					MessageId: "restricted",
					Column:    33,
				},
			},
		},
		{
			Code:    `function foo(Number) { var x = Number.NaN; }`,
			Options: "[\"Number\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    14,
				},
				{
					MessageId: "restricted",
					Column:    32,
				},
			},
		},
		{
			Code:            `function foo() { var myGlobal; x = myGlobal; }`,
			Options:         "[\"myGlobal\"]",
			LanguageOptions: "{\"globals\":{\"myGlobal\":\"readonly\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    22,
				},
				{
					MessageId: "restricted",
					Column:    36,
				},
			},
		},
		{
			Code:            `function foo(bar) { return Number.parseInt(bar); } const Number = 1;`,
			Options:         "[\"Number\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    28,
				},
				{
					MessageId: "restricted",
					Column:    58,
				},
			},
		},
		{
			Code:            `import Number from 'myNumber'; const foo = Number.parseInt(bar);`,
			Options:         "[\"Number\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
					Column:    8,
				},
				{
					MessageId: "restricted",
					Column:    44,
				},
			},
		},
		{
			Code:    `var foo = function undefined() {};`,
			Options: "[\"undefined\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `var foo = { undefined }`,
			Options:         "[\"undefined\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `class C { camelCase; #camelCase; #camelCase2() {} }`,
			Options:         "[\"camelCase\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
				{
					MessageId: "restrictedPrivate",
				},
			},
		},
		{
			Code:            `class C { snake_case; #snake_case() {}; #snake_case2() {} }`,
			Options:         "[\"snake_case\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
				{
					MessageId: "restrictedPrivate",
				},
			},
		},
		{
			Code:            `import('foo.json', { with: { [type]: 'json' } })`,
			Options:         "[\"type\"]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
		{
			Code:            `import('foo.json', { with: { type: json } })`,
			Options:         "[\"json\"]",
			LanguageOptions: "{\"ecmaVersion\":2025}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restricted",
				},
			},
		},
	})
}
