// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestComplexityRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021}}", "complexity", []ValidTestCase{
		{Code: `function a(x) {}`},
		{
			Code:    `function b(x) {}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {if (true) {return x;}}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {if (true) {return x;} else {return x+1;}}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {if (true) {return x;} else if (false) {return x+1;} else {return 4;}}`,
			Options: "[3]",
		},
		{
			Code:    `function a(x) {for(var i = 0; i < 5; i ++) {x ++;} return x;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(obj) {for(var i in obj) {obj[i] = 3;}}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {for(var i = 0; i < 5; i ++) {if(i % 2 === 0) {x ++;}} return x;}`,
			Options: "[3]",
		},
		{
			Code:    `function a(obj) {if(obj){ for(var x in obj) {try {x.getThis();} catch (e) {x.getThat();}}} else {return false;}}`,
			Options: "[4]",
		},
		{
			Code:    `function a(x) {try {x.getThis();} catch (e) {x.getThat();}}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {return x === 4 ? 3 : 5;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {return x === 4 ? 3 : (x === 3 ? 2 : 1);}`,
			Options: "[3]",
		},
		{
			Code:    `function a(x) {return x || 4;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {x && 4;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {x ?? 4;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {x ||= 4;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {x &&= 4;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {x ??= 4;}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {x = 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x |= 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x &= 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x += 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x >>= 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x >>>= 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x == 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {x === 4;}`,
			Options: "[1]",
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: 3;}}`,
			Options: "[3]",
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: if(x == 'foo') {5;};}}`,
			Options: "[4]",
		},
		{
			Code:    `function a(x) {while(true) {'foo';}}`,
			Options: "[2]",
		},
		{
			Code:    `function a(x) {do {'foo';} while (true)}`,
			Options: "[2]",
		},
		{
			Code:    `if (foo) { bar(); }`,
			Options: "[3]",
		},
		{
			Code:            `var a = (x) => {do {'foo';} while (true)}`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: 3;}}`,
			Options: "[{\"max\":2,\"variant\":\"modified\"}]",
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: if(x == 'foo') {5;};}}`,
			Options: "[{\"max\":3,\"variant\":\"modified\"}]",
		},
		{
			Code:            `function foo() { class C { x = a || b; y = c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { static x = a || b; static y = c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { x = a || b; y = c || d; } e || f; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { a || b; class C { x = c || d; y = e || f; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { [x || y] = a || b; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = a || b; y() { c || d; } z = e || f; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x() { a || b; } y = c || d; z() { e || f; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = (() => { a || b }) || (() => { c || d }) }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = () => { a || b }; y = () => { c || d } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = a || (() => { b || c }); }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = class { y = a || b; z = c || d; }; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x = a || class { y = b || c; z = d || e; }; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { x; y = a; static z; static q = b; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { static { a || b; } static { c || d; } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { a || b; class C { static { c || d; } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { static { a || b; } } c || d; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { static { a || b; } } class D { static { c || d; } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; } static { c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; } static { c || d; } static { e || f; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { () => a || b; c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; () => c || d; } static { c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a } }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a } static { b } }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; } } class D { static { c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; } static c = d || e; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static a = b || c; static { c || d; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; } c = d || e; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { a = b || c; static { d || e; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { a || b; c || d; } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { if (a || b) c = d || e; } }`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:    `function b(x) {}`,
			Options: "[{\"max\":1}]",
		},
		{
			Code:    `function a(b) { b?.c; }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `function a(b = '') {}`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `function a(b) { const { c = '' } = b; }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:    `function a(b) { const [ c = '' ] = b; }`,
			Options: "[{\"max\":2}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `function a(x) {}`,
			Options: "[0]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `var func = function () {}`,
			Options: "[0]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `var obj = { a(x) {} }`,
			Options:         "[0]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class Test { a(x) {} }`,
			Options:         "[0]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `var a = (x) => {if (true) {return x;}}`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {if (true) {return x;}}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {if (true) {return x;} else {return x+1;}}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {if (true) {return x;} else if (false) {return x+1;} else {return 4;}}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {for(var i = 0; i < 5; i ++) {x ++;} return x;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(obj) {for(var i in obj) {obj[i] = 3;}}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:            `function a(obj) {for(var i of obj) {obj[i] = 3;}}`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {for(var i = 0; i < 5; i ++) {if(i % 2 === 0) {x ++;}} return x;}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(obj) {if(obj){ for(var x in obj) {try {x.getThis();} catch (e) {x.getThat();}}} else {return false;}}`,
			Options: "[3]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {try {x.getThis();} catch (e) {x.getThat();}}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {return x === 4 ? 3 : 5;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {return x === 4 ? 3 : (x === 3 ? 2 : 1);}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {return x || 4;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {x && 4;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {x ?? 4;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {x ||= 4;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {x &&= 4;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {x ??= 4;}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: 3;}}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: if(x == 'foo') {5;};}}`,
			Options: "[3]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {while(true) {'foo';}}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {do {'foo';} while (true)}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `function a(x) {(function() {while(true){'foo';}})(); (function() {while(true){'bar';}})();}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
				{},
			},
		},
		{
			Code:    `function a(x) {(function() {while(true){'foo';}})(); (function() {'bar';})();}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:            `var obj = { a(x) { return x ? 0 : 1; } };`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `var obj = { a: function b(x) { return x ? 0 : 1; } };`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code: `function test (a) { if (a === 1) {} else if (a === 2) {} else if (a === 3) {} else if (a === 4) {} else if (a === 5) {} else if (a === 6) {} else if (a === 7) {} else if (a === 8) {} else if (a === 9) {} else if (a === 10) {} else if (a === 11) {} else if (a === 12) {} else if (a === 13) {} else if (a === 14) {} else if (a === 15) {} else if (a === 16) {} else if (a === 17) {} else if (a === 18) {} else if (a === 19) {} else if (a === 20) {} };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function test (a) { if (a === 1) {} else if (a === 2) {} else if (a === 3) {} else if (a === 4) {} else if (a === 5) {} else if (a === 6) {} else if (a === 7) {} else if (a === 8) {} else if (a === 9) {} else if (a === 10) {} else if (a === 11) {} else if (a === 12) {} else if (a === 13) {} else if (a === 14) {} else if (a === 15) {} else if (a === 16) {} else if (a === 17) {} else if (a === 18) {} else if (a === 19) {} else if (a === 20) {} };`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: 3;}}`,
			Options: "[{\"max\":1,\"variant\":\"modified\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(x) {switch(x){case 1: 1; break; case 2: 2; break; default: if(x == 'foo') {5;};}}`,
			Options: "[{\"max\":2,\"variant\":\"modified\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { x; } c || d; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { x = c; } d || e; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { [x || y]; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { [x || y] = c; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { class C { [x || y]; } a || b; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { class C { [x || y] = a; } b || c; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { class C { [x || y]; [z || q]; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { class C { [x || y] = a; [z || q] = b; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { x = c || d; } e || f; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x(){ a || b; } y = c || d || e; z() { f || g; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = a || b; y() { c || d || e; } z = f || g; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x; y() { c || d || e; } z; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = a || b; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `(class { x = a || b; })`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static x = a || b; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `(class { x = a ? b : c; })`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = a || b || c; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = a || b; y = b || c || d; z = e || f; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 38,
				},
			},
		},
		{
			Code:            `class C { x = a || b || c; y = d || e; z = f || g || h; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 26,
				},
				{
					MessageId: "complex",
					Line:      1,
					Column:    44,
					EndLine:   1,
					EndColumn: 55,
				},
			},
		},
		{
			Code:            `class C { x = () => a || b || c; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = (() => a || b || c) || d; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = () => a || b || c; y = d || e; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = () => a || b || c; y = d || e || f; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
				{
					MessageId: "complex",
					Line:      1,
					Column:    38,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
		{
			Code:            `class C { x = function () { a || b }; y = function () { c || d }; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = class { [y || z]; }; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 34,
				},
			},
		},
		{
			Code:            `class C { x = class { [y || z] = a; }; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 38,
				},
			},
		},
		{
			Code:            `class C { x = class { y = a || b; }; }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { static {} } c || d; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `function foo () { a || b; class C { static { c || d; } } e || f; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; }  }`,
			Options:         "[1]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b || c; }  }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; c || d; }  }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; c || d; e || f; }  }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; c || d; { e || f; } }  }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { if (a || b) c = d || e; } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { if (a || b) c = (d => e || f)() || (g => h || i)(); } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x(){ a || b; } static { c || d || e; } z() { f || g; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { x = a || b; static { c || d || e; } y = f || g; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static x = a || b; static { c || d || e; } static y = f || g; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; } static(){ c || d || e; } static { f || g; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; } static static(){ c || d || e; } static { f || g; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:            `class C { static { a || b; } static x = c || d || e; static { f || g; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Column:    41,
					EndColumn: 52,
				},
			},
		},
		{
			Code:            `class C { static { a || b || c || d; } static { e || f || g; } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Column:    11,
					EndColumn: 39,
				},
			},
		},
		{
			Code:            `class C { static { a || b || c; } static { d || e || f || g; } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Column:    35,
					EndColumn: 63,
				},
			},
		},
		{
			Code:            `class C { static { a || b || c || d; } static { e || f || g || h; } }`,
			Options:         "[3]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
					Column:    11,
					EndColumn: 39,
				},
				{
					MessageId: "complex",
					Column:    40,
					EndColumn: 68,
				},
			},
		},
		{
			Code:    `function a(x) {}`,
			Options: "[{\"max\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.['c']; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c; d || e; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c?.d; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.['c']?.['d']; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c?.['d']; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c.d?.e; }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c?.(); }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { b?.c?.()?.(); }`,
			Options: "[{\"max\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b = '') {}`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { const { c = '' } = b; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { const [ c = '' ] = b; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
		{
			Code:    `function a(b) { const [ { c: d = '' } = {} ] = b; }`,
			Options: "[{\"max\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "complex",
				},
			},
		},
	})
}
