// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestLinebreakStyleRule(t *testing.T) {
	RunRuleTester(t, "{}", "linebreak-style", []ValidTestCase{
		{Code: `var a = 'a',
 b = 'b';

 function foo(params) {
 /* do stuff */ 
 }
`},
		{
			Code: `var a = 'a',
 b = 'b';

 function foo(params) {
 /* do stuff */ 
 }
`,
			Options: "[\"unix\"]",
		},
		{
			Code: `var a = 'a',` + "\r" + `
 b = 'b';` + "\r" + `
` + "\r" + `
 function foo(params) {` + "\r" + `
 /* do stuff */ ` + "\r" + `
 }` + "\r" + `
`,
			Options: "[\"windows\"]",
		},
		{
			Code:    `var b = 'b';`,
			Options: "[\"unix\"]",
		},
		{
			Code:    `var b = 'b';`,
			Options: "[\"windows\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `var a = 'a';` + "\r" + `
`,
			Output: `var a = 'a';
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLF",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 'a';` + "\r" + `
`,
			Output: `var a = 'a';
`,
			Options: "[\"unix\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLF",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 'a';
`,
			Output: `var a = 'a';` + "\r" + `
`,
			Options: "[\"windows\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCRLF",
					Line:      1,
					Column:    13,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 'a',
 b = 'b';

 function foo(params) {` + "\r" + `
 /* do stuff */ 
 }` + "\r" + `
`,
			Output: `var a = 'a',
 b = 'b';

 function foo(params) {
 /* do stuff */ 
 }
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLF",
					Line:      4,
					Column:    24,
					EndLine:   5,
					EndColumn: 1,
				},
				{
					MessageId: "expectedLF",
					Line:      6,
					Column:    3,
					EndLine:   7,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `var a = 'a',` + "\r" + `
 b = 'b';` + "\r" + `

 function foo(params) {` + "\r" + `

 /* do stuff */ 
 }` + "\r" + `
`,
			Output: `var a = 'a',` + "\r" + `
 b = 'b';` + "\r" + `
` + "\r" + `
 function foo(params) {` + "\r" + `
` + "\r" + `
 /* do stuff */ ` + "\r" + `
 }` + "\r" + `
`,
			Options: "[\"windows\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCRLF",
					Line:      3,
					Column:    1,
					EndLine:   4,
					EndColumn: 1,
				},
				{
					MessageId: "expectedCRLF",
					Line:      5,
					Column:    1,
					EndLine:   6,
					EndColumn: 1,
				},
				{
					MessageId: "expectedCRLF",
					Line:      6,
					Column:    17,
					EndLine:   7,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `` + "\r" + `
`,
			Output: `
`,
			Options: "[\"unix\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLF",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `
`,
			Output: `` + "\r" + `
`,
			Options: "[\"windows\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedCRLF",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
	})
}
