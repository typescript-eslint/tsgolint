// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoNonoctalDecimalEscapeRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-nonoctal-decimal-escape", []ValidTestCase{
		{Code: `8`},
		{Code: `var \u8888`},
		{Code: `/\8/`},
		{Code: `''`},
		{Code: `'foo'`},
		{Code: `'8'`},
		{Code: `'9'`},
		{Code: `'foo8'`},
		{Code: `'foo9bar'`},
		{Code: `'\ '`},
		{Code: `'\\'`},
		{Code: `'\a'`},
		{Code: `'\n'`},
		{Code: `'\0'`},
		{Code: `'\1'`},
		{Code: `'\7'`},
		{Code: `'\01'`},
		{Code: `'\08'`},
		{Code: `'\19'`},
		{Code: `'\t9'`},
		{Code: `'\üëç8'`},
		{Code: `'\\8'`},
		{Code: `'\\9'`},
		{Code: `'\\8\\9'`},
		{Code: `'\\ \\8'`},
		{Code: `'\\\\9'`},
		{Code: `'\\9bar'`},
		{Code: `'a\\8'`},
		{Code: `'foo\\8'`},
		{Code: `'foo\\8bar'`},
		{Code: `'9\\9'`},
		{Code: `'n\n8'`},
		{Code: `'n\nn\n8'`},
		{Code: `'\1.8'`},
		{Code: `'\1\28'`},
		{Code: `'\x99'`},
		{Code: `'\\\x38'`},
		{Code: `\u99999`},
		{Code: `'\
8'`},
		{Code: `'\
\\9'`},
	}, []InvalidTestCase{
		{
			Code: `'\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `"\8"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `"8"`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `"\\8"`,
						},
					},
				},
			},
		},
		{
			Code: `'f\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'f9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'f\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'fo\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'fo9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'fo\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\8bar'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo8bar'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\\8bar'`,
						},
					},
				},
			},
		},
		{
			Code: `'üëç\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'üëç8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'üëç\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\\\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\\8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\\\\\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\\\\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\\\\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\\\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 9,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo\\8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\\\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\ \8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\ 8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\ \\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\1\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\19'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\1\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\1\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 9,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo\19'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\1\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\n\n\8\n'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\n\n8\n'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\n\n\\8\n'`,
						},
					},
				},
			},
		},
		{
			Code: `'\n.\n\8\n'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 9,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\n.\n8\n'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\n.\n\\8\n'`,
						},
					},
				},
			},
		},
		{
			Code: `'\n.\nn\8\n'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 10,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\n.\nn8\n'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\n.\nn\\8\n'`,
						},
					},
				},
			},
		},
		{
			Code: `'\üëç\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\üëç8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\üëç\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\\8\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\\89'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\8\\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8\\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\8 \\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8 \\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8 \\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\8\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8\8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8\8'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\88'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\8\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\9\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'9\8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\9\8'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\98'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\9\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\8bar\9baz'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo8bar\9baz'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\\8bar\9baz'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 12,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo\8bar9baz'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\8bar\\9baz'`,
						},
					},
				},
			},
		},
		{
			Code: `'\8\1\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8\1\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8\1\9'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\8\19'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\8\1\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\9\n9\\9\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'9\n9\\9\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\9\n9\\9\9'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 12,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\9\n9\\99'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\9\n9\\9\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\8\\\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8\\\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8\\\9'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\8\\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\8\\\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `var foo = '\8'; bar('\9')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `var foo = '8'; bar('\9')`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `var foo = '\\8'; bar('\9')`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `var foo = '\8'; bar('9')`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `var foo = '\8'; bar('\\9')`,
						},
					},
				},
			},
		},
		{
			Code: `var foo = '8'
  bar = '\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      2,
					Column:    10,
					EndLine:   2,
					EndColumn: 12,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output: `var foo = '8'
  bar = '9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output: `var foo = '8'
  bar = '\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\
\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output: `'\
8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output: `'\
\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\` + "\r" + `
\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output: `'\` + "\r" + `
9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output: `'\` + "\r" + `
\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\\\
\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output: `'\\\
8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output: `'\\\
\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\
bar\9baz'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output: `'foo\
bar9baz'`,
						},
						{
							MessageId: "escapeBackslash",
							Output: `'foo\
bar\\9baz'`,
						},
					},
				},
			},
		},
		{
			Code: `'\0\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\u00008'`,
						},
						{
							MessageId: "refactor",
							Output:    `'\0\u0038'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\0\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'foo\0\9bar'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 9,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'foo\u00009bar'`,
						},
						{
							MessageId: "refactor",
							Output:    `'foo\0\u0039bar'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'foo\0\\9bar'`,
						},
					},
				},
			},
		},
		{
			Code: `'\1\0\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\1\u00008'`,
						},
						{
							MessageId: "refactor",
							Output:    `'\1\0\u0038'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\1\0\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\0\8\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 6,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\u00008\9'`,
						},
						{
							MessageId: "refactor",
							Output:    `'\0\u0038\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\0\\8\9'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\0\89'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\0\8\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'\8\0\9'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'8\0\9'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\8\0\9'`,
						},
					},
				},
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\8\u00009'`,
						},
						{
							MessageId: "refactor",
							Output:    `'\8\0\u0039'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\8\0\\9'`,
						},
					},
				},
			},
		},
		{
			Code: `'0\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'08'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'0\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\\0\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\\08'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\\0\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\0 \8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\0 8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\0 \\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\01\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 7,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\018'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\01\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\0\1\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output:    `'\0\18'`,
						},
						{
							MessageId: "escapeBackslash",
							Output:    `'\0\1\\8'`,
						},
					},
				},
			},
		},
		{
			Code: `'\0\
\8'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "decimalEscape",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "refactor",
							Output: `'\0\
8'`,
						},
						{
							MessageId: "escapeBackslash",
							Output: `'\0\
\\8'`,
						},
					},
				},
			},
		},
	})
}
