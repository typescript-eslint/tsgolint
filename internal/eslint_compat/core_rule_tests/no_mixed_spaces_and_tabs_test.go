// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoMixedSpacesAndTabsRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-mixed-spaces-and-tabs", []ValidTestCase{
		{Code: `foo`},
		{Code: `foo 	`},
		{Code: `foo	 `},
		{Code: `	var x = 5;`},
		{Code: `		var x = 5;`},
		{Code: ` var x = 5;`},
		{Code: `    var x = 5;`},
		{Code: ` foo	`},
		{Code: `	foo `},
		{Code: `	/*
	 * Hello
	 */`},
		{Code: `// foo
	/**
	 * Hello
	 */`},
		{Code: `/*

 	 
*/`},
		{Code: `/*	 */ //`},
		{Code: `/*
 	*/ //`},
		{Code: `/*
	 *//*
 	*/`},
		{Code: `// 	`},
		{Code: `/*
*/	 `},
		{Code: `/* 	
	 
 	
	 */ 	`},
		{
			Code: `	var x = 5,
	    y = 2;`,
			Options: "[true]",
		},
		{
			Code: `/*
	 */` + "`" + `
	   ` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `/*
	 */var a = ` + "`" + `
	   ` + "`" + `, b = ` + "`" + `
	   ` + "`" + `/*	 
	 
*/;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "/*\t `template inside comment` */",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "var foo = `\t /* comment inside template\t */`;",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `` + "`" + `
	   ` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `` + "`" + `
	   
` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`\t   `;",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const foo = ` + "`" + `${console}
	 foo` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`\t   `;`   \t`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`foo${ 5 }\t    `;",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `' 	\
	 multiline string';`},
		{Code: `'	 \
 	multiline string';`},
		{
			Code: `	var x = 5,
	    y = 2;`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `			   foo`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `foo`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `foo 	`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `foo	 `,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `	foo 	`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `	var x = 5;`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `		var x = 5;`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    ` var x = 5;`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `    var x = 5;`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    ` foo	`,
			Options: "[\"smart-tabs\"]",
		},
		{
			Code:    `	foo `,
			Options: "[\"smart-tabs\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `function add(x, y) {
	 return x + y;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `	 ;
/*
	 * Hello
	 */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: ` 	/* comment */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `	 // comment`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `	 var a /* comment */ = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: ` 	var b = 1; // comment`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `/**/
 	/*
 	*/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `	 var x = 5, y = 2, z = 5;

	 	var j =	 x + y;
z *= j;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 3,
				},
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `	var x = 5,
  	  y = 2;`,
			Options: "[true]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `	var x = 5,
  	  y = 2;`,
			Options: "[\"smart-tabs\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `` + "`" + `foo${
 	  5 }bar` + "`" + `;`,
			Options:         "[\"smart-tabs\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `` + "`" + `foo${
	  5 }bar` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `  	'';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `''
	 `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `   	foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `			 foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code:    `	 	foo`,
			Options: "[\"smart-tabs\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 4,
				},
			},
		},
		{
			Code:    `			   	foo`,
			Options: "[\"smart-tabs\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "mixedSpacesAndTabs",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
	})
}
