// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestKeywordSpacingRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "keyword-spacing", []ValidTestCase{
		{
			Code:            `import { a } from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { a as b } from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { "a" as b } from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import{ a }from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import{ a as b }from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import{ "a"as b }from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import{ "a" as b }from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { a as b } from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { "a"as b } from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export { a };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a" } from "foo";`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export { a as b };`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export { a as "b" };`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a" as b } from "foo";`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a" as "b" } from "foo";`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export{ a };`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{ "a" }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export{ a as b };`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export{ a as"b" };`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{ "a"as b }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{ "a"as"b" }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export{ a as "b" };`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{ "a" as b }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{ "a" as "b" }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export { a as b };`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `let a; export { a as"b" };`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a"as b } from "foo";`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { "a"as"b" } from "foo";`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import* as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import *as a from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as "a" from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export*as"a"from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export* as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export* as "a"from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export *as a from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export *as"a" from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} async function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{}async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{} async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{}async function foo() {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{} async () => {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{}async () => {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{} async () => {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{}async () => {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({async [b]() {}})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({async[b]() {}})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({async [b]() {}})`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({async[b]() {}})`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `class A {a(){} async [b]() {}}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `class A {a(){}async[b]() {}}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `class A {a(){} async [b]() {}}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `class A {a(){}async[b]() {}}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `[async function foo() {}]`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `[ async function foo() {}]`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `() =>async function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `() => async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{async function foo() {} }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `{ async function foo() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(0,async function foo() {})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(0, async function foo() {})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `a[async function foo() {}]`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({[async function foo() {}]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `a[ async function foo() {}]`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({[ async function foo() {}]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({ async* foo() {} })`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `({ async *foo() {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `({a:async function foo() {} })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `({a: async function foo() {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `;async function foo() {};`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `; async function foo() {} ;`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async() => {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `(async function foo() {})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `( async function foo() {})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `a =async function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `a = async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `!async function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `! async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            "`${async function foo() {}}`",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            "`${ async function foo() {}}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `<Foo onClick={async function foo() {}} />`,
			LanguageOptions: "{\"ecmaVersion\":8,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ async function foo() {}} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `async function wrap() { {} await +1 }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { {}await +1 }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { {} await +1 }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"await\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { {}await +1 }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"await\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { [await a] }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { [ await a] }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () =>await a`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async () => await a`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { {await a } }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { { await a } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { (0,await a) }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { (0, await a) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a[await a] }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ({[await a]: 0}) }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a[ await a] }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ({[ await a]: 0}) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ({a:await a }) }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ({a: await a }) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ;await a; }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ; await a ; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { (await a) }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ( await a) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a =await a }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a = await a }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a+await a }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a + await a }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a<await a }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a < await a }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a>await a }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { a > await a }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { !await'a' }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { ! await 'a' }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            "async function wrap() { `${await a}` }",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            "async function wrap() { `${ await a}` }",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function wrap() { <Foo onClick={await a} /> }`,
			LanguageOptions: "{\"ecmaVersion\":8,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `async function wrap() { <Foo onClick={ await a} /> }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{Code: `A: for (;;) { {} break A; }`},
		{
			Code:    `A: for(;;) { {}break A; }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `A: for(;;) { {} break A; }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"break\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `A: for (;;) { {}break A; }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"break\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `for (;;) {break}`},
		{
			Code:    `for(;;) { break }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `for (;;) { ;break; }`},
		{
			Code:    `for(;;) { ; break ; }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `switch (a) { case 0: {} case +1: }`},
		{Code: `switch (a) { case 0: {} case (1): }`},
		{
			Code:    `switch(a) { case 0: {}case+1: }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a) { case 0: {}case(1): }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a) { case 0: {} case +1: }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"case\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `switch (a) { case 0: {}case+1: }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"case\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `switch (a) {case 0: }`},
		{
			Code:    `switch(a) { case 0: }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `switch (a) { case 0: ;case 1: }`},
		{
			Code:    `switch(a) { case 0: ; case 1: }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `try {} catch (e) {}`},
		{
			Code:    `try{}catch(e) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `try{} catch (e) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"catch\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `try {}catch(e) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"catch\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `try {}
catch (e) {}`},
		{
			Code: `try{}
catch(e) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `{} class Bar {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}class Bar {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(class{})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{} class Bar {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"class\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}class Bar {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"class\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[class {}]`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `[ class{}]`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `() =>class {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `() => class{}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{class Bar {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{ class Bar {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(0,class {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(0, class{})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a[class {}]`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[class {}]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a[ class{}]`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({[ class{}]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({a:class {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({a: class{} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `;class Bar {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `; class Bar {} ;`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `( class{})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a =class {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a = class{}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a+class {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a + class{}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a<class {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a < class{}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a>class {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `a > class{}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `!class {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `! class{}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${class {}}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ class{}}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={class {}} />`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ class{}} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code: `class C {
#x;
foo() {
for (this.#x of bar){}}}`,
			Options:         "[{\"before\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
#x;
foo() {
for (this.#x in bar){}}}`,
			Options:         "[{\"before\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `{} const [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{} const {a} = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}const[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}const{a} = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{} const [a] = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"const\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{} const {a} = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"const\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}const[a] = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"const\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}const{a} = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"const\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{const a = b}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{ const a = b}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `;const a = b;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `; const a = b ;`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `A: for (;;) { {} continue A; }`},
		{
			Code:    `A: for(;;) { {}continue A; }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `A: for(;;) { {} continue A; }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"continue\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `A: for (;;) { {}continue A; }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"continue\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `for (;;) {continue}`},
		{
			Code:    `for(;;) { continue }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `for (;;) { ;continue; }`},
		{
			Code:    `for(;;) { ; continue ; }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} debugger`},
		{
			Code:    `{}debugger`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} debugger`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"debugger\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}debugger`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"debugger\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `{debugger}`},
		{
			Code:    `{ debugger }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;debugger;`},
		{
			Code:    `; debugger ;`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `switch (a) { case 0: {} default: }`},
		{
			Code:    `switch(a) { case 0: {}default: }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a) { case 0: {} default: }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"default\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `switch (a) { case 0: {}default: }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"default\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `switch (a) {default:}`},
		{
			Code:    `switch(a) { default: }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `switch (a) { case 0: ;default: }`},
		{
			Code:    `switch(a) { case 0: ; default: }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} delete foo.a`},
		{
			Code:    `{}delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} delete foo.a`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"delete\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}delete foo.a`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"delete\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `[delete foo.a]`},
		{
			Code:    `[ delete foo.a]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `(() =>delete foo.a)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => delete foo.a)`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{delete foo.a }`},
		{
			Code:    `{ delete foo.a }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(0,delete foo.a)`},
		{
			Code:    `(0, delete foo.a)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a[delete foo.a]`},
		{
			Code:            `({[delete foo.a]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `a[ delete foo.a]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({[ delete foo.a]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `({a:delete foo.a })`},
		{
			Code:    `({a: delete foo.a })`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;delete foo.a`},
		{
			Code:    `; delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(delete foo.a)`},
		{
			Code:    `( delete foo.a)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a =delete foo.a`},
		{
			Code:    `a = delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a+delete foo.a`},
		{
			Code:    `a + delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a<delete foo.a`},
		{
			Code:    `a < delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a>delete foo.a`},
		{
			Code:    `a > delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `!delete(foo.a)`},
		{
			Code:    `! delete (foo.a)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            "`${delete foo.a}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ delete foo.a}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={delete foo.a} />`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ delete foo.a} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{Code: `{} do {} while (true)`},
		{
			Code:    `{}do{}while(true)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} do {}while(true)`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"do\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}do{} while (true)`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"do\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `{}
do
{} while (true)`},
		{
			Code: `{}
do
{}while(true)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{do {} while (true)}`},
		{
			Code:    `{ do{}while(true) }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;do; while (true)`},
		{
			Code:    `; do ;while(true)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `if (a) {} else {}`},
		{Code: `if (a) {} else if (b) {}`},
		{Code: `if (a) {} else (0)`},
		{Code: `if (a) {} else []`},
		{Code: `if (a) {} else +1`},
		{Code: `if (a) {} else "a"`},
		{
			Code:    `if(a){}else{}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a){}else if(b) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a) {}else(0)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a) {}else[]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a) {}else+1`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a) {}else"a"`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a) {} else {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"else\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `if (a) {}else{}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"else\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `if (a) {}
else
{}`},
		{
			Code: `if(a) {}
else
{}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a){ }else{ }`,
			Options: "[{\"before\":false,\"after\":true,\"overrides\":{\"else\":{\"after\":false},\"if\":{\"after\":false}}}]",
		},
		{
			Code:    `if(a){ }else{ }`,
			Options: "[{\"before\":true,\"after\":false,\"overrides\":{\"else\":{\"before\":false},\"if\":{\"before\":false}}}]",
		},
		{Code: `if (a);else;`},
		{
			Code:    `if(a); else ;`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `var a = 0; {} export {a}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} export default a`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} export * from "a"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var a = 0; {}export{a}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var a = 0; {} export {a}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"export\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var a = 0; {}export{a}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"export\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var a = 0;
;export {a}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var a = 0;
; export{a}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `class Bar extends [] {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Bar extends[] {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Bar extends [] {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"extends\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class Bar extends[] {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"extends\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `try {} finally {}`},
		{
			Code:    `try{}finally{}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `try{} finally {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"finally\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `try {}finally{}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"finally\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `try {}
finally
{}`},
		{
			Code: `try{}
finally
{}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} for (;;) {}`},
		{Code: `{} for (var foo in obj) {}`},
		{
			Code:            `{} for (var foo of list) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `{}for(;;) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{}for(var foo in obj) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `{}for(var foo of list) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `{} for (;;) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"for\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{} for (var foo in obj) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"for\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:            `{} for (var foo of list) {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"for\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `{}for(;;) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"for\":{\"before\":false,\"after\":false}}}]",
		},
		{
			Code:    `{}for(var foo in obj) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"for\":{\"before\":false,\"after\":false}}}]",
		},
		{
			Code:            `{}for(var foo of list) {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"for\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{for (;;) {} }`},
		{Code: `{for (var foo in obj) {} }`},
		{
			Code:            `{for (var foo of list) {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `{ for(;;) {} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{ for(var foo in obj) {} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `{ for(var foo of list) {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `;for (;;) {}`},
		{Code: `;for (var foo in obj) {}`},
		{
			Code:            `;for (var foo of list) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `; for(;;) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `; for(var foo in obj) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `; for(var foo of list) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import {foo} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {foo} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as "x" from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import{foo}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{foo}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export*from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export*as x from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export*as"x"from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import{foo} from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export{foo} from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export* from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export*as"x" from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {foo}from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {foo}from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export *from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as x from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export * as "x"from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{Code: `{} function foo() {}`},
		{
			Code:    `{}function foo() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} function foo() {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"function\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}function foo() {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"function\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `[function() {}]`},
		{
			Code:    `[ function() {}]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `(() =>function() {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => function() {})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{function foo() {} }`},
		{
			Code:    `{ function foo() {} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(0,function() {})`},
		{
			Code:    `(0, function() {})`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a[function() {}]`},
		{
			Code:            `({[function() {}]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `a[ function() {}]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({[ function(){}]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `({a:function() {} })`},
		{
			Code:    `({a: function() {} })`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;function foo() {};`},
		{
			Code:    `; function foo() {} ;`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(function() {})`},
		{
			Code:    `( function () {})`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a =function() {}`},
		{
			Code:    `a = function() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a+function() {}`},
		{
			Code:    `a + function() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a<function() {}`},
		{
			Code:    `a < function() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a>function() {}`},
		{
			Code:    `a > function() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `!function() {}`},
		{
			Code:    `! function() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            "`${function() {}}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ function() {}}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={function() {}} />`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ function() {}} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `({ get [b]() {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} get [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} static get [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ get[b]() {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}get[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}static get[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ get [b]() {} })`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"get\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} get [b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"get\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ get[b]() {} })`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"get\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}get[b]() {} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"get\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a; get #b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a;get#b() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `({ a,get [b]() {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a, get[b]() {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { ;get #b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { ; get#b() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `{} if (a) {}`},
		{Code: `if (a) {} else if (a) {}`},
		{
			Code:    `{}if(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `if(a) {}else if(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} if (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"if\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `if (a) {}else if (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"if\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}if(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"if\":{\"before\":false,\"after\":false}}}]",
		},
		{
			Code:    `if(a) {} else if(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"if\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `{if (a) {} }`},
		{
			Code:    `{ if(a) {} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;if (a) {}`},
		{
			Code:    `; if(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `{} import {a} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} import a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} import * as a from "a"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{}import{a}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{}import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} import {a}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"import\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{} import *as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"import\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{}import{a} from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"import\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `{}import* as a from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"import\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `;import {a} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `; import{a}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `for ([foo] in {foo: 0}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for([foo]in{foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for([foo] in {foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"in\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for ([foo]in{foo: 0}) {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"in\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for ([foo] in ({foo: 0})) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `if ("foo"in{foo: 0}) {}`},
		{
			Code:    `if("foo" in {foo: 0}) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `if ("foo"instanceof{foo: 0}) {}`},
		{
			Code:    `if("foo" instanceof {foo: 0}) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `{} let [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}let[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{} let [a] = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"let\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}let[a] = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"let\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{let [a] = b }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{ let[a] = b }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `;let [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `; let[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{} new foo()`},
		{
			Code:    `{}new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} new foo()`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"new\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}new foo()`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"new\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `[new foo()]`},
		{
			Code:    `[ new foo()]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `(() =>new foo())`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => new foo())`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{new foo() }`},
		{
			Code:    `{ new foo() }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(0,new foo())`},
		{
			Code:    `(0, new foo())`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a[new foo()]`},
		{
			Code:            `({[new foo()]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `a[ new foo()]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({[ new foo()]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `({a:new foo() })`},
		{
			Code:    `({a: new foo() })`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;new foo()`},
		{
			Code:    `; new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(new foo())`},
		{
			Code:    `( new foo())`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a =new foo()`},
		{
			Code:    `a = new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a+new foo()`},
		{
			Code:    `a + new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a<new foo()`},
		{
			Code:    `a < new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a>new foo()`},
		{
			Code:    `a > new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `!new(foo)()`},
		{
			Code:    `! new (foo)()`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            "`${new foo()}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ new foo()}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={new foo()} />`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ new foo()} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `for ([foo] of {foo: 0}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for([foo]of{foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for([foo] of {foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"of\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for ([foo]of{foo: 0}) {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"of\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `for ([foo] of ({foo: 0})) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function foo() { {} return +a }`},
		{
			Code:            `function foo() { return <p/>; }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:    `function foo() { {}return+a }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `function foo() { return<p/>; }`,
			Options:         "[{\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:    `function foo() { {} return +a }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"return\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `function foo() { {}return+a }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"return\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `function foo() {
return
}`},
		{
			Code: `function foo() {
return
}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `function foo() {return}`},
		{
			Code:    `function foo() { return }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `function foo() { ;return; }`},
		{
			Code:    `function foo() { ; return ; }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({ set [b](value) {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} set [b](value) {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} static set [b](value) {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ set[b](value) {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}set[b](value) {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ set [b](value) {} })`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"set\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} set [b](value) {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"set\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ set[b](value) {} })`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"set\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}set[b](value) {} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"set\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a; set #b(value) {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a;set#b(value) {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `({ a,set [b](value) {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a, set[b](value) {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { ;set #b(value) {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { ; set#b(value) {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a() {} static [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}static[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {} static [b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"static\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a() {}static[b]() {} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"static\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { a; static [b]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a;static[b]; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a; static #b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a;static#b; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a() {} static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a() {}static{} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a() {} static {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"static\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { a() {}static{} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"static\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class A { a() {}
static
{} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { static* [a]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { static *[a]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { ;static a() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { ; static a() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A { ;static a; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { ; static a ; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { ;static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A { ; static{} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class A extends B { a() { {} super[b](); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { a() { {}super[b](); } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { a() { {} super[b](); } }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"super\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { a() { {}super[b](); } }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"super\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { [super()]; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { [ super() ]; } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { () =>super(); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { () => super(); } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() {super()} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { super() } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { (0,super()) } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { (0, super()) } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ({[super()]: 0}) } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ({[ super() ]: 0}) } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ({a:super() }) } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ({a: super() }) } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { super(); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { super (); } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ;super(); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ; super() ; } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { (super()) } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ( super() ) } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b =super() } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b = super() } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b+super() } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b + super() } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b<super() } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b < super() } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b>super() } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { b > super() } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { !super() } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { ! super() } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "class A extends B { constructor() { `${super()}` } }",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "class A extends B { constructor() { `${ super() }` } }",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A extends B { constructor() { <Foo onClick={super()} /> } }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `class A extends B { constructor() { <Foo onClick={ super() } /> } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{Code: `{} switch (a) {}`},
		{
			Code:    `{}switch(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} switch (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"switch\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}switch(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"switch\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `{switch (a) {} }`},
		{
			Code:    `{ switch(a) {} }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;switch (a) {}`},
		{
			Code:    `; switch(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} this[a]`},
		{
			Code:    `{}this[a]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} this[a]`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"this\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}this[a]`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"this\":{\"before\":false,\"after\":false}}}]",
		},
		{
			Code:            `<Thing> this.blah`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `<Thing>this.blah`,
			Options:         "[{\"before\":true,\"after\":false,\"overrides\":{\"this\":{\"before\":false}}}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{Code: `[this]`},
		{
			Code:    `[ this ]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `(() =>this)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => this)`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{this}`},
		{
			Code:    `{ this }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(0,this)`},
		{
			Code:    `(0, this)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a[this]`},
		{
			Code:            `({[this]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `a[ this ]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({[ this ]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `({a:this })`},
		{
			Code:    `({a: this })`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;this`},
		{
			Code:    `; this`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(this)`},
		{
			Code:    `( this )`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a =this`},
		{
			Code:    `a = this`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a+this`},
		{
			Code:    `a + this`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a<this`},
		{
			Code:    `a < this`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a>this`},
		{
			Code:    `a > this`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `this+a`},
		{
			Code:    `this + a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `this<a`},
		{
			Code:    `this < a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `this>a`},
		{
			Code:    `this > a`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `!this`},
		{
			Code:    `! this`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            "`${this}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ this }`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={this} />`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ this } />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{Code: `function foo() { {} throw +a }`},
		{
			Code:    `function foo() { {}throw+a }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `function foo() { {} throw +a }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"throw\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `function foo() { {}throw+a }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"throw\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `function foo() {
throw a
}`},
		{
			Code: `function foo() {
throw a
}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `function foo() {throw a }`},
		{
			Code:    `function foo() { throw a }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `function foo() { ;throw a }`},
		{
			Code:    `function foo() { ; throw a }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} try {} finally {}`},
		{
			Code:    `{}try{}finally{}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} try {}finally{}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"try\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}try{} finally {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"try\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `{try {} finally {}}`},
		{
			Code:    `{ try{}finally{}}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;try {} finally {}`},
		{
			Code:    `; try{}finally{}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} typeof foo`},
		{
			Code:    `{}typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} typeof foo`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"typeof\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}typeof foo`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"typeof\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `[typeof foo]`},
		{
			Code:    `[ typeof foo]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `(() =>typeof foo)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => typeof foo)`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{typeof foo }`},
		{
			Code:    `{ typeof foo }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(0,typeof foo)`},
		{
			Code:    `(0, typeof foo)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a[typeof foo]`},
		{
			Code:            `({[typeof foo]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `a[ typeof foo]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({[ typeof foo]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `({a:typeof foo })`},
		{
			Code:    `({a: typeof foo })`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;typeof foo`},
		{
			Code:    `; typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(typeof foo)`},
		{
			Code:    `( typeof foo)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a =typeof foo`},
		{
			Code:    `a = typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a+typeof foo`},
		{
			Code:    `a + typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a<typeof foo`},
		{
			Code:    `a < typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a>typeof foo`},
		{
			Code:    `a > typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `!typeof+foo`},
		{
			Code:    `! typeof +foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            "`${typeof foo}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ typeof foo}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={typeof foo} />`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ typeof foo} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `{} var [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}var[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{} var [a] = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"var\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `{}var[a] = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"var\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `for (var foo in [1, 2, 3]) {}`},
		{Code: `{var a = b }`},
		{
			Code:    `{ var a = b }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;var a = b`},
		{
			Code:    `; var a = b`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} void foo`},
		{
			Code:    `{}void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} void foo`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"void\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}void foo`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"void\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `[void foo]`},
		{
			Code:    `[ void foo]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `(() =>void foo)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `(() => void foo)`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `{void foo }`},
		{
			Code:    `{ void foo }`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(0,void foo)`},
		{
			Code:    `(0, void foo)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a[void foo]`},
		{
			Code:            `({[void foo]: 0})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `a[ void foo]`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `({[ void foo]: 0})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `({a:void foo })`},
		{
			Code:    `({a: void foo })`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;void foo`},
		{
			Code:    `; void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `(void foo)`},
		{
			Code:    `( void foo)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a =void foo`},
		{
			Code:    `a = void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a+void foo`},
		{
			Code:    `a + void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a<void foo`},
		{
			Code:    `a < void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `a>void foo`},
		{
			Code:    `a > void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `!void+foo`},
		{
			Code:    `! void +foo`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            "`${void foo}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ void foo}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `<Foo onClick={void foo} />`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `<Foo onClick={ void foo} />`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{Code: `{} while (a) {}`},
		{Code: `do {} while (a)`},
		{
			Code:    `{}while(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `do{}while(a)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} while (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"while\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `do{} while (a)`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"while\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}while(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"while\":{\"before\":false,\"after\":false}}}]",
		},
		{
			Code:    `do {}while(a)`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"while\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `do {}
while (a)`},
		{
			Code: `do{}
while(a)`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{while (a) {}}`},
		{
			Code:    `{ while(a) {}}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;while (a);`},
		{Code: `do;while (a);`},
		{
			Code:    `; while(a) ;`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `do ; while(a) ;`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `{} with (obj) {}`},
		{
			Code:    `{}with(obj) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `{} with (obj) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"with\":{\"before\":true,\"after\":true}}}]",
		},
		{
			Code:    `{}with(obj) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"with\":{\"before\":false,\"after\":false}}}]",
		},
		{Code: `{with (obj) {}}`},
		{
			Code:    `{ with(obj) {}}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{Code: `;with (obj) {}`},
		{
			Code:    `; with(obj) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:            `function* foo() { {} yield foo }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { {}yield foo }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { {} yield foo }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"yield\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { {}yield foo }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"yield\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { [yield] }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { [ yield ] }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() {yield}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { yield }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { (0,yield foo) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { (0, yield foo) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { a[yield] }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ({[yield]: 0}) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { a[ yield ] }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ({[ yield ]: 0}) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ({a:yield foo }) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ({a: yield foo }) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ;yield; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ; yield ; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { (yield) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { ( yield ) }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { a =yield foo }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { a = yield foo }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { yield+foo }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { yield +foo }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${yield}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`${ yield}`",
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { <Foo onClick={yield} /> }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `function* foo() { <Foo onClick={ yield } /> }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code:            `@dec class Foo {}`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `class Foo { @dec get bar() {} @dec set baz() {} @dec async baw() {} }`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `class Foo { @dec static qux() {} @dec static get bar() {} @dec static set baz() {} @dec static async baw() {} }`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `symbol => 4;`,
			LanguageOptions: "{\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code:            `import { "a"as b } from "foo"`,
			Output:          `import { "a" as b } from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `import{ "a" as b }from"foo"`,
			Output:          `import{ "a"as b }from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `import{ "a"as b }from"foo"`,
			Output:          `import{ "a" as b }from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `import { "a" as b } from "foo"`,
			Output:          `import { "a"as b } from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `let a; export { a as"b" };`,
			Output:          `let a; export { a as "b" };`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export { "a"as b } from "foo";`,
			Output:          `export { "a" as b } from "foo";`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `export { "a"as"b" } from "foo";`,
			Output:          `export { "a" as "b" } from "foo";`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `let a; export{ a as "b" };`,
			Output:          `let a; export{ a as"b" };`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export{ "a" as b }from"foo";`,
			Output:          `export{ "a"as b }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `export{ "a" as "b" }from"foo";`,
			Output:          `export{ "a"as"b" }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `let a; export{ a as"b" };`,
			Output:          `let a; export{ a as "b" };`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export{ "a"as b }from"foo";`,
			Output:          `export{ "a" as b }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `export{ "a"as"b" }from"foo";`,
			Output:          `export{ "a" as "b" }from"foo";`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `let a; export { a as "b" };`,
			Output:          `let a; export { a as"b" };`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export { "a" as b } from "foo";`,
			Output:          `export { "a"as b } from "foo";`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `export { "a" as "b" } from "foo";`,
			Output:          `export { "a"as"b" } from "foo";`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `import *as a from "foo"`,
			Output:          `import * as a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `import* as a from"foo"`,
			Output:          `import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `import*   as a from"foo"`,
			Output:          `import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `import*as a from"foo"`,
			Output:          `import* as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `import * as a from "foo"`,
			Output:          `import *as a from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `export *as a from "foo"`,
			Output:          `export * as a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `export *as"a" from "foo"`,
			Output:          `export * as "a" from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export* as a from"foo"`,
			Output:          `export*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `export* as "a"from"foo"`,
			Output:          `export*as"a"from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export*as a from"foo"`,
			Output:          `export* as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `export*as"a"from"foo"`,
			Output:          `export* as "a"from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"as\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export * as a from "foo"`,
			Output:          `export *as a from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `export * as "a" from "foo"`,
			Output:          `export *as"a" from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"as\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}async function foo() {}`,
			Output:          `{} async function foo() {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `{} async function foo() {}`,
			Output:          `{}async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `{}async function foo() {}`,
			Output:          `{} async function foo() {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `{} async function foo() {}`,
			Output:          `{}async function foo() {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `{}async () => {}`,
			Output:          `{} async () => {}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `{} async () => {}`,
			Output:          `{}async () => {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `{}async () => {}`,
			Output:          `{} async () => {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `{} async () => {}`,
			Output:          `{}async () => {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `({async[b]() {}})`,
			Output:          `({async [b]() {}})`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `({async [b]() {}})`,
			Output:          `({async[b]() {}})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `({async[b]() {}})`,
			Output:          `({async [b]() {}})`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `({async [b]() {}})`,
			Output:          `({async[b]() {}})`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A {a(){}async[b]() {}}`,
			Output:          `class A {a(){} async [b]() {}}`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A {a(){} async [b]() {}}`,
			Output:          `class A {a(){}async[b]() {}}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A {a(){}async[b]() {}}`,
			Output:          `class A {a(){} async [b]() {}}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"async\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A {a(){} async [b]() {}}`,
			Output:          `class A {a(){}async[b]() {}}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"async\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `async function wrap() { {}await a }`,
			Output:          `async function wrap() { {} await a }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `async function wrap() { {} await a }`,
			Output:          `async function wrap() { {}await a }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `async function wrap() { {}await a }`,
			Output:          `async function wrap() { {} await a }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"await\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `async function wrap() { {} await a }`,
			Output:          `async function wrap() { {}await a }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"await\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `async function wrap() { for await(x of xs); }`,
			Output:          `async function wrap() { for await (x of xs); }`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `async function wrap() { for await (x of xs); }`,
			Output:          `async function wrap() { for await(x of xs); }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `async function wrap() { for await(x of xs); }`,
			Output:          `async function wrap() { for await (x of xs); }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"await\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `async function wrap() { for await (x of xs); }`,
			Output:          `async function wrap() { for await(x of xs); }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"await\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `A: for (;;) { {}break A; }`,
			Output: `A: for (;;) { {} break A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `A: for(;;) { {} break A; }`,
			Output:  `A: for(;;) { {}break A; }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `A: for(;;) { {}break A; }`,
			Output:  `A: for(;;) { {} break A; }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"break\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `A: for (;;) { {} break A; }`,
			Output:  `A: for (;;) { {}break A; }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"break\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `switch (a) { case 0: {}case+1: }`,
			Output: `switch (a) { case 0: {} case +1: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `switch (a) { case 0: {}case(1): }`,
			Output: `switch (a) { case 0: {} case (1): }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `switch(a) { case 0: {} case +1: }`,
			Output:  `switch(a) { case 0: {}case+1: }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `switch(a) { case 0: {} case (1): }`,
			Output:  `switch(a) { case 0: {}case(1): }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `switch(a) { case 0: {}case+1: }`,
			Output:  `switch(a) { case 0: {} case +1: }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"case\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `switch (a) { case 0: {} case +1: }`,
			Output:  `switch (a) { case 0: {}case+1: }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"case\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `try {}catch(e) {}`,
			Output: `try {} catch (e) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `try{} catch (e) {}`,
			Output:  `try{}catch(e) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `try{}catch(e) {}`,
			Output:  `try{} catch (e) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"catch\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `try {} catch (e) {}`,
			Output:  `try {}catch(e) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"catch\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}class Bar {}`,
			Output:          `{} class Bar {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `(class{})`,
			Output:          `(class {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} class Bar {}`,
			Output:          `{}class Bar {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `(class {})`,
			Output:          `(class{})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}class Bar {}`,
			Output:          `{} class Bar {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"class\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `{} class Bar {}`,
			Output:          `{}class Bar {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"class\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `{}const[a] = b`,
			Output:          `{} const [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}const{a} = b`,
			Output:          `{} const {a} = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} const [a] = b`,
			Output:          `{}const[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{} const {a} = b`,
			Output:          `{}const{a} = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}const[a] = b`,
			Output:          `{} const [a] = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"const\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}const{a} = b`,
			Output:          `{} const {a} = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"const\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} const [a] = b`,
			Output:          `{}const[a] = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"const\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{} const {a} = b`,
			Output:          `{}const{a} = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"const\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `A: for (;;) { {}continue A; }`,
			Output: `A: for (;;) { {} continue A; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `A: for(;;) { {} continue A; }`,
			Output:  `A: for(;;) { {}continue A; }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `A: for(;;) { {}continue A; }`,
			Output:  `A: for(;;) { {} continue A; }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"continue\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `A: for (;;) { {} continue A; }`,
			Output:  `A: for (;;) { {}continue A; }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"continue\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `{}debugger`,
			Output: `{} debugger`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} debugger`,
			Output:  `{}debugger`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}debugger`,
			Output:  `{} debugger`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"debugger\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} debugger`,
			Output:  `{}debugger`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"debugger\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `switch (a) { case 0: {}default: }`,
			Output: `switch (a) { case 0: {} default: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `switch(a) { case 0: {} default: }`,
			Output:  `switch(a) { case 0: {}default: }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `switch(a) { case 0: {}default: }`,
			Output:  `switch(a) { case 0: {} default: }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"default\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `switch (a) { case 0: {} default: }`,
			Output:  `switch (a) { case 0: {}default: }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"default\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `{}delete foo.a`,
			Output: `{} delete foo.a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} delete foo.a`,
			Output:  `{}delete foo.a`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}delete foo.a`,
			Output:  `{} delete foo.a`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"delete\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} delete foo.a`,
			Output:  `{}delete foo.a`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"delete\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `{}do{} while (true)`,
			Output: `{} do {} while (true)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} do {}while(true)`,
			Output:  `{}do{}while(true)`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}do{}while(true)`,
			Output:  `{} do {}while(true)`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"do\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} do {} while (true)`,
			Output:  `{}do{} while (true)`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"do\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {}else{}`,
			Output: `if (a) {} else {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {}else if (b) {}`,
			Output: `if (a) {} else if (b) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:   `if (a) {}else(0)`,
			Output: `if (a) {} else (0)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {}else[]`,
			Output: `if (a) {} else []`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {}else+1`,
			Output: `if (a) {} else +1`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {}else"a"`,
			Output: `if (a) {} else "a"`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `if(a){} else {}`,
			Output:  `if(a){}else{}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a){} else if(b) {}`,
			Output:  `if(a){}else if(b) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `if(a) {} else (0)`,
			Output:  `if(a) {}else(0)`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {} else []`,
			Output:  `if(a) {}else[]`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {} else +1`,
			Output:  `if(a) {}else+1`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {} else "a"`,
			Output:  `if(a) {}else"a"`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {}else{}`,
			Output:  `if(a) {} else {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"else\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `if (a) {} else {}`,
			Output:  `if (a) {}else{}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"else\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {}else {}`,
			Output: `if (a) {} else {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:   `if (a) {} else{}`,
			Output: `if (a) {} else {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {} else{}`,
			Output:  `if(a) {}else{}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `if(a) {}else {}`,
			Output:  `if(a) {}else{}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `var a = 0; {}export{a}`,
			Output:          `var a = 0; {} export {a}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `var a = 0; {}export default a`,
			Output:          `var a = 0; {} export default a`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `var a = 0; export default{a}`,
			Output:          `var a = 0; export default {a}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}export* from "a"`,
			Output:          `{} export * from "a"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `var a = 0; {} export {a}`,
			Output:          `var a = 0; {}export{a}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `var a = 0; {}export{a}`,
			Output:          `var a = 0; {} export {a}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"export\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `var a = 0; {} export {a}`,
			Output:          `var a = 0; {}export{a}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"export\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class Bar extends[] {}`,
			Output:          `class Bar extends [] {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `(class extends[] {})`,
			Output:          `(class extends [] {})`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class Bar extends [] {}`,
			Output:          `class Bar extends[] {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `(class extends [] {})`,
			Output:          `(class extends[] {})`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class Bar extends[] {}`,
			Output:          `class Bar extends [] {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"extends\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class Bar extends [] {}`,
			Output:          `class Bar extends[] {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"extends\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            "class Bar extends`}` {}",
			Output:          "class Bar extends `}` {}",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `try {}finally{}`,
			Output: `try {} finally {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `try{} finally {}`,
			Output:  `try{}finally{}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `try{}finally{}`,
			Output:  `try{} finally {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"finally\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `try {} finally {}`,
			Output:  `try {}finally{}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"finally\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}for(;;) {}`,
			Output: `{} for (;;) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `{}for(var foo in obj) {}`,
			Output: `{} for (var foo in obj) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}for(var foo of list) {}`,
			Output:          `{} for (var foo of list) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} for (;;) {}`,
			Output:  `{}for(;;) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{} for (var foo in obj) {}`,
			Output:  `{}for(var foo in obj) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{} for (var foo of list) {}`,
			Output:          `{}for(var foo of list) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}for(;;) {}`,
			Output:  `{} for (;;) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"for\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{}for(var foo in obj) {}`,
			Output:  `{} for (var foo in obj) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"for\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}for(var foo of list) {}`,
			Output:          `{} for (var foo of list) {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"for\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} for (;;) {}`,
			Output:  `{}for(;;) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"for\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{} for (var foo in obj) {}`,
			Output:  `{}for(var foo in obj) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"for\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{} for (var foo of list) {}`,
			Output:          `{}for(var foo of list) {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"for\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `import {foo}from"foo"`,
			Output:          `import {foo} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export {foo}from"foo"`,
			Output:          `export {foo} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export *from"foo"`,
			Output:          `export * from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export * as "a"from"foo"`,
			Output:          `export * as "a" from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `import{foo} from "foo"`,
			Output:          `import{foo}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export{foo} from "foo"`,
			Output:          `export{foo}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export* from "foo"`,
			Output:          `export*from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export*as x from "foo"`,
			Output:          `export*as x from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export*as"x" from "foo"`,
			Output:          `export*as"x"from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `import{foo}from"foo"`,
			Output:          `import{foo} from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export{foo}from"foo"`,
			Output:          `export{foo} from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export*from"foo"`,
			Output:          `export* from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `export*as"x"from"foo"`,
			Output:          `export*as"x" from "foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"from\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `import {foo} from "foo"`,
			Output:          `import {foo}from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export {foo} from "foo"`,
			Output:          `export {foo}from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export * from "foo"`,
			Output:          `export *from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export * as x from "foo"`,
			Output:          `export * as x from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2020,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `export * as "x" from "foo"`,
			Output:          `export * as "x"from"foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"from\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}function foo() {}`,
			Output: `{} function foo() {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} function foo() {}`,
			Output:  `{}function foo() {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}function foo() {}`,
			Output:  `{} function foo() {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"function\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} function foo() {}`,
			Output:  `{}function foo() {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"function\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `({ get[b]() {} })`,
			Output:          `({ get [b]() {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}get[b]() {} }`,
			Output:          `class A { a() {} get [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static get[b]() {} }`,
			Output:          `class A { a() {} static get [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `({ get [b]() {} })`,
			Output:          `({ get[b]() {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} get [b]() {} }`,
			Output:          `class A { a() {}get[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}static get [b]() {} }`,
			Output:          `class A { a() {}static get[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `({ get[b]() {} })`,
			Output:          `({ get [b]() {} })`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"get\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}get[b]() {} }`,
			Output:          `class A { a() {} get [b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"get\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `({ get [b]() {} })`,
			Output:          `({ get[b]() {} })`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"get\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} get [b]() {} }`,
			Output:          `class A { a() {}get[b]() {} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"get\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a;get#b() {} }`,
			Output:          `class A { a;get #b() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a; get #b() {} }`,
			Output:          `class A { a; get#b() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}if(a) {}`,
			Output: `{} if (a) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `if (a) {} else if(b) {}`,
			Output: `if (a) {} else if (b) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} if (a) {}`,
			Output:  `{}if(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {}else if (b) {}`,
			Output:  `if(a) {}else if(b) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}if(a) {}`,
			Output:  `{} if (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"if\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `if (a) {}else if(b) {}`,
			Output:  `if (a) {}else if (b) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"if\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} if (a) {}`,
			Output:  `{}if(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"if\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `if(a) {} else if (b) {}`,
			Output:  `if(a) {} else if(b) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"if\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `import* as a from "foo"`,
			Output:          `import * as a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code:            `import *as a from"foo"`,
			Output:          `import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code:            `import   *as a from"foo"`,
			Output:          `import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:            `{}import{a} from "foo"`,
			Output:          `{} import {a} from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}import a from "foo"`,
			Output:          `{} import a from "foo"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `{}import* as a from "a"`,
			Output:          `{} import * as a from "a"`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} import {a}from"foo"`,
			Output:          `{}import{a}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{} import *as a from"foo"`,
			Output:          `{}import*as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}import{a}from"foo"`,
			Output:          `{} import {a}from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"import\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{}import*as a from"foo"`,
			Output:          `{} import *as a from"foo"`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"import\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} import {a} from "foo"`,
			Output:          `{}import{a} from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"import\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{} import * as a from "foo"`,
			Output:          `{}import* as a from "foo"`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"import\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `for ([foo]in{foo: 0}) {}`,
			Output:          `for ([foo] in {foo: 0}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `for([foo] in {foo: 0}) {}`,
			Output:          `for([foo]in{foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `for([foo]in{foo: 0}) {}`,
			Output:          `for([foo] in {foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"in\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `for ([foo] in {foo: 0}) {}`,
			Output:          `for ([foo]in{foo: 0}) {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"in\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}let[a] = b`,
			Output:          `{} let [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} let [a] = b`,
			Output:          `{}let[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}let[a] = b`,
			Output:          `{} let [a] = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"let\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} let [a] = b`,
			Output:          `{}let[a] = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"let\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}new foo()`,
			Output: `{} new foo()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} new foo()`,
			Output:  `{}new foo()`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}new foo()`,
			Output:  `{} new foo()`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"new\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} new foo()`,
			Output:  `{}new foo()`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"new\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `for ([foo]of{foo: 0}) {}`,
			Output:          `for ([foo] of {foo: 0}) {}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `for([foo] of {foo: 0}) {}`,
			Output:          `for([foo]of{foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `for([foo]of{foo: 0}) {}`,
			Output:          `for([foo] of {foo: 0}) {}`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"of\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `for ([foo] of {foo: 0}) {}`,
			Output:          `for ([foo]of{foo: 0}) {}`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"of\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `function foo() { {}return+a }`,
			Output: `function foo() { {} return +a }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `function foo() { return<p/>; }`,
			Output:          `function foo() { return <p/>; }`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `function foo() { {} return +a }`,
			Output:  `function foo() { {}return+a }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `function foo() { return <p/>; }`,
			Output:          `function foo() { return<p/>; }`,
			Options:         "[{\"after\":false}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function foo() { {}return+a }`,
			Output:  `function foo() { {} return +a }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"return\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `function foo() { {} return +a }`,
			Output:  `function foo() { {}return+a }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"return\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `({ set[b](value) {} })`,
			Output:          `({ set [b](value) {} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}set[b](value) {} }`,
			Output:          `class A { a() {} set [b](value) {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static set[b](value) {} }`,
			Output:          `class A { a() {} static set [b](value) {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `({ set [b](value) {} })`,
			Output:          `({ set[b](value) {} })`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} set [b](value) {} }`,
			Output:          `class A { a() {}set[b](value) {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `({ set[b](value) {} })`,
			Output:          `({ set [b](value) {} })`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"set\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}set[b](value) {} }`,
			Output:          `class A { a() {} set [b](value) {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"set\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `({ set [b](value) {} })`,
			Output:          `({ set[b](value) {} })`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"set\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} set [b](value) {} }`,
			Output:          `class A { a() {}set[b](value) {} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"set\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a;set#b(x) {} }`,
			Output:          `class A { a;set #b(x) {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a; set #b(x) {} }`,
			Output:          `class A { a; set#b(x) {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}static[b]() {} }`,
			Output:          `class A { a() {} static [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}static get [b]() {} }`,
			Output:          `class A { a() {} static get [b]() {} }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `class A { a() {} static [b]() {} }`,
			Output:          `class A { a() {}static[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static get[b]() {} }`,
			Output:          `class A { a() {}static get[b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `class A { a() {}static[b]() {} }`,
			Output:          `class A { a() {} static [b]() {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"static\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static [b]() {} }`,
			Output:          `class A { a() {}static[b]() {} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"static\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a;static[b]; }`,
			Output:          `class A { a;static [b]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a; static [b]; }`,
			Output:          `class A { a; static[b]; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a;static#b; }`,
			Output:          `class A { a;static #b; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a; static #b; }`,
			Output:          `class A { a; static#b; }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}static{} }`,
			Output:          `class A { a() {} static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {}static{} }`,
			Output:          `class A { a() {} static {} }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"static\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A {  a() {}static {} }`,
			Output:          `class A {  a() {} static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `class A {  a() {} static{} }`,
			Output:          `class A {  a() {} static {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static {} }`,
			Output:          `class A { a() {}static{} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static {} }`,
			Output:          `class A { a() {}static{} }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"static\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() {} static{} }`,
			Output:          `class A { a() {}static{} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `class A { a() {}static {} }`,
			Output:          `class A { a() {}static{} }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `class A { a() { {}super[b]; } }`,
			Output:          `class A { a() { {} super[b]; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `class A { a() { {} super[b]; } }`,
			Output:          `class A { a() { {}super[b]; } }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `class A { a() { {}super[b]; } }`,
			Output:          `class A { a() { {} super[b]; } }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"super\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `class A { a() { {} super[b]; } }`,
			Output:          `class A { a() { {}super[b]; } }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"super\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `{}switch(a) {}`,
			Output: `{} switch (a) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} switch (a) {}`,
			Output:  `{}switch(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}switch(a) {}`,
			Output:  `{} switch (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"switch\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} switch (a) {}`,
			Output:  `{}switch(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"switch\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}this[a]`,
			Output: `{} this[a]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} this[a]`,
			Output:  `{}this[a]`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}this[a]`,
			Output:  `{} this[a]`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"this\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} this[a]`,
			Output:  `{}this[a]`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"this\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `<Thing> this.blah`,
			Output:          `<Thing>this.blah`,
			Options:         "[{\"before\":true,\"after\":false,\"overrides\":{\"this\":{\"before\":false}}}]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `<Thing>this.blah`,
			Output:          `<Thing> this.blah`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:   `function foo() { {}throw+a }`,
			Output: `function foo() { {} throw +a }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `function foo() { {} throw +a }`,
			Output:  `function foo() { {}throw+a }`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `function foo() { {}throw+a }`,
			Output:  `function foo() { {} throw +a }`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"throw\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `function foo() { {} throw +a }`,
			Output:  `function foo() { {}throw+a }`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"throw\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}try{} finally {}`,
			Output: `{} try {} finally {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} try {}finally{}`,
			Output:  `{}try{}finally{}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}try{}finally{}`,
			Output:  `{} try {}finally{}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"try\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} try {} finally {}`,
			Output:  `{}try{} finally {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"try\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}typeof foo`,
			Output: `{} typeof foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} typeof foo`,
			Output:  `{}typeof foo`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}typeof foo`,
			Output:  `{} typeof foo`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"typeof\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} typeof foo`,
			Output:  `{}typeof foo`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"typeof\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `{}var[a] = b`,
			Output:          `{} var [a] = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} var [a] = b`,
			Output:          `{}var[a] = b`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `{}var[a] = b`,
			Output:          `{} var [a] = b`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"var\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:            `{} var [a] = b`,
			Output:          `{}var[a] = b`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"var\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}void foo`,
			Output: `{} void foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} void foo`,
			Output:  `{}void foo`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `{}void foo`,
			Output:  `{} void foo`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"void\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:    `{} void foo`,
			Output:  `{}void foo`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"void\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:   `{}while(a) {}`,
			Output: `{} while (a) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `do {}while(a)`,
			Output: `do {} while (a)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} while (a) {}`,
			Output:  `{}while(a) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `do{} while (a)`,
			Output:  `do{}while(a)`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}while(a) {}`,
			Output:  `{} while (a) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"while\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `do{}while(a)`,
			Output:  `do{} while (a)`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"while\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} while (a) {}`,
			Output:  `{}while(a) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"while\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `do {} while (a)`,
			Output:  `do {}while(a)`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"while\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:   `{}with(obj) {}`,
			Output: `{} with (obj) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} with (obj) {}`,
			Output:  `{}with(obj) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `{}with(obj) {}`,
			Output:  `{} with (obj) {}`,
			Options: "[{\"before\":false,\"after\":false,\"overrides\":{\"with\":{\"before\":true,\"after\":true}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `{} with (obj) {}`,
			Output:  `{}with(obj) {}`,
			Options: "[{\"before\":true,\"after\":true,\"overrides\":{\"with\":{\"before\":false,\"after\":false}}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `function* foo() { {}yield foo }`,
			Output:          `function* foo() { {} yield foo }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `function* foo() { {} yield foo }`,
			Output:          `function* foo() { {}yield foo }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `function* foo() { {}yield foo }`,
			Output:          `function* foo() { {} yield foo }`,
			Options:         "[{\"before\":false,\"after\":false,\"overrides\":{\"yield\":{\"before\":true,\"after\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code:            `function* foo() { {} yield foo }`,
			Output:          `function* foo() { {}yield foo }`,
			Options:         "[{\"before\":true,\"after\":true,\"overrides\":{\"yield\":{\"before\":false,\"after\":false}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:            `class Foo { @desc({set a(value) {}, get a() {}, async c() {}}) async[foo]() {} }`,
			Output:          `class Foo { @desc({set a(value) {}, get a() {}, async c() {}}) async [foo]() {} }`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
	})
}
