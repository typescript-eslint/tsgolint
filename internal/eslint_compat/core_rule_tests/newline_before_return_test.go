// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNewlineBeforeReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "newline-before-return", []ValidTestCase{
		{Code: `function a() {
return;
}`},
		{Code: `function a() {

return;
}`},
		{Code: `function a() {
var b;

return;
}`},
		{Code: `function a() {
if (b) return;
}`},
		{Code: `function a() {
if (b) { return; }
}`},
		{Code: `function a() {
if (b) {
return;
}
}`},
		{Code: `function a() {
if (b) {

return;
}
}`},
		{Code: `function a() {
if (b) {
return;
}

return c;
}`},
		{Code: `function a() {
if (b) {

return;
}

return c;
}`},
		{Code: `function a() {
if (!b) {
return;
} else {
return b;
}
}`},
		{Code: `function a() {
if (!b) {
return;
} else {

return b;
}
}`},
		{Code: `function a() {
if (b) {
return b;
} else if (c) {
return c;
}
}`},
		{Code: `function a() {
if (b) {
return b;
} else if (c) {
return c;
} else {
return d;
}
}`},
		{Code: `function a() {
if (b) {
return b;
} else if (c) {
return c;
} else {
return d;
}

return a;
}`},
		{Code: `function a() {
if (b) return b;
else if (c) return c;
else return d;
}`},
		{Code: `function a() {
if (b) return b;
else if (c) return c;
else {
return d;
}
}`},
		{Code: `function a() {
if (b) return b;
else if (c) return c;
else {
e();

return d;
}
}`},
		{Code: `function a() {
while (b) return;
}`},
		{Code: `function a() {
 while (b) 
return;
}`},
		{Code: `function a() {
 while (b) { return; }
}`},
		{Code: `function a() {
 while (b) {
return;
}
}`},
		{Code: `function a() {
 while (b) {
c();

return;
}
}`},
		{Code: `function a() {
var c;
while (b) {
 c = d; //comment
}

return c;
}`},
		{Code: `function a() {
do return;
while (b);
}`},
		{Code: `function a() {
do 
return;
while (b);
}`},
		{Code: `function a() {
do { return; } while (b);
}`},
		{Code: `function a() {
do { return; }
while (b);
}`},
		{Code: `function a() {
do {
return;
} while (b);
}`},
		{Code: `function a() {
do {
c();

return;
} while (b);
}`},
		{Code: `function a() {
for (var b; b < c; b++) return;
}`},
		{Code: `function a() {
for (var b; b < c; b++)
return;
}`},
		{Code: `function a() {
for (var b; b < c; b++) {
return;
}
}`},
		{Code: `function a() {
for (var b; b < c; b++) {
c();

return;
}
}`},
		{Code: `function a() {
for (var b; b < c; b++) {
if (d) {
break; //comment
}

return;
}
}`},
		{Code: `function a() {
for (b in c)
return;
}`},
		{Code: `function a() {
for (b in c) { return; }
}`},
		{Code: `function a() {
for (b in c) {
return;
}
}`},
		{Code: `function a() {
for (b in c) {
d();

return;
}
}`},
		{
			Code: `function a() {
for (b of c) return;
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function a() {
for (b of c)
return;
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function a() {
for (b of c) {
return;
}
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function a() {
for (b of c) {
d();

return;
}
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function a() {
switch (b) {
case 'b': return;
}
}`},
		{Code: `function a() {
switch (b) {
case 'b':
return;
}
}`},
		{Code: `function a() {
switch (b) {
case 'b': {
return;
}
}
}`},
		{Code: `function a() {
//comment
return b;
}`},
		{Code: `function a() {
{
//comment
}

return
}`},
		{Code: `function a() {
var b = {
//comment
};

return;
}`},
		{Code: `function a() {/*multi-line
comment*/return b;
}`},
		{Code: `function a() {
/*comment
comment*/
//comment
return b;
}`},
		{Code: `function a() {
/*comment
comment*/
//comment
if (b) return;
}`},
		{Code: `function a() {
/*comment
comment*/
//comment
if (b) {
c();

return b;
} else {
//comment
return d;
}

/*multi-line
comment*/
return e;
}`},
		{Code: `function a() {
if (b) { //comment
return;
}

return c;
}`},
		{Code: `function a() {
if (b) { return; } //comment

return c;
}`},
		{Code: `function a() {
if (b) { return; } /*multi-line
comment*/

return c;
}`},
		{Code: `function a() {
if (b) { return; }

/*multi-line
comment*/ return c;
}`},
		{
			Code:            `return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `var a;

return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `// comment
return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `/* comment */
return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `/* multi-line
comment */
return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
	}, []InvalidTestCase{
		{
			Code: `function a() {
var b; return;
}`,
			Output: `function a() {
var b; 

return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b;
return;
}`,
			Output: `function a() {
var b;

return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else {
e();
return d;
}
}`,
			Output: `function a() {
if (b) return b;
else if (c) return c;
else {
e();

return d;
}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else {
e(); return d;
}
}`,
			Output: `function a() {
if (b) return b;
else if (c) return c;
else {
e(); 

return d;
}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
 while (b) {
c();
return;
}
}`,
			Output: `function a() {
 while (b) {
c();

return;
}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
do {
c();
return;
} while (b);
}`,
			Output: `function a() {
do {
c();

return;
} while (b);
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
c();
return;
}
}`,
			Output: `function a() {
for (var b; b < c; b++) {
c();

return;
}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
for (b in c) {
d();
return;
}
}`,
			Output: `function a() {
for (b in c) {
d();

return;
}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
for (b of c) {
d();
return;
}
}`,
			Output: `function a() {
for (b of c) {
d();

return;
}
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) {
c();
}
//comment
return b;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
/*comment
comment*/
if (b) {
c();
return b;
} else {
//comment

return d;
}
/*multi-line
comment*/
return e;
}`,
			Output: `function a() {
/*comment
comment*/
if (b) {
c();

return b;
} else {
//comment

return d;
}
/*multi-line
comment*/
return e;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; } //comment
return c;
}`,
			Output: `function a() {
if (b) { return; } //comment

return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; } /*multi-line
comment*/
return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; }
/*multi-line
comment*/ return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; } /*multi-line
comment*/ return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var a;
return;`,
			Output: `var a;

return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var a; return;`,
			Output: `var a; 

return;`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
{
//comment
}
return
}`,
			Output: `function a() {
{
//comment
}

return
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
{
//comment
} return
}`,
			Output: `function a() {
{
//comment
} 

return
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var c;
while (b) {
 c = d; //comment
}
return c;
}`,
			Output: `function a() {
var c;
while (b) {
 c = d; //comment
}

return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
if (d) {
break; //comment
}
return;
}
}`,
			Output: `function a() {
for (var b; b < c; b++) {
if (d) {
break; //comment
}

return;
}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b; /*multi-line
comment*/
return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b;
/*multi-line
comment*/ return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b; /*multi-line
comment*/ return c;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b;
//comment
return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b; //comment
return;
}`,
			Output: `function a() {
var b; //comment

return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b;
/* comment */ return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b;
//comment
/* comment */ return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b; /* comment */ return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b; /* comment */
return;
}`,
			Output: `function a() {
var b; /* comment */

return;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b;
return; //comment
}`,
			Output: `function a() {
var b;

return; //comment
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function a() {
var b; return; //comment
}`,
			Output: `function a() {
var b; 

return; //comment
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
	})
}
