// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestYodaRule(t *testing.T) {
	RunRuleTester(t, "{}", "yoda", []ValidTestCase{
		{
			Code:    `if (value === "red") {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `if (value === value) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `if (value != 5) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `if (5 & foo) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `if (5 === 4) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:            "if (value === `red`) {}",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (`red` === `red`) {}",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (`${foo}` === `red`) {}",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (` + "`" + `${""}` + "`" + ` === ` + "`" + `red` + "`" + `) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (` + "`" + `${"red"}` + "`" + ` === foo) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (b > `a` && b > `a`) {}",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (` + "`" + `b` + "`" + ` > ` + "`" + `a` + "`" + ` && "b" > "a") {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `if ("blue" === value) {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `if (value === value) {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `if (4 != value) {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `if (foo & 4) {}`,
			Options: "[\"always\"]",
		},
		{
			Code:    `if (5 === 4) {}`,
			Options: "[\"always\"]",
		},
		{
			Code:            "if (`red` === value) {}",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (`red` === `red`) {}",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (`red` === `${foo}`) {}",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (` + "`" + `red` + "`" + ` === ` + "`" + `${""}` + "`" + `) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (foo === ` + "`" + `${"red"}` + "`" + `) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (`a` > b && `a` > b) {}",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (` + "`" + `b` + "`" + ` > ` + "`" + `a` + "`" + ` && "b" > "a") {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `if ("a" < x && x < MAX ) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (1 < x && x < MAX ) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if ('a' < x && x < MAX ) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:            "if (x < `x` || `x` <= x) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `if (0 < x && x <= 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (0 <= x && x < 1) {}`,
			Options: "[\"always\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if ('blue' < x.y && x.y < 'green') {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:            "if (0 < x[``] && x[``] < 100) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (0 < x[''] && x[``] < 100) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `if (a < 4 || (b[c[0]].d['e'] < 0 || 1 <= b[c[0]].d['e'])) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (0 <= x['y'] && x['y'] <= 100) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (a < 0 && (0 < b && b < 1)) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if ((0 < a && a < 1) && b < 0) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (-1 < x && x < 0) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (0 <= this.prop && this.prop <= 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (0 <= index && index < list.length) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (ZERO <= index && index < 100) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (value <= MIN || 10 < value) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (value <= 0 || MAX < value) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (0 <= a.b && a["b"] <= 100) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:            "if (0 <= a.b && a[`b`] <= 100) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (-1n < x && x <= 1n) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `if (-1n <= x && x < 1n) {}`,
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            "if (x < `1` || `1` < x) {}",
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `if (1 <= a['/(?<zero>0)/'] && a[/(?<zero>0)/] <= 100) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            "if (x <= `bar` || `foo` < x) {}",
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if ('a' < x && x < MAX ) {}`,
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if ('a' < x && x < MAX ) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (MIN < x && x < 'a' ) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (MIN < x && x < 'a' ) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (`blue` < x.y && x.y < `green`) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (0 <= x[`y`] && x[`y`] <= 100) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `if (0 <= x[` + "`" + `y` + "`" + `] && x["y"] <= 100) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:    `if ('a' <= x && x < 'b') {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:            `if (x < -1n || 1n <= x) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `if (x < -1n || 1n <= x) {}`,
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if (1 < a && a <= 2) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (x < -1 || 1 < x) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (x <= 'bar' || 'foo' < x) {}`,
			Options: "[\"always\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if (x < 0 || 1 <= x) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:    `if('a' <= x && x < MAX) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
		},
		{
			Code:            `if (0 <= obj?.a && obj?.a < 1) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `if (0 < x && x <= 1) {}`,
			Options: "[\"never\",{\"onlyEquality\":true}]",
		},
		{
			Code:    `if (x !== 'foo' && 'foo' !== x) {}`,
			Options: "[\"never\",{\"onlyEquality\":true}]",
		},
		{
			Code:    `if (x < 2 && x !== -3) {}`,
			Options: "[\"always\",{\"onlyEquality\":true}]",
		},
		{
			Code:            "if (x !== `foo` && `foo` !== x) {}",
			Options:         "[\"never\",{\"onlyEquality\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            "if (x < `2` && x !== `-3`) {}",
			Options:         "[\"always\",{\"onlyEquality\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
	}, []InvalidTestCase{
		{
			Code:    `if (x <= 'foo' || 'bar' < x) {}`,
			Output:  `if ('foo' >= x || 'bar' < x) {}`,
			Options: "[\"always\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if ("red" == value) {}`,
			Output:  `if (value == "red") {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (true === value) {}`,
			Output:  `if (value === true) {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (5 != value) {}`,
			Output:  `if (value != 5) {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `if (5n != value) {}`,
			Output:          `if (value != 5n) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (null !== value) {}`,
			Output:  `if (value !== null) {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if ("red" <= value) {}`,
			Output:  `if (value >= "red") {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (`red` <= value) {}",
			Output:          "if (value >= `red`) {}",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (`red` <= `${foo}`) {}",
			Output:          "if (`${foo}` >= `red`) {}",
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `if (` + "`" + `red` + "`" + ` <= ` + "`" + `${"red"}` + "`" + `) {}`,
			Output:          `if (` + "`" + `${"red"}` + "`" + ` >= ` + "`" + `red` + "`" + `) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (true >= value) {}`,
			Output:  `if (value <= true) {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var foo = (5 < value) ? true : false`,
			Output:  `var foo = (value > 5) ? true : false`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `function foo() { return (null > value); }`,
			Output:  `function foo() { return (value < null); }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (-1 < str.indexOf(substr)) {}`,
			Output:  `if (str.indexOf(substr) > -1) {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (value == "red") {}`,
			Output:  `if ("red" == value) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (value == `red`) {}",
			Output:          "if (`red` == value) {}",
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (value === true) {}`,
			Output:  `if (true === value) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `if (value === 5n) {}`,
			Output:          `if (5n === value) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `if (` + "`" + `${"red"}` + "`" + ` <= ` + "`" + `red` + "`" + `) {}`,
			Output:          `if (` + "`" + `red` + "`" + ` >= ` + "`" + `${"red"}` + "`" + `) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (a < 0 && 0 <= b && b < 1) {}`,
			Output:  `if (a < 0 && b >= 0 && b < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a && a < 1 && b < 1) {}`,
			Output:  `if (a >= 0 && a < 1 && b < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (1 < a && a < 0) {}`,
			Output:  `if (a > 1 && a < 0) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `0 < a && a < 1`,
			Output:  `a > 0 && a < 1`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var a = b < 0 || 1 <= b;`,
			Output:  `var a = b < 0 || b >= 1;`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= x && x < -1) {}`,
			Output:  `if (x >= 0 && x < -1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var a = (b < 0 && 0 <= b);`,
			Output:  `var a = (0 > b && 0 <= b);`,
			Options: "[\"always\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "var a = (b < `0` && `0` <= b);",
			Output:          "var a = (`0` > b && `0` <= b);",
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (`green` < x.y && x.y < `blue`) {}",
			Output:          "if (x.y > `green` && x.y < `blue`) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[b] && a['b'] < 1) {}`,
			Output:  `if (a[b] >= 0 && a['b'] < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (0 <= a[b] && a[`b`] < 1) {}",
			Output:          "if (a[b] >= 0 && a[`b`] < 1) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (`0` <= a[b] && a[`b`] < `1`) {}",
			Output:          "if (a[b] >= `0` && a[`b`] < `1`) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[b] && a.b < 1) {}`,
			Output:  `if (a[b] >= 0 && a.b < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[''] && a.b < 1) {}`,
			Output:  `if (a[''] >= 0 && a.b < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[''] && a[' '] < 1) {}`,
			Output:  `if (a[''] >= 0 && a[' '] < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[''] && a[null] < 1) {}`,
			Output:  `if (a[''] >= 0 && a[null] < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (0 <= a[``] && a[null] < 1) {}",
			Output:          "if (a[``] >= 0 && a[null] < 1) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[''] && a[b] < 1) {}`,
			Output:  `if (a[''] >= 0 && a[b] < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[''] && a[b()] < 1) {}`,
			Output:  `if (a[''] >= 0 && a[b()] < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (0 <= a[``] && a[b()] < 1) {}",
			Output:          "if (a[``] >= 0 && a[b()] < 1) {}",
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 <= a[b()] && a[b()] < 1) {}`,
			Output:  `if (a[b()] >= 0 && a[b()] < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `if (0 <= a.null && a[/(?<zero>0)/] <= 1) {}`,
			Output:          `if (a.null >= 0 && a[/(?<zero>0)/] <= 1) {}`,
			Options:         "[\"never\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (3 == a) {}`,
			Output:  `if (a == 3) {}`,
			Options: "[\"never\",{\"onlyEquality\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `foo(3 === a);`,
			Output:  `foo(a === 3);`,
			Options: "[\"never\",{\"onlyEquality\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `foo(a === 3);`,
			Output:  `foo(3 === a);`,
			Options: "[\"always\",{\"onlyEquality\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "foo(a === `3`);",
			Output:          "foo(`3` === a);",
			Options:         "[\"always\",{\"onlyEquality\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:   `if (0 <= x && x < 1) {}`,
			Output: `if (x >= 0 && x < 1) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if ( /* a */ 0 /* b */ < /* c */ foo /* d */ ) {}`,
			Output:  `if ( /* a */ foo /* b */ > /* c */ 0 /* d */ ) {}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if ( /* a */ foo /* b */ > /* c */ 0 /* d */ ) {}`,
			Output:  `if ( /* a */ 0 /* b */ < /* c */ foo /* d */ ) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (foo()===1) {}`,
			Output:  `if (1===foo()) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (foo()     === 1) {}`,
			Output:  `if (1     === foo()) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `while (0 === (a));`,
			Output:  `while ((a) === 0);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `while (0 === (a = b));`,
			Output:  `while ((a = b) === 0);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `while ((a) === 0);`,
			Output:  `while (0 === (a));`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `while ((a = b) === 0);`,
			Output:  `while (0 === (a = b));`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (((((((((((foo)))))))))) === ((((((5)))))));`,
			Output:  `if (((((((5)))))) === ((((((((((foo)))))))))));`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield(1) < a }`,
			Output:          `function *foo() { yield a > (1) }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield((1)) < a }`,
			Output:          `function *foo() { yield a > ((1)) }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield 1 < a }`,
			Output:          `function *foo() { yield a > 1 }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield/**/1 < a }`,
			Output:          `function *foo() { yield/**/a > 1 }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield(1) < ++a }`,
			Output:          `function *foo() { yield++a > (1) }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield(1) < (a) }`,
			Output:          `function *foo() { yield(a) > (1) }`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `x=1 < a`,
			Output:  `x=a > 1`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield++a < 1 }`,
			Output:          `function *foo() { yield 1 > ++a }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield(a) < 1 }`,
			Output:          `function *foo() { yield 1 > (a) }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield a < 1 }`,
			Output:          `function *foo() { yield 1 > a }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield/**/a < 1 }`,
			Output:          `function *foo() { yield/**/1 > a }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `function *foo() { yield++a < (1) }`,
			Output:          `function *foo() { yield(1) > ++a }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `x=a < 1`,
			Output:  `x=1 > a`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:   `0 < f()in obj`,
			Output: `f() > 0 in obj`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `1 > x++instanceof foo`,
			Output:  `x++ < 1 instanceof foo`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `x < ('foo')in bar`,
			Output:  `('foo') > x in bar`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `false <= ((x))in foo`,
			Output:  `((x)) >= false in foo`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `x >= (1)instanceof foo`,
			Output:  `(1) <= x instanceof foo`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `false <= ((x)) in foo`,
			Output:  `((x)) >= false in foo`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `x >= 1 instanceof foo`,
			Output:  `1 <= x instanceof foo`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `x >= 1/**/instanceof foo`,
			Output:  `1 <= x/**/instanceof foo`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `(x >= 1)instanceof foo`,
			Output:  `(1 <= x)instanceof foo`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `(x) >= (1)instanceof foo`,
			Output:  `(1) <= (x)instanceof foo`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `1 > x===foo`,
			Output:  `x < 1===foo`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `1 > x`,
			Output:  `x < 1`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            "if (`green` < x.y && x.y < `blue`) {}",
			Output:          "if (`green` < x.y && `blue` > x.y) {}",
			Options:         "[\"always\",{\"exceptRange\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if('a' <= x && x < 'b') {}`,
			Output:  `if('a' <= x && 'b' > x) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if ('b' <= x && x < 'a') {}`,
			Output:  `if (x >= 'b' && x < 'a') {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if('a' <= x && x < 1) {}`,
			Output:  `if(x >= 'a' && x < 1) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `if (0 < a && b < max) {}`,
			Output:  `if (a > 0 && b < max) {}`,
			Options: "[\"never\",{\"exceptRange\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
	})
}
