// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoInvalidThisRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"parser\":{\"version\":\"8.30.1\",\"meta\":{\"name\":\"typescript-eslint/parser\",\"version\":\"8.30.1\"}}}}", "no-invalid-this", []ValidTestCase{
		{Code: `
    describe('foo', () => {
      it('does something', function (this: Mocha.Context) {
        this.timeout(100);
        // done
      });
    });
        `},
		{Code: `
          interface SomeType {
            prop: string;
          }
          function foo(this: SomeType) {
            this.prop;
          }
        `},
		{Code: `
    function foo(this: prop) {
      this.propMethod();
    }
        `},
		{Code: `
    z(function (x, this: context) {
      console.log(x, this);
    });
        `},
		{Code: `
    function foo() {
      /** @this Obj*/ return function bar() {
        console.log(this);
        z(x => console.log(x, this));
      };
    }
        `},
		{Code: `
    var Ctor = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
        `},
		{Code: `
    function Foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `},
		{
			Code: `
    function Foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Options: "[{}]",
		},
		{
			Code: `
    function Foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Options: "[{\"capIsConstructor\":true}]",
		},
		{Code: `
    var Foo = function Foo() {
      console.log(this);
      z(x => console.log(x, this));
    };
          `},
		{Code: `
    class A {
      constructor() {
        console.log(this);
        z(x => console.log(x, this));
      }
    }
          `},
		{Code: `
    var obj = {
      foo: function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    };
          `},
		{Code: `
    var obj = {
      foo() {
        console.log(this);
        z(x => console.log(x, this));
      },
    };
          `},
		{Code: `
    var obj = {
      foo:
        foo ||
        function () {
          console.log(this);
          z(x => console.log(x, this));
        },
    };
          `},
		{Code: `
    var obj = {
      foo: hasNative
        ? foo
        : function () {
            console.log(this);
            z(x => console.log(x, this));
          },
    };
          `},
		{Code: `
    var obj = {
      foo: (function () {
        return function () {
          console.log(this);
          z(x => console.log(x, this));
        };
      })(),
    };
          `},
		{Code: `
    Object.defineProperty(obj, 'foo', {
      value: function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    });
          `},
		{Code: `
    Object.defineProperties(obj, {
      foo: {
        value: function () {
          console.log(this);
          z(x => console.log(x, this));
        },
      },
    });
          `},
		{Code: `
    obj.foo = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `},
		{Code: `
    obj.foo =
      foo ||
      function () {
        console.log(this);
        z(x => console.log(x, this));
      };
          `},
		{Code: `
    obj.foo = foo
      ? bar
      : function () {
          console.log(this);
          z(x => console.log(x, this));
        };
          `},
		{Code: `
    obj.foo = (function () {
      return function () {
        console.log(this);
        z(x => console.log(x, this));
      };
    })();
          `},
		{Code: `
    obj.foo = (() =>
      function () {
        console.log(this);
        z(x => console.log(x, this));
      })();
          `},
		{Code: `
    (function () {
      console.log(this);
      z(x => console.log(x, this));
    }).call(obj);
        `},
		{Code: `
    var foo = function () {
      console.log(this);
      z(x => console.log(x, this));
    }.bind(obj);
        `},
		{Code: `
    Reflect.apply(
      function () {
        console.log(this);
        z(x => console.log(x, this));
      },
      obj,
      [],
    );
        `},
		{Code: `
    (function () {
      console.log(this);
      z(x => console.log(x, this));
    }).apply(obj);
        `},
		{Code: `
    class A {
      foo() {
        console.log(this);
        z(x => console.log(x, this));
      }
    }
        `},
		{Code: `
    Array.from(
      [],
      function () {
        console.log(this);
        z(x => console.log(x, this));
      },
      obj,
    );
        `},
		{Code: `
    foo.every(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    foo.filter(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    foo.find(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    foo.findIndex(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    foo.forEach(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    foo.map(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    foo.some(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, obj);
        `},
		{Code: `
    /** @this Obj */ function foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
        `},
		{Code: `
    foo(
      /* @this Obj */ function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    );
        `},
		{Code: `
    /**
     * @returns {void}
     * @this Obj
     */
    function foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
        `},
		{Code: `
    Ctor = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
        `},
		{Code: `
    function foo(
      Ctor = function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    ) {}
        `},
		{Code: `
    [
      obj.method = function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    ] = a;
        `},
		{
			Code: `
          class A {
            a = 5;
            b = this.a;
            accessor c = this.a;
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
          class A {
            a = 5;
            accessor b = this.a + 1;
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
          class A {
            a = 5;
            accessor b = this;
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
          class A {
            b = 0;
            c = this.b;
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
          class A {
            b = new Array(this, 1, 2, 3);
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
          class A {
            b = () => {
            console.log(this);
            };
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
          class A {
            static foo() {
            console.log(this);
            z(x => console.log(x, this));
            }
          }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `
    interface SomeType {
      prop: string;
    }
    function foo() {
      this.prop;
    }
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    console.log(this);
    z(x => console.log(x, this));
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    console.log(this);
    z(x => console.log(x, this));
          `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    (function () {
      console.log(this);
      z(x => console.log(x, this));
    })();
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    function foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    function foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    function Foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    function foo() {
      'use strict';
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    function Foo() {
      'use strict';
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    return function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var foo = function () {
      console.log(this);
      z(x => console.log(x, this));
    }.bar(obj);
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var obj = {
      foo: function () {
        function foo() {
          console.log(this);
          z(x => console.log(x, this));
        }
        foo();
      },
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var obj = {
      foo() {
        function foo() {
          console.log(this);
          z(x => console.log(x, this));
        }
        foo();
      },
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var obj = {
      foo: function () {
        return function () {
          console.log(this);
          z(x => console.log(x, this));
        };
      },
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var obj = {
      foo: function () {
        'use strict';
        return function () {
          console.log(this);
          z(x => console.log(x, this));
        };
      },
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    obj.foo = function () {
      return function () {
        console.log(this);
        z(x => console.log(x, this));
      };
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    obj.foo = function () {
      'use strict';
      return function () {
        console.log(this);
        z(x => console.log(x, this));
      };
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    class A {
      foo() {
        return function () {
          console.log(this);
          z(x => console.log(x, this));
        };
      }
    }
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    class A {
      b = new Array(1, 2, function () {
        console.log(this);
        z(x => console.log(x, this));
      });
    }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    class A {
      b = () => {
        function c() {
          console.log(this);
          z(x => console.log(x, this));
        }
      };
    }
          `,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    obj.foo = (function () {
      return () => {
        console.log(this);
        z(x => console.log(x, this));
      };
    })();
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    obj.foo = (() => () => {
      console.log(this);
      z(x => console.log(x, this));
    })();
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var foo = function () {
      console.log(this);
      z(x => console.log(x, this));
    }.bind(null);
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    (function () {
      console.log(this);
      z(x => console.log(x, this));
    }).call(undefined);
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    (function () {
      console.log(this);
      z(x => console.log(x, this));
    }).apply(void 0);
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    Array.from([], function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.every(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.filter(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.find(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.findIndex(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.forEach(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.map(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.some(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    foo.forEach(function () {
      console.log(this);
      z(x => console.log(x, this));
    }, null);
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    /** @returns {void} */ function foo() {
      console.log(this);
      z(x => console.log(x, this));
    }
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    /** @this Obj */ foo(function () {
      console.log(this);
      z(x => console.log(x, this));
    });
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var Ctor = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var func = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    var func = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    Ctor = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    func = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    func = function () {
      console.log(this);
      z(x => console.log(x, this));
    };
          `,
			Options: "[{\"capIsConstructor\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    function foo(
      func = function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    ) {}
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
    [
      func = function () {
        console.log(this);
        z(x => console.log(x, this));
      },
    ] = a;
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
			function foo() {
  				class C {
    				accessor [this.a] = foo;
  				}
			}
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
			function foo() {
  				class C {
    				accessor [this.a] = this.b;
  				}
			}
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
			},
		},
		{
			Code: `
			function foo() {
  				class C {
    				accessor a = this.b;
    				accessor [this.c] = foo;
  				}
			}
          `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedThis",
				},
			},
		},
	})
}
