// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPaddingLineBetweenStatementsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2017,\"sourceType\":\"script\"}}", "padding-line-between-statements", []ValidTestCase{
		{Code: `'use strict'; foo(); if (a) { bar(); }`},
		{
			Code:    `foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code:    `foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code:    `foo();bar();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();
bar();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();
//comment
bar();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();
/*comment*/
bar();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();

bar();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();

//comment
bar();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();
//comment

bar();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();
//comment

//comment
bar();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a){}

;[].map(b)`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"empty\",\"next\":\"*\"}]",
		},
		{
			Code: `foo();

{ foo() }

foo();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"block-like\"}]",
		},
		{
			Code:    `{ foo() } { foo() }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"block-like\"}]",
		},
		{
			Code: `{ foo() }
{ foo() }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"block-like\"}]",
		},
		{
			Code: `{ foo() }

{ foo() }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"block-like\"}]",
		},
		{
			Code: `{ foo() }

//comment
{ foo() }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"block-like\"}]",
		},
		{
			Code: `if(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `do;while(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `do{}while(a);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `a={}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `let a={}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `foo(function(){})
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `(function(){})()

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `!function(){}()

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code:    `module.exports=1`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
		},
		{
			Code: `module.exports=1

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
		},
		{
			Code: `module.exports.foo=1

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
		},
		{
			Code: `exports.foo=1

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
		},
		{
			Code: `m.exports=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
		},
		{
			Code: `module.foo=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
		},
		{
			Code: `foo=require("foo")
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-import\",\"next\":\"*\"}]",
		},
		{
			Code: `const foo=a.require("foo")
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"cjs-import\",\"next\":\"*\"}]",
		},
		{
			Code: `"use strict"

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `function foo(){"use strict"

foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `(function foo(){"use strict"

foo()})`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `(()=>{"use strict"

foo()})`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `'use strict'

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `foo("use strict")
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `` + "`" + `use strict` + "`" + `
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `("use strict")
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `'use '+'strict'
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `foo()
"use strict"
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `{"use strict"
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
		},
		{
			Code: `{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `{
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `do{
}while(a)

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `for(;;){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `for(a in b){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `for(a of b){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `function foo(a){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=function foo(a){
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `{}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block\",\"next\":\"*\"}]",
		},
		{
			Code: `{
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block\",\"next\":\"*\"}]",
		},
		{
			Code: `{
foo()
}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block\",\"next\":\"*\"}]",
		},
		{
			Code: `a={}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"block\",\"next\":\"*\"}]",
		},
		{
			Code: `;

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"empty\",\"next\":\"*\"}]",
		},
		{
			Code: `1;
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"empty\",\"next\":\"*\"}]",
		},
		{
			Code: `foo()

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"*\"}]",
		},
		{
			Code: `a=b+c

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"*\"}]",
		},
		{
			Code: `'use strict'
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"*\"}]",
		},
		{
			Code: `foo()

foo(
	x,
	y
)`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-expression\"}]",
		},
		{
			Code: `foo()
foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-expression\"}]",
		},
		{
			Code: `() => {
	someArray.forEach(x => doSomething(x));
	return theThing;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-expression\",\"next\":\"return\"}]",
		},
		{
			Code: `() => {
	someArray.forEach(
		x => doSomething(x)
	);

	return theThing;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-expression\",\"next\":\"return\"}]",
		},
		{
			Code: `A:{break A

foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"break\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a){break

foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"break\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){case 0:break

foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"break\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){case 0:break
case 1:break}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"break\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){case 0:
foo()

case 1:
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"case\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){case 0:
foo()

default:
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"case\",\"next\":\"*\"}]",
		},
		{
			Code: `class A{}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"class\",\"next\":\"*\"}]",
		},
		{
			Code: `var A = class{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"class\",\"next\":\"*\"}]",
		},
		{
			Code: `const a=1

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"const\",\"next\":\"*\"}]",
		},
		{
			Code: `let a=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"const\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a){continue

foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"continue\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a){break
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"continue\",\"next\":\"*\"}]",
		},
		{
			Code: `debugger

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"debugger\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){default:
foo()

case 0:
foo()
case 1:}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"default\",\"next\":\"*\"}]",
		},
		{
			Code: `do;while(a)

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"do\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"do\",\"next\":\"*\"}]",
		},
		{
			Code: `export default 1

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export let a=1

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var a = 0; export {a}

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `exports.foo=1
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `module.exports={}
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `for(;;);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
		},
		{
			Code: `for(a in b);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
		},
		{
			Code: `for(a of b);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
		},
		{
			Code: `function foo(){}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"function\",\"next\":\"*\"}]",
		},
		{
			Code: `var foo=function(){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"function\",\"next\":\"*\"}]",
		},
		{
			Code: `async function foo(){}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"function\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a);else;

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a);else if(b);else;

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"}]",
		},
		{
			Code: `for(;;);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"}]",
		},
		{
			Code: `(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"iife\",\"next\":\"*\"}]",
		},
		{
			Code: `+(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"iife\",\"next\":\"*\"}]",
		},
		{
			Code: `(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"iife\",\"next\":\"*\"}]",
		},
		{
			Code: `+(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"iife\",\"next\":\"*\"}]",
		},
		{
			Code: `import 'a'

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import a from 'a'

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import * as a from 'a'

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {a} from 'a'

foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `const a=require('a')
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `let a=1

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"*\"}]",
		},
		{
			Code: `function foo(){return

foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"return\",\"next\":\"*\"}]",
		},
		{
			Code: `throw a
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"return\",\"next\":\"*\"}]",
		},
		{
			Code: `switch(a){}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"switch\",\"next\":\"*\"}]",
		},
		{
			Code: `if(a){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"switch\",\"next\":\"*\"}]",
		},
		{
			Code: `throw a

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"throw\",\"next\":\"*\"}]",
		},
		{
			Code: `try{}catch(e){}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"try\",\"next\":\"*\"}]",
		},
		{
			Code: `try{}finally{}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"try\",\"next\":\"*\"}]",
		},
		{
			Code: `try{}catch(e){}finally{}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"try\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=1

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"var\",\"next\":\"*\"}]",
		},
		{
			Code: `const a=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"var\",\"next\":\"*\"}]",
		},
		{
			Code: `while(a);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"while\",\"next\":\"*\"}]",
		},
		{
			Code: `do;while(a)
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"while\",\"next\":\"*\"}]",
		},
		{
			Code: `with(a);

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"with\",\"next\":\"*\"}]",
		},
		{
			Code: `const a={
b:1,
c:2
}

const d=3`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-const\",\"next\":\"*\"}]",
		},
		{
			Code: `const a=1

const b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-const\"}]",
		},
		{
			Code: `const a=1
const b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-const\",\"next\":\"*\"}]",
		},
		{
			Code: `const a=1
const b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-const\"}]",
		},
		{
			Code: `let a={
b:1,
c:2
}

let d=3`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-let\",\"next\":\"*\"}]",
		},
		{
			Code: `let a=1

let b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-let\"}]",
		},
		{
			Code: `let a=1
let b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-let\",\"next\":\"*\"}]",
		},
		{
			Code: `let a=1
let b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-let\"}]",
		},
		{
			Code: `var a={
b:1,
c:2
}

var d=3`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-var\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=1

var b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-var\"}]",
		},
		{
			Code: `var a=1
var b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"multiline-var\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=1
var b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-var\"}]",
		},
		{
			Code: `const a=1

const b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"singleline-const\",\"next\":\"*\"}]",
		},
		{
			Code: `const a=1

const b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-const\"}]",
		},
		{
			Code: `const a={
b:1,
c:2
}
const d={
e:3,
f:4
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"singleline-const\",\"next\":\"*\"}]",
		},
		{
			Code: `const a={
b:1,
c:2
}
const d={
e:3,
f:4
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-const\"}]",
		},
		{
			Code: `let a=1

let b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"singleline-let\",\"next\":\"*\"}]",
		},
		{
			Code: `let a=1

let b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-let\"}]",
		},
		{
			Code: `let a={
b:1,
c:2
}
let d={
e:3,
f:4
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"singleline-let\",\"next\":\"*\"}]",
		},
		{
			Code: `let a={
b:1,
c:2
}
let d={
e:3,
f:4
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-let\"}]",
		},
		{
			Code: `var a=1

var b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"singleline-var\",\"next\":\"*\"}]",
		},
		{
			Code: `var a=1

var b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-var\"}]",
		},
		{
			Code: `var a={
b:1,
c:2
}
var d={
e:3,
f:4
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"singleline-var\",\"next\":\"*\"}]",
		},
		{
			Code: `var a={
b:1,
c:2
}
var d={
e:3,
f:4
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-var\"}]",
		},
		{
			Code:    `console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code:    `console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code:    `var greet = 'hello';`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code:    `var greet = 'hello';`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code:    `var greet = 'hello';console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';


console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';



console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';    

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';    
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello'; // inline comment

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello'; // inline comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
// second-line comment

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
// second-line comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// next-line comment
/* block comment
block comment */
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code:    `var greet = 'hello';var name = 'world';console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
var name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// inline comment
var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
// inline comment
var name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
var name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code:    `var greet = 'hello', name = 'world';console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello', name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello', // inline comment
name = 'world'; // inline comment

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello', // inline comment
name = 'world'; // inline comment
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';
// next-line comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var greet = 'hello',
name = 'world';
/* block comment
block comment */
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `let greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `let greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `const greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `const greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `let greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `const greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `let greet = 'hello';
const name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(let a = 1; a < 1; a++){
 break;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(var a = 1; a < 1; a++){
 break;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(let a = 1; a < 1; a++){
 break;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(var a = 1; a < 1; a++){
 break;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(let a in obj){
 break;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(var a in obj){
 break;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(let a in obj){
 break;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `for(var a in obj){
 break;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `export let a = 1;
export let b = 2;`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export let a = 1;
export let b = 2;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export var a = 1;
export var b = 2;`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export var a = 1;
export var b = 2;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export const a = 1;
export const b = 2;`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export const a = 1;
export const b = 2;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `function example() {
var greet = 'hello'
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `function example() {
var greet = 'hello'
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `function example() {
var greet = 'hello';
console.log(greet);
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var f = function() {
var greet = 'hello'
};`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var f = function() {
var greet = 'hello'
};`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `var f = function() {
var greet = 'hello';
console.log(greet);
};`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `() => {
var greet = 'hello';
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `() => {
var greet = 'hello';
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `() => {
var greet = 'hello';
console.log(greet);
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `{
var foo;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `{
var foo;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `if(true) {
var foo;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `if(true) {
var foo;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;

case 1:}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
case 1:}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `
                var a = 1

                ;(b || c).doSomething()
            `,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `
                var a = 1
                ;(b || c).doSomething()
            `,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `
                var a = 1
                ;
                (b || c).doSomething();
            `,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;

case 1:}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `switch(a) {
case 0:
var foo;
case 1:}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `
                var a = 1

                ;
                (b || c).doSomething();
            `,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
		},
		{
			Code: `function a() {
return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {

return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
var b;

return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) { return; }
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {
return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {
return;
}

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {

return;
}

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (!b) {
return;
} else {
return b;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (!b) {
return;
} else {

return b;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {
return b;
} else if (c) {
return c;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {
return b;
} else if (c) {
return c;
} else {
return d;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) {
return b;
} else if (c) {
return c;
} else {
return d;
}

return a;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else return d;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else {
return d;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else {
e();

return d;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
while (b) return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
 while (b) 
return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
 while (b) { return; }
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
 while (b) {
return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
 while (b) {
c();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
var c;
while (b) {
 c = d; //comment
}

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
do return;
while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
do 
return;
while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
do { return; } while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
do { return; }
while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
do {
return;
} while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
do {
c();

return;
} while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (var b; b < c; b++) return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (var b; b < c; b++)
return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
c();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
if (d) {
break; //comment
}

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b in c)
return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b in c) { return; }
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b in c) {
return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b in c) {
d();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b of c) return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b of c)
return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b of c) {
return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
for (b of c) {
d();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
switch (b) {
case 'b': return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
switch (b) {
case 'b':
return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
switch (b) {
case 'b': {
return;
}
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
//comment
return b;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
{
//comment
}

return
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
var b = {
//comment
};

return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {/*multi-line
comment*/return b;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
/*comment
comment*/
//comment
return b;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
/*comment
comment*/
//comment
if (b) return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
/*comment
comment*/
//comment
if (b) {
c();

return b;
} else {
//comment
return d;
}

/*multi-line
comment*/
return e;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) { //comment
return;
}

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) { return; } //comment

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) { return; } /*multi-line
comment*/

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code: `function a() {
if (b) { return; }

/*multi-line
comment*/ return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
		},
		{
			Code:            `return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `var a;

return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `// comment
return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `/* comment */
return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `/* multi-line
comment */
return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code:    `if(true){}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){}
`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){}
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){
if(true) {}
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `var a = {
foo: function() {
},
bar: function() {
}}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true) {
}
else
{
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true) {
} else {
 var a = 2; }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true) {
}
else if(true)
{
}
else {
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `do{
}
while(true)`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `try{
}
catch(e) {}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `try{
}
finally {}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `try{
}
catch(e) {
}
finally {
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `[].map(function() {})
.filter(function(){})`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `var a = 2;
module.exports = a;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code:    `module.exports = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;
// foo
module.exports = a;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;

foo.exports = a;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;

module.foo = a;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;

foo = a;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code:    `{}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code:    `if(true){}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){}
`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){}

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){}


var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true){
if(true) {}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `var a = {
foo: function() {
},

bar: function() {
}}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true) {
}
else
{
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true) {
} else {
 var a = 2; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `if(true) {
}
else if(true)
{
}
else {
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `do{
}
while(true)`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `try{
}
catch(e) {}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `try{
}
finally {}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `try{
}
catch(e) {
}
finally {
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `[].map(function() {})
.filter(function(){})`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `func(
2,
3,
function() {
}
)`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `[
2,
3,
function() {
}
]`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `a(res => {
})
.b();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `var foo = (
<div
ref={function() {
}}
>
foo
</div>
);`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code: `var i = 0;
while (i < 100) {
if(i % 2 === 0) {continue;}
++i;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code: `var i = 0;
while (i < 100) {
if(i % 2 === 0) {if(i === 4) {continue;}}
++i;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
		},
		{
			Code:    `module.exports = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;

module.exports = a;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;
foo.exports = a;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `var a = 2;
module.foo = a;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code: `if (true) {
module.exports = a;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
		},
		{
			Code:    `function x() { return; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
		},
		{
			Code:    `if (true) {} else if (false) {}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
		},
		{
			Code:    `function x() { var a = true; do { a = !a; } while (a); }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
		},
		{
			Code:    `function x() { if (true) return; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
		},
		{
			Code:    `function test() {};`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"block-like\"}]",
		},
		{
			Code: `class C {
 static {
 let x;

 foo();
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"expression\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 let x;
 foo();
 }
 }`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"let\",\"next\":\"expression\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 let x;
 foo();

 const y = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 let x;
 foo();
 const y = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 let x;
 foo();

 const y = 1;
 const z = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 let x;
 foo();
 const y = 1;
 const z = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
 let a = 0;
 let b =0;

 bar();
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let x; { let y; } let z; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { method() { let x; } static { let y; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let y; } method() { let x; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let x; } static { let y; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `let x; class C { static { let y; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let x; } } let y;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { let x; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"class\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { 'use strict'; let x; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `foo();

foo();`,
			Output: `foo();
foo();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `foo();

//comment
foo();`,
			Output: `foo();
//comment
foo();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `    foo();
    
    //comment
    foo();`,
			Output: `    foo();
    //comment
    foo();`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `if (a) {}

for (;;) {}`,
			Output: `if (a) {}
for (;;) {}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `foo();
foo();`,
			Output: `foo();

foo();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `    function a() {}
    do {} while (a)`,
			Output: `    function a() {}

    do {} while (a)`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `foo();//trailing-comment
//comment
//comment
foo();`,
			Output: `foo();//trailing-comment

//comment
//comment
foo();`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `{}

foo()`,
			Output: `{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `{}
foo()`,
			Output: `{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){}
foo()`,
			Output: `if(a){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){}else{}
foo()`,
			Output: `if(a){}else{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){}else if(b){}
foo()`,
			Output: `if(a){}else if(b){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){}else if(b){}else{}
foo()`,
			Output: `if(a){}else if(b){}else{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){}
foo()`,
			Output: `switch(a){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){case 0:}
foo()`,
			Output: `switch(a){case 0:}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{}catch(e){}
foo()`,
			Output: `try{}catch(e){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{}finally{}
foo()`,
			Output: `try{}finally{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{}catch(e){}finally{}
foo()`,
			Output: `try{}catch(e){}finally{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `while(a){}
foo()`,
			Output: `while(a){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `do{}while(a)
foo()`,
			Output: `do{}while(a)

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(;;){}
foo()`,
			Output: `for(;;){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(a in b){}
foo()`,
			Output: `for(a in b){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(a of b){}
foo()`,
			Output: `for(a of b){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `a=function(){}
foo()`,
			Output: `a=function(){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `a=()=>{}
foo()`,
			Output: `a=()=>{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a(){}
foo()`,
			Output: `function a(){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a=function(){}
foo()`,
			Output: `let a=function(){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `module.exports=1

foo()`,
			Output: `module.exports=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `module.exports=1
foo()`,
			Output: `module.exports=1

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `module.exports.foo=1
foo()`,
			Output: `module.exports.foo=1

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `module.exports[foo]=1
foo()`,
			Output: `module.exports[foo]=1

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `exports.foo=1
foo()`,
			Output: `exports.foo=1

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `exports[foo]=1
foo()`,
			Output: `exports[foo]=1

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-export\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const foo=require("foo")

foo()`,
			Output: `const foo=require("foo")
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"cjs-import\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const foo=require("foo")
foo()`,
			Output: `const foo=require("foo")

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-import\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const foo=require("foo").Foo
foo()`,
			Output: `const foo=require("foo").Foo

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-import\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const foo=require("foo")[a]
foo()`,
			Output: `const foo=require("foo")[a]

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"cjs-import\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `"use strict"

foo()`,
			Output: `"use strict"
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"directive\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `"use strict"
foo()`,
			Output: `"use strict"

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `'use strict'
foo()`,
			Output: `'use strict'

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `'use asm'
foo()`,
			Output: `'use asm'

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"directive\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `{
}

foo()`,
			Output: `{
}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `{
}
foo()`,
			Output: `{
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){
}
foo()`,
			Output: `if(a){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){
}else{
}
foo()`,
			Output: `if(a){
}else{
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){
}else if(b){
}
foo()`,
			Output: `if(a){
}else if(b){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a){
}else if(b){
}else{
}
foo()`,
			Output: `if(a){
}else if(b){
}else{
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){
}
foo()`,
			Output: `switch(a){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{
}catch(e){
}
foo()`,
			Output: `try{
}catch(e){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{
}finally{
}
foo()`,
			Output: `try{
}finally{
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{
}catch(e){
}finally{
}
foo()`,
			Output: `try{
}catch(e){
}finally{
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `while(a){
}
foo()`,
			Output: `while(a){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `do{
}while(a)
foo()`,
			Output: `do{
}while(a)

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(;;){
}
foo()`,
			Output: `for(;;){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(a in b){
}
foo()`,
			Output: `for(a in b){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(a of b){
}
foo()`,
			Output: `for(a of b){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `a=function(){
}
foo()`,
			Output: `a=function(){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `a=()=>{
}
foo()`,
			Output: `a=()=>{
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a(){
}
foo()`,
			Output: `function a(){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a=function(){
}
foo()`,
			Output: `let a=function(){
}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `{}

foo()`,
			Output: `{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `{}
foo()`,
			Output: `{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `;

foo()`,
			Output: `;
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"empty\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `;
foo()`,
			Output: `;

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"empty\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `foo()

foo()`,
			Output: `foo()
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"expression\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `foo()
foo()`,
			Output: `foo()

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `foo()

foo(
	x,
	y
)`,
			Output: `foo()
foo(
	x,
	y
)`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"multiline-expression\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `foo()
foo(
	x,
	y
)`,
			Output: `foo()

foo(
	x,
	y
)`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-expression\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `() => {
	someArray.forEach(
		x => doSomething(x)
	);
	return theThing;
}`,
			Output: `() => {
	someArray.forEach(
		x => doSomething(x)
	);

	return theThing;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-expression\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `while(a){break

foo()}`,
			Output: `while(a){break
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"break\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){case 0:break

foo()}`,
			Output: `switch(a){case 0:break
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"break\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `while(a){break
foo()}`,
			Output: `while(a){break

foo()}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"break\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){case 0:break
foo()}`,
			Output: `switch(a){case 0:break

foo()}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"break\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){case 0:
foo()

default:}`,
			Output: `switch(a){case 0:
foo()
default:}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"case\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){case 0:
foo()
default:}`,
			Output: `switch(a){case 0:
foo()

default:}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"case\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class A{}

foo()`,
			Output: `class A{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"class\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `class A{}
foo()`,
			Output: `class A{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"class\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1

foo()`,
			Output: `const a=1
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"const\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1
foo()`,
			Output: `const a=1

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"const\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `while(a){continue

foo()}`,
			Output: `while(a){continue
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"continue\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `while(a){continue
foo()}`,
			Output: `while(a){continue

foo()}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"continue\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `debugger

foo()`,
			Output: `debugger
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"debugger\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `debugger
foo()`,
			Output: `debugger

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"debugger\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){default:
foo()

case 0:}`,
			Output: `switch(a){default:
foo()
case 0:}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"default\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){default:
foo()
case 0:}`,
			Output: `switch(a){default:
foo()

case 0:}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"default\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `do;while(a)

foo()`,
			Output: `do;while(a)
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"do\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `do;while(a)
foo()`,
			Output: `do;while(a)

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"do\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `export default 1

foo()`,
			Output: `export default 1
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `export let a=1

foo()`,
			Output: `export let a=1
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a = 0;export {a}

foo()`,
			Output: `var a = 0;export {a}
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `export default 1
foo()`,
			Output: `export default 1

foo()`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `export let a=1
foo()`,
			Output: `export let a=1

foo()`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a = 0;export {a}
foo()`,
			Output: `var a = 0;export {a}

foo()`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"export\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(;;);

foo()`,
			Output: `for(;;);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"for\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `for(a in b);

foo()`,
			Output: `for(a in b);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"for\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `for(a of b);

foo()`,
			Output: `for(a of b);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"for\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `for(;;);
foo()`,
			Output: `for(;;);

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(a in b);
foo()`,
			Output: `for(a in b);

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `for(a of b);
foo()`,
			Output: `for(a of b);

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"for\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function foo(){}

foo()`,
			Output: `function foo(){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"function\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function foo(){}
foo()`,
			Output: `function foo(){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"function\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `async function foo(){}
foo()`,
			Output: `async function foo(){}

foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"function\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a);

foo()`,
			Output: `if(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"if\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `if(a);else;

foo()`,
			Output: `if(a);else;
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"if\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `if(a);
foo()`,
			Output: `if(a);

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(a);else;
foo()`,
			Output: `if(a);else;

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"if\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `(function(){
})()

var a = 2;`,
			Output: `(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"iife\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `+(function(){
})()

var a = 2;`,
			Output: `+(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"iife\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `(function(){
})()
var a = 2;`,
			Output: `(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"iife\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `+(function(){
})()
var a = 2;`,
			Output: `+(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"iife\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `(function(){
})?.()
var a = 2;`,
			Output: `(function(){
})?.()

var a = 2;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"iife\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `void (function(){
})?.()
var a = 2;`,
			Output: `void (function(){
})?.()

var a = 2;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"iife\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `import a from 'a'

foo()`,
			Output: `import a from 'a'
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `import * as a from 'a'

foo()`,
			Output: `import * as a from 'a'
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `import {a} from 'a'

foo()`,
			Output: `import {a} from 'a'
foo()`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `import a from 'a'
foo()`,
			Output: `import a from 'a'

foo()`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `import * as a from 'a'
foo()`,
			Output: `import * as a from 'a'

foo()`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `import {a} from 'a'
foo()`,
			Output: `import {a} from 'a'

foo()`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"import\",\"next\":\"*\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a

foo()`,
			Output: `let a
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"let\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `let a
foo()`,
			Output: `let a

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function foo(){return

foo()}`,
			Output: `function foo(){return
foo()}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"return\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function foo(){return
foo()}`,
			Output: `function foo(){return

foo()}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"return\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){}

foo()`,
			Output: `switch(a){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"switch\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `switch(a){}
foo()`,
			Output: `switch(a){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"switch\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `throw a

foo()`,
			Output: `throw a
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"throw\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `throw a
foo()`,
			Output: `throw a

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"throw\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{}catch(e){}

foo()`,
			Output: `try{}catch(e){}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"try\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `try{}finally{}

foo()`,
			Output: `try{}finally{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"try\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `try{}catch(e){}finally{}

foo()`,
			Output: `try{}catch(e){}finally{}
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"try\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `try{}catch(e){}
foo()`,
			Output: `try{}catch(e){}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"try\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{}finally{}
foo()`,
			Output: `try{}finally{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"try\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `try{}catch(e){}finally{}
foo()`,
			Output: `try{}catch(e){}finally{}

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"try\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a

foo()`,
			Output: `var a
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"var\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a
foo()`,
			Output: `var a

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"var\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `while(a);

foo()`,
			Output: `while(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"while\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `while(a);
foo()`,
			Output: `while(a);

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"while\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `with(a);

foo()`,
			Output: `with(a);
foo()`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"with\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `with(a);
foo()`,
			Output: `with(a);

foo()`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"with\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const a={
b:1,
c:2
}

const d=3`,
			Output: `const a={
b:1,
c:2
}
const d=3`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"multiline-const\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const a={
b:1,
c:2
}
const d=3`,
			Output: `const a={
b:1,
c:2
}

const d=3`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-const\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1

const b={
c:2,
d:3
}`,
			Output: `const a=1
const b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"multiline-const\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1
const b={
c:2,
d:3
}`,
			Output: `const a=1

const b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-const\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a={
b:1,
c:2
}

let d=3`,
			Output: `let a={
b:1,
c:2
}
let d=3`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"multiline-let\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `let a={
b:1,
c:2
}
let d=3`,
			Output: `let a={
b:1,
c:2
}

let d=3`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-let\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a=1

let b={
c:2,
d:3
}`,
			Output: `let a=1
let b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"multiline-let\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `let a=1
let b={
c:2,
d:3
}`,
			Output: `let a=1

let b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-let\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a={
b:1,
c:2
}

var d=3`,
			Output: `var a={
b:1,
c:2
}
var d=3`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"multiline-var\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a={
b:1,
c:2
}
var d=3`,
			Output: `var a={
b:1,
c:2
}

var d=3`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-var\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a=1

var b={
c:2,
d:3
}`,
			Output: `var a=1
var b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"multiline-var\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a=1
var b={
c:2,
d:3
}`,
			Output: `var a=1

var b={
c:2,
d:3
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"multiline-var\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1

const b=2`,
			Output: `const a=1
const b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"singleline-const\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1
const b=2`,
			Output: `const a=1

const b=2`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"singleline-const\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1

const b=2`,
			Output: `const a=1
const b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"singleline-const\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const a=1
const b=2`,
			Output: `const a=1

const b=2`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-const\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a=1

let b=2`,
			Output: `let a=1
let b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"singleline-let\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `let a=1
let b=2`,
			Output: `let a=1

let b=2`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"singleline-let\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let a=1

let b=2`,
			Output: `let a=1
let b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"singleline-let\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `let a=1
let b=2`,
			Output: `let a=1

let b=2`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-let\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a=1

var b=2`,
			Output: `var a=1
var b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"singleline-var\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a=1
var b=2`,
			Output: `var a=1

var b=2`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"singleline-var\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a=1

var b=2`,
			Output: `var a=1
var b=2`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"singleline-var\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a=1
var b=2`,
			Output: `var a=1

var b=2`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"singleline-var\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';console.log(greet);`,
			Output: `var greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';var name = 'world';console.log(greet, name);`,
			Output: `var greet = 'hello';var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello', name = 'world';console.log(greet, name);`,
			Output: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
console.log(greet);`,
			Output: `var greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';    
console.log(greet);`,
			Output: `var greet = 'hello';
    
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello'; // inline comment
console.log(greet);`,
			Output: `var greet = 'hello'; // inline comment

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
var name = 'world';
console.log(greet, name);`,
			Output: `var greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello', name = 'world';
console.log(greet, name);`,
			Output: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';
console.log(greet, name);`,
			Output: `var greet = 'hello',
name = 'world';

console.log(greet, name);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `let greet = 'hello';
console.log(greet);`,
			Output: `let greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `const greet = 'hello';
console.log(greet);`,
			Output: `const greet = 'hello';

console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function example() {
var greet = 'hello';
console.log(greet);
}`,
			Output: `function example() {
var greet = 'hello';

console.log(greet);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var f = function() {
var greet = 'hello';
console.log(greet);
};`,
			Output: `var f = function() {
var greet = 'hello';

console.log(greet);
};`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `() => {
var greet = 'hello';
console.log(greet);
}`,
			Output: `() => {
var greet = 'hello';

console.log(greet);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';

console.log(greet);`,
			Output: `var greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';


console.log(greet);`,
			Output: `var greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';



console.log(greet);`,
			Output: `var greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';    

console.log(greet);`,
			Output: `var greet = 'hello';    
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello'; // inline comment

console.log(greet);`,
			Output: `var greet = 'hello'; // inline comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
var name = 'world';

console.log(greet, name);`,
			Output: `var greet = 'hello';
var name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello', name = 'world';

console.log(greet, name);`,
			Output: `var greet = 'hello', name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';

console.log(greet, name);`,
			Output: `var greet = 'hello',
name = 'world';
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello', // inline comment
name = 'world'; // inline comment

console.log(greet, name);`,
			Output: `var greet = 'hello', // inline comment
name = 'world'; // inline comment
console.log(greet, name);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `let greet = 'hello';

console.log(greet);`,
			Output: `let greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `const greet = 'hello';

console.log(greet);`,
			Output: `const greet = 'hello';
console.log(greet);`,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
// next-line comment
console.log(greet);`,
			Output: `var greet = 'hello';

// next-line comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
/* block comment
block comment */
console.log(greet);`,
			Output: `var greet = 'hello';

/* block comment
block comment */
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';
// next-line comment
console.log(greet);`,
			Output: `var greet = 'hello',
name = 'world';

// next-line comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello',
name = 'world';
/* block comment
block comment */
console.log(greet);`,
			Output: `var greet = 'hello',
name = 'world';

/* block comment
block comment */
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
// next-line comment
// second-line comment
console.log(greet);`,
			Output: `var greet = 'hello';

// next-line comment
// second-line comment
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var greet = 'hello';
// next-line comment
/* block comment
block comment */
console.log(greet);`,
			Output: `var greet = 'hello';

// next-line comment
/* block comment
block comment */
console.log(greet);`,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `
                var a = 1
                ;(b || c).doSomething()
            `,
			Output: `
                var a = 1

                ;(b || c).doSomething()
            `,
			Options: "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `
                var a = 1

                ;(b || c).doSomething()
            `,
			Output: `
                var a = 1
                ;(b || c).doSomething()
            `,
			Options: "[{\"blankLine\":\"never\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; return;
}`,
			Output: `function a() {
var b;

 return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b;
return;
}`,
			Output: `function a() {
var b;

return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else {
e();
return d;
}
}`,
			Output: `function a() {
if (b) return b;
else if (c) return c;
else {
e();

return d;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) return b;
else if (c) return c;
else {
e(); return d;
}
}`,
			Output: `function a() {
if (b) return b;
else if (c) return c;
else {
e();

 return d;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
 while (b) {
c();
return;
}
}`,
			Output: `function a() {
 while (b) {
c();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
do {
c();
return;
} while (b);
}`,
			Output: `function a() {
do {
c();

return;
} while (b);
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
c();
return;
}
}`,
			Output: `function a() {
for (var b; b < c; b++) {
c();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
for (b in c) {
d();
return;
}
}`,
			Output: `function a() {
for (b in c) {
d();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
for (b of c) {
d();
return;
}
}`,
			Output: `function a() {
for (b of c) {
d();

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) {
c();
}
//comment
return b;
}`,
			Output: `function a() {
if (b) {
c();
}

//comment
return b;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
/*comment
comment*/
if (b) {
c();
return b;
} else {
//comment

return d;
}
/*multi-line
comment*/
return e;
}`,
			Output: `function a() {
/*comment
comment*/
if (b) {
c();

return b;
} else {
//comment

return d;
}

/*multi-line
comment*/
return e;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; } //comment
return c;
}`,
			Output: `function a() {
if (b) { return; } //comment

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; } /*multi-line
comment*/
return c;
}`,
			Output: `function a() {
if (b) { return; } /*multi-line
comment*/

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; }
/*multi-line
comment*/ return c;
}`,
			Output: `function a() {
if (b) { return; }

/*multi-line
comment*/ return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
if (b) { return; } /*multi-line
comment*/ return c;
}`,
			Output: `function a() {
if (b) { return; } /*multi-line
comment*/

 return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a;
return;`,
			Output: `var a;

return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a; return;`,
			Output: `var a;

 return;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
{
//comment
}
return
}`,
			Output: `function a() {
{
//comment
}

return
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
{
//comment
} return
}`,
			Output: `function a() {
{
//comment
}

 return
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var c;
while (b) {
 c = d; //comment
}
return c;
}`,
			Output: `function a() {
var c;
while (b) {
 c = d; //comment
}

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
for (var b; b < c; b++) {
if (d) {
break; //comment
}
return;
}
}`,
			Output: `function a() {
for (var b; b < c; b++) {
if (d) {
break; //comment
}

return;
}
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; /*multi-line
comment*/
return c;
}`,
			Output: `function a() {
var b; /*multi-line
comment*/

return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b;
/*multi-line
comment*/ return c;
}`,
			Output: `function a() {
var b;

/*multi-line
comment*/ return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; /*multi-line
comment*/ return c;
}`,
			Output: `function a() {
var b; /*multi-line
comment*/

 return c;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b;
//comment
return;
}`,
			Output: `function a() {
var b;

//comment
return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; //comment
return;
}`,
			Output: `function a() {
var b; //comment

return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b;
/* comment */ return;
}`,
			Output: `function a() {
var b;

/* comment */ return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b;
//comment
/* comment */ return;
}`,
			Output: `function a() {
var b;

//comment
/* comment */ return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; /* comment */ return;
}`,
			Output: `function a() {
var b; /* comment */

 return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; /* comment */
return;
}`,
			Output: `function a() {
var b; /* comment */

return;
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b;
return; //comment
}`,
			Output: `function a() {
var b;

return; //comment
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function a() {
var b; return; //comment
}`,
			Output: `function a() {
var b;

 return; //comment
}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"return\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(true){}

var a = 2;`,
			Output: `if(true){}
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `if(true){
if(true) {}

var a = 2;}`,
			Output: `if(true){
if(true) {}
var a = 2;}`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `(function(){
})()

var a = 2;`,
			Output: `(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `+(function(){
})()

var a = 2;`,
			Output: `+(function(){
})()
var a = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a = function() {};

var b = 2;`,
			Output: `var a = function() {};
var b = 2;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `var a = 2;

module.exports = a;`,
			Output: `var a = 2;
module.exports = a;`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var a;

return; }`,
			Output: `function x() { var a;
return; }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var a = true;

if (a) { a = !a; }; }`,
			Output: `function x() { var a = true;
if (a) { a = !a; }; }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var a = true;

for (var i = 0; i < 10; i++) { a = !a; }; }`,
			Output: `function x() { var a = true;
for (var i = 0; i < 10; i++) { a = !a; }; }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var y = true;

switch ("Oranges") { case "Oranges": y = !y;

break;

case "Apples": y = !y;

break; default: y = !y; } }`,
			Output: `function x() { var y = true;
switch ("Oranges") { case "Oranges": y = !y;
break;
case "Apples": y = !y;
break; default: y = !y; } }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
				{
					MessageId: "unexpectedBlankLine",
				},
				{
					MessageId: "unexpectedBlankLine",
				},
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function x() {try { var a;

throw 0; } catch (e) { var b = 0;

throw e; } }`,
			Output: `function x() {try { var a;
throw 0; } catch (e) { var b = 0;
throw e; } }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `function x(a) { var b = 0;

if (!a) { return false; };

for (var i = 0; i < b; i++) { if (!a[i]) return false; }

return true; }`,
			Output: `function x(a) { var b = 0;
if (!a) { return false; };
for (var i = 0; i < b; i++) { if (!a[i]) return false; }
return true; }`,
			Options: "[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
				{
					MessageId: "unexpectedBlankLine",
				},
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `if(true){}
var a = 2;`,
			Output: `if(true){}

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a = function() {
};
var b = 2;`,
			Output: `var a = function() {
};

var b = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `if(true){
if(true) {}
var a = 2;}`,
			Output: `if(true){
if(true) {}

var a = 2;}`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `(function(){
})()
var a = 2;`,
			Output: `(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a = function() {
};
var b = 2;`,
			Output: `var a = function() {
};

var b = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `(function(){
})()
var a = 2;`,
			Output: `(function(){
})()

var a = 2;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"multiline-block-like\",\"next\":\"*\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `var a = 2;
module.exports = a;`,
			Output: `var a = 2;

module.exports = a;`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"cjs-export\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var a; return; }`,
			Output: `function x() { var a;

 return; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var a = true; for (var i = 0; i < 10; i++) { a = !a; }; }`,
			Output: `function x() { var a = true;

 for (var i = 0; i < 10; i++) { a = !a; }; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var y = true; switch ("Oranges") { case "Oranges": y = !y; break; case "Apples": y = !y; break; default: y = !y; } }`,
			Output: `function x() { var y = true;

 switch ("Oranges") { case "Oranges": y = !y;

 break;

 case "Apples": y = !y;

 break;

 default: y = !y; } }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function x() { var a = true; while (!a) { a = !a; }; }`,
			Output: `function x() { var a = true;

 while (!a) { a = !a; }; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function x() {try { var a; throw 0; } catch (e) { var b = 0; throw e; } }`,
			Output: `function x() {try { var a;

 throw 0; } catch (e) { var b = 0;

 throw e; } }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `function x(a) { var b = 0; if (!a) { return false; }; for (var i = 0; i < b; i++) { if (!a[i]) return false; } return true; }`,
			Output: `function x(a) { var b = 0;

 if (!a) { return false; };

 for (var i = 0; i < b; i++) { if (!a[i]) return false; }

 return true; }`,
			Options: "[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":[\"if\",\"for\",\"return\",\"switch\",\"case\",\"break\",\"throw\",\"while\",\"default\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let x;
 foo();
 }
 }`,
			Output: `class C {
 static {
 let x;

 foo();
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"expression\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let x;

 foo();
 }
 }`,
			Output: `class C {
 static {
 let x;
 foo();
 }
 }`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"let\",\"next\":\"expression\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let x;
 foo();
 const y = 1;
 }
 }`,
			Output: `class C {
 static {
 let x;
 foo();

 const y = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let x;
 foo();

 const y = 1;
 }
 }`,
			Output: `class C {
 static {
 let x;
 foo();
 const y = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let x;
 foo();
 const y = 1;
 const z = 1;
 }
 }`,
			Output: `class C {
 static {
 let x;
 foo();

 const y = 1;
 const z = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let x;
 foo();

 const y = 1;
 const z = 1;
 }
 }`,
			Output: `class C {
 static {
 let x;
 foo();
 const y = 1;
 const z = 1;
 }
 }`,
			Options:         "[{\"blankLine\":\"never\",\"prev\":\"expression\",\"next\":\"const\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBlankLine",
				},
			},
		},
		{
			Code: `class C {
 static {
 let a = 0;
 bar();
 }
 }`,
			Output: `class C {
 static {
 let a = 0;

 bar();
 }
 }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":\"*\"},{\"blankLine\":\"any\",\"prev\":[\"const\",\"let\",\"var\"],\"next\":[\"const\",\"let\",\"var\"]}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C { static { let x; { let y; let z; } let q; } }`,
			Output: `class C { static { let x; { let y;

 let z; } let q; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C { static { { let x; } let y; let z; } }`,
			Output: `class C { static { { let x; } let y;

 let z; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"let\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C { static { foo(); if (bar) {} } }`,
			Output: `class C { static { foo();

 if (bar) {} } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"block-like\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C { static { let x; } } let y;`,
			Output: `class C { static { let x; } }

 let y;`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"class\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
		{
			Code: `class C { static { 'use strict'; let x; } }`,
			Output: `class C { static { 'use strict';

 let x; } }`,
			Options:         "[{\"blankLine\":\"always\",\"prev\":\"expression\",\"next\":\"let\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlankLine",
				},
			},
		},
	})
}
