// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoInnerDeclarationsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "no-inner-declarations", []ValidTestCase{
		{Code: `function doSomething() { }`},
		{Code: `function doSomething() { function somethingElse() { } }`},
		{Code: `(function() { function doSomething() { } }());`},
		{Code: `if (test) { var fn = function() { }; }`},
		{Code: `if (test) { var fn = function expr() { }; }`},
		{Code: `function decl() { var fn = function expr() { }; }`},
		{Code: `function decl(arg) { var fn; if (arg) { fn = function() { }; } }`},
		{
			Code:            `var x = {doSomething() {function doSomethingElse() {}}}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function decl(arg) { var fn; if (arg) { fn = function expr() { }; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function decl(arg) { var fn; if (arg) { fn = function expr() { }; } }`},
		{Code: `if (test) { var foo; }`},
		{
			Code:            `if (test) { let x = 1; }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if (test) { const x = 1; }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function doSomething() { while (test) { var foo; } }`},
		{
			Code:    `var foo;`,
			Options: "[\"both\"]",
		},
		{
			Code:    `var foo = 42;`,
			Options: "[\"both\"]",
		},
		{
			Code:    `function doSomething() { var foo; }`,
			Options: "[\"both\"]",
		},
		{
			Code:    `(function() { var foo; }());`,
			Options: "[\"both\"]",
		},
		{
			Code:            `foo(() => { function bar() { } });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var fn = () => {var foo;}`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = {doSomething() {var foo;}}`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `export var foo;`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"sourceType\":\"module\",\"ecmaVersion\":6}",
		},
		{
			Code:            `export function bar() {}`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"sourceType\":\"module\",\"ecmaVersion\":6}",
		},
		{
			Code:            `export default function baz() {}`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"sourceType\":\"module\",\"ecmaVersion\":6}",
		},
		{
			Code:            `exports.foo = () => {}`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `exports.foo = function(){}`,
			Options: "[\"both\"]",
		},
		{
			Code:    `module.exports = function foo(){}`,
			Options: "[\"both\"]",
		},
		{
			Code:            `class C { method() { function foo() {} } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { method() { var x; } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { function foo() {} } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { var x; } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `'use strict' 
 if (test) { function doSomething() { } }`,
			Options:         "[\"functions\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `'use strict' 
 if (test) { function doSomething() { } }`,
			Options:         "[\"functions\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `function foo() {'use strict' 
 if (test) { function doSomething() { } } }`,
			Options:         "[\"functions\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function foo() { { function bar() { } } }`,
			Options:         "[\"functions\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022,\"sourceType\":\"module\"}",
		},
		{
			Code:            `class C { method() { if(test) { function somethingElse() { } } } }`,
			Options:         "[\"functions\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `const C = class { method() { if(test) { function somethingElse() { } } } }`,
			Options:         "[\"functions\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `if (test) { function doSomething() { } }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `if (foo) var a; `,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `if (foo) /* some comments */ var a; `,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `if (foo){ function f(){ if(bar){ var a; } } }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `if (foo) function f(){ if(bar) var a; }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `if (foo) { var fn = function(){} } `,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `if (foo)  function f(){} `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `function bar() { if (foo) function f(){}; }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `function bar() { if (foo) var a; }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `if (foo) { var a; }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `function doSomething() { do { function somethingElse() { } } while (test); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `(function() { if (test) { function doSomething() { } } }());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `while (test) { var foo; }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `function doSomething() { if (test) { var foo = 42; } }`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:    `(function() { if (test) { var foo; } }());`,
			Options: "[\"both\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `const doSomething = () => { if (test) { var foo = 42; } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `class C { method() { if(test) { var foo; } } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `class C { static { if (test) { var foo; } } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `class C { static { if (test) { function foo() {} } } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `class C { static { if (test) { if (anotherTest) { var foo; } } } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `if (test) { function doSomething() { } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":5}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code:            `if (test) { function doSomething() { } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `'use strict' 
 if (test) { function doSomething() { } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `'use strict' 
 if (test) { function doSomething() { } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":5}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `'use strict' 
 if (test) { function doSomething() { } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"allow\"}]",
			LanguageOptions: "{\"ecmaVersion\":5}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `function foo() {'use strict' 
 { function bar() { } } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `function foo() {'use strict' 
 { function bar() { } } }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":5}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `function doSomething() { 'use strict' 
 do { function somethingElse() { } } while (test); }`,
			Options:         "[\"both\",{\"blockScopedFunctions\":\"disallow\"}]",
			LanguageOptions: "{\"ecmaVersion\":5}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
		{
			Code: `{ function foo () {'use strict' 
 console.log('foo called'); } }`,
			Options:         "[\"both\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "moveDeclToRoot",
				},
			},
		},
	})
}
