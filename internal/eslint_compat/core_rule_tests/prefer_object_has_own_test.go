// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferObjectHasOwnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "prefer-object-has-own", []ValidTestCase{
		{Code: `Object`},
		{Code: `Object(obj, prop)`},
		{Code: `Object.hasOwnProperty`},
		{Code: `Object.hasOwnProperty(prop)`},
		{Code: `hasOwnProperty(obj, prop)`},
		{Code: `foo.hasOwnProperty(prop)`},
		{Code: `foo.hasOwnProperty(obj, prop)`},
		{Code: `Object.hasOwnProperty.call`},
		{Code: `foo.Object.hasOwnProperty.call(obj, prop)`},
		{Code: `foo.hasOwnProperty.call(obj, prop)`},
		{Code: `foo.call(Object.prototype.hasOwnProperty, Object.prototype.hasOwnProperty.call)`},
		{Code: `Object.foo.call(obj, prop)`},
		{Code: `Object.hasOwnProperty.foo(obj, prop)`},
		{Code: `Object.hasOwnProperty.call.foo(obj, prop)`},
		{Code: `Object[hasOwnProperty].call(obj, prop)`},
		{Code: `Object.hasOwnProperty[call](obj, prop)`},
		{Code: `class C { #hasOwnProperty; foo() { Object.#hasOwnProperty.call(obj, prop) } }`},
		{Code: `class C { #call; foo() { Object.hasOwnProperty.#call(obj, prop) } }`},
		{Code: `(Object) => Object.hasOwnProperty.call(obj, prop)`},
		{Code: `Object.prototype`},
		{Code: `Object.prototype(obj, prop)`},
		{Code: `Object.prototype.hasOwnProperty`},
		{Code: `Object.prototype.hasOwnProperty(obj, prop)`},
		{Code: `Object.prototype.hasOwnProperty.call`},
		{Code: `foo.Object.prototype.hasOwnProperty.call(obj, prop)`},
		{Code: `foo.prototype.hasOwnProperty.call(obj, prop)`},
		{Code: `Object.foo.hasOwnProperty.call(obj, prop)`},
		{Code: `Object.prototype.foo.call(obj, prop)`},
		{Code: `Object.prototype.hasOwnProperty.foo(obj, prop)`},
		{Code: `Object.prototype.hasOwnProperty.call.foo(obj, prop)`},
		{Code: `Object.prototype.prototype.hasOwnProperty.call(a, b);`},
		{Code: `Object.hasOwnProperty.prototype.hasOwnProperty.call(a, b);`},
		{Code: `Object.prototype[hasOwnProperty].call(obj, prop)`},
		{Code: `Object.prototype.hasOwnProperty[call](obj, prop)`},
		{Code: `class C { #hasOwnProperty; foo() { Object.prototype.#hasOwnProperty.call(obj, prop) } }`},
		{Code: `class C { #call; foo() { Object.prototype.hasOwnProperty.#call(obj, prop) } }`},
		{Code: `Object[prototype].hasOwnProperty.call(obj, prop)`},
		{Code: `class C { #prototype; foo() { Object.#prototype.hasOwnProperty.call(obj, prop) } }`},
		{Code: `(Object) => Object.prototype.hasOwnProperty.call(obj, prop)`},
		{Code: `({})`},
		{Code: `({}(obj, prop))`},
		{Code: `({}.hasOwnProperty)`},
		{Code: `({}.hasOwnProperty(prop))`},
		{Code: `({}.hasOwnProperty(obj, prop))`},
		{Code: `({}.hasOwnProperty.call)`},
		{Code: `({}).prototype.hasOwnProperty.call(a, b);`},
		{Code: `({}.foo.call(obj, prop))`},
		{Code: `({}.hasOwnProperty.foo(obj, prop))`},
		{Code: `({}[hasOwnProperty].call(obj, prop))`},
		{Code: `({}.hasOwnProperty[call](obj, prop))`},
		{Code: `({}).hasOwnProperty[call](object, property)`},
		{Code: `({})[hasOwnProperty].call(object, property)`},
		{Code: `class C { #hasOwnProperty; foo() { ({}.#hasOwnProperty.call(obj, prop)) } }`},
		{Code: `class C { #call; foo() { ({}.hasOwnProperty.#call(obj, prop)) } }`},
		{Code: `({ foo }.hasOwnProperty.call(obj, prop))`},
		{Code: `(Object) => ({}).hasOwnProperty.call(obj, prop)`},
		{Code: `
        let obj = {};
        Object.hasOwn(obj,"");
        `},
		{Code: `const hasProperty = Object.hasOwn(object, property);`},
		{Code: `/* global Object: off */
        ({}).hasOwnProperty.call(a, b);`},
	}, []InvalidTestCase{
		{
			Code:   `Object.hasOwnProperty.call(obj, 'foo')`,
			Output: `Object.hasOwn(obj, 'foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 39,
				},
			},
		},
		{
			Code:   `Object.hasOwnProperty.call(obj, property)`,
			Output: `Object.hasOwn(obj, property)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 42,
				},
			},
		},
		{
			Code:   `Object.prototype.hasOwnProperty.call(obj, 'foo')`,
			Output: `Object.hasOwn(obj, 'foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
		{
			Code:   `({}).hasOwnProperty.call(obj, 'foo')`,
			Output: `Object.hasOwn(obj, 'foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code: `Object/* comment */.prototype.hasOwnProperty.call(a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 56,
				},
			},
		},
		{
			Code:   `const hasProperty = Object.prototype.hasOwnProperty.call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 75,
				},
			},
		},
		{
			Code:   `const hasProperty = (( Object.prototype.hasOwnProperty.call(object, property) ));`,
			Output: `const hasProperty = (( Object.hasOwn(object, property) ));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 78,
				},
			},
		},
		{
			Code:   `const hasProperty = (( Object.prototype.hasOwnProperty.call ))(object, property);`,
			Output: `const hasProperty = (( Object.hasOwn ))(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 81,
				},
			},
		},
		{
			Code:   `const hasProperty = (( Object.prototype.hasOwnProperty )).call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 81,
				},
			},
		},
		{
			Code:   `const hasProperty = (( Object.prototype )).hasOwnProperty.call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 81,
				},
			},
		},
		{
			Code:   `const hasProperty = (( Object )).prototype.hasOwnProperty.call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 81,
				},
			},
		},
		{
			Code:   `const hasProperty = {}.hasOwnProperty.call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 61,
				},
			},
		},
		{
			Code:   `const hasProperty={}.hasOwnProperty.call(object, property);`,
			Output: `const hasProperty=Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 59,
				},
			},
		},
		{
			Code:   `const hasProperty = (( {}.hasOwnProperty.call(object, property) ));`,
			Output: `const hasProperty = (( Object.hasOwn(object, property) ));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    24,
					EndLine:   1,
					EndColumn: 64,
				},
			},
		},
		{
			Code:   `const hasProperty = (( {}.hasOwnProperty.call ))(object, property);`,
			Output: `const hasProperty = (( Object.hasOwn ))(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 67,
				},
			},
		},
		{
			Code:   `const hasProperty = (( {}.hasOwnProperty )).call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 67,
				},
			},
		},
		{
			Code:   `const hasProperty = (( {} )).hasOwnProperty.call(object, property);`,
			Output: `const hasProperty = Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 67,
				},
			},
		},
		{
			Code:   `function foo(){return {}.hasOwnProperty.call(object, property)}`,
			Output: `function foo(){return Object.hasOwn(object, property)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 63,
				},
			},
		},
		{
			Code:   `function foo(){return{}.hasOwnProperty.call(object, property)}`,
			Output: `function foo(){return Object.hasOwn(object, property)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 62,
				},
			},
		},
		{
			Code:   `function foo(){return/*comment*/{}.hasOwnProperty.call(object, property)}`,
			Output: `function foo(){return/*comment*/Object.hasOwn(object, property)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    33,
					EndLine:   1,
					EndColumn: 73,
				},
			},
		},
		{
			Code:   `async function foo(){return await{}.hasOwnProperty.call(object, property)}`,
			Output: `async function foo(){return await Object.hasOwn(object, property)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    34,
					EndLine:   1,
					EndColumn: 74,
				},
			},
		},
		{
			Code:   `async function foo(){return await/*comment*/{}.hasOwnProperty.call(object, property)}`,
			Output: `async function foo(){return await/*comment*/Object.hasOwn(object, property)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    45,
					EndLine:   1,
					EndColumn: 85,
				},
			},
		},
		{
			Code:   `for (const x of{}.hasOwnProperty.call(object, property).toString());`,
			Output: `for (const x of Object.hasOwn(object, property).toString());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 56,
				},
			},
		},
		{
			Code:   `for (const x of/*comment*/{}.hasOwnProperty.call(object, property).toString());`,
			Output: `for (const x of/*comment*/Object.hasOwn(object, property).toString());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 67,
				},
			},
		},
		{
			Code:   `for (const x in{}.hasOwnProperty.call(object, property).toString());`,
			Output: `for (const x in Object.hasOwn(object, property).toString());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 56,
				},
			},
		},
		{
			Code:   `for (const x in/*comment*/{}.hasOwnProperty.call(object, property).toString());`,
			Output: `for (const x in/*comment*/Object.hasOwn(object, property).toString());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 67,
				},
			},
		},
		{
			Code:   `function foo(){return({}.hasOwnProperty.call)(object, property)}`,
			Output: `function foo(){return(Object.hasOwn)(object, property)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 64,
				},
			},
		},
		{
			Code:   `Object['prototype']['hasOwnProperty']['call'](object, property);`,
			Output: `Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 64,
				},
			},
		},
		{
			Code:   "Object[`prototype`][`hasOwnProperty`][`call`](object, property);",
			Output: `Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 64,
				},
			},
		},
		{
			Code:   `Object['hasOwnProperty']['call'](object, property);`,
			Output: `Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 51,
				},
			},
		},
		{
			Code:   "Object[`hasOwnProperty`][`call`](object, property);",
			Output: `Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 51,
				},
			},
		},
		{
			Code:   `({})['hasOwnProperty']['call'](object, property);`,
			Output: `Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
		{
			Code:   "({})[`hasOwnProperty`][`call`](object, property);",
			Output: `Object.hasOwn(object, property);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "useHasOwn",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
	})
}
