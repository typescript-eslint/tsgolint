// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnexpectedMultilineRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-unexpected-multiline", []ValidTestCase{
		{Code: `(x || y).aFunction()`},
		{Code: `[a, b, c].forEach(doSomething)`},
		{Code: `var a = b;
(x || y).doSomething()`},
		{Code: `var a = b
;(x || y).doSomething()`},
		{Code: `var a = b
void (x || y).doSomething()`},
		{Code: `var a = b;
[1, 2, 3].forEach(console.log)`},
		{Code: `var a = b
void [1, 2, 3].forEach(console.log)`},
		{Code: `"abc\
(123)"`},
		{Code: `var a = (
(123)
)`},
		{Code: `f(
(x)
)`},
		{Code: `(
function () {}
)[1]`},
		{
			Code: `let x = function() {};
   ` + "`" + `hello` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let x = function() {}
x ` + "`" + `hello` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `String.raw ` + "`" + `Hi
${2+3}!` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `x
.y
z ` + "`" + `Valid Test Case` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `f(x
)` + "`" + `Valid Test Case` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `x.
y ` + "`" + `Valid Test Case` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `(x
)` + "`" + `Valid Test Case` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `
            foo
            / bar /2
        `},
		{Code: `
            foo
            / bar / mgy
        `},
		{Code: `
            foo
            / bar /
            gym
        `},
		{Code: `
            foo
            / bar
            / ygm
        `},
		{Code: `
            foo
            / bar /GYM
        `},
		{Code: `
            foo
            / bar / baz
        `},
		{Code: `foo /bar/g`},
		{Code: `
            foo
            /denominator/
            2
        `},
		{Code: `
            foo
            / /abc/
        `},
		{Code: `
            5 / (5
            / 5)
        `},
		{
			Code: `
                tag<generic>` + "`" + `
                    multiline
                ` + "`" + `;
            `,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `
                tag<
                  generic
                >` + "`" + `
                    multiline
                ` + "`" + `;
            `,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `
                tag<
                  generic
                >` + "`" + `multiline` + "`" + `;
            `,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `var a = b
  ?.(x || y).doSomething()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `var a = b
  ?.[a, b, c].forEach(doSomething)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `var a = b?.
  (x || y).doSomething()`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `var a = b?.
  [a, b, c].forEach(doSomething)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `class C { field1
[field2]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { field1
*gen() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { field1 = () => {}
[field2]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { field1 = () => {}
*gen() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `var a = b
(x || y).doSomething()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "function",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var a = (a || b)
(x || y).doSomething()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "function",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var a = (a || b)
(x).doSomething()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "function",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var a = b
[a, b, c].forEach(doSomething)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "property",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var a = b
    (x || y).doSomething()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "function",
					Line:      2,
					Column:    5,
					EndLine:   2,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `var a = b
  [a, b, c].forEach(doSomething)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "property",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `let x = function() {}
 ` + "`" + `hello` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "taggedTemplate",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `let x = function() {}
x
` + "`" + `hello` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "taggedTemplate",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `x
.y
z
` + "`" + `Invalid Test Case` + "`" + ``,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "taggedTemplate",
					Line:      4,
					Column:    1,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `
                foo
                / bar /gym
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "division",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                foo
                / bar /g
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "division",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                foo
                / bar /g.test(baz)
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "division",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                foo
                /bar/gimuygimuygimuy.test(baz)
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "division",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `
                foo
                /bar/s.test(baz)
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "division",
					Line:      3,
					Column:    17,
					EndLine:   3,
					EndColumn: 18,
				},
			},
		},
		{
			Code: `const x = aaaa<
  test
>/*
test
*/` + "`" + `foo` + "`" + ``,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "taggedTemplate",
					Line:      5,
					Column:    3,
					EndLine:   5,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `class C { field1 = obj
[field2]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "property",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `class C { field1 = function() {}
[field2]; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "property",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
	})
}
