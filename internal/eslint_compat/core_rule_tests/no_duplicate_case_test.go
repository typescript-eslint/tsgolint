// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoDuplicateCaseRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-duplicate-case", []ValidTestCase{
		{Code: `var a = 1; switch (a) {case 1: break; case 2: break; default: break;}`},
		{Code: `var a = 1; switch (a) {case 1: break; case '1': break; default: break;}`},
		{Code: `var a = 1; switch (a) {case 1: break; case true: break; default: break;}`},
		{Code: `var a = 1; switch (a) {default: break;}`},
		{Code: `var a = 1, p = {p: {p1: 1, p2: 1}}; switch (a) {case p.p.p1: break; case p.p.p2: break; default: break;}`},
		{Code: `var a = 1, f = function(b) { return b ? { p1: 1 } : { p1: 2 }; }; switch (a) {case f(true).p1: break; case f(true, false).p1: break; default: break;}`},
		{Code: `var a = 1, f = function(s) { return { p1: s } }; switch (a) {case f(a + 1).p1: break; case f(a + 2).p1: break; default: break;}`},
		{Code: `var a = 1, f = function(s) { return { p1: s } }; switch (a) {case f(a == 1 ? 2 : 3).p1: break; case f(a === 1 ? 2 : 3).p1: break; default: break;}`},
		{Code: `var a = 1, f1 = function() { return { p1: 1 } }, f2 = function() { return { p1: 2 } }; switch (a) {case f1().p1: break; case f2().p1: break; default: break;}`},
		{Code: `var a = [1,2]; switch(a.toString()){case ([1,2]).toString():break; case ([1]).toString():break; default:break;}`},
		{Code: `switch(a) { case a: break; } switch(a) { case a: break; }`},
		{Code: `switch(a) { case toString: break; }`},
	}, []InvalidTestCase{
		{
			Code: `var a = 1; switch (a) {case 1: break; case 1: break; case 2: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    39,
				},
			},
		},
		{
			Code: `var a = '1'; switch (a) {case '1': break; case '1': break; case '2': break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    43,
				},
			},
		},
		{
			Code: `var a = 1, one = 1; switch (a) {case one: break; case one: break; case 2: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    50,
				},
			},
		},
		{
			Code: `var a = 1, p = {p: {p1: 1, p2: 1}}; switch (a) {case p.p.p1: break; case p.p.p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    69,
				},
			},
		},
		{
			Code: `var a = 1, f = function(b) { return b ? { p1: 1 } : { p1: 2 }; }; switch (a) {case f(true).p1: break; case f(true).p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    103,
				},
			},
		},
		{
			Code: `var a = 1, f = function(s) { return { p1: s } }; switch (a) {case f(a + 1).p1: break; case f(a + 1).p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    87,
				},
			},
		},
		{
			Code: `var a = 1, f = function(s) { return { p1: s } }; switch (a) {case f(a === 1 ? 2 : 3).p1: break; case f(a === 1 ? 2 : 3).p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    97,
				},
			},
		},
		{
			Code: `var a = 1, f1 = function() { return { p1: 1 } }; switch (a) {case f1().p1: break; case f1().p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    83,
				},
			},
		},
		{
			Code: `var a = [1, 2]; switch(a.toString()){case ([1, 2]).toString():break; case ([1, 2]).toString():break; default:break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    70,
				},
			},
		},
		{
			Code: `switch (a) { case a: case a: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    22,
				},
			},
		},
		{
			Code: `switch (a) { case a: break; case b: break; case a: break; case c: break; case a: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    44,
				},
				{
					MessageId: "unexpected",
					Column:    74,
				},
			},
		},
		{
			Code: `var a = 1, p = {p: {p1: 1, p2: 1}}; switch (a) {case p.p.p1: break; case p. p // comment
 .p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    69,
				},
			},
		},
		{
			Code: `var a = 1, p = {p: {p1: 1, p2: 1}}; switch (a) {case p .p
/* comment */
.p1: break; case p.p.p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
					Column:    13,
				},
			},
		},
		{
			Code: `var a = 1, p = {p: {p1: 1, p2: 1}}; switch (a) {case p .p
/* comment */
.p1: break; case p. p // comment
 .p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
					Column:    13,
				},
			},
		},
		{
			Code: `var a = 1, p = {p: {p1: 1, p2: 1}}; switch (a) {case p.p.p1: break; case p. p // comment
 .p1: break; case p .p
/* comment */
.p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
					Column:    69,
				},
				{
					MessageId: "unexpected",
					Line:      2,
					Column:    14,
				},
			},
		},
		{
			Code: `var a = 1, f = function(s) { return { p1: s } }; switch (a) {case f(a + 1).p1: break; case f(a+1).p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    87,
				},
			},
		},
		{
			Code: `var a = 1, f = function(s) { return { p1: s } }; switch (a) {case f(
a + 1 // comment
).p1: break; case f(a+1)
.p1: break; default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      3,
					Column:    14,
				},
			},
		},
	})
}
