// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSpaceUnaryOpsRule(t *testing.T) {
	RunRuleTester(t, "{}", "space-unary-ops", []ValidTestCase{
		{
			Code:    `++this.a`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `--this.a`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `this.a++`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `this.a--`,
			Options: "[{\"words\":true}]",
		},
		{Code: `foo .bar++`},
		{
			Code:    `foo.bar --`,
			Options: "[{\"nonwords\":true}]",
		},
		{
			Code:    `delete foo.bar`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `delete foo["bar"]`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `delete foo.bar`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `delete(foo.bar)`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `new Foo`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `new Foo()`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `new [foo][0]`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `new[foo][0]`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `typeof foo`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `typeof{foo:true}`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `typeof {foo:true}`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `typeof (foo)`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `typeof(foo)`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `typeof!foo`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `void 0`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `(void 0)`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `(void (0))`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `void foo`,
			Options: "[{\"words\":true}]",
		},
		{
			Code:    `void foo`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `void(foo)`,
			Options: "[{\"words\":false}]",
		},
		{
			Code:    `-1`,
			Options: "[{\"nonwords\":false}]",
		},
		{
			Code:    `!foo`,
			Options: "[{\"nonwords\":false}]",
		},
		{
			Code:    `!!foo`,
			Options: "[{\"nonwords\":false}]",
		},
		{
			Code:    `foo++`,
			Options: "[{\"nonwords\":false}]",
		},
		{
			Code:    `foo ++`,
			Options: "[{\"nonwords\":true}]",
		},
		{
			Code:    `++foo`,
			Options: "[{\"nonwords\":false}]",
		},
		{
			Code:    `++ foo`,
			Options: "[{\"nonwords\":true}]",
		},
		{
			Code:            `function *foo () { yield (0) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { yield +1 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { yield* 0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { yield * 0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { (yield)*0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { (yield) * 0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { yield*0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo() { yield *0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `async function foo() { await {foo: 1} }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function foo() { await {bar: 2} }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function foo() { await{baz: 3} }`,
			Options:         "[{\"words\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function foo() { await {qux: 4} }`,
			Options:         "[{\"words\":false,\"overrides\":{\"await\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:            `async function foo() { await{foo: 5} }`,
			Options:         "[{\"words\":true,\"overrides\":{\"await\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code:    `foo++`,
			Options: "[{\"nonwords\":true,\"overrides\":{\"++\":false}}]",
		},
		{
			Code:    `foo++`,
			Options: "[{\"nonwords\":false,\"overrides\":{\"++\":false}}]",
		},
		{
			Code:    `++foo`,
			Options: "[{\"nonwords\":true,\"overrides\":{\"++\":false}}]",
		},
		{
			Code:    `++foo`,
			Options: "[{\"nonwords\":false,\"overrides\":{\"++\":false}}]",
		},
		{
			Code:    `!foo`,
			Options: "[{\"nonwords\":true,\"overrides\":{\"!\":false}}]",
		},
		{
			Code:    `!foo`,
			Options: "[{\"nonwords\":false,\"overrides\":{\"!\":false}}]",
		},
		{
			Code:    `new foo`,
			Options: "[{\"words\":true,\"overrides\":{\"new\":false}}]",
		},
		{
			Code:    `new foo`,
			Options: "[{\"words\":false,\"overrides\":{\"new\":false}}]",
		},
		{
			Code:            `function *foo () { yield(0) }`,
			Options:         "[{\"words\":true,\"overrides\":{\"yield\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function *foo () { yield(0) }`,
			Options:         "[{\"words\":false,\"overrides\":{\"yield\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { #x; *foo(bar) { yield#x in bar; } }`,
			Options:         "[{\"words\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `delete(foo.bar)`,
			Output:  `delete (foo.bar)`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `delete(foo["bar"]);`,
			Output:  `delete (foo["bar"]);`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `delete (foo.bar)`,
			Output:  `delete(foo.bar)`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `new(Foo)`,
			Output:  `new (Foo)`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `new (Foo)`,
			Output:  `new(Foo)`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `new(Foo())`,
			Output:  `new (Foo())`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `new [foo][0]`,
			Output:  `new[foo][0]`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `typeof(foo)`,
			Output:  `typeof (foo)`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `typeof (foo)`,
			Output:  `typeof(foo)`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `typeof[foo]`,
			Output:  `typeof [foo]`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `typeof [foo]`,
			Output:  `typeof[foo]`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `typeof{foo:true}`,
			Output:  `typeof {foo:true}`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `typeof {foo:true}`,
			Output:  `typeof{foo:true}`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `typeof!foo`,
			Output:  `typeof !foo`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `void(0);`,
			Output:  `void (0);`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `void(foo);`,
			Output:  `void (foo);`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `void[foo];`,
			Output:  `void [foo];`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `void{a:0};`,
			Output:  `void {a:0};`,
			Options: "[{\"words\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `void (foo)`,
			Output:  `void(foo)`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `void [foo]`,
			Output:  `void[foo]`,
			Options: "[{\"words\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
				},
			},
		},
		{
			Code:    `! foo`,
			Output:  `!foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `!foo`,
			Output:  `! foo`,
			Options: "[{\"nonwords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `!! foo`,
			Output:  `!!foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
					Line:      1,
					Column:    2,
				},
			},
		},
		{
			Code:    `!!foo`,
			Output:  `!! foo`,
			Options: "[{\"nonwords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
					Line:      1,
					Column:    2,
				},
			},
		},
		{
			Code:    `- 1`,
			Output:  `-1`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `-1`,
			Output:  `- 1`,
			Options: "[{\"nonwords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `foo++`,
			Output:  `foo ++`,
			Options: "[{\"nonwords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beforeUnaryExpressions",
				},
			},
		},
		{
			Code:    `foo ++`,
			Output:  `foo++`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `++ foo`,
			Output:  `++foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `++foo`,
			Output:  `++ foo`,
			Options: "[{\"nonwords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `foo .bar++`,
			Output:  `foo .bar ++`,
			Options: "[{\"nonwords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beforeUnaryExpressions",
				},
			},
		},
		{
			Code:   `foo.bar --`,
			Output: `foo.bar--`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code:    `+ +foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `+ ++foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `- -foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `- --foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `+ -foo`,
			Output:  `+-foo`,
			Options: "[{\"nonwords\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:            `function *foo() { yield(0) }`,
			Output:          `function *foo() { yield (0) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `function *foo() { yield (0) }`,
			Output:          `function *foo() { yield(0) }`,
			Options:         "[{\"words\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `function *foo() { yield+0 }`,
			Output:          `function *foo() { yield +0 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:    `foo++`,
			Output:  `foo ++`,
			Options: "[{\"nonwords\":true,\"overrides\":{\"++\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beforeUnaryExpressions",
				},
			},
		},
		{
			Code:    `foo++`,
			Output:  `foo ++`,
			Options: "[{\"nonwords\":false,\"overrides\":{\"++\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "beforeUnaryExpressions",
				},
			},
		},
		{
			Code:    `++foo`,
			Output:  `++ foo`,
			Options: "[{\"nonwords\":true,\"overrides\":{\"++\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `++foo`,
			Output:  `++ foo`,
			Options: "[{\"nonwords\":false,\"overrides\":{\"++\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `!foo`,
			Output:  `! foo`,
			Options: "[{\"nonwords\":true,\"overrides\":{\"!\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `!foo`,
			Output:  `! foo`,
			Options: "[{\"nonwords\":false,\"overrides\":{\"!\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "operator",
				},
			},
		},
		{
			Code:    `new(Foo)`,
			Output:  `new (Foo)`,
			Options: "[{\"words\":true,\"overrides\":{\"new\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:    `new(Foo)`,
			Output:  `new (Foo)`,
			Options: "[{\"words\":false,\"overrides\":{\"new\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
				},
			},
		},
		{
			Code:            `function *foo() { yield(0) }`,
			Output:          `function *foo() { yield (0) }`,
			Options:         "[{\"words\":true,\"overrides\":{\"yield\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `function *foo() { yield(0) }`,
			Output:          `function *foo() { yield (0) }`,
			Options:         "[{\"words\":false,\"overrides\":{\"yield\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `async function foo() { await{foo: 'bar'} }`,
			Output:          `async function foo() { await {foo: 'bar'} }`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `async function foo() { await{baz: 'qux'} }`,
			Output:          `async function foo() { await {baz: 'qux'} }`,
			Options:         "[{\"words\":false,\"overrides\":{\"await\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wordOperator",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `async function foo() { await {foo: 1} }`,
			Output:          `async function foo() { await{foo: 1} }`,
			Options:         "[{\"words\":false}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `async function foo() { await {bar: 2} }`,
			Output:          `async function foo() { await{bar: 2} }`,
			Options:         "[{\"words\":true,\"overrides\":{\"await\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `class C { #x; *foo(bar) { yield #x in bar; } }`,
			Output:          `class C { #x; *foo(bar) { yield#x in bar; } }`,
			Options:         "[{\"words\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfterWord",
					Line:      1,
					Column:    27,
				},
			},
		},
	})
}
