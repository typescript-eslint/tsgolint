// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestIndentLegacyRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "indent-legacy", []ValidTestCase{
		{
			Code: `bridge.callHandler(
  'getAppVersion', 'test23', function(responseData) {
    window.ah.mobileAppVersion = responseData;
  }
);
`,
			Options: "[2]",
		},
		{
			Code: `var a = [
  , /*{
  }, */{
    name: 'foo',
  }
];
`,
			Options: "[2]",
		},
		{
			Code: `bridge.callHandler(
  'getAppVersion', 'test23', function(responseData) {
    window.ah.mobileAppVersion = responseData;
  });
`,
			Options: "[2]",
		},
		{
			Code: `bridge.callHandler(
  'getAppVersion',
  null,
  function responseCallback(responseData) {
    window.ah.mobileAppVersion = responseData;
  }
);
`,
			Options: "[2]",
		},
		{
			Code: `bridge.callHandler(
  'getAppVersion',
  null,
  function responseCallback(responseData) {
    window.ah.mobileAppVersion = responseData;
  });
`,
			Options: "[2]",
		},
		{
			Code: `function doStuff(keys) {
    _.forEach(
        keys,
        key => {
            doSomething(key);
        }
   );
}
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `example(
    function () {
        console.log('example');
    }
);
`,
			Options: "[4]",
		},
		{
			Code: `let foo = somethingList
    .filter(x => {
        return x;
    })
    .map(x => {
        return 100 * x;
    });
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var x = 0 &&
    {
        a: 1,
        b: 2
    };`,
			Options: "[4]",
		},
		{
			Code: `var x = 0 &&
	{
		a: 1,
		b: 2
	};`,
			Options: "[\"tab\"]",
		},
		{
			Code: `var x = 0 &&
    {
        a: 1,
        b: 2
    }||
    {
        c: 3,
        d: 4
    };`,
			Options: "[4]",
		},
		{
			Code: `var x = [
    'a',
    'b',
    'c'
];`,
			Options: "[4]",
		},
		{
			Code: `var x = ['a',
    'b',
    'c',
];`,
			Options: "[4]",
		},
		{
			Code:    `var x = 0 && 1;`,
			Options: "[4]",
		},
		{
			Code:    `var x = 0 && { a: 1, b: 2 };`,
			Options: "[4]",
		},
		{
			Code: `var x = 0 &&
    (
        1
    );`,
			Options: "[4]",
		},
		{
			Code: `require('http').request({hostname: 'localhost',
  port: 80}, function(res) {
  res.end();
});
`,
			Options: "[2]",
		},
		{
			Code: `function test() {
  return client.signUp(email, PASSWORD, { preVerified: true })
    .then(function (result) {
      // hi
    })
    .then(function () {
      return FunctionalHelpers.clearBrowserState(self, {
        contentServer: true,
        contentServer1: true
      });
    });
}`,
			Options: "[2]",
		},
		{
			Code: `it('should... some lengthy test description that is forced to be' +
  'wrapped into two lines since the line length limit is set', () => {
  expect(true).toBe(true);
});
`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function test() {
    return client.signUp(email, PASSWORD, { preVerified: true })
        .then(function (result) {
            var x = 1;
            var y = 1;
        }, function(err){
            var o = 1 - 2;
            var y = 1 - 2;
            return true;
        })
}`,
			Options: "[4]",
		},
		{
			Code: `function test() {
    return client.signUp(email, PASSWORD, { preVerified: true })
    .then(function (result) {
        var x = 1;
        var y = 1;
    }, function(err){
        var o = 1 - 2;
        var y = 1 - 2;
        return true;
    });
}`,
			Options: "[4,{\"MemberExpression\":0}]",
		},
		{
			Code:    `// hi`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var Command = function() {
  var fileList = [],
      files = []

  files.concat(fileList)
};
`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2,\"let\":2,\"const\":3}}]",
		},
		{
			Code:    `  `,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `if(data) {
  console.log('hi');
  b = true;};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `foo = () => {
  console.log('hi');
  return true;};`,
			Options:         "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function test(data) {
  console.log('hi');
  return true;};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var test = function(data) {
  console.log('hi');
};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `arr.forEach(function(data) {
  otherdata.forEach(function(zero) {
    console.log('hi');
  }) });`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `a = [
    ,3
]`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `[
  ['gzip', 'gunzip'],
  ['gzip', 'unzip'],
  ['deflate', 'inflate'],
  ['deflateRaw', 'inflateRaw'],
].forEach(function(method) {
  console.log(method);
});
`,
			Options: "[2,{\"SwitchCase\":1,\"VariableDeclarator\":2}]",
		},
		{
			Code: `test(123, {
    bye: {
        hi: [1,
            {
                b: 2
            }
        ]
    }
});`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var xyz = 2,
    lmn = [
        {
            a: 1
        }
    ];`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `lmn = [{
    a: 1
},
{
    b: 2
},{
    x: 2
}];`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc({
    test: [
        [
            c,
            xyz,
            2
        ].join(',')
    ]
});`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc = {
  test: [
    [
      c,
      xyz,
      2
    ]
  ]
};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc(
  {
    a: 1,
    b: 2
  }
);`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc({
    a: 1,
    b: 2
});`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc = 
  [
    c,
    xyz,
    {
      a: 1,
      b: 2
    }
  ];`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc = [
  c,
  xyz,
  {
    a: 1,
    b: 2
  }
];`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc = 5,
    c = 2,
    xyz = 
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc = 
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = new abc({
        a: 1,
        b: 2
    }),
    b = 2;`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = 2,
  c = {
    a: 1,
    b: 2
  },
  b = 2;`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var x = 2,
    y = {
      a: 1,
      b: 2
    },
    b = 2;`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var e = {
      a: 1,
      b: 2
    },
    b = 2;`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = {
  a: 1,
  b: 2
};`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `function test() {
  if (true ||
             false){
    console.log(val);
  }
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `for (var val in obj)
  if (true)
    console.log(val);`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `if(true)
  if (true)
    if (true)
      console.log(val);`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `function hi(){     var a = 1;
  y++;                   x++;
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `for(;length > index; index++)if(NO_HOLES || index in self){
  x++;
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `function test(){
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
  }
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var geometry = 2,
rotate = 2;`,
			Options: "[2,{\"VariableDeclarator\":0}]",
		},
		{
			Code: `var geometry,
    rotate;`,
			Options: "[4,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var geometry,
	rotate;`,
			Options: "[\"tab\",{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var geometry,
  rotate;`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var geometry,
    rotate;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `let geometry,
    rotate;`,
			Options:         "[2,{\"VariableDeclarator\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const geometry = 2,
    rotate = 3;`,
			Options:         "[2,{\"VariableDeclarator\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth,
  height, rotate;`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code:    `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth;`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `if (1 < 2){
//hi sd 
}`,
			Options: "[2]",
		},
		{
			Code: `while (1 < 2){
  //hi sd 
}`,
			Options: "[2]",
		},
		{
			Code:    `while (1 < 2) console.log('hi');`,
			Options: "[2]",
		},
		{
			Code: `[a, b,
    c].forEach((index) => {
        index;
    });
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `[a, b, c].forEach((index) => {
    index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `[a, b, c].forEach(function(index){
    return index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `switch (x) {
    case "foo":
        a();
        break;
    case "bar":
        switch (y) {
            case "1":
                break;
            case "2":
                a = 6;
                break;
        }
    case "test":
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
		},
		{
			Code: `switch (x) {
        case "foo":
            a();
            break;
        case "bar":
            switch (y) {
                    case "1":
                        break;
                    case "2":
                        a = 6;
                        break;
            }
        case "test":
            break;
}`,
			Options: "[4,{\"SwitchCase\":2}]",
		},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    switch(x){
    case '1':
        break;
    case '2':
        a = 6;
        break;
    }
}`},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    if(x){
        a = 2;
    }
    else{
        a = 6;
    }
}`},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    if(x){
        a = 2;
    }
    else
        a = 6;
}`},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    a(); break;
case "baz":
    a(); break;
}`},
		{Code: `switch (0) {
}`},
		{Code: `function foo() {
    var a = "a";
    switch(a) {
    case "a":
        return "A";
    case "b":
        return "B";
    }
}
foo();`},
		{
			Code: `switch(value){
    case "1":
    case "2":
        a();
        break;
    default:
        a();
        break;
}
switch(value){
    case "1":
        a();
        break;
    case "2":
        break;
    default:
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
		},
		{Code: `var obj = {foo: 1, bar: 2};
with (obj) {
    console.log(foo + bar);
}
`},
		{Code: `if (a) {
    (1 + 2 + 3);
}`},
		{Code: `switch(value){ default: a(); break; }
`},
		{
			Code: `import {addons} from 'react/addons'
import React from 'react'`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var a = 1,
    b = 2,
    c = 3;
`,
			Options: "[4]",
		},
		{
			Code: `var a = 1
   ,b = 2
   ,c = 3;
`,
			Options: "[4]",
		},
		{
			Code: `while (1 < 2) console.log('hi')
`,
			Options: "[2]",
		},
		{
			Code: `function salutation () {
  switch (1) {
    case 0: return console.log('hi')
    case 1: return console.log('hey')
  }
}
`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `var items = [
  {
    foo: 'bar'
  }
];
`,
			Options: "[2,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `const a = 1,
      b = 2;
const items1 = [
  {
    foo: 'bar'
  }
];
const items2 = Items(
  {
    foo: 'bar'
  }
);
`,
			Options:         "[2,{\"VariableDeclarator\":3}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const geometry = 2,
      rotate = 3;
var a = 1,
  b = 2;
let light = true,
    shadow = false;`,
			Options:         "[2,{\"VariableDeclarator\":{\"const\":3,\"let\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const abc = 5,
      c = 2,
      xyz = 
      {
        a: 1,
        b: 2
      };
let abc2 = 5,
  c2 = 2,
  xyz2 = 
  {
    a: 1,
    b: 2
  };
var abc3 = 5,
    c3 = 2,
    xyz3 = 
    {
      a: 1,
      b: 2
    };
`,
			Options:         "[2,{\"VariableDeclarator\":{\"var\":2,\"const\":3},\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `module.exports =
{
  'Unit tests':
  {
    rootPath: './',
    environment: 'node',
    tests:
    [
      'test/test-*.js'
    ],
    sources:
    [
      '*.js',
      'test/**.js'
    ]
  }
};`,
			Options: "[2]",
		},
		{
			Code: `var path     = require('path')
  , crypto    = require('crypto')
  ;
`,
			Options: "[2]",
		},
		{Code: `var a = 1
   ,b = 2
   ;`},
		{
			Code: `export function create (some,
                        argument) {
  return Object.create({
    a: some,
    b: argument
  });
};`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export function create (id, xfilter, rawType,
                        width=defaultWidth, height=defaultHeight,
                        footerHeight=defaultFooterHeight,
                        padding=defaultPadding) {
  // ... function body, indented two spaces
}
`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var obj = {
  foo: function () {
    return new p()
      .then(function (ok) {
        return ok;
      }, function () {
        // ignore things
      });
  }
};
`,
			Options: "[2]",
		},
		{
			Code: `a.b()
  .c(function(){
    var a;
  }).d.e;
`,
			Options: "[2]",
		},
		{
			Code: `const YO = 'bah',
      TE = 'mah'

var res,
    a = 5,
    b = 4
`,
			Options:         "[2,{\"VariableDeclarator\":{\"var\":2,\"let\":2,\"const\":3}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const YO = 'bah',
      TE = 'mah'

var res,
    a = 5,
    b = 4

if (YO) console.log(TE)`,
			Options:         "[2,{\"VariableDeclarator\":{\"var\":2,\"let\":2,\"const\":3}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var foo = 'foo',
  bar = 'bar',
  baz = function() {
      
  }

function hello () {
    
}
`,
			Options: "[2]",
		},
		{
			Code: `var obj = {
  send: function () {
    return P.resolve({
      type: 'POST'
    })
      .then(function () {
        return true;
      }, function () {
        return false;
      });
  }
};
`,
			Options: "[2]",
		},
		{
			Code: `var obj = {
  send: function () {
    return P.resolve({
      type: 'POST'
    })
    .then(function () {
      return true;
    }, function () {
      return false;
    });
  }
};
`,
			Options: "[2,{\"MemberExpression\":0}]",
		},
		{
			Code: `const someOtherFunction = argument => {
        console.log(argument);
    },
    someOtherValue = 'someOtherValue';
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `[
  'a',
  'b'
].sort().should.deepEqual([
  'x',
  'y'
]);
`,
			Options: "[2]",
		},
		{
			Code: `var a = 1,
    B = class {
      constructor(){}
      a(){}
      get b(){}
    };`,
			Options:         "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var a = 1,
    B = 
    class {
      constructor(){}
      a(){}
      get b(){}
    },
    c = 3;`,
			Options:         "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{
    constructor(){}
    a(){}
    get b(){}
}`,
			Options:         "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var A = class {
    constructor(){}
    a(){}
    get b(){}
}`,
			Options:         "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var a = {
  some: 1
, name: 2
};
`,
			Options: "[2]",
		},
		{
			Code: `a.c = {
    aa: function() {
        'test1';
        return 'aa';
    }
    , bb: function() {
        return this.bb();
    }
};
`,
			Options: "[4]",
		},
		{
			Code: `var a =
{
    actions:
    [
        {
            name: 'compile'
        }
    ]
};
`,
			Options: "[4,{\"VariableDeclarator\":0,\"SwitchCase\":1}]",
		},
		{
			Code: `var a =
[
    {
        name: 'compile'
    }
];
`,
			Options: "[4,{\"VariableDeclarator\":0,\"SwitchCase\":1}]",
		},
		{
			Code: `const func = function (opts) {
    return Promise.resolve()
    .then(() => {
        [
            'ONE', 'TWO'
        ].forEach(command => { doSomething(); });
    });
};`,
			Options:         "[4,{\"MemberExpression\":0}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const func = function (opts) {
    return Promise.resolve()
        .then(() => {
            [
                'ONE', 'TWO'
            ].forEach(command => { doSomething(); });
        });
};`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var haveFun = function () {
    SillyFunction(
        {
            value: true,
        },
        {
            _id: true,
        }
    );
};`,
			Options: "[4]",
		},
		{
			Code: `var haveFun = function () {
    new SillyFunction(
        {
            value: true,
        },
        {
            _id: true,
        }
    );
};`,
			Options: "[4]",
		},
		{
			Code: `let object1 = {
  doThing() {
    return _.chain([])
      .map(v => (
        {
          value: true,
        }
      ))
      .value();
  }
};`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class Foo
  extends Bar {
  baz() {}
}`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class Foo extends
  Bar {
  baz() {}
}`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `fs.readdirSync(path.join(__dirname, '../rules')).forEach(name => {
  files[name] = foo;
});`,
			Options:         "[2,{\"outerIIFEBody\":0}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `(function(){
function foo(x) {
  return x + 1;
}
})();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `(function(){
        function foo(x) {
            return x + 1;
        }
})();`,
			Options: "[4,{\"outerIIFEBody\":2}]",
		},
		{
			Code: `(function(x, y){
function foo(x) {
  return x + 1;
}
})(1, 2);`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `(function(){
function foo(x) {
  return x + 1;
}
}());`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `!function(){
function foo(x) {
  return x + 1;
}
}();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `!function(){
			function foo(x) {
				return x + 1;
			}
}();`,
			Options: "[\"tab\",{\"outerIIFEBody\":3}]",
		},
		{
			Code: `var out = function(){
  function fooVar(x) {
    return x + 1;
  }
};`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `var ns = function(){
function fooVar(x) {
  return x + 1;
}
}();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `ns = function(){
function fooVar(x) {
  return x + 1;
}
}();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `var ns = (function(){
function fooVar(x) {
  return x + 1;
}
}(x));`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `var ns = (function(){
        function fooVar(x) {
            return x + 1;
        }
}(x));`,
			Options: "[4,{\"outerIIFEBody\":2}]",
		},
		{
			Code: `var obj = {
  foo: function() {
    return true;
  }
};`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `while (
  function() {
    return true;
  }()) {

  x = x + 1;
};`,
			Options: "[2,{\"outerIIFEBody\":20}]",
		},
		{
			Code: `(() => {
function foo(x) {
  return x + 1;
}
})();`,
			Options:         "[2,{\"outerIIFEBody\":0}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
}`,
			Options: "[\"tab\",{\"outerIIFEBody\":0}]",
		},
		{
			Code: `;(() => {
function foo(x) {
  return x + 1;
}
})();`,
			Options:         "[2,{\"outerIIFEBody\":0}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `if(data) {
  console.log('hi');
}`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code:    `Buffer.length`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
    .indexOf('a')
    .toString()`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer.
    length`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
    .foo
    .bar`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
	.foo
	.bar`,
			Options: "[\"tab\",{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
    .foo
    .bar`,
			Options: "[2,{\"MemberExpression\":2}]",
		},
		{
			Code: `MemberExpression
.is  .off    .by .default();`,
			Options: "[4]",
		},
		{
			Code: `foo = bar.baz()
        .bip();`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `if (foo) {
  bar();
} else if (baz) {
  foobar();
} else if (qux) {
  qux();
}`,
			Options: "[2]",
		},
		{
			Code: `function foo(aaa,
  bbb, ccc, ddd) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":2}}]",
		},
		{
			Code: `function foo(aaa, bbb,
      ccc, ddd) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":3,\"body\":1}}]",
		},
		{
			Code: `function foo(aaa,
    bbb,
    ccc) {
            bar();
}`,
			Options: "[4,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":3}}]",
		},
		{
			Code: `function foo(aaa,
             bbb, ccc,
             ddd, eee, fff) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":1}}]",
		},
		{
			Code: `function foo(aaa, bbb)
{
      bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":3}}]",
		},
		{
			Code: `function foo(
  aaa,
  bbb) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":2}}]",
		},
		{
			Code: `var foo = function(aaa,
    bbb,
    ccc,
    ddd) {
bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":2,\"body\":0}}]",
		},
		{
			Code: `var foo = function(aaa,
  bbb,
  ccc) {
                    bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":1,\"body\":10}}]",
		},
		{
			Code: `var foo = function(aaa,
                   bbb, ccc, ddd,
                   eee, fff) {
    bar();
}`,
			Options: "[4,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":1}}]",
		},
		{
			Code: `var foo = function(
  aaa, bbb, ccc,
  ddd, eee) {
      bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":3}}]",
		},
		{
			Code: `function foo() {
  bar();
  	baz();
	   			  			  	   	qux();
}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  function bar() {
    baz();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1}}]",
		},
		{
			Code: `function foo() {
  bar();
   		}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  function bar(baz,
      qux) {
    foobar();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1,\"parameters\":2}}]",
		},
		{
			Code: `function foo() {
  var bar = function(baz,
        qux) {
    foobar();
  };
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":3}}]",
		},
		{
			Code: `function foo() {
  return (bar === 1 || bar === 2 &&
    (/Function/.test(grandparent.type))) &&
    directives(parent).indexOf(node) >= 0;
}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  return (bar === 1 || bar === 2) &&
    (z === 3 || z === 4);
}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  return ((bar === 1 || bar === 2) &&
    (z === 3 || z === 4)
  );
}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  return ((bar === 1 || bar === 2) &&
    (z === 3 || z === 4));
}`,
			Options: "[2]",
		},
		{
			Code: `foo(
  bar,
  baz,
  qux
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":1}}]",
		},
		{
			Code: `foo(
	bar,
	baz,
	qux
);`,
			Options: "[\"tab\",{\"CallExpression\":{\"arguments\":1}}]",
		},
		{
			Code: `foo(bar,
        baz,
        qux);`,
			Options: "[4,{\"CallExpression\":{\"arguments\":2}}]",
		},
		{
			Code: `foo(
bar,
baz,
qux
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":0}}]",
		},
		{
			Code: `foo(bar,
    baz,
    qux
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `foo(bar, baz,
    qux, barbaz,
    barqux, bazqux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `foo(
                        bar, baz,
                        qux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `foo(bar,
        1 + 2,
        !baz,
        new Car('!')
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":4}}]",
		},
		{
			Code: `var foo = function() {
  return bar(
    [{
    }].concat(baz)
  );
};`,
			Options: "[2]",
		},
		{
			Code: `return (
    foo
);`,
			LanguageOptions: "{\"sourceType\":\"script\",\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `return (
    foo
)`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{Code: `var foo = [
    bar,
    baz
]`},
		{Code: `var foo = [bar,
    baz,
    qux
]`},
		{
			Code: `var foo = [bar,
baz,
qux
]`,
			Options: "[2,{\"ArrayExpression\":0}]",
		},
		{
			Code: `var foo = [bar,
                baz,
                qux
]`,
			Options: "[2,{\"ArrayExpression\":8}]",
		},
		{
			Code: `var foo = [bar,
           baz,
           qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [bar,
           baz, qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [
        { bar: 1,
          baz: 2 },
        { bar: 3,
          qux: 4 }
]`,
			Options: "[4,{\"ArrayExpression\":2,\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `var foo = {
bar: 1,
baz: 2
};`,
			Options: "[2,{\"ObjectExpression\":0}]",
		},
		{
			Code: `var foo = { foo: 1, bar: 2,
            baz: 3 }`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [
        {
            foo: 1
        }
]`,
			Options: "[4,{\"ArrayExpression\":2}]",
		},
		{
			Code: `function foo() {
  [
          foo
  ]
}`,
			Options: "[2,{\"ArrayExpression\":4}]",
		},
		{
			Code: `[
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `[
]`,
			Options: "[2,{\"ArrayExpression\":1}]",
		},
		{
			Code: `{
}`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `{
}`,
			Options: "[2,{\"ObjectExpression\":1}]",
		},
		{
			Code: `var foo = [
  [
    1
  ]
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [ 1,
            [
              2
            ]
];`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = bar(1,
              [ 2,
                3
              ]
);`,
			Options: "[4,{\"ArrayExpression\":\"first\",\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `var foo =
    [
    ]()`,
			Options: "[4,{\"CallExpression\":{\"arguments\":\"first\"},\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `const lambda = foo => {
  Object.assign({},
    filterName,
    {
      display
    }
  );}`,
			Options:         "[2,{\"ObjectExpression\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const lambda = foo => {
  Object.assign({},
    filterName,
    {
      display
    }
  );}`,
			Options:         "[2,{\"ObjectExpression\":\"first\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var foo = function() {
	window.foo('foo',
		{
			foo: 'bar',			bar: {
				foo: 'bar'
			}
		}
	);
}`,
			Options: "[\"tab\"]",
		},
		{
			Code: `echo = spawn('cmd.exe',
             ['foo', 'bar',
              'baz']);`,
			Options: "[2,{\"ArrayExpression\":\"first\",\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
	}, []InvalidTestCase{
		{
			Code: `var a = b;
if (a) {
b();
}
`,
			Output: `var a = b;
if (a) {
  b();
}
`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `require('http').request({hostname: 'localhost',
                  port: 80}, function(res) {
  res.end();
});
`,
			Output: `require('http').request({hostname: 'localhost',
  port: 80}, function(res) {
  res.end();
});
`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `if (array.some(function(){
  return true;
})) {
a++; // ->
  b++;
    c++; // <-
}
`,
			Output: `if (array.some(function(){
  return true;
})) {
  a++; // ->
  b++;
  c++; // <-
}
`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      6,
				},
			},
		},
		{
			Code: `if (a){
	b=c;
		c=d;
e=f;
}`,
			Output: `if (a){
	b=c;
	c=d;
	e=f;
}`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `if (a){
    b=c;
      c=d;
 e=f;
}`,
			Output: `if (a){
    b=c;
    c=d;
    e=f;
}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `if (a) {
  var b = c;
  var d = e
    * f;
    var e = f; // <-
// NO ERROR: DON'T VALIDATE EMPTY OR COMMENT ONLY LINES
  function g() {
    if (h) {
      var i = j;
      } // <-
    } // <-

  while (k) l++;
  while (m) {
  n--; // ->
    } // <-

  do {
    o = p +
  q; // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    o = p +
    q;
    } while(r); // <-

  for (var s in t) {
    u++;
  }

    for (;;) { // <- Fix this when issue #3737 gets resolved
      v++; // <-
  }

  if ( w ) {
    x++;
  } else if (y) {
      z++; // <-
    aa++;
    } else { // <-
  bb++; // ->
} // ->
}

/**/var b; // NO ERROR: single line multi-line comments followed by code is OK
/*
 *
 */ var b; // ERROR: multi-line comments followed by code is not OK

var arr = [
  a,
  b,
  c,
  function (){
    d
    }, // <-
  {},
  {
    a: b,
    c: d,
    d: e
  },
  [
    f,
    g,
    h,
    i
  ],
  [j]
];

var obj = {
  a: {
    b: {
      c: d,
      e: f,
      g: h +
    i // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    }
  },
  g: [
    h,
    i,
    j,
    k
  ]
};

var arrObject = {a:[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]};

var objArray = [{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}];

var arrArray = [[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]];

var objObject = {a:{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}};


switch (a) {
  case 'a':
  var a = 'b'; // ->
    break;
  case 'b':
    var a = 'b';
    break;
  case 'c':
      var a = 'b'; // <-
    break;
  case 'd':
    var a = 'b';
  break; // ->
  case 'f':
    var a = 'b';
    break;
  case 'g':     {
    var a = 'b';
    break;
  }
  case 'z':
  default:
      break; // <-
}

a.b('hi')
   .c(a.b()) // <-
   .d(); // <-

if ( a ) {
  if ( b ) {
d.e(f) // ->
  .g() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
  .h(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS

    i.j(m)
      .k() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
      .l(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS

      n.o(p) // <-
        .q() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
        .r(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
  }
}

var a = b,
  c = function () {
  h = i; // ->
    j = k;
      l = m; // <-
  },
  e = {
    f: g,
    n: o,
    p: q
  },
  r = [
    s,
    t,
    u
  ];

var a = function () {
b = c; // ->
  d = e;
    f = g; // <-
};

function c(a, b) {
  if (a || (a &&
            b)) { // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    return d;
  }
}

if ( a
  || b ) {
var x; // ->
  var c,
    d = function(a,
                  b) {
    a; // ->
      b;
        c; // <-
    }
}


a({
  d: 1
});

a(
1
);

a(
  b({
    d: 1
  })
);

a(
  b(
    c({
      d: 1,
      e: 1,
      f: 1
    })
  )
);

a({ d: 1 });

aa(
   b({ // NO ERROR: aligned with previous opening paren
     c: d,
     e: f,
     f: g
   })
);

aaaaaa(
  b,
  c,
  {
    d: a
  }
);

a(b, c,
  d, e,
    f, g  // NO ERROR: alignment of arguments of callExpression not checked
  );  // NO ERROR: this has nothing to do with indentation, this is CallExpression spacing

a(
  ); // NO ERROR: this has nothing to do with indentation, this is CallExpression spacing

aaaaaa(
  b,
  c, {
    d: a
  }, {
    e: f
  }
);

a.b()
  .c(function(){
    var a;
  }).d.e;

if (a == 'b') {
  if (c && d) e = f
  else g('h').i('j')
}

a = function (b, c) {
  return a(function () {
    var d = e
    var f = g
    var h = i

    if (!j) k('l', (m = n))
    if (o) p
    else if (q) r
  })
}

var a = function() {
  "b"
    .replace(/a/, "a")
    .replace(/bc?/, function(e) {
      return "b" + (e.f === 2 ? "c" : "f");
    })
    .replace(/d/, "d");
};

$(b)
  .on('a', 'b', function() { $(c).e('f'); })
  .on('g', 'h', function() { $(i).j('k'); });

a
  .b('c',
           'd'); // NO ERROR: this has nothing to do with indentation, this is CallExpression spacing

a
  .b('c', [ 'd', function(e) {
    e++;
  }]);

var a = function() {
      a++;
    b++; // <-
        c++; // <-
    },
    b;

var b = [
      a,
      b,
      c
    ],
    c;

var c = {
      a: 1,
      b: 2,
      c: 3
    },
    d;

// holes in arrays indentation
x = [
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1
];

try {
  a++;
    b++; // <-
c++; // ->
} catch (d) {
  e++;
    f++; // <-
g++; // ->
} finally {
  h++;
    i++; // <-
j++; // ->
}

if (array.some(function(){
  return true;
})) {
a++; // ->
  b++;
    c++; // <-
}

var a = b.c(function() {
      d++;
    }),
    e;

switch (true) {
  case (a
  && b):
case (c // ->
&& d):
    case (e // <-
    && f):
  case (g
&& h):
      var i = j; // <-
    var k = l;
  var m = n; // ->
}

if (a) {
  b();
}
else {
c(); // ->
  d();
    e(); // <-
}

if (a) b();
else {
c(); // ->
  d();
    e(); // <-
}

if (a) {
  b();
} else c();

if (a) {
  b();
}
else c();

a();

if( "very very long multi line" +
      "with weird indentation" ) {
  b();
a(); // ->
    c(); // <-
}

a( "very very long multi line" +
    "with weird indentation", function() {
  b();
a(); // ->
    c(); // <-
});

a = function(content, dom) {
  b();
    c(); // <-
d(); // ->
};

a = function(content, dom) {
      b();
        c(); // <-
    d(); // ->
    };

a = function(content, dom) {
    b(); // ->
    };

a = function(content, dom) {
b(); // ->
    };

a('This is a terribly long description youll ' +
  'have to read', function () {
  b();
  c();
});

if (
  array.some(function(){
    return true;
  })
) {
a++; // ->
  b++;
    c++; // <-
}

function c(d) {
  return {
    e: function(f, g) {
    }
  };
}

function a(b) {
  switch(x) {
    case 1:
      if (foo) {
        return 5;
      }
  }
}

function a(b) {
  switch(x) {
    case 1:
      c;
  }
}

function a(b) {
  switch(x) {
    case 1: c;
  }
}

function test() {
  var a = 1;
  {
    a();
  }
}

{
  a();
}

function a(b) {
  switch(x) {
    case 1:
        {
        a();
      }
      break;
    default:
      {
        b();
        }
  }
}

switch (a) {
  default:
    if (b)
      c();
}

function test(x) {
  switch (x) {
    case 1:
      return function() {
        var a = 5;
        return a;
      };
  }
}

switch (a) {
  default:
    if (b)
      c();
}
`,
			Output: `if (a) {
  var b = c;
  var d = e
    * f;
  var e = f; // <-
// NO ERROR: DON'T VALIDATE EMPTY OR COMMENT ONLY LINES
  function g() {
    if (h) {
      var i = j;
    } // <-
  } // <-

  while (k) l++;
  while (m) {
    n--; // ->
  } // <-

  do {
    o = p +
  q; // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    o = p +
    q;
  } while(r); // <-

  for (var s in t) {
    u++;
  }

  for (;;) { // <- Fix this when issue #3737 gets resolved
      v++; // <-
    }

  if ( w ) {
    x++;
  } else if (y) {
    z++; // <-
    aa++;
  } else { // <-
    bb++; // ->
  } // ->
}

/**/var b; // NO ERROR: single line multi-line comments followed by code is OK
/*
 *
*/ var b; // ERROR: multi-line comments followed by code is not OK

var arr = [
  a,
  b,
  c,
  function (){
    d
  }, // <-
  {},
  {
    a: b,
    c: d,
    d: e
  },
  [
    f,
    g,
    h,
    i
  ],
  [j]
];

var obj = {
  a: {
    b: {
      c: d,
      e: f,
      g: h +
    i // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    }
  },
  g: [
    h,
    i,
    j,
    k
  ]
};

var arrObject = {a:[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]};

var objArray = [{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}];

var arrArray = [[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]];

var objObject = {a:{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}};


switch (a) {
  case 'a':
    var a = 'b'; // ->
    break;
  case 'b':
    var a = 'b';
    break;
  case 'c':
    var a = 'b'; // <-
    break;
  case 'd':
    var a = 'b';
    break; // ->
  case 'f':
    var a = 'b';
    break;
  case 'g':     {
    var a = 'b';
    break;
  }
  case 'z':
  default:
    break; // <-
}

a.b('hi')
  .c(a.b()) // <-
  .d(); // <-

if ( a ) {
  if ( b ) {
    d.e(f) // ->
  .g() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
  .h(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS

    i.j(m)
      .k() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
      .l(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS

    n.o(p) // <-
        .q() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
        .r(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
  }
}

var a = b,
  c = function () {
    h = i; // ->
    j = k;
    l = m; // <-
  },
  e = {
    f: g,
    n: o,
    p: q
  },
  r = [
    s,
    t,
    u
  ];

var a = function () {
  b = c; // ->
  d = e;
  f = g; // <-
};

function c(a, b) {
  if (a || (a &&
            b)) { // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    return d;
  }
}

if ( a
  || b ) {
  var x; // ->
  var c,
    d = function(a,
                  b) {
      a; // ->
      b;
      c; // <-
    }
}


a({
  d: 1
});

a(
1
);

a(
  b({
    d: 1
  })
);

a(
  b(
    c({
      d: 1,
      e: 1,
      f: 1
    })
  )
);

a({ d: 1 });

aa(
   b({ // NO ERROR: aligned with previous opening paren
     c: d,
     e: f,
     f: g
   })
);

aaaaaa(
  b,
  c,
  {
    d: a
  }
);

a(b, c,
  d, e,
    f, g  // NO ERROR: alignment of arguments of callExpression not checked
  );  // NO ERROR: this has nothing to do with indentation, this is CallExpression spacing

a(
  ); // NO ERROR: this has nothing to do with indentation, this is CallExpression spacing

aaaaaa(
  b,
  c, {
    d: a
  }, {
    e: f
  }
);

a.b()
  .c(function(){
    var a;
  }).d.e;

if (a == 'b') {
  if (c && d) e = f
  else g('h').i('j')
}

a = function (b, c) {
  return a(function () {
    var d = e
    var f = g
    var h = i

    if (!j) k('l', (m = n))
    if (o) p
    else if (q) r
  })
}

var a = function() {
  "b"
    .replace(/a/, "a")
    .replace(/bc?/, function(e) {
      return "b" + (e.f === 2 ? "c" : "f");
    })
    .replace(/d/, "d");
};

$(b)
  .on('a', 'b', function() { $(c).e('f'); })
  .on('g', 'h', function() { $(i).j('k'); });

a
  .b('c',
           'd'); // NO ERROR: this has nothing to do with indentation, this is CallExpression spacing

a
  .b('c', [ 'd', function(e) {
    e++;
  }]);

var a = function() {
    a++;
    b++; // <-
    c++; // <-
  },
  b;

var b = [
    a,
    b,
    c
  ],
  c;

var c = {
    a: 1,
    b: 2,
    c: 3
  },
  d;

// holes in arrays indentation
x = [
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1
];

try {
  a++;
  b++; // <-
  c++; // ->
} catch (d) {
  e++;
  f++; // <-
  g++; // ->
} finally {
  h++;
  i++; // <-
  j++; // ->
}

if (array.some(function(){
  return true;
})) {
  a++; // ->
  b++;
  c++; // <-
}

var a = b.c(function() {
    d++;
  }),
  e;

switch (true) {
  case (a
  && b):
  case (c // ->
&& d):
  case (e // <-
    && f):
  case (g
&& h):
    var i = j; // <-
    var k = l;
    var m = n; // ->
}

if (a) {
  b();
}
else {
  c(); // ->
  d();
  e(); // <-
}

if (a) b();
else {
  c(); // ->
  d();
  e(); // <-
}

if (a) {
  b();
} else c();

if (a) {
  b();
}
else c();

a();

if( "very very long multi line" +
      "with weird indentation" ) {
  b();
  a(); // ->
  c(); // <-
}

a( "very very long multi line" +
    "with weird indentation", function() {
  b();
  a(); // ->
  c(); // <-
});

a = function(content, dom) {
  b();
  c(); // <-
  d(); // ->
};

a = function(content, dom) {
  b();
  c(); // <-
  d(); // ->
};

a = function(content, dom) {
  b(); // ->
};

a = function(content, dom) {
  b(); // ->
};

a('This is a terribly long description youll ' +
  'have to read', function () {
  b();
  c();
});

if (
  array.some(function(){
    return true;
  })
) {
  a++; // ->
  b++;
  c++; // <-
}

function c(d) {
  return {
    e: function(f, g) {
    }
  };
}

function a(b) {
  switch(x) {
    case 1:
      if (foo) {
        return 5;
      }
  }
}

function a(b) {
  switch(x) {
    case 1:
      c;
  }
}

function a(b) {
  switch(x) {
    case 1: c;
  }
}

function test() {
  var a = 1;
  {
    a();
  }
}

{
  a();
}

function a(b) {
  switch(x) {
    case 1:
      {
          a();
        }
      break;
    default:
      {
        b();
      }
  }
}

switch (a) {
  default:
    if (b)
      c();
}

function test(x) {
  switch (x) {
    case 1:
      return function() {
        var a = 5;
        return a;
      };
  }
}

switch (a) {
  default:
    if (b)
      c();
}
`,
			Options: "[2,{\"SwitchCase\":1,\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      5,
				},
				{
					MessageId: "expected",
					Line:      10,
				},
				{
					MessageId: "expected",
					Line:      11,
				},
				{
					MessageId: "expected",
					Line:      15,
				},
				{
					MessageId: "expected",
					Line:      16,
				},
				{
					MessageId: "expected",
					Line:      23,
				},
				{
					MessageId: "expected",
					Line:      29,
				},
				{
					MessageId: "expected",
					Line:      31,
				},
				{
					MessageId: "expected",
					Line:      36,
				},
				{
					MessageId: "expected",
					Line:      38,
				},
				{
					MessageId: "expected",
					Line:      39,
				},
				{
					MessageId: "expected",
					Line:      40,
				},
				{
					MessageId: "expected",
					Line:      46,
				},
				{
					MessageId: "expected",
					Line:      54,
				},
				{
					MessageId: "expected",
					Line:      114,
				},
				{
					MessageId: "expected",
					Line:      120,
				},
				{
					MessageId: "expected",
					Line:      124,
				},
				{
					MessageId: "expected",
					Line:      134,
				},
				{
					MessageId: "expected",
					Line:      138,
				},
				{
					MessageId: "expected",
					Line:      139,
				},
				{
					MessageId: "expected",
					Line:      143,
				},
				{
					MessageId: "expected",
					Line:      151,
				},
				{
					MessageId: "expected",
					Line:      159,
				},
				{
					MessageId: "expected",
					Line:      161,
				},
				{
					MessageId: "expected",
					Line:      175,
				},
				{
					MessageId: "expected",
					Line:      177,
				},
				{
					MessageId: "expected",
					Line:      189,
				},
				{
					MessageId: "expected",
					Line:      193,
				},
				{
					MessageId: "expected",
					Line:      195,
				},
				{
					MessageId: "expected",
					Line:      304,
				},
				{
					MessageId: "expected",
					Line:      306,
				},
				{
					MessageId: "expected",
					Line:      307,
				},
				{
					MessageId: "expected",
					Line:      308,
				},
				{
					MessageId: "expected",
					Line:      311,
				},
				{
					MessageId: "expected",
					Line:      312,
				},
				{
					MessageId: "expected",
					Line:      313,
				},
				{
					MessageId: "expected",
					Line:      314,
				},
				{
					MessageId: "expected",
					Line:      315,
				},
				{
					MessageId: "expected",
					Line:      318,
				},
				{
					MessageId: "expected",
					Line:      319,
				},
				{
					MessageId: "expected",
					Line:      320,
				},
				{
					MessageId: "expected",
					Line:      321,
				},
				{
					MessageId: "expected",
					Line:      322,
				},
				{
					MessageId: "expected",
					Line:      326,
				},
				{
					MessageId: "expected",
					Line:      327,
				},
				{
					MessageId: "expected",
					Line:      328,
				},
				{
					MessageId: "expected",
					Line:      329,
				},
				{
					MessageId: "expected",
					Line:      330,
				},
				{
					MessageId: "expected",
					Line:      331,
				},
				{
					MessageId: "expected",
					Line:      332,
				},
				{
					MessageId: "expected",
					Line:      333,
				},
				{
					MessageId: "expected",
					Line:      334,
				},
				{
					MessageId: "expected",
					Line:      335,
				},
				{
					MessageId: "expected",
					Line:      340,
				},
				{
					MessageId: "expected",
					Line:      341,
				},
				{
					MessageId: "expected",
					Line:      344,
				},
				{
					MessageId: "expected",
					Line:      345,
				},
				{
					MessageId: "expected",
					Line:      348,
				},
				{
					MessageId: "expected",
					Line:      349,
				},
				{
					MessageId: "expected",
					Line:      355,
				},
				{
					MessageId: "expected",
					Line:      357,
				},
				{
					MessageId: "expected",
					Line:      361,
				},
				{
					MessageId: "expected",
					Line:      362,
				},
				{
					MessageId: "expected",
					Line:      363,
				},
				{
					MessageId: "expected",
					Line:      368,
				},
				{
					MessageId: "expected",
					Line:      370,
				},
				{
					MessageId: "expected",
					Line:      374,
				},
				{
					MessageId: "expected",
					Line:      376,
				},
				{
					MessageId: "expected",
					Line:      383,
				},
				{
					MessageId: "expected",
					Line:      385,
				},
				{
					MessageId: "expected",
					Line:      390,
				},
				{
					MessageId: "expected",
					Line:      392,
				},
				{
					MessageId: "expected",
					Line:      409,
				},
				{
					MessageId: "expected",
					Line:      410,
				},
				{
					MessageId: "expected",
					Line:      416,
				},
				{
					MessageId: "expected",
					Line:      417,
				},
				{
					MessageId: "expected",
					Line:      422,
				},
				{
					MessageId: "expected",
					Line:      423,
				},
				{
					MessageId: "expected",
					Line:      427,
				},
				{
					MessageId: "expected",
					Line:      428,
				},
				{
					MessageId: "expected",
					Line:      429,
				},
				{
					MessageId: "expected",
					Line:      430,
				},
				{
					MessageId: "expected",
					Line:      433,
				},
				{
					MessageId: "expected",
					Line:      434,
				},
				{
					MessageId: "expected",
					Line:      437,
				},
				{
					MessageId: "expected",
					Line:      438,
				},
				{
					MessageId: "expected",
					Line:      451,
				},
				{
					MessageId: "expected",
					Line:      453,
				},
				{
					MessageId: "expected",
					Line:      499,
				},
				{
					MessageId: "expected",
					Line:      500,
				},
				{
					MessageId: "expected",
					Line:      501,
				},
				{
					MessageId: "expected",
					Line:      506,
				},
			},
		},
		{
			Code: `switch(value){
    case "1":
        a();
    break;
    case "2":
        a();
    break;
    default:
        a();
        break;
}`,
			Output: `switch(value){
    case "1":
        a();
        break;
    case "2":
        a();
        break;
    default:
        a();
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      7,
				},
			},
		},
		{
			Code: `var x = 0 &&
    {
       a: 1,
          b: 2
    };`,
			Output: `var x = 0 &&
    {
        a: 1,
        b: 2
    };`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `switch(value){
    case "1":
        a();
        break;
    case "2":
        a();
        break;
    default:
    break;
}`,
			Output: `switch(value){
    case "1":
        a();
        break;
    case "2":
        a();
        break;
    default:
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      9,
				},
			},
		},
		{
			Code: `switch(value){
    case "1":
    case "2":
        a();
        break;
    default:
        break;
}
switch(value){
    case "1":
    break;
    case "2":
        a();
    break;
    default:
        a();
    break;
}`,
			Output: `switch(value){
    case "1":
    case "2":
        a();
        break;
    default:
        break;
}
switch(value){
    case "1":
        break;
    case "2":
        a();
        break;
    default:
        a();
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      11,
				},
				{
					MessageId: "expected",
					Line:      14,
				},
				{
					MessageId: "expected",
					Line:      17,
				},
			},
		},
		{
			Code: `switch(value){
case "1":
        a();
        break;
    case "2":
        break;
    default:
        break;
}`,
			Output: `switch(value){
case "1":
    a();
    break;
case "2":
    break;
default:
    break;
}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
				{
					MessageId: "expected",
					Line:      6,
				},
				{
					MessageId: "expected",
					Line:      7,
				},
				{
					MessageId: "expected",
					Line:      8,
				},
			},
		},
		{
			Code: `var obj = {foo: 1, bar: 2};
with (obj) {
console.log(foo + bar);
}
`,
			Output: `var obj = {foo: 1, bar: 2};
with (obj) {
    console.log(foo + bar);
}
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `switch (a) {
case '1':
b();
break;
default:
c();
break;
}
`,
			Output: `switch (a) {
    case '1':
        b();
        break;
    default:
        c();
        break;
}
`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
				{
					MessageId: "expected",
					Line:      6,
				},
				{
					MessageId: "expected",
					Line:      7,
				},
			},
		},
		{
			Code: `var foo = function(){
    foo
          .bar
}`,
			Output: `var foo = function(){
    foo
        .bar
}`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = function(){
    foo
             .bar
}`,
			Output: `var foo = function(){
    foo
            .bar
}`,
			Options: "[4,{\"MemberExpression\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = () => {
    foo
             .bar
}`,
			Output: `var foo = () => {
    foo
            .bar
}`,
			Options:         "[4,{\"MemberExpression\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `TestClass.prototype.method = function () {
  return Promise.resolve(3)
      .then(function (x) {
        return x;
      });
};`,
			Output: `TestClass.prototype.method = function () {
  return Promise.resolve(3)
    .then(function (x) {
        return x;
      });
};`,
			Options:         "[2,{\"MemberExpression\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `while (a) 
b();`,
			Output: `while (a) 
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `for (;;) 
b();`,
			Output: `for (;;) 
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `for (a in x) 
b();`,
			Output: `for (a in x) 
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `do 
b();
while(true)`,
			Output: `do 
    b();
while(true)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `if(true) 
b();`,
			Output: `if(true) 
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var test = {
      a: 1,
    b: 2
    };
`,
			Output: `var test = {
  a: 1,
  b: 2
};
`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = function() {
      a++;
    b++;
          c++;
    },
    b;
`,
			Output: `var a = function() {
        a++;
        b++;
        c++;
    },
    b;
`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = 1,
b = 2,
c = 3;
`,
			Output: `var a = 1,
    b = 2,
    c = 3;
`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `[a, b, 
c].forEach((index) => {
  index;
});
`,
			Output: `[a, b, 
    c].forEach((index) => {
    index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `[a, b, 
c].forEach(function(index){
  return index;
});
`,
			Output: `[a, b, 
    c].forEach(function(index){
    return index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `[a, b, 
c].forEach(function(index){
    return index;
});
`,
			Output: `[a, b, 
    c].forEach(function(index){
    return index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `[a, b, c].forEach((index) => {
  index;
});
`,
			Output: `[a, b, c].forEach((index) => {
    index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `[a, b, c].forEach(function(index){
  return index;
});
`,
			Output: `[a, b, c].forEach(function(index){
    return index;
});
`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var x = ['a',
         'b',
         'c'
];`,
			Output: `var x = ['a',
    'b',
    'c'
];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var x = [
         'a',
         'b',
         'c'
];`,
			Output: `var x = [
    'a',
    'b',
    'c'
];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var x = [
         'a',
         'b',
         'c',
'd'];`,
			Output: `var x = [
    'a',
    'b',
    'c',
    'd'];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `var x = [
         'a',
         'b',
         'c'
  ];`,
			Output: `var x = [
    'a',
    'b',
    'c'
];`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `while (1 < 2)
console.log('foo')
  console.log('bar')`,
			Output: `while (1 < 2)
  console.log('foo')
console.log('bar')`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function salutation () {
  switch (1) {
  case 0: return console.log('hi')
    case 1: return console.log('hey')
  }
}
`,
			Output: `function salutation () {
  switch (1) {
    case 0: return console.log('hi')
    case 1: return console.log('hey')
  }
}
`,
			Options: "[2,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth,
height, rotate;`,
			Output: `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth,
  height, rotate;`,
			Options: "[2,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `switch (a) {
case '1':
b();
break;
default:
c();
break;
}
`,
			Output: `switch (a) {
        case '1':
            b();
            break;
        default:
            c();
            break;
}
`,
			Options: "[4,{\"SwitchCase\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
				{
					MessageId: "expected",
					Line:      6,
				},
				{
					MessageId: "expected",
					Line:      7,
				},
			},
		},
		{
			Code: `var geometry,
rotate;`,
			Output: `var geometry,
  rotate;`,
			Options: "[2,{\"VariableDeclarator\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var geometry,
  rotate;`,
			Output: `var geometry,
    rotate;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var geometry,
	rotate;`,
			Output: `var geometry,
		rotate;`,
			Options: "[\"tab\",{\"VariableDeclarator\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `let geometry,
  rotate;`,
			Output: `let geometry,
    rotate;`,
			Options:         "[2,{\"VariableDeclarator\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `if(true)
  if (true)
    if (true)
    console.log(val);`,
			Output: `if(true)
  if (true)
    if (true)
      console.log(val);`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = {
    a: 1,
    b: 2
}`,
			Output: `var a = {
  a: 1,
  b: 2
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = [
    a,
    b
]`,
			Output: `var a = [
  a,
  b
]`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `let a = [
    a,
    b
]`,
			Output: `let a = [
  a,
  b
]`,
			Options:         "[2,{\"VariableDeclarator\":{\"let\":2},\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = new Test({
      a: 1
  }),
    b = 4;
`,
			Output: `var a = new Test({
        a: 1
    }),
    b = 4;
`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = new Test({
      a: 1
    }),
    b = 4;
const c = new Test({
      a: 1
    }),
    d = 4;
`,
			Output: `var a = new Test({
      a: 1
    }),
    b = 4;
const c = new Test({
    a: 1
  }),
  d = 4;
`,
			Options:         "[2,{\"VariableDeclarator\":{\"var\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      6,
				},
				{
					MessageId: "expected",
					Line:      7,
				},
				{
					MessageId: "expected",
					Line:      8,
				},
			},
		},
		{
			Code: `var abc = 5,
    c = 2,
    xyz = 
     {
       a: 1,
        b: 2
     };`,
			Output: `var abc = 5,
    c = 2,
    xyz = 
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
				{
					MessageId: "expected",
					Line:      6,
				},
				{
					MessageId: "expected",
					Line:      7,
				},
			},
		},
		{
			Code: `var abc = 
     {
       a: 1,
        b: 2
     };`,
			Output: `var abc = 
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `var path     = require('path')
 , crypto    = require('crypto')
;
`,
			Output: `var path     = require('path')
 , crypto    = require('crypto')
 ;
`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = 1
   ,b = 2
;`,
			Output: `var a = 1
   ,b = 2
   ;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `class A{
  constructor(){}
    a(){}
    get b(){}
}`,
			Output: `class A{
    constructor(){}
    a(){}
    get b(){}
}`,
			Options:         "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var A = class {
  constructor(){}
    a(){}
  get b(){}
};`,
			Output: `var A = class {
    constructor(){}
    a(){}
    get b(){}
};`,
			Options:         "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = 1,
    B = class {
    constructor(){}
      a(){}
      get b(){}
    };`,
			Output: `var a = 1,
    B = class {
      constructor(){}
      a(){}
      get b(){}
    };`,
			Options:         "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `{
    if(a){
        foo();
    }
  else{
        bar();
    }
}
`,
			Output: `{
    if(a){
        foo();
    }
    else{
        bar();
    }
}
`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `{
    if(a){
        foo();
    }
  else
        bar();
    
}
`,
			Output: `{
    if(a){
        foo();
    }
    else
        bar();
    
}
`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `{
    if(a)
        foo();
  else
        bar();
}
`,
			Output: `{
    if(a)
        foo();
    else
        bar();
}
`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `(function(){
  function foo(x) {
    return x + 1;
  }
})();`,
			Output: `(function(){
function foo(x) {
    return x + 1;
  }
})();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `(function(){
    function foo(x) {
        return x + 1;
    }
})();`,
			Output: `(function(){
        function foo(x) {
        return x + 1;
    }
})();`,
			Options: "[4,{\"outerIIFEBody\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `if(data) {
console.log('hi');
}`,
			Output: `if(data) {
  console.log('hi');
}`,
			Options: "[2,{\"outerIIFEBody\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var ns = function(){
    function fooVar(x) {
        return x + 1;
    }
}(x);`,
			Output: `var ns = function(){
        function fooVar(x) {
        return x + 1;
    }
}(x);`,
			Options: "[4,{\"outerIIFEBody\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var obj = {
  foo: function() {
  return true;
  }()
};
`,
			Output: `var obj = {
  foo: function() {
    return true;
  }()
};
`,
			Options: "[2,{\"outerIIFEBody\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `typeof function() {
    function fooVar(x) {
      return x + 1;
    }
}();`,
			Output: `typeof function() {
  function fooVar(x) {
      return x + 1;
    }
}();`,
			Options: "[2,{\"outerIIFEBody\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `{
	!function(x) {
				return x + 1;
	}()
};`,
			Output: `{
	!function(x) {
		return x + 1;
	}()
};`,
			Options: "[\"tab\",{\"outerIIFEBody\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `Buffer
.toString()`,
			Output: `Buffer
    .toString()`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `Buffer
    .indexOf('a')
.toString()`,
			Output: `Buffer
    .indexOf('a')
    .toString()`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `Buffer.
length`,
			Output: `Buffer.
    length`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `Buffer.
		length`,
			Output: `Buffer.
	length`,
			Options: "[\"tab\",{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `Buffer
  .foo
  .bar`,
			Output: `Buffer
    .foo
    .bar`,
			Options: "[2,{\"MemberExpression\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) foobar();
  else if (qux) qux();`,
			Output: `if (foo) bar();
else if (baz) foobar();
else if (qux) qux();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) foobar();
  else qux();`,
			Output: `if (foo) bar();
else if (baz) foobar();
else qux();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `foo();
  if (baz) foobar();
  else qux();`,
			Output: `foo();
if (baz) foobar();
else qux();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) foobar();
     else if (bip) {
       qux();
     }`,
			Output: `if (foo) bar();
else if (baz) foobar();
else if (bip) {
       qux();
     }`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) {
    foobar();
     } else if (boop) {
       qux();
     }`,
			Output: `if (foo) bar();
else if (baz) {
  foobar();
} else if (boop) {
       qux();
     }`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo(aaa,
    bbb, ccc, ddd) {
      bar();
}`,
			Output: `function foo(aaa,
  bbb, ccc, ddd) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo(aaa, bbb,
  ccc, ddd) {
bar();
}`,
			Output: `function foo(aaa, bbb,
      ccc, ddd) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":3,\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo(aaa,
        bbb,
  ccc) {
      bar();
}`,
			Output: `function foo(aaa,
    bbb,
    ccc) {
            bar();
}`,
			Options: "[4,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo(aaa,
  bbb, ccc,
                   ddd, eee, fff) {
   bar();
}`,
			Output: `function foo(aaa,
             bbb, ccc,
             ddd, eee, fff) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo(aaa, bbb)
{
bar();
}`,
			Output: `function foo(aaa, bbb)
{
      bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo(
aaa,
    bbb) {
bar();
}`,
			Output: `function foo(
aaa,
bbb) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = function(aaa,
  bbb,
    ccc,
      ddd) {
  bar();
}`,
			Output: `var foo = function(aaa,
    bbb,
    ccc,
    ddd) {
bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":2,\"body\":0}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `var foo = function(aaa,
   bbb,
 ccc) {
  bar();
}`,
			Output: `var foo = function(aaa,
  bbb,
  ccc) {
                    bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":1,\"body\":10}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = function(aaa,
  bbb, ccc, ddd,
                        eee, fff) {
        bar();
}`,
			Output: `var foo = function(aaa,
                   bbb, ccc, ddd,
                   eee, fff) {
    bar();
}`,
			Options: "[4,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = function(
aaa, bbb, ccc,
    ddd, eee) {
  bar();
}`,
			Output: `var foo = function(
aaa, bbb, ccc,
ddd, eee) {
      bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = bar;
			var baz = qux;`,
			Output: `var foo = bar;
var baz = qux;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() {
	bar();
  baz();
              qux();
}`,
			Output: `function foo() {
	bar();
	baz();
	qux();
}`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
  bar();
		}`,
			Output: `function foo() {
  bar();
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
  function bar() {
        baz();
  }
}`,
			Output: `function foo() {
  function bar() {
    baz();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
  function bar(baz,
    qux) {
    foobar();
  }
}`,
			Output: `function foo() {
  function bar(baz,
      qux) {
    foobar();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1,\"parameters\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
  var bar = function(baz,
          qux) {
    foobar();
  };
}`,
			Output: `function foo() {
  var bar = function(baz,
        qux) {
    foobar();
  };
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `{
    try {
    }
catch (err) {
    }
finally {
    }
}`,
			Output: `{
    try {
    }
    catch (err) {
    }
    finally {
    }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
				{
					MessageId: "expected",
					Line:      6,
				},
			},
		},
		{
			Code: `{
    do {
    }
while (true)
}`,
			Output: `{
    do {
    }
    while (true)
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
  return (
    1
    )
}`,
			Output: `function foo() {
  return (
    1
  )
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
  return (
    1
    );
}`,
			Output: `function foo() {
  return (
    1
  );
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function test(){
  switch(length){
    case 1: return function(a){
    return fn.call(that, a);
    };
  }
}`,
			Output: `function test(){
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
  }
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
   return 1
}`,
			Output: `function foo() {
  return 1
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() {
   return 1;
}`,
			Output: `function foo() {
  return 1;
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `foo(
bar,
  baz,
    qux);`,
			Output: `foo(
  bar,
  baz,
  qux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `foo(
	bar,
	baz);`,
			Output: `foo(
    bar,
    baz);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(bar,
		baz,
		qux);`,
			Output: `foo(bar,
	baz,
	qux);`,
			Options: "[\"tab\",{\"CallExpression\":{\"arguments\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(bar, baz,
         qux);`,
			Output: `foo(bar, baz,
    qux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `foo(
          bar,
    baz);`,
			Output: `foo(
          bar,
          baz);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(bar,
  1 + 2,
              !baz,
        new Car('!')
);`,
			Output: `foo(bar,
      1 + 2,
      !baz,
      new Car('!')
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `return (
    foo
    );`,
			Output: `return (
    foo
);`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `return (
    foo
    )`,
			Output: `return (
    foo
)`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) {
        /* comment */bar();
}`,
			Output: `if (foo) {
    /* comment */bar();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `foo('bar',
        /** comment */{
        ok: true    });`,
			Output: `foo('bar',
    /** comment */{
        ok: true    });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var foo = [
           bar,
  baz
          ]`,
			Output: `var foo = [
    bar,
    baz
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = [bar,
baz,
    qux
]`,
			Output: `var foo = [bar,
    baz,
    qux
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var foo = [bar,
  baz,
  qux
]`,
			Output: `var foo = [bar,
baz,
qux
]`,
			Options: "[2,{\"ArrayExpression\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = [bar,
  baz,
  qux
]`,
			Output: `var foo = [bar,
                baz,
                qux
]`,
			Options: "[2,{\"ArrayExpression\":8}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = [bar,
    baz,
    qux
]`,
			Output: `var foo = [bar,
           baz,
           qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = [bar,
    baz, qux
]`,
			Output: `var foo = [bar,
           baz, qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `var foo = [
        { bar: 1,
            baz: 2 },
        { bar: 3,
            qux: 4 }
]`,
			Output: `var foo = [
        { bar: 1,
          baz: 2 },
        { bar: 3,
          qux: 4 }
]`,
			Options: "[4,{\"ArrayExpression\":2,\"ObjectExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      3,
				},
				{
					MessageId: "expected",
					Line:      5,
				},
			},
		},
		{
			Code: `var foo = {
  bar: 1,
  baz: 2
};`,
			Output: `var foo = {
bar: 1,
baz: 2
};`,
			Options: "[2,{\"ObjectExpression\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
				{
					MessageId: "expected",
					Line:      3,
				},
			},
		},
		{
			Code: `var quux = { foo: 1, bar: 2,
baz: 3 }`,
			Output: `var quux = { foo: 1, bar: 2,
             baz: 3 }`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() {
    [
            foo
    ]
}`,
			Output: `function foo() {
  [
            foo
    ]
}`,
			Options: "[2,{\"ArrayExpression\":4}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
		{
			Code: `echo = spawn('cmd.exe',
            ['foo', 'bar',
             'baz']);`,
			Output: `echo = spawn('cmd.exe',
             ['foo', 'bar',
             'baz']);`,
			Options: "[2,{\"ArrayExpression\":\"first\",\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
					Line:      2,
				},
			},
		},
	})
}
