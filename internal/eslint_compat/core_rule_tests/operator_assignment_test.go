// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestOperatorAssignmentRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "operator-assignment", []ValidTestCase{
		{Code: `x = y`},
		{Code: `x = y + x`},
		{Code: `x += x + y`},
		{Code: `x = (x + y) - z`},
		{Code: `x -= y`},
		{Code: `x = y - x`},
		{Code: `x *= x`},
		{Code: `x = y * z`},
		{Code: `x = (x * y) * z`},
		{Code: `x = y / x`},
		{Code: `x /= y`},
		{Code: `x %= y`},
		{Code: `x <<= y`},
		{Code: `x >>= x >> y`},
		{Code: `x >>>= y`},
		{Code: `x &= y`},
		{Code: `x **= y`},
		{Code: `x ^= y ^ z`},
		{Code: `x |= x | y`},
		{Code: `x = x && y`},
		{Code: `x = x || y`},
		{Code: `x = x < y`},
		{Code: `x = x > y`},
		{Code: `x = x <= y`},
		{Code: `x = x >= y`},
		{Code: `x = x instanceof y`},
		{Code: `x = x in y`},
		{Code: `x = x == y`},
		{Code: `x = x != y`},
		{Code: `x = x === y`},
		{Code: `x = x !== y`},
		{Code: `x[y] = x['y'] + z`},
		{Code: `x.y = x['y'] / z`},
		{Code: `x.y = z + x.y`},
		{Code: `x[fn()] = x[fn()] + y`},
		{
			Code:    `x += x + y`,
			Options: "[\"always\"]",
		},
		{
			Code:    `x = x + y`,
			Options: "[\"never\"]",
		},
		{
			Code:    `x = x ** y`,
			Options: "[\"never\"]",
		},
		{Code: `x = y ** x`},
		{Code: `x = x * y + z`},
		{
			Code:    `this.x = this.y + z`,
			Options: "[\"always\"]",
		},
		{
			Code:    `this.x = foo.x + y`,
			Options: "[\"always\"]",
		},
		{
			Code:    `this.x = foo.this.x + y`,
			Options: "[\"always\"]",
		},
		{Code: `const foo = 0; class C { foo = foo + 1; }`},
		{
			Code:    `x = x && y`,
			Options: "[\"always\"]",
		},
		{
			Code:    `x = x || y`,
			Options: "[\"always\"]",
		},
		{
			Code:    `x = x ?? y`,
			Options: "[\"always\"]",
		},
		{
			Code:    `x &&= y`,
			Options: "[\"never\"]",
		},
		{
			Code:    `x ||= y`,
			Options: "[\"never\"]",
		},
		{
			Code:    `x ??= y`,
			Options: "[\"never\"]",
		},
	}, []InvalidTestCase{
		{
			Code:   `x = x + y`,
			Output: `x += y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x - y`,
			Output: `x -= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x * y`,
			Output: `x *= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x = y * x`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x = (y * z) * x`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x / y`,
			Output: `x /= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x % y`,
			Output: `x %= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x << y`,
			Output: `x <<= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x >> y`,
			Output: `x >>= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x >>> y`,
			Output: `x >>>= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x & y`,
			Output: `x &= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x ^ y`,
			Output: `x ^= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x = x | y`,
			Output: `x |= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `x[0] = x[0] - y`,
			Output: `x[0] -= y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x.y[z['a']][0].b = x.y[z['a']][0].b * 2`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x = x + y`,
			Output:  `x += y`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x = (x + y)`,
			Output:  `x += y`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x = x + (y)`,
			Output:  `x += (y)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x += (y)`,
			Output:  `x = x + (y)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `x += y`,
			Output:  `x = x + y`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo.bar = foo.bar + baz`,
			Output: `foo.bar += baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `foo.bar += baz`,
			Output:  `foo.bar = foo.bar + baz`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `this.foo = this.foo + bar`,
			Output: `this.foo += bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `this.foo += bar`,
			Output:  `this.foo = this.foo + bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `foo.bar.baz = foo.bar.baz + qux`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `foo.bar.baz += qux`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `this.foo.bar = this.foo.bar + baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `this.foo.bar += baz`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `foo[bar] = foo[bar] + baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `this[foo] = this[foo] + bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `foo[bar] >>>= baz`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `this[foo] >>>= bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo[5] = foo[5] / baz`,
			Output: `foo[5] /= baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:   `this[5] = this[5] / foo`,
			Output: `this[5] /= foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `/*1*/x/*2*/./*3*/y/*4*/= x.y +/*5*/z/*6*/./*7*/w/*8*/;`,
			Output:  `/*1*/x/*2*/./*3*/y/*4*/+=/*5*/z/*6*/./*7*/w/*8*/;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x // 1
 . // 2
 y // 3
 = x.y + //4
 z //5
 . //6
 w;`,
			Output: `x // 1
 . // 2
 y // 3
 += //4
 z //5
 . //6
 w;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x = /*1*/ x + y`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x = //1
 x + y`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x.y = x/*1*/.y + z`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x.y = x. //1
 y + z`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `x = x /*1*/ + y`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `x = x //1
 + y`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `/*1*/x +=/*2*/y/*3*/;`,
			Output:  `/*1*/x = x +/*2*/y/*3*/;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `x +=//1
 y`,
			Output: `x = x +//1
 y`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(/*1*/x += y)`,
			Output:  `(/*1*/x = x + y)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `x/*1*/+=  y`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `x //1
 +=  y`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(/*1*/x) +=  y`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `x/*1*/.y +=  z`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `x.//1
 y +=  z`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `(foo.bar) ^= ((((((((((((((((baz))))))))))))))))`,
			Output:  `(foo.bar) = (foo.bar) ^ ((((((((((((((((baz))))))))))))))))`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `foo = foo ** bar`,
			Output: `foo **= bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code:    `foo **= bar`,
			Output:  `foo = foo ** bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo *= bar + 1`,
			Output:  `foo = foo * (bar + 1)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo -= bar - baz`,
			Output:  `foo = foo - (bar - baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo += bar + baz`,
			Output:  `foo = foo + (bar + baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo += bar = 1`,
			Output:  `foo = foo + (bar = 1)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo *= (bar + 1)`,
			Output:  `foo = foo * (bar + 1)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo+=-bar`,
			Output:  `foo= foo+-bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo/=bar`,
			Output:  `foo= foo/bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo/=/**/bar`,
			Output:  `foo= foo/ /**/bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `foo/=//
bar`,
			Output: `foo= foo/ //
bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo/=/^bar$/`,
			Output:  `foo= foo/ /^bar$/`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo+=+bar`,
			Output:  `foo= foo+ +bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo+= +bar`,
			Output:  `foo= foo+ +bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo+=/**/+bar`,
			Output:  `foo= foo+/**/+bar`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `foo+=+bar===baz`,
			Output:  `foo= foo+(+bar===baz)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(obj?.a).b = (obj?.a).b + y`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
		{
			Code: `obj.a = obj?.a + b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "replaced",
				},
			},
		},
	})
}
