// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMaxStatementsRule(t *testing.T) {
	RunRuleTester(t, "{}", "max-statements", []ValidTestCase{
		{
			Code:    `function foo() { var bar = 1; function qux () { var noCount = 2; } return 3; }`,
			Options: "[3]",
		},
		{
			Code:    `function foo() { var bar = 1; if (true) { for (;;) { var qux = null; } } else { quxx(); } return 3; }`,
			Options: "[6]",
		},
		{
			Code:    `function foo() { var x = 5; function bar() { var y = 6; } bar(); z = 10; baz(); }`,
			Options: "[5]",
		},
		{Code: `function foo() { var a; var b; var c; var x; var y; var z; bar(); baz(); qux(); quxx(); }`},
		{
			Code:    `(function() { var bar = 1; return function () { return 42; }; })()`,
			Options: "[1,{\"ignoreTopLevelFunctions\":true}]",
		},
		{
			Code:    `function foo() { var bar = 1; var baz = 2; }`,
			Options: "[1,{\"ignoreTopLevelFunctions\":true}]",
		},
		{
			Code:    `define(['foo', 'qux'], function(foo, qux) { var bar = 1; var baz = 2; })`,
			Options: "[1,{\"ignoreTopLevelFunctions\":true}]",
		},
		{
			Code:    `var foo = { thing: function() { var bar = 1; var baz = 2; } }`,
			Options: "[2]",
		},
		{
			Code:            `var foo = { thing() { var bar = 1; var baz = 2; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = { ['thing']() { var bar = 1; var baz = 2; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var foo = { thing: () => { var bar = 1; var baz = 2; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = { thing: function() { var bar = 1; var baz = 2; } }`,
			Options: "[{\"max\":2}]",
		},
		{
			Code:            `class C { static { one; two; three; { four; five; six; } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { class C { static { one; two; three; { four; five; six; } } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { one; two; three; function foo() { 1; 2; } four; five; six; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { { one; two; three; function foo() { 1; 2; } four; five; six; } } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function top_level() { 1; /* 2 */ class C { static { one; two; three; { four; five; six; } } } 3;}`,
			Options:         "[2,{\"ignoreTopLevelFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function top_level() { 1; 2; } class C { static { one; two; three; { four; five; six; } } }`,
			Options:         "[1,{\"ignoreTopLevelFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { static { one; two; three; { four; five; six; } } } function top_level() { 1; 2; } `,
			Options:         "[1,{\"ignoreTopLevelFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `function foo() { let one; let two = class { static { let three; let four; let five; if (six) { let seven; let eight; let nine; } } }; }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:    `function foo() { var bar = 1; var baz = 2; var qux = 3; }`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `var foo = () => { var bar = 1; var baz = 2; var qux = 3; };`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var foo = function() { var bar = 1; var baz = 2; var qux = 3; };`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var bar = 1; if (true) { while (false) { var qux = null; } } return 3; }`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var bar = 1; if (true) { for (;;) { var qux = null; } } return 3; }`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var bar = 1; if (true) { for (;;) { var qux = null; } } else { quxx(); } return 3; }`,
			Options: "[5]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var x = 5; function bar() { var y = 6; } bar(); z = 10; baz(); }`,
			Options: "[3]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { var x = 5; function bar() { var y = 6; } bar(); z = 10; baz(); }`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `;(function() { var bar = 1; return function () { var z; return 42; }; })()`,
			Options: "[1,{\"ignoreTopLevelFunctions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `;(function() { var bar = 1; var baz = 2; })(); (function() { var bar = 1; var baz = 2; })()`,
			Options: "[1,{\"ignoreTopLevelFunctions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `define(['foo', 'qux'], function(foo, qux) { var bar = 1; var baz = 2; return function () { var z; return 42; }; })`,
			Options: "[1,{\"ignoreTopLevelFunctions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function foo() { var a; var b; var c; var x; var y; var z; bar(); baz(); qux(); quxx(); foo(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var foo = { thing: function() { var bar = 1; var baz = 2; var baz2; } }`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `var foo = { thing() { var bar = 1; var baz = 2; var baz2; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `var foo = { thing: () => { var bar = 1; var baz = 2; var baz2; } }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `var foo = { thing: function() { var bar = 1; var baz = 2; var baz2; } }`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; }`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `function foo() { 1; }`,
			Options: "[{\"max\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `function foo() { foo_1; /* foo_ 2 */ class C { static { one; two; three; four; { five; six; seven; eight; } } } foo_3 }`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `class C { static { one; two; three; four; function not_top_level() { 1; 2; 3; } five; six; seven; eight; } }`,
			Options:         "[2,{\"ignoreTopLevelFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `class C { static { { one; two; three; four; function not_top_level() { 1; 2; 3; } five; six; seven; eight; } } }`,
			Options:         "[2,{\"ignoreTopLevelFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `class C { static { { one; two; three; four; } function not_top_level() { 1; 2; 3; } { five; six; seven; eight; } } }`,
			Options:         "[2,{\"ignoreTopLevelFunctions\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
	})
}
