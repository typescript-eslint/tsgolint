// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoConstantConditionRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021}}", "no-constant-condition", []ValidTestCase{
		{Code: `if(a);`},
		{Code: `if(a == 0);`},
		{Code: `if(a = f());`},
		{Code: `if(a += 1);`},
		{Code: `if(a |= 1);`},
		{Code: `if(a |= true);`},
		{Code: `if(a |= false);`},
		{Code: `if(a &= 1);`},
		{Code: `if(a &= true);`},
		{Code: `if(a &= false);`},
		{Code: `if(a >>= 1);`},
		{Code: `if(a >>= true);`},
		{Code: `if(a >>= false);`},
		{Code: `if(a >>>= 1);`},
		{Code: `if(a ??= 1);`},
		{Code: `if(a ??= true);`},
		{Code: `if(a ??= false);`},
		{Code: `if(a ||= b);`},
		{Code: `if(a ||= false);`},
		{Code: `if(a ||= 0);`},
		{Code: `if(a ||= void 0);`},
		{Code: `if(+(a ||= 1));`},
		{Code: `if(f(a ||= true));`},
		{Code: `if((a ||= 1) + 2);`},
		{Code: `if(1 + (a ||= true));`},
		{Code: `if(a ||= '' || false);`},
		{Code: `if(a ||= void 0 || null);`},
		{Code: `if((a ||= false) || b);`},
		{Code: `if(a || (b ||= false));`},
		{Code: `if((a ||= true) && b);`},
		{Code: `if(a && (b ||= true));`},
		{Code: `if(a &&= b);`},
		{Code: `if(a &&= true);`},
		{Code: `if(a &&= 1);`},
		{Code: `if(a &&= 'foo');`},
		{Code: `if((a &&= '') + false);`},
		{Code: `if('' + (a &&= null));`},
		{Code: `if(a &&= 1 && 2);`},
		{Code: `if((a &&= true) && b);`},
		{Code: `if(a && (b &&= true));`},
		{Code: `if((a &&= false) || b);`},
		{Code: `if(a || (b &&= false));`},
		{Code: `if(a ||= b ||= false);`},
		{Code: `if(a &&= b &&= true);`},
		{Code: `if(a ||= b &&= false);`},
		{Code: `if(a ||= b &&= true);`},
		{Code: `if(a &&= b ||= false);`},
		{Code: `if(a &&= b ||= true);`},
		{Code: `if(1, a);`},
		{Code: `if ('every' in []);`},
		{Code: `if (` + "`" + `\
${a}` + "`" + `) {}`},
		{Code: "if (`${a}`);"},
		{Code: "if (`${foo()}`);"},
		{Code: "if (`${a === 'b' && b==='a'}`);"},
		{Code: "if (`foo${a}` === 'fooa');"},
		{Code: "if (tag`a`);"},
		{Code: "if (tag`${a}`);"},
		{Code: `if (+(a || true));`},
		{Code: `if (-(a || true));`},
		{Code: `if (~(a || 1));`},
		{Code: `if (+(a && 0) === +(b && 0));`},
		{Code: `while(~!a);`},
		{Code: `while(a = b);`},
		{Code: "while(`${a}`);"},
		{Code: `for(;x < 10;);`},
		{Code: `for(;;);`},
		{Code: "for(;`${a}`;);"},
		{Code: `do{ }while(x)`},
		{Code: `q > 0 ? 1 : 2;`},
		{Code: "`${a}` === a ? 1 : 2"},
		{Code: "`foo${a}` === a ? 1 : 2"},
		{Code: "tag`a` === a ? 1 : 2"},
		{Code: "tag`${a}` === a ? 1 : 2"},
		{Code: `while(x += 3) {}`},
		{Code: "while(tag`a`) {}"},
		{Code: "while(tag`${a}`) {}"},
		{Code: `while(` + "`" + `\
${a}` + "`" + `) {}`},
		{Code: `if(typeof x === 'undefined'){}`},
		{Code: "if(`${typeof x}` === 'undefined'){}"},
		{Code: `if(a === 'str' && typeof b){}`},
		{Code: `typeof a == typeof b`},
		{Code: `typeof 'a' === 'string'|| typeof b === 'string'`},
		{Code: "`${typeof 'a'}` === 'string'|| `${typeof b}` === 'string'"},
		{Code: `if (void a || a);`},
		{Code: `if (a || void a);`},
		{Code: `if(xyz === 'str1' && abc==='str2'){}`},
		{Code: `if(xyz === 'str1' || abc==='str2'){}`},
		{Code: `if(xyz === 'str1' || abc==='str2' && pqr === 5){}`},
		{Code: `if(typeof abc === 'string' && abc==='str2'){}`},
		{Code: `if(false || abc==='str'){}`},
		{Code: `if(true && abc==='str'){}`},
		{Code: `if(typeof 'str' && abc==='str'){}`},
		{Code: `if(abc==='str' || false || def ==='str'){}`},
		{Code: `if(true && abc==='str' || def ==='str'){}`},
		{Code: `if(true && typeof abc==='string'){}`},
		{Code: `if('str1' && a){}`},
		{Code: `if(a && 'str'){}`},
		{Code: `if ((foo || true) === 'baz') {}`},
		{Code: `if ((foo || 'bar') === 'baz') {}`},
		{Code: `if ((foo || 'bar') !== 'baz') {}`},
		{Code: `if ((foo || 'bar') == 'baz') {}`},
		{Code: `if ((foo || 'bar') != 'baz') {}`},
		{Code: `if ((foo || 233) > 666) {}`},
		{Code: `if ((foo || 233) < 666) {}`},
		{Code: `if ((foo || 233) >= 666) {}`},
		{Code: `if ((foo || 233) <= 666) {}`},
		{Code: `if ((key || 'k') in obj) {}`},
		{Code: `if ((foo || {}) instanceof obj) {}`},
		{Code: `if ((foo || 'bar' || 'bar') === 'bar');`},
		{
			Code:            `if ((foo || 1n) === 'baz') {}`,
			LanguageOptions: "{\"ecmaVersion\":11}",
		},
		{
			Code:            `if (a && 0n || b);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
		},
		{
			Code:            `if(1n && a){};`,
			LanguageOptions: "{\"ecmaVersion\":11}",
		},
		{Code: `if ('' + [y] === '' + [ty]) {}`},
		{Code: `if ('a' === '' + [ty]) {}`},
		{Code: `if ('' + [y, m, d] === 'a') {}`},
		{Code: `if ('' + [y, 'm'] === '' + [ty, 'tm']) {}`},
		{Code: `if ('' + [y, 'm'] === '' + ['ty']) {}`},
		{Code: `if ([,] in

($2))
 ;
else
 ;`},
		{Code: `if ([...x]+'' === 'y'){}`},
		{
			Code:    `while(true);`,
			Options: "[{\"checkLoops\":false}]",
		},
		{
			Code:    `for(;true;);`,
			Options: "[{\"checkLoops\":false}]",
		},
		{
			Code:    `do{}while(true)`,
			Options: "[{\"checkLoops\":false}]",
		},
		{
			Code:    `while(true);`,
			Options: "[{\"checkLoops\":\"none\"}]",
		},
		{
			Code:    `for(;true;);`,
			Options: "[{\"checkLoops\":\"none\"}]",
		},
		{
			Code:    `do{}while(true)`,
			Options: "[{\"checkLoops\":\"none\"}]",
		},
		{
			Code:    `while(true);`,
			Options: "[{\"checkLoops\":\"allExceptWhileTrue\"}]",
		},
		{Code: `while(true);`},
		{
			Code:    `while(a == b);`,
			Options: "[{\"checkLoops\":\"all\"}]",
		},
		{
			Code:    `do{ }while(x);`,
			Options: "[{\"checkLoops\":\"all\"}]",
		},
		{
			Code:    `for (let x = 0; x <= 10; x++) {};`,
			Options: "[{\"checkLoops\":\"all\"}]",
		},
		{Code: `function* foo(){while(true){yield 'foo';}}`},
		{Code: `function* foo(){for(;true;){yield 'foo';}}`},
		{Code: `function* foo(){do{yield 'foo';}while(true)}`},
		{Code: `function* foo(){while (true) { while(true) {yield;}}}`},
		{Code: `function* foo() {for (; yield; ) {}}`},
		{Code: `function* foo() {for (; ; yield) {}}`},
		{Code: `function* foo() {while (true) {function* foo() {yield;}yield;}}`},
		{Code: `function* foo() { for (let x = yield; x < 10; x++) {yield;}yield;}`},
		{Code: `function* foo() { for (let x = yield; ; x++) { yield; }}`},
		{Code: `if (new Number(x) + 1 === 2) {}`},
		{Code: `if([a]==[b]) {}`},
		{Code: `if (+[...a]) {}`},
		{Code: `if (+[...[...a]]) {}`},
		{Code: "if (`${[...a]}`) {}"},
		{Code: "if (`${[a]}`) {}"},
		{Code: `if (+[a]) {}`},
		{Code: `if (0 - [a]) {}`},
		{Code: `if (1 * [a]) {}`},
		{Code: `if (Boolean(a)) {}`},
		{Code: `if (Boolean(...args)) {}`},
		{Code: `if (foo.Boolean(1)) {}`},
		{Code: `function foo(Boolean) { if (Boolean(1)) {} }`},
		{Code: `const Boolean = () => {}; if (Boolean(1)) {}`},
		{
			Code:            `if (Boolean()) {}`,
			LanguageOptions: "{\"globals\":{\"Boolean\":\"off\"}}",
		},
		{Code: `const undefined = 'lol'; if (undefined) {}`},
		{
			Code:            `if (undefined) {}`,
			LanguageOptions: "{\"globals\":{\"undefined\":\"off\"}}",
		},
	}, []InvalidTestCase{
		{
			Code: `for(;true;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "for(;``;);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "for(;`foo`;);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "for(;`foo${bar}`;);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `do{}while(true)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `do{}while('1')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `do{}while(0)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `do{}while(t = -2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "do{}while(``)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "do{}while(`foo`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "do{}while(`foo${bar}`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `true ? 1 : 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `1 ? 1 : 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `q = 0 ? 1 : 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(q = 0) ? 1 : 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "`` ? 1 : 2;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "`foo` ? 1 : 2;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "`foo${bar}` ? 1 : 2;",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(-2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if({});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(0 < 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(0 || 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a, 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`foo`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(``);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(` + "`" + `\
` + "`" + `);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`${'bar'}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`${'bar' + `foo`}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`foo${false || true}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`foo${0 || 1}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`foo${bar}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`${bar}foo`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(true || a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(a && void b && c));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(0 || !(a && null));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(1 + !(a || true));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(null && a) > 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(+(!(a && 0)));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!typeof a === 'string');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(-('foo' || a));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(+(void a && b) === ~(1 || c));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a ||= true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a ||= 5);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a ||= 'foo' || b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a ||= b || /regex/);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a ||= b ||= true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a ||= b ||= c || 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(a ||= true));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(a ||= 'foo') === true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(a ||= 'foo') === false);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a || (b ||= true));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if((a ||= 1) || b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if((a ||= true) && true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(true && (a ||= true));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= false);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= null);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= void b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= 0 && b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= b && '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= b &&= false);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a &&= b &&= c && false);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(a &&= false));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(!(a &&= 0) + 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a && (b &&= false));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if((a &&= null) && b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(false || (a &&= false));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if((a &&= false) || false);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while([]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while(~!0);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while(x = 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while(function(){});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while(true);`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while(1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while(() => {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "while(`foo`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "while(``);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "while(`${'foo'}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "while(`${'foo' + 'bar'}`);",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(typeof x){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(typeof 'abc' === 'string'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a = typeof b){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a, typeof b){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(typeof 'a' == 'string' || typeof 'b' == 'string'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `while(typeof x){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(1 || void x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(void x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(y = void x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(x, void x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(void x === void y);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(void x && a);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a && void x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(false && abc==='str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(true || abc==='str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(1 || abc==='str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(abc==='str' || true){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(abc==='str' || true || def ==='str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(false || true){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(typeof abc==='str' || true){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if('str' || a){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if('str' || abc==='str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if('str1' || 'str2'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if('str1' && 'str2'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(abc==='str' || 'str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(a || 'str'){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while(x = 1);`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `do{ }while(x = 1)`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `for (;true;) {};`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function* foo(){while(true){} yield 'foo';}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function* foo(){while(true){} yield 'foo';}`,
			Options: "[{\"checkLoops\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function* foo(){while(true){if (true) {yield 'foo';}}}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function* foo(){while(true){if (true) {yield 'foo';}}}`,
			Options: "[{\"checkLoops\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function* foo(){while(true){yield 'foo';} while(true) {}}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function* foo(){while(true){yield 'foo';} while(true) {}}`,
			Options: "[{\"checkLoops\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var a = function* foo(){while(true){} yield 'foo';}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `var a = function* foo(){while(true){} yield 'foo';}`,
			Options: "[{\"checkLoops\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while (true) { function* foo() {yield;}}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while (true) { function* foo() {yield;}}`,
			Options: "[{\"checkLoops\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function* foo(){if (true) {yield 'foo';}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function* foo() {for (let foo = yield; true;) {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function* foo() {for (foo = yield; true;) {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo() {while (true) {function* bar() {while (true) {yield;}}}}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `function foo() {while (true) {const bar = function*() {while (true) {yield;}}}}`,
			Options: "[{\"checkLoops\":\"all\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function* foo() { for (let foo = 1 + 2 + 3 + (yield); true; baz) {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if([a]) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if([]) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(''+['a']) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(''+[]) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(+1) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if ([,] + ''){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(/foo/ui);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0b0n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0o0n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0x0n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0b1n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0o1n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0x1n);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:            `if(0x1n || foo);`,
			LanguageOptions: "{\"ecmaVersion\":11}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(class {}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(new Foo()) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(new Boolean(foo)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(new String(foo)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if(new Number(foo)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: "if(`${[...['a']]}`) {}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (undefined) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (Boolean(1)) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (Boolean()) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (Boolean([a])) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `if (Boolean(1)) { function Boolean() {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
	})
}
