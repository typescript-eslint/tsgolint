// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferNumericLiteralsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2021}}", "prefer-numeric-literals", []ValidTestCase{
		{Code: `parseInt(1);`},
		{Code: `parseInt(1, 3);`},
		{Code: `Number.parseInt(1);`},
		{Code: `Number.parseInt(1, 3);`},
		{Code: `0b111110111 === 503;`},
		{Code: `0o767 === 503;`},
		{Code: `0x1F7 === 503;`},
		{Code: `a[parseInt](1,2);`},
		{Code: `parseInt(foo);`},
		{Code: `parseInt(foo, 2);`},
		{Code: `Number.parseInt(foo);`},
		{Code: `Number.parseInt(foo, 2);`},
		{Code: `parseInt(11, 2);`},
		{Code: `Number.parseInt(1, 8);`},
		{Code: `parseInt(1e5, 16);`},
		{Code: `parseInt('11', '2');`},
		{Code: `Number.parseInt('11', '8');`},
		{Code: `parseInt(/foo/, 2);`},
		{Code: "parseInt(`11${foo}`, 2);"},
		{
			Code:            `parseInt('11', 2n);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `Number.parseInt('11', 8n);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `parseInt('11', 16n);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            "parseInt(`11`, 16n);",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `parseInt(1n, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `class C { #parseInt; foo() { Number.#parseInt("111110111", 2); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:   `parseInt("111110111", 2) === 503;`,
			Output: `0b111110111 === 503;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `parseInt("767", 8) === 503;`,
			Output: `0o767 === 503;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `parseInt("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt("111110111", 2) === 503;`,
			Output: `0b111110111 === 503;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt("767", 8) === 503;`,
			Output: `0o767 === 503;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code: `parseInt('7999', 8);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code: `parseInt('1234', 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code: `parseInt('1234.5', 8);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code: `parseInt('1️⃣3️⃣3️⃣7️⃣', 16);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code: `Number.parseInt('7999', 8);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code: `Number.parseInt('1234', 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code: `Number.parseInt('1234.5', 8);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code: `Number.parseInt('1️⃣3️⃣3️⃣7️⃣', 16);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   "parseInt(`111110111`, 2) === 503;",
			Output: `0b111110111 === 503;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code:   "parseInt(`767`, 8) === 503;",
			Output: `0o767 === 503;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   "parseInt(`1F7`, 16) === 255;",
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code: `parseInt('', 8);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code: "parseInt(``, 8);",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code: "parseInt(`7999`, 8);",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code: "parseInt(`1234`, 2);",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code: "parseInt(`1234.5`, 8);",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `parseInt('11', 2)`,
			Output: `0b11`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt('67', 8)`,
			Output: `0o67`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   `5+parseInt('A', 16)`,
			Output: `5+0xA`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:            `function *f(){ yield(Number).parseInt('11', 2) }`,
			Output:          `function *f(){ yield 0b11 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of (Number).parseInt().",
				},
			},
		},
		{
			Code:            `function *f(){ yield(Number.parseInt)('67', 8) }`,
			Output:          `function *f(){ yield 0o67 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:            `function *f(){ yield(parseInt)('A', 16) }`,
			Output:          `function *f(){ yield 0xA }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:            `function *f(){ yield Number.parseInt('11', 2) }`,
			Output:          `function *f(){ yield 0b11 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:            `function *f(){ yield/**/Number.parseInt('67', 8) }`,
			Output:          `function *f(){ yield/**/0o67 }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:            `function *f(){ yield(parseInt('A', 16)) }`,
			Output:          `function *f(){ yield(0xA) }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `parseInt('11', 2)+5`,
			Output: `0b11+5`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt('17', 8)+5`,
			Output: `0o17+5`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   `parseInt('A', 16)+5`,
			Output: `0xA+5`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `parseInt('11', 2)in foo`,
			Output: `0b11 in foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt('17', 8)in foo`,
			Output: `0o17 in foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   `parseInt('A', 16)in foo`,
			Output: `0xA in foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `parseInt('11', 2) in foo`,
			Output: `0b11 in foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `Number.parseInt('17', 8)/**/in foo`,
			Output: `0o17/**/in foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code:   `(parseInt('A', 16))in foo`,
			Output: `(0xA)in foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `/* comment */Number.parseInt('11', 2);`,
			Output: `/* comment */0b11;`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `Number/**/.parseInt('11', 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `Number//
.parseInt('11', 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `Number./**/parseInt('11', 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `Number.parseInt(/**/'11', 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `Number.parseInt('11', /**/2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:   `Number.parseInt('11', 2)/* comment */;`,
			Output: `0b11/* comment */;`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `parseInt/**/('11', 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `parseInt(//
'11', 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `parseInt('11'/**/, 2);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: "parseInt(`11`/**/, 2);",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `parseInt('11', 2 /**/);`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code: `parseInt('11', 2)//comment
;`,
			Output: `0b11//comment
;`,
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:   `parseInt?.("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code:   `Number?.parseInt("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number?.parseInt().",
				},
			},
		},
		{
			Code:   `Number?.parseInt?.("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number?.parseInt().",
				},
			},
		},
		{
			Code:   `(Number?.parseInt)("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number?.parseInt().",
				},
			},
		},
		{
			Code:   `(Number?.parseInt)?.("1F7", 16) === 255;`,
			Output: `0x1F7 === 255;`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number?.parseInt().",
				},
			},
		},
		{
			Code: `parseInt('1_0', 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use binary literals instead of parseInt().",
				},
			},
		},
		{
			Code: `Number.parseInt('5_000', 8);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use octal literals instead of Number.parseInt().",
				},
			},
		},
		{
			Code: `parseInt('0_1', 16);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of parseInt().",
				},
			},
		},
		{
			Code: `Number.parseInt('0_0', 16);`,
			Errors: []InvalidTestCaseError{
				{
					MessageDescription: "Use hexadecimal literals instead of Number.parseInt().",
				},
			},
		},
	})
}
