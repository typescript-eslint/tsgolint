// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestIndentRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":8,\"sourceType\":\"script\",\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}}", "indent", []ValidTestCase{
		{
			Code: `bridge.callHandler(
  'getAppVersion', 'test23', function(responseData) {
    window.ah.mobileAppVersion = responseData;
  }
);`,
			Options: "[2]",
		},
		{
			Code: `bridge.callHandler(
  'getAppVersion', 'test23', function(responseData) {
    window.ah.mobileAppVersion = responseData;
  });`,
			Options: "[2]",
		},
		{
			Code: `bridge.callHandler(
  'getAppVersion',
  null,
  function responseCallback(responseData) {
    window.ah.mobileAppVersion = responseData;
  }
);`,
			Options: "[2]",
		},
		{
			Code: `bridge.callHandler(
  'getAppVersion',
  null,
  function responseCallback(responseData) {
    window.ah.mobileAppVersion = responseData;
  });`,
			Options: "[2]",
		},
		{
			Code: `function doStuff(keys) {
    _.forEach(
        keys,
        key => {
            doSomething(key);
        }
    );
}`,
			Options: "[4]",
		},
		{
			Code: `example(
    function () {
        console.log('example');
    }
);`,
			Options: "[4]",
		},
		{
			Code: `let foo = somethingList
    .filter(x => {
        return x;
    })
    .map(x => {
        return 100 * x;
    });`,
			Options: "[4]",
		},
		{
			Code: `var x = 0 &&
    {
        a: 1,
        b: 2
    };`,
			Options: "[4]",
		},
		{
			Code: `var x = 0 &&
	{
		a: 1,
		b: 2
	};`,
			Options: "[\"tab\"]",
		},
		{
			Code: `var x = 0 &&
    {
        a: 1,
        b: 2
    }||
    {
        c: 3,
        d: 4
    };`,
			Options: "[4]",
		},
		{
			Code: `var x = [
    'a',
    'b',
    'c'
];`,
			Options: "[4]",
		},
		{
			Code: `var x = ['a',
    'b',
    'c',
];`,
			Options: "[4]",
		},
		{
			Code:    `var x = 0 && 1;`,
			Options: "[4]",
		},
		{
			Code:    `var x = 0 && { a: 1, b: 2 };`,
			Options: "[4]",
		},
		{
			Code: `var x = 0 &&
    (
        1
    );`,
			Options: "[4]",
		},
		{
			Code: `require('http').request({hostname: 'localhost',
  port: 80}, function(res) {
  res.end();
});`,
			Options: "[2]",
		},
		{
			Code: `function test() {
  return client.signUp(email, PASSWORD, { preVerified: true })
    .then(function (result) {
      // hi
    })
    .then(function () {
      return FunctionalHelpers.clearBrowserState(self, {
        contentServer: true,
        contentServer1: true
      });
    });
}`,
			Options: "[2]",
		},
		{
			Code: `it('should... some lengthy test description that is forced to be' +
  'wrapped into two lines since the line length limit is set', () => {
  expect(true).toBe(true);
});`,
			Options: "[2]",
		},
		{
			Code: `function test() {
    return client.signUp(email, PASSWORD, { preVerified: true })
        .then(function (result) {
            var x = 1;
            var y = 1;
        }, function(err){
            var o = 1 - 2;
            var y = 1 - 2;
            return true;
        })
}`,
			Options: "[4]",
		},
		{
			Code: `import foo from "foo"

;(() => {})()`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `function test() {
    return client.signUp(email, PASSWORD, { preVerified: true })
    .then(function (result) {
        var x = 1;
        var y = 1;
    }, function(err){
        var o = 1 - 2;
        var y = 1 - 2;
        return true;
    });
}`,
			Options: "[4,{\"MemberExpression\":0}]",
		},
		{
			Code:    `// hi`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var Command = function() {
  var fileList = [],
      files = []

  files.concat(fileList)
};`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2,\"let\":2,\"const\":3}}]",
		},
		{
			Code:    `  `,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `if(data) {
  console.log('hi');
  b = true;};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `foo = () => {
  console.log('hi');
  return true;};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `function test(data) {
  console.log('hi');
  return true;};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var test = function(data) {
  console.log('hi');
};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `arr.forEach(function(data) {
  otherdata.forEach(function(zero) {
    console.log('hi');
  }) });`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `a = [
    ,3
]`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `[
  ['gzip', 'gunzip'],
  ['gzip', 'unzip'],
  ['deflate', 'inflate'],
  ['deflateRaw', 'inflateRaw'],
].forEach(function(method) {
  console.log(method);
});`,
			Options: "[2,{\"SwitchCase\":1,\"VariableDeclarator\":2}]",
		},
		{
			Code: `test(123, {
    bye: {
        hi: [1,
            {
                b: 2
            }
        ]
    }
});`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var xyz = 2,
    lmn = [
        {
            a: 1
        }
    ];`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `lmnn = [{
    a: 1
},
{
    b: 2
}, {
    x: 2
}];`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{Code: `[{
    foo: 1
}, {
    foo: 2
}, {
    foo: 3
}]`},
		{Code: `foo([
    bar
], [
    baz
], [
    qux
]);`},
		{
			Code: `abc({
    test: [
        [
            c,
            xyz,
            2
        ].join(',')
    ]
});`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc = {
  test: [
    [
      c,
      xyz,
      2
    ]
  ]
};`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc(
  {
    a: 1,
    b: 2
  }
);`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `abc({
    a: 1,
    b: 2
});`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc =
  [
    c,
    xyz,
    {
      a: 1,
      b: 2
    }
  ];`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc = [
  c,
  xyz,
  {
    a: 1,
    b: 2
  }
];`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var abc = 5,
    c = 2,
    xyz =
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{Code: `var
    x = {
        a: 1,
    },
    y = {
        b: 2
    }`},
		{Code: `const
    x = {
        a: 1,
    },
    y = {
        b: 2
    }`},
		{Code: `let
    x = {
        a: 1,
    },
    y = {
        b: 2
    }`},
		{Code: `var foo = { a: 1 }, bar = {
    b: 2
};`},
		{Code: `var foo = { a: 1 }, bar = {
        b: 2
    },
    baz = {
        c: 3
    }`},
		{Code: `const {
        foo
    } = 1,
    bar = 2`},
		{
			Code: `var foo = 1,
  bar =
    2`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var foo = 1,
  bar
    = 2`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var foo
  = 1,
  bar
    = 2`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var foo
  =
  1,
  bar
    =
    2`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var foo
  = (1),
  bar
    = (2)`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `let foo = 'foo',
    bar = bar;
const a = 'a',
      b = 'b';`,
			Options: "[2,{\"VariableDeclarator\":\"first\"}]",
		},
		{
			Code: `let foo = 'foo',
    bar = bar  // <-- no semicolon here
const a = 'a',
      b = 'b'  // <-- no semicolon here`,
			Options: "[2,{\"VariableDeclarator\":\"first\"}]",
		},
		{
			Code: `var foo = 1,
    bar = 2,
    baz = 3
;`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2}}]",
		},
		{
			Code: `var foo = 1,
    bar = 2,
    baz = 3
    ;`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2}}]",
		},
		{
			Code: `var foo = 'foo',
    bar = bar;`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":\"first\"}}]",
		},
		{
			Code: `var foo = 'foo',
    bar = 'bar'  // <-- no semicolon here`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":\"first\"}}]",
		},
		{
			Code: `let foo = 1,
    bar = 2,
    baz`,
			Options: "[2,{\"VariableDeclarator\":\"first\"}]",
		},
		{
			Code: `let
    foo`,
			Options: "[4,{\"VariableDeclarator\":\"first\"}]",
		},
		{
			Code: `let foo = 1,
    bar =
    2`,
			Options: "[2,{\"VariableDeclarator\":\"first\"}]",
		},
		{
			Code: `var abc =
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = new abc({
        a: 1,
        b: 2
    }),
    b = 2;`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = 2,
  c = {
    a: 1,
    b: 2
  },
  b = 2;`,
			Options: "[2,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var x = 2,
    y = {
      a: 1,
      b: 2
    },
    b = 2;`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var e = {
      a: 1,
      b: 2
    },
    b = 2;`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = {
  a: 1,
  b: 2
};`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `function test() {
  if (true ||
            false){
    console.log(val);
  }
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{Code: `var foo = bar ||
    !(
        baz
    );`},
		{Code: `for (var foo = 1;
    foo < 10;
    foo++) {}`},
		{Code: `for (
    var foo = 1;
    foo < 10;
    foo++
) {}`},
		{
			Code: `for (var val in obj)
  if (true)
    console.log(val);`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `with (a)
    b();`,
			Options: "[4]",
		},
		{
			Code: `with (a)
    b();
c();`,
			Options: "[4]",
		},
		{
			Code: `if(true)
  if (true)
    if (true)
      console.log(val);`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `function hi(){     var a = 1;
  y++;                   x++;
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `for(;length > index; index++)if(NO_HOLES || index in self){
  x++;
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `function test(){
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
  }
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var geometry = 2,
rotate = 2;`,
			Options: "[2,{\"VariableDeclarator\":0}]",
		},
		{
			Code: `var geometry,
    rotate;`,
			Options: "[4,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var geometry,
	rotate;`,
			Options: "[\"tab\",{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var geometry,
  rotate;`,
			Options: "[2,{\"VariableDeclarator\":1}]",
		},
		{
			Code: `var geometry,
    rotate;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `let geometry,
    rotate;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `const geometry = 2,
    rotate = 3;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth,
  height, rotate;`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code:    `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth;`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `if (1 < 2){
//hi sd
}`,
			Options: "[2]",
		},
		{
			Code: `while (1 < 2){
  //hi sd
}`,
			Options: "[2]",
		},
		{
			Code:    `while (1 < 2) console.log('hi');`,
			Options: "[2]",
		},
		{
			Code: `[a, boop,
    c].forEach((index) => {
    index;
});`,
			Options: "[4]",
		},
		{
			Code: `[a, b,
    c].forEach(function(index){
    return index;
});`,
			Options: "[4]",
		},
		{
			Code: `[a, b, c].forEach((index) => {
    index;
});`,
			Options: "[4]",
		},
		{
			Code: `[a, b, c].forEach(function(index){
    return index;
});`,
			Options: "[4]",
		},
		{
			Code: `(foo)
    .bar([
        baz
    ]);`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `switch (x) {
    case "foo":
        a();
        break;
    case "bar":
        switch (y) {
            case "1":
                break;
            case "2":
                a = 6;
                break;
        }
    case "test":
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
		},
		{
			Code: `switch (x) {
        case "foo":
            a();
            break;
        case "bar":
            switch (y) {
                    case "1":
                        break;
                    case "2":
                        a = 6;
                        break;
            }
        case "test":
            break;
}`,
			Options: "[4,{\"SwitchCase\":2}]",
		},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    switch(x){
    case '1':
        break;
    case '2':
        a = 6;
        break;
    }
}`},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    if(x){
        a = 2;
    }
    else{
        a = 6;
    }
}`},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    if(x){
        a = 2;
    }
    else
        a = 6;
}`},
		{Code: `switch (a) {
case "foo":
    a();
    break;
case "bar":
    a(); break;
case "baz":
    a(); break;
}`},
		{Code: `switch (0) {
}`},
		{Code: `function foo() {
    var a = "a";
    switch(a) {
    case "a":
        return "A";
    case "b":
        return "B";
    }
}
foo();`},
		{
			Code: `switch(value){
    case "1":
    case "2":
        a();
        break;
    default:
        a();
        break;
}
switch(value){
    case "1":
        a();
        break;
    case "2":
        break;
    default:
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
		},
		{Code: `var obj = {foo: 1, bar: 2};
with (obj) {
    console.log(foo + bar);
}`},
		{Code: `if (a) {
    (1 + 2 + 3); // no error on this line
}`},
		{Code: `switch(value){ default: a(); break; }`},
		{
			Code: `import {addons} from 'react/addons'
import React from 'react'`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
    foo,
    bar,
    baz
} from 'qux';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var foo = 0, bar = 0; baz = 0;
export {
    foo,
    bar,
    baz
} from 'qux';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var a = 1,
    b = 2,
    c = 3;`,
			Options: "[4]",
		},
		{
			Code: `var a = 1
    ,b = 2
    ,c = 3;`,
			Options: "[4]",
		},
		{
			Code:    `while (1 < 2) console.log('hi')`,
			Options: "[2]",
		},
		{
			Code: `function salutation () {
  switch (1) {
    case 0: return console.log('hi')
    case 1: return console.log('hey')
  }
}`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `var items = [
  {
    foo: 'bar'
  }
];`,
			Options: "[2,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `const a = 1,
      b = 2;
const items1 = [
  {
    foo: 'bar'
  }
];
const items2 = Items(
  {
    foo: 'bar'
  }
);`,
			Options: "[2,{\"VariableDeclarator\":3}]",
		},
		{
			Code: `const geometry = 2,
      rotate = 3;
var a = 1,
  b = 2;
let light = true,
    shadow = false;`,
			Options: "[2,{\"VariableDeclarator\":{\"const\":3,\"let\":2}}]",
		},
		{
			Code: `const abc = 5,
      c = 2,
      xyz =
      {
        a: 1,
        b: 2
      };
let abc2 = 5,
  c2 = 2,
  xyz2 =
  {
    a: 1,
    b: 2
  };
var abc3 = 5,
    c3 = 2,
    xyz3 =
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2,\"const\":3},\"SwitchCase\":1}]",
		},
		{
			Code: `module.exports = {
  'Unit tests':
  {
    rootPath: './',
    environment: 'node',
    tests:
    [
      'test/test-*.js'
    ],
    sources:
    [
      '*.js',
      'test/**.js'
    ]
  }
};`,
			Options: "[2]",
		},
		{
			Code: `foo =
  bar;`,
			Options: "[2]",
		},
		{
			Code: `foo = (
  bar
);`,
			Options: "[2]",
		},
		{
			Code: `var path     = require('path')
  , crypto    = require('crypto')
  ;`,
			Options: "[2]",
		},
		{Code: `var a = 1
    ,b = 2
    ;`},
		{
			Code: `export function create (some,
                        argument) {
  return Object.create({
    a: some,
    b: argument
  });
};`,
			Options:         "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export function create (id, xfilter, rawType,
                        width=defaultWidth, height=defaultHeight,
                        footerHeight=defaultFooterHeight,
                        padding=defaultPadding) {
  // ... function body, indented two spaces
}`,
			Options:         "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var obj = {
  foo: function () {
    return new p()
      .then(function (ok) {
        return ok;
      }, function () {
        // ignore things
      });
  }
};`,
			Options: "[2]",
		},
		{
			Code: `a.b()
  .c(function(){
    var a;
  }).d.e;`,
			Options: "[2]",
		},
		{
			Code: `const YO = 'bah',
      TE = 'mah'

var res,
    a = 5,
    b = 4`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2,\"let\":2,\"const\":3}}]",
		},
		{
			Code: `const YO = 'bah',
      TE = 'mah'

var res,
    a = 5,
    b = 4

if (YO) console.log(TE)`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2,\"let\":2,\"const\":3}}]",
		},
		{
			Code: `var foo = 'foo',
  bar = 'bar',
  baz = function() {

  }

function hello () {

}`,
			Options: "[2]",
		},
		{
			Code: `var obj = {
  send: function () {
    return P.resolve({
      type: 'POST'
    })
      .then(function () {
        return true;
      }, function () {
        return false;
      });
  }
};`,
			Options: "[2]",
		},
		{
			Code: `var obj = {
  send: function () {
    return P.resolve({
      type: 'POST'
    })
    .then(function () {
      return true;
    }, function () {
      return false;
    });
  }
};`,
			Options: "[2,{\"MemberExpression\":0}]",
		},
		{Code: `const someOtherFunction = argument => {
        console.log(argument);
    },
    someOtherValue = 'someOtherValue';`},
		{
			Code: `[
  'a',
  'b'
].sort().should.deepEqual([
  'x',
  'y'
]);`,
			Options: "[2]",
		},
		{
			Code: `var a = 1,
    B = class {
      constructor(){}
      a(){}
      get b(){}
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = 1,
    B =
    class {
      constructor(){}
      a(){}
      get b(){}
    },
    c = 3;`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
		},
		{
			Code: `class A{
    constructor(){}
    a(){}
    get b(){}
}`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var A = class {
    constructor(){}
    a(){}
    get b(){}
}`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
		},
		{
			Code: `var a = {
  some: 1
  , name: 2
};`,
			Options: "[2]",
		},
		{
			Code: `a.c = {
    aa: function() {
        'test1';
        return 'aa';
    }
    , bb: function() {
        return this.bb();
    }
};`,
			Options: "[4]",
		},
		{
			Code: `var a =
{
    actions:
    [
        {
            name: 'compile'
        }
    ]
};`,
			Options: "[4,{\"VariableDeclarator\":0,\"SwitchCase\":1}]",
		},
		{
			Code: `var a =
[
    {
        name: 'compile'
    }
];`,
			Options: "[4,{\"VariableDeclarator\":0,\"SwitchCase\":1}]",
		},
		{Code: `[[
], function(
    foo
) {}
]`},
		{Code: `define([
    'foo'
], function(
    bar
) {
    baz;
}
)`},
		{
			Code: `const func = function (opts) {
    return Promise.resolve()
    .then(() => {
        [
            'ONE', 'TWO'
        ].forEach(command => { doSomething(); });
    });
};`,
			Options: "[4,{\"MemberExpression\":0}]",
		},
		{
			Code: `const func = function (opts) {
    return Promise.resolve()
        .then(() => {
            [
                'ONE', 'TWO'
            ].forEach(command => { doSomething(); });
        });
};`,
			Options: "[4]",
		},
		{
			Code: `var haveFun = function () {
    SillyFunction(
        {
            value: true,
        },
        {
            _id: true,
        }
    );
};`,
			Options: "[4]",
		},
		{
			Code: `var haveFun = function () {
    new SillyFunction(
        {
            value: true,
        },
        {
            _id: true,
        }
    );
};`,
			Options: "[4]",
		},
		{
			Code: `let object1 = {
  doThing() {
    return _.chain([])
      .map(v => (
        {
          value: true,
        }
      ))
      .value();
  }
};`,
			Options: "[2]",
		},
		{
			Code: `var foo = {
    bar: 1,
    baz: {
      qux: 2
    }
  },
  bar = 1;`,
			Options: "[2]",
		},
		{
			Code: `class Foo
  extends Bar {
  baz() {}
}`,
			Options: "[2]",
		},
		{
			Code: `class Foo extends
  Bar {
  baz() {}
}`,
			Options: "[2]",
		},
		{
			Code: `class Foo extends
  (
    Bar
  ) {
  baz() {}
}`,
			Options: "[2]",
		},
		{
			Code: `fs.readdirSync(path.join(__dirname, '../rules')).forEach(name => {
  files[name] = foo;
});`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `(function(){
function foo(x) {
  return x + 1;
}
})();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `(function(){
        function foo(x) {
            return x + 1;
        }
})();`,
			Options: "[4,{\"outerIIFEBody\":2}]",
		},
		{
			Code: `(function(x, y){
function foo(x) {
  return x + 1;
}
})(1, 2);`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `(function(){
function foo(x) {
  return x + 1;
}
}());`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `!function(){
function foo(x) {
  return x + 1;
}
}();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `!function(){
			function foo(x) {
				return x + 1;
			}
}();`,
			Options: "[\"tab\",{\"outerIIFEBody\":3}]",
		},
		{
			Code: `var out = function(){
  function fooVar(x) {
    return x + 1;
  }
};`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `var ns = function(){
function fooVar(x) {
  return x + 1;
}
}();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `ns = function(){
function fooVar(x) {
  return x + 1;
}
}();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `var ns = (function(){
function fooVar(x) {
  return x + 1;
}
}(x));`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `var ns = (function(){
        function fooVar(x) {
            return x + 1;
        }
}(x));`,
			Options: "[4,{\"outerIIFEBody\":2}]",
		},
		{
			Code: `var obj = {
  foo: function() {
    return true;
  }
};`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `while (
  function() {
    return true;
  }()) {

  x = x + 1;
};`,
			Options: "[2,{\"outerIIFEBody\":20}]",
		},
		{
			Code: `(() => {
function foo(x) {
  return x + 1;
}
})();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `function foo() {
}`,
			Options: "[\"tab\",{\"outerIIFEBody\":0}]",
		},
		{
			Code: `;(() => {
function foo(x) {
  return x + 1;
}
})();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `if(data) {
  console.log('hi');
}`,
			Options: "[2,{\"outerIIFEBody\":0}]",
		},
		{
			Code: `(function(x) {
    return x + 1;
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
		},
		{
			Code: `(function(x) {
return x + 1;
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
		},
		{
			Code: `;(() => {
    function x(y) {
        return y + 1;
    }
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
		},
		{
			Code: `;(() => {
function x(y) {
    return y + 1;
}
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
		},
		{
			Code: `function foo() {
}`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
		},
		{
			Code:    `Buffer.length`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
    .indexOf('a')
    .toString()`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer.
    length`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
    .foo
    .bar`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
	.foo
	.bar`,
			Options: "[\"tab\",{\"MemberExpression\":1}]",
		},
		{
			Code: `Buffer
    .foo
    .bar`,
			Options: "[2,{\"MemberExpression\":2}]",
		},
		{Code: `(
    foo
        .bar
)`},
		{Code: `(
    (
        foo
            .bar
    )
)`},
		{Code: `(
    foo
)
    .bar`},
		{Code: `(
    (
        foo
    )
        .bar
)`},
		{Code: `(
    (
        foo
    )
        [
            (
                bar
            )
        ]
)`},
		{Code: `(
    foo[bar]
)
    .baz`},
		{Code: `(
    (foo.bar)
)
    .baz`},
		{
			Code: `MemberExpression
.can
  .be
    .turned
 .off();`,
			Options: "[4,{\"MemberExpression\":\"off\"}]",
		},
		{
			Code: `foo = bar.baz()
    .bip();`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{Code: `function foo() {
    new
        .target
}`},
		{Code: `function foo() {
    new.
        target
}`},
		{
			Code: `if (foo) {
  bar();
} else if (baz) {
  foobar();
} else if (qux) {
  qux();
}`,
			Options: "[2]",
		},
		{
			Code: `function foo(aaa,
  bbb, ccc, ddd) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":2}}]",
		},
		{
			Code: `function foo(aaa, bbb,
      ccc, ddd) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":3,\"body\":1}}]",
		},
		{
			Code: `function foo(aaa,
    bbb,
    ccc) {
            bar();
}`,
			Options: "[4,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":3}}]",
		},
		{
			Code: `function foo(aaa,
             bbb, ccc,
             ddd, eee, fff) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":1}}]",
		},
		{
			Code: `function foo(aaa, bbb)
{
      bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":3}}]",
		},
		{
			Code: `function foo(
  aaa,
  bbb) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":2}}]",
		},
		{
			Code: `var foo = function(aaa,
    bbb,
    ccc,
    ddd) {
bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":2,\"body\":0}}]",
		},
		{
			Code: `var foo = function(aaa,
  bbb,
  ccc) {
                    bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":1,\"body\":10}}]",
		},
		{
			Code: `var foo = function(aaa,
                   bbb, ccc, ddd,
                   eee, fff) {
    bar();
}`,
			Options: "[4,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":1}}]",
		},
		{
			Code: `var foo = function(
  aaa, bbb, ccc,
  ddd, eee) {
      bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":3}}]",
		},
		{
			Code: `foo.bar(
      baz, qux, function() {
            qux;
      }
);`,
			Options: "[2,{\"FunctionExpression\":{\"body\":3},\"CallExpression\":{\"arguments\":3}}]",
		},
		{
			Code: `function foo() {
  bar();
  	baz();
	   			  			  	   	qux();
}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  function bar() {
    baz();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1}}]",
		},
		{
			Code: `function foo() {
  bar();
   		}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  function bar(baz,
      qux) {
    foobar();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1,\"parameters\":2}}]",
		},
		{
			Code: `((
    foo
))`,
			Options: "[4]",
		},
		{
			Code: `foo
  ? bar
  : baz`,
			Options: "[2]",
		},
		{
			Code: `foo = (bar ?
  baz :
  qux
);`,
			Options: "[2]",
		},
		{
			Code: `condition
  ? () => {
    return true
  }
  : condition2
    ? () => {
      return true
    }
    : () => {
      return false
    }`,
			Options: "[2]",
		},
		{
			Code: `condition
  ? () => {
    return true
  }
  : condition2
    ? () => {
      return true
    }
    : () => {
      return false
    }`,
			Options: "[2,{\"offsetTernaryExpressions\":false}]",
		},
		{
			Code: `condition
  ? () => {
      return true
    }
  : condition2
    ? () => {
        return true
      }
    : () => {
        return false
      }`,
			Options: "[2,{\"offsetTernaryExpressions\":true}]",
		},
		{
			Code: `condition
    ? () => {
            return true
        }
    : condition2
        ? () => {
                return true
            }
        : () => {
                return false
            }`,
			Options: "[4,{\"offsetTernaryExpressions\":true}]",
		},
		{
			Code: `condition1
  ? condition2
    ? Promise.resolve(1)
    : Promise.resolve(2)
  : Promise.resolve(3)`,
			Options: "[2,{\"offsetTernaryExpressions\":true}]",
		},
		{
			Code: `condition1
  ? Promise.resolve(1)
  : condition2
    ? Promise.resolve(2)
    : Promise.resolve(3)`,
			Options: "[2,{\"offsetTernaryExpressions\":true}]",
		},
		{
			Code: `condition
	? () => {
			return true
		}
	: condition2
		? () => {
				return true
			}
		: () => {
				return false
			}`,
			Options: "[\"tab\",{\"offsetTernaryExpressions\":true}]",
		},
		{Code: `[
    foo ?
        bar :
        baz,
    qux
];`},
		{
			Code: `foo();
// Line
/* multiline
  Line */
bar();
// trailing comment`,
			Options: "[2]",
		},
		{
			Code: `switch (foo) {
  case bar:
    baz();
    // call the baz function
}`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `switch (foo) {
  case bar:
    baz();
  // no default
}`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{Code: `[
    // no elements
]`},
		{
			Code: `var {
  foo,
  bar,
  baz: qux,
  foobar: baz = foobar
} = qux;`,
			Options: "[2]",
		},
		{
			Code: `var [
  foo,
  bar,
  baz,
  foobar = baz
] = qux;`,
			Options: "[2]",
		},
		{
			Code: `const {
  a
}
=
{
  a: 1
}`,
			Options: "[2]",
		},
		{
			Code: `const {
  a
} = {
  a: 1
}`,
			Options: "[2]",
		},
		{
			Code: `const
  {
    a
  } = {
    a: 1
  };`,
			Options: "[2]",
		},
		{
			Code: `const
  foo = {
    bar: 1
  }`,
			Options: "[2]",
		},
		{
			Code: `const [
  a
] = [
  1
]`,
			Options: "[2]",
		},
		{
			Code: `var folder = filePath
    .foo()
    .bar;`,
			Options: "[2,{\"MemberExpression\":2}]",
		},
		{
			Code: `for (const foo of bar)
  baz();`,
			Options: "[2]",
		},
		{
			Code: `var x = () =>
  5;`,
			Options: "[2]",
		},
		{Code: `(
    foo
)(
    bar
)`},
		{Code: `(() =>
    foo
)(
    bar
)`},
		{Code: `(() => {
    foo();
})(
    bar
)`},
		{
			Code: `({code:
  "foo.bar();"})`,
			Options: "[2]",
		},
		{
			Code: `({code:
"foo.bar();"})`,
			Options: "[2]",
		},
		{Code: `({
    foo:
        bar
})`},
		{Code: `({
    [foo]:
        bar
})`},
		{
			Code: `switch (foo) {
  // comment
  case study:
    // comment
    bar();
  case closed:
    /* multiline comment
    */
}`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `switch (foo) {
  // comment
  case study:
  // the comment can also be here
  case closed:
}`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `foo && (
    bar
)`,
			Options: "[4]",
		},
		{
			Code: `foo && ((
    bar
))`,
			Options: "[4]",
		},
		{
			Code: `foo &&
    (
        bar
    )`,
			Options: "[4]",
		},
		{Code: `foo &&
    !bar(
    )`},
		{Code: `foo &&
    ![].map(() => {
        bar();
    })`},
		{
			Code: `foo =
    bar;`,
			Options: "[4]",
		},
		{
			Code: `function foo() {
  var bar = function(baz,
        qux) {
    foobar();
  };
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":3}}]",
		},
		{Code: `function foo() {
    return (bar === 1 || bar === 2 &&
        (/Function/.test(grandparent.type))) &&
        directives(parent).indexOf(node) >= 0;
}`},
		{
			Code: `function foo() {
    return (foo === bar || (
        baz === qux && (
            foo === foo ||
            bar === bar ||
            baz === baz
        )
    ))
}`,
			Options: "[4]",
		},
		{Code: `if (
    foo === 1 ||
    bar === 1 ||
    // comment
    (baz === 1 && qux === 1)
) {}`},
		{
			Code: `foo =
  (bar + baz);`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  return (bar === 1 || bar === 2) &&
    (z === 3 || z === 4);
}`,
			Options: "[2]",
		},
		{
			Code: `/* comment */ if (foo) {
  bar();
}`,
			Options: "[2]",
		},
		{
			Code: `if (foo) {
  bar();
// Otherwise, if foo is false, do baz.
// baz is very important.
} else {
  baz();
}`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  return ((bar === 1 || bar === 2) &&
    (z === 3 || z === 4));
}`,
			Options: "[2]",
		},
		{
			Code: `foo(
  bar,
  baz,
  qux
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":1}}]",
		},
		{
			Code: `foo(
	bar,
	baz,
	qux
);`,
			Options: "[\"tab\",{\"CallExpression\":{\"arguments\":1}}]",
		},
		{
			Code: `foo(bar,
        baz,
        qux);`,
			Options: "[4,{\"CallExpression\":{\"arguments\":2}}]",
		},
		{
			Code: `foo(
bar,
baz,
qux
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":0}}]",
		},
		{
			Code: `foo(bar,
    baz,
    qux
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `foo(bar, baz,
    qux, barbaz,
    barqux, bazqux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `foo(bar,
        1 + 2,
        !baz,
        new Car('!')
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":4}}]",
		},
		{Code: `foo(
    (bar)
);`},
		{
			Code: `foo(
    (bar)
);`,
			Options: "[4,{\"CallExpression\":{\"arguments\":1}}]",
		},
		{
			Code: `var foo = function() {
  return bar(
    [{
    }].concat(baz)
  );
};`,
			Options: "[2]",
		},
		{
			Code: `return (
    foo
);`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code: `return (
    foo
)`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{Code: `var foo = [
    bar,
    baz
]`},
		{Code: `var foo = [bar,
    baz,
    qux
]`},
		{
			Code: `var foo = [bar,
baz,
qux
]`,
			Options: "[2,{\"ArrayExpression\":0}]",
		},
		{
			Code: `var foo = [bar,
                baz,
                qux
]`,
			Options: "[2,{\"ArrayExpression\":8}]",
		},
		{
			Code: `var foo = [bar,
           baz,
           qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [bar,
           baz, qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [
        { bar: 1,
          baz: 2 },
        { bar: 3,
          baz: 4 }
]`,
			Options: "[4,{\"ArrayExpression\":2,\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `var foo = {
bar: 1,
baz: 2
};`,
			Options: "[2,{\"ObjectExpression\":0}]",
		},
		{
			Code: `var foo = { foo: 1, bar: 2,
            baz: 3 }`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [
        {
            foo: 1
        }
]`,
			Options: "[4,{\"ArrayExpression\":2}]",
		},
		{
			Code: `function foo() {
  [
          foo
  ]
}`,
			Options: "[2,{\"ArrayExpression\":4}]",
		},
		{
			Code: `[
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `[
]`,
			Options: "[2,{\"ArrayExpression\":1}]",
		},
		{
			Code: `{
}`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `{
}`,
			Options: "[2,{\"ObjectExpression\":1}]",
		},
		{
			Code: `var foo = [
  [
    1
  ]
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = [ 1,
            [
              2
            ]
];`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `var foo = bar(1,
              [ 2,
                3
              ]
);`,
			Options: "[4,{\"ArrayExpression\":\"first\",\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `var foo =
    [
    ]()`,
			Options: "[4,{\"CallExpression\":{\"arguments\":\"first\"},\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `const lambda = foo => {
  Object.assign({},
    filterName,
    {
      display
    }
  );
}`,
			Options: "[2,{\"ObjectExpression\":1}]",
		},
		{
			Code: `const lambda = foo => {
  Object.assign({},
    filterName,
    {
      display
    }
  );
}`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `var foo = function() {
	window.foo('foo',
		{
			foo: 'bar',
			bar: {
				foo: 'bar'
			}
		}
	);
}`,
			Options: "[\"tab\"]",
		},
		{
			Code: `echo = spawn('cmd.exe',
             ['foo', 'bar',
              'baz']);`,
			Options: "[2,{\"ArrayExpression\":\"first\",\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `if (foo)
  bar();
// Otherwise, if foo is false, do baz.
// baz is very important.
else {
  baz();
}`,
			Options: "[2]",
		},
		{
			Code: `if (
    foo && bar ||
    baz && qux // This line is ignored because BinaryExpressions are not checked.
) {
    qux();
}`,
			Options: "[4]",
		},
		{Code: `[
] || [
]`},
		{Code: `(
    [
    ] || [
    ]
)`},
		{Code: `1
+ (
    1
)`},
		{Code: `(
    foo && (
        bar ||
        baz
    )
)`},
		{Code: `foo
    || (
        bar
    )`},
		{Code: `foo
                || (
                    bar
                )`},
		{
			Code: `var foo =
        1;`,
			Options: "[4,{\"VariableDeclarator\":2}]",
		},
		{
			Code: `var foo = 1,
    bar =
    2;`,
			Options: "[4]",
		},
		{
			Code: `switch (foo) {
  case bar:
  {
    baz();
  }
}`,
			Options: "[2,{\"SwitchCase\":1}]",
		},
		{
			Code: `` + "`" + `foo${
  bar}` + "`" + ``,
			Options: "[2]",
		},
		{
			Code: `` + "`" + `foo${
  ` + "`" + `bar${
    baz}` + "`" + `}` + "`" + ``,
			Options: "[2]",
		},
		{
			Code: `` + "`" + `foo${
  ` + "`" + `bar${
    baz
  }` + "`" + `
}` + "`" + ``,
			Options: "[2]",
		},
		{
			Code: `` + "`" + `foo${
  (
    bar
  )
}` + "`" + ``,
			Options: "[2]",
		},
		{Code: `foo(` + "`" + `
    bar
` + "`" + `, {
    baz: 1
});`},
		{Code: `function foo() {
    ` + "`" + `foo${bar}baz${
        qux}foo${
        bar}baz` + "`" + `
}`},
		{Code: `JSON
    .stringify(
        {
            ok: true
        }
    );`},
		{Code: `foo =
    bar =
    baz;`},
		{Code: `foo =
bar =
    baz;`},
		{Code: `function foo() {
    const template = ` + "`" + `this indentation is not checked
because it's part of a template literal.` + "`" + `;
}`},
		{Code: `function foo() {
    const template = ` + "`" + `the indentation of a ${
        node.type
    } node is checked.` + "`" + `;
}`},
		{
			Code: `JSON
    .stringify(
        {
            test: 'test'
        }
    );`,
			Options: "[4,{\"CallExpression\":{\"arguments\":1}}]",
		},
		{Code: `[
    foo,
    // comment
    // another comment
    bar
]`},
		{Code: `if (foo) {
    /* comment */ bar();
}`},
		{Code: `function foo() {
    return (
        1
    );
}`},
		{Code: `function foo() {
    return (
        1
    )
}`},
		{Code: `if (
    foo &&
    !(
        bar
    )
) {}`},
		{
			Code: `var abc = [
  (
    ''
  ),
  def,
]`,
			Options: "[2]",
		},
		{
			Code: `var abc = [
  (
    ''
  ),
  (
    'bar'
  )
]`,
			Options: "[2]",
		},
		{Code: `function f() {
    return asyncCall()
        .then(
            'some string',
            [
                1,
                2,
                3
            ]
        );
}`},
		{
			Code: `function f() {
    return asyncCall()
        .then(
            'some string',
            [
                1,
                2,
                3
            ]
        );
}`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{Code: `var x = [
    [1],
    [2]
]`},
		{Code: `var y = [
    {a: 1},
    {b: 2}
]`},
		{Code: `foo(
)`},
		{
			Code: `foo(
    bar,
    {
        baz: 1
    }
)`,
			Options: "[4,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{Code: `new Foo`},
		{Code: `new (Foo)`},
		{Code: `if (Foo) {
    new Foo
}`},
		{
			Code: `var foo = 0, bar = 0, baz = 0;
export {
    foo,
    bar,
    baz
}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `foo
    ? bar
    : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo ?
    bar :
    baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo ?
    bar
    : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo
    ? bar :
    baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo
    ? bar
    : baz
        ? qux
        : foobar
            ? boop
            : beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo ?
    bar :
    baz ?
        qux :
        foobar ?
            boop :
            beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `var a =
    foo ? bar :
    baz ? qux :
    foobar ? boop :
    /*else*/ beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `var a = foo
    ? bar
    : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `var a =
    foo
        ? bar
        : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `a =
    foo ? bar :
    baz ? qux :
    foobar ? boop :
    /*else*/ beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `a = foo
    ? bar
    : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `a =
    foo
        ? bar
        : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo(
    foo ? bar :
    baz ? qux :
    foobar ? boop :
    /*else*/ beep
)`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `function wrap() {
    return (
        foo ? bar :
        baz ? qux :
        foobar ? boop :
        /*else*/ beep
    )
}`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `function wrap() {
    return foo
        ? bar
        : baz
}`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `function wrap() {
    return (
        foo
            ? bar
            : baz
    )
}`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo(
    foo
        ? bar
        : baz
)`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo(foo
    ? bar
    : baz
)`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo
    ? bar
    : baz
        ? qux
        : foobar
            ? boop
            : beep`,
			Options: "[4,{\"flatTernaryExpressions\":false}]",
		},
		{
			Code: `foo ?
    bar :
    baz ?
        qux :
        foobar ?
            boop :
            beep`,
			Options: "[4,{\"flatTernaryExpressions\":false}]",
		},
		{
			Code:    `[,]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code:    `[,]`,
			Options: "[2,{\"ArrayExpression\":\"off\"}]",
		},
		{
			Code: `[
    ,
    foo
]`,
			Options: "[4,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code:    `[sparse, , array];`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
		},
		{
			Code: `foo.bar('baz', function(err) {
  qux;
});`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `foo.bar(function() {
  cookies;
}).baz(function() {
  cookies;
});`,
			Options: "[2,{\"MemberExpression\":1}]",
		},
		{
			Code: `foo.bar().baz(function() {
  cookies;
}).qux(function() {
  cookies;
});`,
			Options: "[2,{\"MemberExpression\":1}]",
		},
		{
			Code: `(
  {
    foo: 1,
    baz: 2
  }
);`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
		},
		{
			Code: `foo(() => {
    bar;
}, () => {
    baz;
})`,
			Options: "[4,{\"CallExpression\":{\"arguments\":\"first\"}}]",
		},
		{
			Code: `[ foo,
  bar ].forEach(function() {
  baz;
})`,
			Options: "[2,{\"ArrayExpression\":\"first\",\"MemberExpression\":1}]",
		},
		{Code: `foo = bar[
    baz
];`},
		{
			Code: `foo[
    bar
];`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{
			Code: `foo[
    (
        bar
    )
];`,
			Options: "[4,{\"MemberExpression\":1}]",
		},
		{Code: `if (foo)
    bar;
else if (baz)
    qux;`},
		{Code: `if (foo) bar()

; [1, 2, 3].map(baz)`},
		{Code: `if (foo)
    ;`},
		{Code: `x => {}`},
		{
			Code: `import {foo}
    from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import 'foo'`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import { foo,
    bar,
    baz,
} from 'qux';`,
			Options:         "[4,{\"ImportDeclaration\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
    foo,
    bar,
    baz,
} from 'qux';`,
			Options:         "[4,{\"ImportDeclaration\":1}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import { apple as a,
         banana as b } from 'fruits';
import { cat } from 'animals';`,
			Options:         "[4,{\"ImportDeclaration\":\"first\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import { declaration,
                 can,
                  be,
              turned } from 'off';`,
			Options:         "[4,{\"ImportDeclaration\":\"off\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{Code: `(
    a
) => b => {
    c
}`},
		{Code: `(
    a
) => b => c => d => {
    e
}`},
		{Code: `(
    a
) =>
    (
        b
    ) => {
        c
    }`},
		{Code: `if (
    foo
) bar(
    baz
);`},
		{Code: `if (foo)
{
    bar();
}`},
		{Code: `function foo(bar)
{
    baz();
}`},
		{Code: `() =>
    ({})`},
		{Code: `() =>
    (({}))`},
		{Code: `(
    () =>
        ({})
)`},
		{Code: `var x = function foop(bar)
{
    baz();
}`},
		{Code: `var x = (bar) =>
{
    baz();
}`},
		{Code: `class Foo
{
    constructor()
    {
        foo();
    }

    bar()
    {
        baz();
    }
}`},
		{Code: `class Foo
    extends Bar
{
    constructor()
    {
        foo();
    }

    bar()
    {
        baz();
    }
}`},
		{Code: `(
    class Foo
    {
        constructor()
        {
            foo();
        }

        bar()
        {
            baz();
        }
    }
)`},
		{
			Code: `switch (foo)
{
    case 1:
        bar();
}`,
			Options: "[4,{\"SwitchCase\":1}]",
		},
		{Code: `foo
    .bar(function() {
        baz
    })`},
		{
			Code: `foo
        .bar(function() {
            baz
        })`,
			Options: "[4,{\"MemberExpression\":2}]",
		},
		{Code: `foo
    [bar](function() {
        baz
    })`},
		{Code: `foo.
    bar.
    baz`},
		{
			Code: `foo
    .bar(function() {
        baz
    })`,
			Options: "[4,{\"MemberExpression\":\"off\"}]",
		},
		{
			Code: `foo
                .bar(function() {
                    baz
                })`,
			Options: "[4,{\"MemberExpression\":\"off\"}]",
		},
		{
			Code: `foo
                [bar](function() {
                    baz
                })`,
			Options: "[4,{\"MemberExpression\":\"off\"}]",
		},
		{
			Code: `foo.
        bar.
                    baz`,
			Options: "[4,{\"MemberExpression\":\"off\"}]",
		},
		{
			Code: `foo = bar(
).baz(
)`,
			Options: "[4,{\"MemberExpression\":\"off\"}]",
		},
		{
			Code: `foo[
    bar ? baz :
    qux
]`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `function foo() {
    return foo ? bar :
        baz
}`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `throw foo ? bar :
    baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{
			Code: `foo(
    bar
) ? baz :
    qux`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
		},
		{Code: `foo
    [
        bar
    ]
    .baz(function() {
        quz();
    })`},
		{Code: `[
    foo
][
    "map"](function() {
    qux();
})`},
		{Code: `(
    a.b(function() {
        c;
    })
)`},
		{Code: `(
    foo
).bar(function() {
    baz();
})`},
		{Code: `new Foo(
    bar
        .baz
        .qux
)`},
		{Code: `const foo = a.b(),
    longName =
        (baz(
            'bar',
            'bar'
        ));`},
		{Code: `const foo = a.b(),
    longName =
    (baz(
        'bar',
        'bar'
    ));`},
		{Code: `const foo = a.b(),
    longName =
        baz(
            'bar',
            'bar'
        );`},
		{Code: `const foo = a.b(),
    longName =
    baz(
        'bar',
        'bar'
    );`},
		{Code: `const foo = a.b(),
    longName
        = baz(
            'bar',
            'bar'
        );`},
		{Code: `const foo = a.b(),
    longName
    = baz(
        'bar',
        'bar'
    );`},
		{Code: `const foo = a.b(),
    longName =
        ('fff');`},
		{Code: `const foo = a.b(),
    longName =
    ('fff');`},
		{Code: `const foo = a.b(),
    longName
        = ('fff');`},
		{Code: `const foo = a.b(),
    longName
    = ('fff');`},
		{Code: `const foo = a.b(),
    longName =
        (
            'fff'
        );`},
		{Code: `const foo = a.b(),
    longName =
    (
        'fff'
    );`},
		{Code: `const foo = a.b(),
    longName
        =(
            'fff'
        );`},
		{Code: `const foo = a.b(),
    longName
    =(
        'fff'
    );`},
		{
			Code: `interface Foo {
    bar: string;
    baz: number;
}`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `namespace Foo {
    const bar = 3,
        baz = 2;

    if (true) {
        const bax = 3;
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `abstract class Foo {
    public bar() {
        let aaa = 4,
            boo;

        if (true) {
            boo = 3;
        }

        boo = 3 + 2;
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `function foo() {
    function bar() {
        abstract class X {
            public baz() {
                if (true) {
                    qux();
                }
            }
        }
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `namespace Unknown {
    function foo() {
        function bar() {
            abstract class X {
                public baz() {
                    if (true) {
                        qux();
                    }
                }
            }
        }
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `type httpMethod = 'GET'
  | 'POST'
  | 'PUT';`,
			Options:         "[2,{\"VariableDeclarator\":0}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `type httpMethod = 'GET'
| 'POST'
| 'PUT';`,
			Options:         "[2,{\"VariableDeclarator\":1}]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{Code: `foo(` + "`" + `foo
        ` + "`" + `, {
    ok: true
},
{
    ok: false
})`},
		{Code: `foo(tag` + "`" + `foo
        ` + "`" + `, {
    ok: true
},
{
    ok: false
}
)`},
		{Code: `async function test() {
    const {
        foo,
        bar,
    } = await doSomethingAsync(
        1,
        2,
        3,
    );
}`},
		{Code: `function* test() {
    const {
        foo,
        bar,
    } = yield doSomethingAsync(
        1,
        2,
        3,
    );
}`},
		{Code: `({
    a: b
} = +foo(
    bar
));`},
		{Code: `const {
    foo,
    bar,
} = typeof foo(
    1,
    2,
    3,
);`},
		{Code: `const {
    foo,
    bar,
} = +(
    foo
);`},
		{Code: `<Foo a="b" c="d"/>;`},
		{Code: `<Foo
    a="b"
    c="d"
/>;`},
		{Code: `var foo = <Bar a="b" c="d"/>;`},
		{Code: `var foo = <Bar
    a="b"
    c="d"
/>;`},
		{Code: `var foo = (<Bar
    a="b"
    c="d"
/>);`},
		{Code: `var foo = (
    <Bar
        a="b"
        c="d"
    />
);`},
		{Code: `<
    Foo
    a="b"
    c="d"
/>;`},
		{Code: `<Foo
    a="b"
    c="d"/>;`},
		{Code: `<
    Foo
    a="b"
    c="d"/>;`},
		{Code: `<a href="foo">bar</a>;`},
		{Code: `<a href="foo">
    bar
</a>;`},
		{Code: `<a
    href="foo"
>
    bar
</a>;`},
		{Code: `<a
    href="foo">
    bar
</a>;`},
		{Code: `<
    a
    href="foo">
    bar
</a>;`},
		{Code: `<a
    href="foo">
    bar
</
    a>;`},
		{Code: `<a
    href="foo">
    bar
</a
>;`},
		{Code: `var foo = <a href="bar">
    baz
</a>;`},
		{Code: `var foo = <a
    href="bar"
>
    baz
</a>;`},
		{Code: `var foo = <a
    href="bar">
    baz
</a>;`},
		{Code: `var foo = <
    a
    href="bar">
    baz
</a>;`},
		{Code: `var foo = <a
    href="bar">
    baz
</
    a>;`},
		{Code: `var foo = <a
    href="bar">
    baz
</a
>`},
		{Code: `var foo = (<a
    href="bar">
    baz
</a>);`},
		{Code: `var foo = (
    <a href="bar">baz</a>
);`},
		{Code: `var foo = (
    <a href="bar">
        baz
    </a>
);`},
		{Code: `var foo = (
    <a
        href="bar">
        baz
    </a>
);`},
		{Code: `var foo = <a href="bar">baz</a>;`},
		{Code: `<a>
    {
    }
</a>`},
		{Code: `<a>
    {
        foo
    }
</a>`},
		{Code: `function foo() {
    return (
        <a>
            {
                b.forEach(() => {
                    // comment
                    a = c
                        .d()
                        .e();
                })
            }
        </a>
    );
}`},
		{Code: `<App></App>`},
		{Code: `<App>
</App>`},
		{
			Code: `<App>
  <Foo />
</App>`,
			Options: "[2]",
		},
		{
			Code: `<App>
<Foo />
</App>`,
			Options: "[0]",
		},
		{
			Code: `<App>
	<Foo />
</App>`,
			Options: "[\"tab\"]",
		},
		{
			Code: `function App() {
  return <App>
    <Foo />
  </App>;
}`,
			Options: "[2]",
		},
		{
			Code: `function App() {
  return (<App>
    <Foo />
  </App>);
}`,
			Options: "[2]",
		},
		{
			Code: `function App() {
  return (
    <App>
      <Foo />
    </App>
  );
}`,
			Options: "[2]",
		},
		{
			Code: `it(
  (
    <div>
      <span />
    </div>
  )
)`,
			Options: "[2]",
		},
		{
			Code: `it(
  (<div>
    <span />
    <span />
    <span />
  </div>)
)`,
			Options: "[2]",
		},
		{
			Code: `(
  <div>
    <span />
  </div>
)`,
			Options: "[2]",
		},
		{
			Code: `{
  head.title &&
  <h1>
    {head.title}
  </h1>
}`,
			Options: "[2]",
		},
		{
			Code: `{
  head.title &&
    <h1>
      {head.title}
    </h1>
}`,
			Options: "[2]",
		},
		{
			Code: `{
  head.title && (
    <h1>
      {head.title}
    </h1>)
}`,
			Options: "[2]",
		},
		{
			Code: `{
  head.title && (
    <h1>
      {head.title}
    </h1>
  )
}`,
			Options: "[2]",
		},
		{
			Code: `[
  <div />,
  <div />
]`,
			Options: "[2]",
		},
		{Code: `<div>
    {
        [
            <Foo />,
            <Bar />
        ]
    }
</div>`},
		{Code: `<div>
    {foo &&
        [
            <Foo />,
            <Bar />
        ]
    }
</div>`},
		{Code: `<div>
bar <div>
    bar
    bar {foo}
bar </div>
</div>`},
		{Code: `foo ?
    <Foo /> :
    <Bar />`},
		{Code: `foo ?
    <Foo />
    : <Bar />`},
		{Code: `foo ?
    <Foo />
    :
    <Bar />`},
		{Code: `<div>
    {!foo ?
        <Foo
            onClick={this.onClick}
        />
        :
        <Bar
            onClick={this.onClick}
        />
    }
</div>`},
		{
			Code: `<span>
  {condition ?
    <Thing
      foo={` + "`" + `bar` + "`" + `}
    /> :
    <Thing/>
  }
</span>`,
			Options: "[2]",
		},
		{
			Code: `<span>
  {condition ?
    <Thing
      foo={"bar"}
    /> :
    <Thing/>
  }
</span>`,
			Options: "[2]",
		},
		{
			Code: `function foo() {
  <span>
    {condition ?
      <Thing
        foo={bar}
      /> :
      <Thing/>
    }
  </span>
}`,
			Options: "[2]",
		},
		{Code: `<App foo
/>`},
		{
			Code: `<App
  foo
/>`,
			Options: "[2]",
		},
		{
			Code: `<App
foo
/>`,
			Options: "[0]",
		},
		{Code: `<App
    foo
/>`},
		{Code: `<App
    foo
></App>`},
		{
			Code: `<App
  foo={function() {
    console.log('bar');
  }}
/>`,
			Options: "[2]",
		},
		{
			Code: `<App foo={function() {
  console.log('bar');
}}
/>`,
			Options: "[2]",
		},
		{
			Code: `var x = function() {
  return <App
    foo={function() {
      console.log('bar');
    }}
  />
}`,
			Options: "[2]",
		},
		{
			Code: `var x = <App
  foo={function() {
    console.log('bar');
  }}
/>`,
			Options: "[2]",
		},
		{
			Code: `<Provider
  store
>
  <App
    foo={function() {
      console.log('bar');
    }}
  />
</Provider>`,
			Options: "[2]",
		},
		{
			Code: `<Provider
  store
>
  {baz && <App
    foo={function() {
      console.log('bar');
    }}
  />}
</Provider>`,
			Options: "[2]",
		},
		{
			Code: `<App
	foo
/>`,
			Options: "[\"tab\"]",
		},
		{
			Code: `<App
	foo
></App>`,
			Options: "[\"tab\"]",
		},
		{
			Code: `<App foo={function() {
	console.log('bar');
}}
/>`,
			Options: "[\"tab\"]",
		},
		{
			Code: `var x = <App
	foo={function() {
		console.log('bar');
	}}
/>`,
			Options: "[\"tab\"]",
		},
		{Code: `<App
    foo />`},
		{Code: `<div>
   unrelated{
        foo
    }
</div>`},
		{Code: `<div>unrelated{
    foo
}
</div>`},
		{Code: `<
    foo
        .bar
        .baz
>
    foo
</
    foo.
        bar.
        baz
>`},
		{Code: `<
    input
    type=
        "number"
/>`},
		{Code: `<
    input
    type=
        {'number'}
/>`},
		{Code: `<
    input
    type
        ="number"
/>`},
		{Code: `foo ? (
    bar
) : (
    baz
)`},
		{Code: `foo ? (
    <div>
    </div>
) : (
    <span>
    </span>
)`},
		{Code: `<div>
    {
        /* foo */
    }
</div>`},
		{Code: `<>
    <A />
</>`},
		{Code: `<
>
    <A />
</>`},
		{Code: `<>
    <A />
<
/>`},
		{Code: `<>
    <A />
</
>`},
		{Code: `<
>
    <A />
</
>`},
		{Code: `<
>
    <A />
<
/>`},
		{Code: `< // Comment
>
    <A />
</>`},
		{Code: `<
    // Comment
>
    <A />
</>`},
		{Code: `<
// Comment
>
    <A />
</>`},
		{Code: `<>
    <A />
< // Comment
/>`},
		{Code: `<>
    <A />
<
    // Comment
/>`},
		{Code: `<>
    <A />
<
// Comment
/>`},
		{Code: `<>
    <A />
</ // Comment
>`},
		{Code: `<>
    <A />
</
    // Comment
>`},
		{Code: `<>
    <A />
</
// Comment
>`},
		{Code: `< /* Comment */
>
    <A />
</>`},
		{Code: `<
    /* Comment */
>
    <A />
</>`},
		{Code: `<
/* Comment */
>
    <A />
</>`},
		{Code: `<
    /*
     * Comment
     */
>
    <A />
</>`},
		{Code: `<
/*
 * Comment
 */
>
    <A />
</>`},
		{Code: `<>
    <A />
< /* Comment */
/>`},
		{Code: `<>
    <A />
<
    /* Comment */ />`},
		{Code: `<>
    <A />
<
/* Comment */ />`},
		{Code: `<>
    <A />
<
    /* Comment */
/>`},
		{Code: `<>
    <A />
<
/* Comment */
/>`},
		{Code: `<>
    <A />
</ /* Comment */
>`},
		{Code: `<>
    <A />
</
    /* Comment */ >`},
		{Code: `<>
    <A />
</
/* Comment */ >`},
		{Code: `<>
    <A />
</
    /* Comment */
>`},
		{Code: `<>
    <A />
</
/* Comment */
>`},
		{Code: `<div>
    {
        (
            1
        )
    }
</div>`},
		{Code: `function A() {
    return (
        <div>
            {
                b && (
                    <div>
                    </div>
                )
            }
        </div>
    );
}`},
		{Code: `<div>foo
    <div>bar</div>
</div>`},
		{Code: `<small>Foo bar&nbsp;
    <a>baz qux</a>.
</small>`},
		{Code: `<div
    {...props}
/>`},
		{Code: `<div
    {
        ...props
    }
/>`},
		{
			Code: `a(b
  , c
)`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"off\"}}]",
		},
		{
			Code: `a(
  new B({
    c,
  })
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"off\"}}]",
		},
		{
			Code: `foo
? bar
            : baz`,
			Options: "[4,{\"ignoredNodes\":[\"ConditionalExpression\"]}]",
		},
		{
			Code: `class Foo {
foo() {
    bar();
}
}`,
			Options: "[4,{\"ignoredNodes\":[\"ClassBody\"]}]",
		},
		{
			Code: `class Foo {
foo() {
bar();
}
}`,
			Options: "[4,{\"ignoredNodes\":[\"ClassBody\",\"BlockStatement\"]}]",
		},
		{
			Code: `foo({
        bar: 1
    },
    {
        baz: 2
    },
    {
        qux: 3
})`,
			Options: "[4,{\"ignoredNodes\":[\"CallExpression > ObjectExpression\"]}]",
		},
		{
			Code: `foo
                            .bar`,
			Options: "[4,{\"ignoredNodes\":[\"MemberExpression\"]}]",
		},
		{
			Code: `$(function() {

foo();
bar();

});`,
			Options: "[4,{\"ignoredNodes\":[\"Program > ExpressionStatement > CallExpression[callee.name='$'] > FunctionExpression > BlockStatement\"]}]",
		},
		{
			Code: `<Foo
            bar="1" />`,
			Options: "[4,{\"ignoredNodes\":[\"JSXOpeningElement\"]}]",
		},
		{
			Code: `foo &&
<Bar
>
</Bar>`,
			Options: "[4,{\"ignoredNodes\":[\"JSXElement\",\"JSXOpeningElement\"]}]",
		},
		{
			Code: `(function($) {
$(function() {
    foo;
});
}())`,
			Options: "[4,{\"ignoredNodes\":[\"ExpressionStatement > CallExpression > FunctionExpression.callee > BlockStatement\"]}]",
		},
		{
			Code: `const value = (
    condition ?
    valueIfTrue :
    valueIfFalse
);`,
			Options: "[4,{\"ignoredNodes\":[\"ConditionalExpression\"]}]",
		},
		{
			Code: `var a = 0, b = 0, c = 0;
export default foo(
    a,
    b, {
    c
    }
)`,
			Options:         "[4,{\"ignoredNodes\":[\"ExportDefaultDeclaration > CallExpression > ObjectExpression\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `foobar = baz
       ? qux
       : boop`,
			Options: "[4,{\"ignoredNodes\":[\"ConditionalExpression\"]}]",
		},
		{
			Code: `` + "`" + `
    SELECT
        ${
            foo
        } FROM THE_DATABASE
` + "`" + ``,
			Options: "[4,{\"ignoredNodes\":[\"TemplateLiteral\"]}]",
		},
		{
			Code: `<foo
    prop='bar'
    >
    Text
</foo>`,
			Options: "[4,{\"ignoredNodes\":[\"JSXOpeningElement\"]}]",
		},
		{
			Code: `{
	var x = 1,
	    y = 2;
}`,
			Options: "[\"tab\"]",
		},
		{
			Code: `var x = 1,
    y = 2;
var z;`,
			Options: "[\"tab\",{\"ignoredNodes\":[\"VariableDeclarator\"]}]",
		},
		{
			Code: `[
    foo(),
    bar
]`,
			Options: "[\"tab\",{\"ArrayExpression\":\"first\",\"ignoredNodes\":[\"CallExpression\"]}]",
		},
		{
			Code: `if (foo) {
    doSomething();

// Intentionally unindented comment
    doSomethingElse();
}`,
			Options: "[4,{\"ignoreComments\":true}]",
		},
		{
			Code: `if (foo) {
    doSomething();

/* Intentionally unindented comment */
    doSomethingElse();
}`,
			Options: "[4,{\"ignoreComments\":true}]",
		},
		{Code: `const obj = {
    foo () {
        return condition ? // comment
            1 :
            2
    }
}`},
		{Code: `if (foo) {
// Comment can align with code immediately above even if "incorrect" alignment
    doSomething();
}`},
		{Code: `if (foo) {
    doSomething();
// Comment can align with code immediately below even if "incorrect" alignment
}`},
		{Code: `if (foo) {
    // Comment can be in correct alignment even if not aligned with code above/below
}`},
		{Code: `if (foo) {

    // Comment can be in correct alignment even if gaps between (and not aligned with) code above/below

}`},
		{Code: `[{
    foo
},

// Comment between nodes

{
    bar
}];`},
		{Code: `[{
    foo
},

// Comment between nodes

{ // comment
    bar
}];`},
		{Code: `let foo

// comment

;(async () => {})()`},
		{Code: `let foo
// comment

;(async () => {})()`},
		{Code: `let foo

// comment
;(async () => {})()`},
		{Code: `let foo
// comment
;(async () => {})()`},
		{Code: `let foo

    /* comment */;

(async () => {})()`},
		{Code: `let foo
    /* comment */;

(async () => {})()`},
		{Code: `let foo

    /* comment */;
(async () => {})()`},
		{Code: `let foo
    /* comment */;
(async () => {})()`},
		{Code: `let foo
/* comment */;

(async () => {})()`},
		{Code: `let foo
/* comment */;
(async () => {})()`},
		{Code: `// comment

;(async () => {})()`},
		{Code: `// comment
;(async () => {})()`},
		{Code: `{
    let foo

    // comment

    ;(async () => {})()
}`},
		{Code: `{
    let foo
    // comment
    ;(async () => {})()
}`},
		{Code: `{
    // comment

    ;(async () => {})()
}`},
		{Code: `{
    // comment
    ;(async () => {})()
}`},
		{Code: `const foo = 1
const bar = foo

/* comment */

;[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo
/* comment */

;[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo

/* comment */
;[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo
/* comment */
;[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo

    /* comment */;

[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo
    /* comment */;

[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo

    /* comment */;
[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo
    /* comment */;
[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo
/* comment */;

[1, 2, 3].forEach(() => {})`},
		{Code: `const foo = 1
const bar = foo
/* comment */;
[1, 2, 3].forEach(() => {})`},
		{Code: `/* comment */

;[1, 2, 3].forEach(() => {})`},
		{Code: `/* comment */
;[1, 2, 3].forEach(() => {})`},
		{Code: `{
    const foo = 1
    const bar = foo

    /* comment */

    ;[1, 2, 3].forEach(() => {})
}`},
		{Code: `{
    const foo = 1
    const bar = foo
    /* comment */
    ;[1, 2, 3].forEach(() => {})
}`},
		{Code: `{
    /* comment */

    ;[1, 2, 3].forEach(() => {})
}`},
		{Code: `{
    /* comment */
    ;[1, 2, 3].forEach(() => {})
}`},
		{
			Code: `import(
    // before
    source
    // after
)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `foo(() => {
    tag` + "`" + `
    multiline
    template
    literal
    ` + "`" + `(() => {
        bar();
    });
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `{
    tag` + "`" + `
    multiline
    template
    ${a} ${b}
    literal
    ` + "`" + `(() => {
        bar();
    });
}`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo(() => {
    tagOne` + "`" + `
    multiline
    template
    literal
    ${a} ${b}
    ` + "`" + `(() => {
        tagTwo` + "`" + `
        multiline
        template
        literal
        ` + "`" + `(() => {
            bar();
        });

        baz();
    });
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `{
    tagOne` + "`" + `
    ${a} ${b}
    multiline
    template
    literal
    ` + "`" + `(() => {
        tagTwo` + "`" + `
        multiline
        template
        literal
        ` + "`" + `(() => {
            bar();
        });

        baz();
    });
};`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `tagOne` + "`" + `multiline
        ${a} ${b}
        template
        literal
        ` + "`" + `(() => {
    foo();

    tagTwo` + "`" + `multiline
            template
            literal
        ` + "`" + `({
        bar: 1,
        baz: 2
    });
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `tagOne` + "`" + `multiline
    template
    literal
    ${a} ${b}` + "`" + `({
    foo: 1,
    bar: tagTwo` + "`" + `multiline
        template
        literal` + "`" + `(() => {

        baz();
    })
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo.bar` + "`" + ` template literal ` + "`" + `(() => {
    baz();
})`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo.bar.baz` + "`" + ` template literal ` + "`" + `(() => {
    baz();
})`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo
    .bar` + "`" + ` template
        literal ` + "`" + `(() => {
        baz();
    })`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo
    .bar
    .baz` + "`" + ` template
        literal ` + "`" + `(() => {
        baz();
    })`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo.bar` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
    baz();
})`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo.bar1.bar2` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
    baz();
})`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo
    .bar1
    .bar2` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
        baz();
    })`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo
    .bar` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
        baz();
    })`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo
.test` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
    baz();
})`,
			Options:         "[4,{\"MemberExpression\":0}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `foo
        .test` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
            baz();
        })`,
			Options:         "[4,{\"MemberExpression\":2}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code: `const foo = async (arg1,
                   arg2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
		},
		{
			Code: `const foo = async /* some comments */(arg1,
                                      arg2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
		},
		{
			Code: `const a = async
b => {}`,
			Options: "[2]",
		},
		{
			Code: `const foo = (arg1,
             arg2) => async (arr1,
                             arr2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
		},
		{
			Code: `const foo = async (arg1,
  arg2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2]",
		},
		{
			Code: `const foo = async /*comments*/(arg1,
  arg2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2]",
		},
		{
			Code: `const foo = async (arg1,
        arg2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":4},\"FunctionExpression\":{\"parameters\":4}}]",
		},
		{
			Code: `const foo = (arg1,
        arg2) =>
{
  return arg1 + arg2;
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":4},\"FunctionExpression\":{\"parameters\":4}}]",
		},
		{
			Code: `async function fn(ar1,
                  ar2){}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
		},
		{
			Code: `async function /* some comments */ fn(ar1,
                                      ar2){}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
		},
		{
			Code: `async  /* some comments */  function fn(ar1,
                                        ar2){}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
		},
		{
			Code: `class C {
  static {
    foo();
    bar();
  }
}`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        foo();
        bar();
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
            foo();
            bar();
    }
}`,
			Options:         "[4,{\"StaticBlock\":{\"body\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
    foo();
    bar();
    }
}`,
			Options:         "[4,{\"StaticBlock\":{\"body\":0}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
	static {
		foo();
		bar();
	}
}`,
			Options:         "[\"tab\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
	static {
			foo();
			bar();
	}
}`,
			Options:         "[\"tab\",{\"StaticBlock\":{\"body\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static
    {
        foo();
        bar();
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        var x,
            y;
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static
    {
        var x,
            y;
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        if (foo) {
            bar;
        }
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        {
            bar;
        }
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {}

    static {
    }

    static
    {
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

    static {
        foo;
    }

    static {
        bar;
    }

}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

    x = 1;

    static {
        foo;
    }

    y = 2;

}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

    method1(param) {
        foo;
    }

    static {
        bar;
    }

    method2(param) {
        foo;
    }

}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `function f() {
    class C {
        static {
            foo();
            bar();
        }
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    method() {
            foo;
    }
    static {
            bar;
    }
}`,
			Options:         "[4,{\"FunctionExpression\":{\"body\":2},\"StaticBlock\":{\"body\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `if (2 > 1)
	console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[\"tab\"]",
		},
		{
			Code: `if (2 > 1)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `if (foo) bar();
baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo) bar()
;baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar();
baz();`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar()
; baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar()
;baz()
qux()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar()
;else
    baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar()
else
    baz()
;qux()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    if (bar)
        baz()
;qux()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar()
else if (baz)
    qux()
;quux()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    if (bar)
        baz()
    else
        qux()
;quux()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    bar()
    ;
baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    ;
baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
;baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo);
else
    baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
    ;
else
    baz()`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
;else
    baz()`,
			Options: "[4]",
		},
		{
			Code: `do foo();
while (bar)`,
			Options: "[4]",
		},
		{
			Code: `do foo()
;while (bar)`,
			Options: "[4]",
		},
		{
			Code: `do
    foo();
while (bar)`,
			Options: "[4]",
		},
		{
			Code: `do
    foo()
;while (bar)`,
			Options: "[4]",
		},
		{
			Code: `do;
while (foo)`,
			Options: "[4]",
		},
		{
			Code: `do
    ;
while (foo)`,
			Options: "[4]",
		},
		{
			Code: `do
;while (foo)`,
			Options: "[4]",
		},
		{
			Code: `while (2 > 1)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `for (;;)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `for (a in b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `for (a of b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `with (a)
    console.log(b)
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `label: for (a of b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `label:
for (a of b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
		},
		{
			Code: `if (foo)
	if (bar) doSomething();
	else doSomething();
else
	if (bar) doSomething();
	else doSomething();`,
			Options: "[\"tab\"]",
		},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar) doSomething();
    else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar)
        doSomething();
    else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar) doSomething();
    else
        doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar)
        doSomething();
    else
        doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar) doSomething();
else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar)
    doSomething();
else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar) doSomething();
else
    doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar)
    doSomething();
else
    doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo)
        if (bar) doSomething();
        else doSomething();
    else
        if (bar) doSomething();
        else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo)
        if (bar) doSomething();
        else
            if (bar) doSomething();
            else doSomething();
    else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo) doSomething();
else doSomething();`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo) {
    doSomething();
}`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo)
{
    doSomething();
}`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo) {
        doSomething();
    }`},
		{Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo)
    {
        doSomething();
    }`},
	}, []InvalidTestCase{
		{
			Code: `var a = b;
if (a) {
b();
}`,
			Output: `var a = b;
if (a) {
  b();
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `require('http').request({hostname: 'localhost',
                  port: 80}, function(res) {
    res.end();
  });`,
			Output: `require('http').request({hostname: 'localhost',
  port: 80}, function(res) {
  res.end();
});`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (array.some(function(){
  return true;
})) {
a++; // ->
  b++;
    c++; // <-
}`,
			Output: `if (array.some(function(){
  return true;
})) {
  a++; // ->
  b++;
  c++; // <-
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (a){
	b=c;
		c=d;
e=f;
}`,
			Output: `if (a){
	b=c;
	c=d;
	e=f;
}`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (a){
    b=c;
      c=d;
 e=f;
}`,
			Output: `if (a){
    b=c;
    c=d;
    e=f;
}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (a) {
  var b = c;
  var d = e
    * f;
    var e = f; // <-
// ->
  function g() {
    if (h) {
      var i = j;
      } // <-
    } // <-

  while (k) l++;
  while (m) {
  n--; // ->
    } // <-

  do {
    o = p +
  q; // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    o = p +
    q;
    } while(r); // <-

  for (var s in t) {
    u++;
  }

    for (;;) {
      v++; // <-
  }

  if ( w ) {
    x++;
  } else if (y) {
      z++; // <-
    aa++;
    } else { // <-
  bb++; // ->
} // ->
}

/**/var b; // NO ERROR: single line multi-line comments followed by code is OK
/*
 *
 */ var b; // NO ERROR: multi-line comments followed by code is OK

var arr = [
  a,
  b,
  c,
  function (){
    d
    }, // <-
  {},
  {
    a: b,
    c: d,
    d: e
  },
  [
    f,
    g,
    h,
    i
  ],
  [j]
];

var obj = {
  a: {
    b: {
      c: d,
      e: f,
      g: h +
    i // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    }
  },
  g: [
    h,
    i,
    j,
    k
  ]
};

var arrObject = {a:[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]};

var objArray = [{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}];

var arrArray = [[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]];

var objObject = {a:{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}};


switch (a) {
  case 'a':
  var a = 'b'; // ->
    break;
  case 'b':
    var a = 'b';
    break;
  case 'c':
      var a = 'b'; // <-
    break;
  case 'd':
    var a = 'b';
  break; // ->
  case 'f':
    var a = 'b';
    break;
  case 'g':     {
    var a = 'b';
    break;
  }
  case 'z':
  default:
      break; // <-
}

a.b('hi')
   .c(a.b()) // <-
   .d(); // <-

if ( a ) {
  if ( b ) {
d.e(f) // ->
  .g() // ->
  .h(); // ->

    i.j(m)
      .k() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
      .l(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS

      n.o(p) // <-
        .q() // <-
        .r(); // <-
  }
}

var a = b,
  c = function () {
  h = i; // ->
    j = k;
      l = m; // <-
  },
  e = {
    f: g,
    n: o,
    p: q
  },
  r = [
    s,
    t,
    u
  ];

var a = function () {
b = c; // ->
  d = e;
    f = g; // <-
};

function c(a, b) {
  if (a || (a &&
            b)) { // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    return d;
  }
}

if ( a
  || b ) {
var x; // ->
  var c,
    d = function(a,
                  b) { // <-
    a; // ->
      b;
        c; // <-
    }
}


a({
  d: 1
});

a(
1
);

a(
  b({
    d: 1
  })
);

a(
  b(
    c({
      d: 1,
      e: 1,
      f: 1
    })
  )
);

a({ d: 1 });

aa(
   b({ // NO ERROR: CallExpression args not linted by default
    c: d, // ->
     e: f,
     f: g
  }) // ->
);

aaaaaa(
  b,
  c,
  {
    d: a
  }
);

a(b, c,
  d, e,
    f, g  // NO ERROR: alignment of arguments of callExpression not checked
  );  // <-

a(
  ); // <-

aaaaaa(
  b,
  c, {
    d: a
  }, {
    e: f
  }
);

a.b()
  .c(function(){
    var a;
  }).d.e;

if (a == 'b') {
  if (c && d) e = f
  else g('h').i('j')
}

a = function (b, c) {
  return a(function () {
    var d = e
    var f = g
    var h = i

    if (!j) k('l', (m = n))
    if (o) p
    else if (q) r
  })
}

var a = function() {
  "b"
    .replace(/a/, "a")
    .replace(/bc?/, function(e) {
      return "b" + (e.f === 2 ? "c" : "f");
    })
    .replace(/d/, "d");
};

$(b)
  .on('a', 'b', function() { $(c).e('f'); })
  .on('g', 'h', function() { $(i).j('k'); });

a
  .b('c',
           'd'); // NO ERROR: CallExpression args not linted by default

a
  .b('c', [ 'd', function(e) {
    e++;
  }]);

var a = function() {
      a++;
    b++; // <-
        c++; // <-
    },
    b;

var b = [
      a,
      b,
      c
    ],
    c;

var c = {
      a: 1,
      b: 2,
      c: 3
    },
    d;

// holes in arrays indentation
x = [
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1
];

try {
  a++;
    b++; // <-
c++; // ->
} catch (d) {
  e++;
    f++; // <-
g++; // ->
} finally {
  h++;
    i++; // <-
j++; // ->
}

if (array.some(function(){
  return true;
})) {
a++; // ->
  b++;
    c++; // <-
}

var a = b.c(function() {
      d++;
    }),
    e;

switch (true) {
  case (a
  && b):
case (c // ->
&& d):
    case (e // <-
    && f):
  case (g
&& h):
      var i = j; // <-
    var k = l;
  var m = n; // ->
}

if (a) {
  b();
}
else {
c(); // ->
  d();
    e(); // <-
}

if (a) b();
else {
c(); // ->
  d();
    e(); // <-
}

if (a) {
  b();
} else c();

if (a) {
  b();
}
else c();

a();

if( "very very long multi line" +
      "with weird indentation" ) {
  b();
a(); // ->
    c(); // <-
}

a( "very very long multi line" +
    "with weird indentation", function() {
  b();
a(); // ->
    c(); // <-
    }); // <-

a = function(content, dom) {
  b();
    c(); // <-
d(); // ->
};

a = function(content, dom) {
      b();
        c(); // <-
    d(); // ->
    };

a = function(content, dom) {
    b(); // ->
    };

a = function(content, dom) {
b(); // ->
    };

a('This is a terribly long description youll ' +
  'have to read', function () {
    b(); // <-
    c(); // <-
  }); // <-

if (
  array.some(function(){
    return true;
  })
) {
a++; // ->
  b++;
    c++; // <-
}

function c(d) {
  return {
    e: function(f, g) {
    }
  };
}

function a(b) {
  switch(x) {
    case 1:
      if (foo) {
        return 5;
      }
  }
}

function a(b) {
  switch(x) {
    case 1:
      c;
  }
}

function a(b) {
  switch(x) {
    case 1: c;
  }
}

function test() {
  var a = 1;
  {
    a();
  }
}

{
  a();
}

function a(b) {
  switch(x) {
    case 1:
        { // <-
      a(); // ->
      }
      break;
    default:
      {
        b();
        }
  }
}

switch (a) {
  default:
    if (b)
      c();
}

function test(x) {
  switch (x) {
    case 1:
      return function() {
        var a = 5;
        return a;
      };
  }
}

switch (a) {
  default:
    if (b)
      c();
}
`,
			Output: `if (a) {
  var b = c;
  var d = e
    * f;
  var e = f; // <-
  // ->
  function g() {
    if (h) {
      var i = j;
    } // <-
  } // <-

  while (k) l++;
  while (m) {
    n--; // ->
  } // <-

  do {
    o = p +
  q; // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    o = p +
    q;
  } while(r); // <-

  for (var s in t) {
    u++;
  }

  for (;;) {
    v++; // <-
  }

  if ( w ) {
    x++;
  } else if (y) {
    z++; // <-
    aa++;
  } else { // <-
    bb++; // ->
  } // ->
}

/**/var b; // NO ERROR: single line multi-line comments followed by code is OK
/*
 *
 */ var b; // NO ERROR: multi-line comments followed by code is OK

var arr = [
  a,
  b,
  c,
  function (){
    d
  }, // <-
  {},
  {
    a: b,
    c: d,
    d: e
  },
  [
    f,
    g,
    h,
    i
  ],
  [j]
];

var obj = {
  a: {
    b: {
      c: d,
      e: f,
      g: h +
    i // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    }
  },
  g: [
    h,
    i,
    j,
    k
  ]
};

var arrObject = {a:[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]};

var objArray = [{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}];

var arrArray = [[
  a,
  b, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c
]];

var objObject = {a:{
  a: b,
  b: c, // NO ERROR: INDENT ONCE WHEN MULTIPLE INDENTED EXPRESSIONS ARE ON SAME LINE
  c: d
}};


switch (a) {
  case 'a':
    var a = 'b'; // ->
    break;
  case 'b':
    var a = 'b';
    break;
  case 'c':
    var a = 'b'; // <-
    break;
  case 'd':
    var a = 'b';
    break; // ->
  case 'f':
    var a = 'b';
    break;
  case 'g':     {
    var a = 'b';
    break;
  }
  case 'z':
  default:
    break; // <-
}

a.b('hi')
  .c(a.b()) // <-
  .d(); // <-

if ( a ) {
  if ( b ) {
    d.e(f) // ->
      .g() // ->
      .h(); // ->

    i.j(m)
      .k() // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
      .l(); // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS

    n.o(p) // <-
      .q() // <-
      .r(); // <-
  }
}

var a = b,
  c = function () {
    h = i; // ->
    j = k;
    l = m; // <-
  },
  e = {
    f: g,
    n: o,
    p: q
  },
  r = [
    s,
    t,
    u
  ];

var a = function () {
  b = c; // ->
  d = e;
  f = g; // <-
};

function c(a, b) {
  if (a || (a &&
            b)) { // NO ERROR: DON'T VALIDATE MULTILINE STATEMENTS
    return d;
  }
}

if ( a
  || b ) {
  var x; // ->
  var c,
    d = function(a,
      b) { // <-
      a; // ->
      b;
      c; // <-
    }
}


a({
  d: 1
});

a(
1
);

a(
  b({
    d: 1
  })
);

a(
  b(
    c({
      d: 1,
      e: 1,
      f: 1
    })
  )
);

a({ d: 1 });

aa(
   b({ // NO ERROR: CallExpression args not linted by default
     c: d, // ->
     e: f,
     f: g
   }) // ->
);

aaaaaa(
  b,
  c,
  {
    d: a
  }
);

a(b, c,
  d, e,
    f, g  // NO ERROR: alignment of arguments of callExpression not checked
);  // <-

a(
); // <-

aaaaaa(
  b,
  c, {
    d: a
  }, {
    e: f
  }
);

a.b()
  .c(function(){
    var a;
  }).d.e;

if (a == 'b') {
  if (c && d) e = f
  else g('h').i('j')
}

a = function (b, c) {
  return a(function () {
    var d = e
    var f = g
    var h = i

    if (!j) k('l', (m = n))
    if (o) p
    else if (q) r
  })
}

var a = function() {
  "b"
    .replace(/a/, "a")
    .replace(/bc?/, function(e) {
      return "b" + (e.f === 2 ? "c" : "f");
    })
    .replace(/d/, "d");
};

$(b)
  .on('a', 'b', function() { $(c).e('f'); })
  .on('g', 'h', function() { $(i).j('k'); });

a
  .b('c',
           'd'); // NO ERROR: CallExpression args not linted by default

a
  .b('c', [ 'd', function(e) {
    e++;
  }]);

var a = function() {
    a++;
    b++; // <-
    c++; // <-
  },
  b;

var b = [
    a,
    b,
    c
  ],
  c;

var c = {
    a: 1,
    b: 2,
    c: 3
  },
  d;

// holes in arrays indentation
x = [
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1
];

try {
  a++;
  b++; // <-
  c++; // ->
} catch (d) {
  e++;
  f++; // <-
  g++; // ->
} finally {
  h++;
  i++; // <-
  j++; // ->
}

if (array.some(function(){
  return true;
})) {
  a++; // ->
  b++;
  c++; // <-
}

var a = b.c(function() {
    d++;
  }),
  e;

switch (true) {
  case (a
  && b):
  case (c // ->
&& d):
  case (e // <-
    && f):
  case (g
&& h):
    var i = j; // <-
    var k = l;
    var m = n; // ->
}

if (a) {
  b();
}
else {
  c(); // ->
  d();
  e(); // <-
}

if (a) b();
else {
  c(); // ->
  d();
  e(); // <-
}

if (a) {
  b();
} else c();

if (a) {
  b();
}
else c();

a();

if( "very very long multi line" +
      "with weird indentation" ) {
  b();
  a(); // ->
  c(); // <-
}

a( "very very long multi line" +
    "with weird indentation", function() {
  b();
  a(); // ->
  c(); // <-
}); // <-

a = function(content, dom) {
  b();
  c(); // <-
  d(); // ->
};

a = function(content, dom) {
  b();
  c(); // <-
  d(); // ->
};

a = function(content, dom) {
  b(); // ->
};

a = function(content, dom) {
  b(); // ->
};

a('This is a terribly long description youll ' +
  'have to read', function () {
  b(); // <-
  c(); // <-
}); // <-

if (
  array.some(function(){
    return true;
  })
) {
  a++; // ->
  b++;
  c++; // <-
}

function c(d) {
  return {
    e: function(f, g) {
    }
  };
}

function a(b) {
  switch(x) {
    case 1:
      if (foo) {
        return 5;
      }
  }
}

function a(b) {
  switch(x) {
    case 1:
      c;
  }
}

function a(b) {
  switch(x) {
    case 1: c;
  }
}

function test() {
  var a = 1;
  {
    a();
  }
}

{
  a();
}

function a(b) {
  switch(x) {
    case 1:
      { // <-
        a(); // ->
      }
      break;
    default:
    {
      b();
    }
  }
}

switch (a) {
  default:
    if (b)
      c();
}

function test(x) {
  switch (x) {
    case 1:
      return function() {
        var a = 5;
        return a;
      };
  }
}

switch (a) {
  default:
    if (b)
      c();
}
`,
			Options: "[2,{\"SwitchCase\":1,\"MemberExpression\":1,\"CallExpression\":{\"arguments\":\"off\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
				{
					MessageId: "wrongIndentation",
					Line:      15,
				},
				{
					MessageId: "wrongIndentation",
					Line:      16,
				},
				{
					MessageId: "wrongIndentation",
					Line:      23,
				},
				{
					MessageId: "wrongIndentation",
					Line:      29,
				},
				{
					MessageId: "wrongIndentation",
					Line:      30,
				},
				{
					MessageId: "wrongIndentation",
					Line:      36,
				},
				{
					MessageId: "wrongIndentation",
					Line:      38,
				},
				{
					MessageId: "wrongIndentation",
					Line:      39,
				},
				{
					MessageId: "wrongIndentation",
					Line:      40,
				},
				{
					MessageId: "wrongIndentation",
					Line:      54,
				},
				{
					MessageId: "wrongIndentation",
					Line:      114,
				},
				{
					MessageId: "wrongIndentation",
					Line:      120,
				},
				{
					MessageId: "wrongIndentation",
					Line:      124,
				},
				{
					MessageId: "wrongIndentation",
					Line:      134,
				},
				{
					MessageId: "wrongIndentation",
					Line:      138,
				},
				{
					MessageId: "wrongIndentation",
					Line:      139,
				},
				{
					MessageId: "wrongIndentation",
					Line:      143,
				},
				{
					MessageId: "wrongIndentation",
					Line:      144,
				},
				{
					MessageId: "wrongIndentation",
					Line:      145,
				},
				{
					MessageId: "wrongIndentation",
					Line:      151,
				},
				{
					MessageId: "wrongIndentation",
					Line:      152,
				},
				{
					MessageId: "wrongIndentation",
					Line:      153,
				},
				{
					MessageId: "wrongIndentation",
					Line:      159,
				},
				{
					MessageId: "wrongIndentation",
					Line:      161,
				},
				{
					MessageId: "wrongIndentation",
					Line:      175,
				},
				{
					MessageId: "wrongIndentation",
					Line:      177,
				},
				{
					MessageId: "wrongIndentation",
					Line:      189,
				},
				{
					MessageId: "wrongIndentation",
					Line:      192,
				},
				{
					MessageId: "wrongIndentation",
					Line:      193,
				},
				{
					MessageId: "wrongIndentation",
					Line:      195,
				},
				{
					MessageId: "wrongIndentation",
					Line:      228,
				},
				{
					MessageId: "wrongIndentation",
					Line:      231,
				},
				{
					MessageId: "wrongIndentation",
					Line:      245,
				},
				{
					MessageId: "wrongIndentation",
					Line:      248,
				},
				{
					MessageId: "wrongIndentation",
					Line:      304,
				},
				{
					MessageId: "wrongIndentation",
					Line:      306,
				},
				{
					MessageId: "wrongIndentation",
					Line:      307,
				},
				{
					MessageId: "wrongIndentation",
					Line:      308,
				},
				{
					MessageId: "wrongIndentation",
					Line:      311,
				},
				{
					MessageId: "wrongIndentation",
					Line:      312,
				},
				{
					MessageId: "wrongIndentation",
					Line:      313,
				},
				{
					MessageId: "wrongIndentation",
					Line:      314,
				},
				{
					MessageId: "wrongIndentation",
					Line:      315,
				},
				{
					MessageId: "wrongIndentation",
					Line:      318,
				},
				{
					MessageId: "wrongIndentation",
					Line:      319,
				},
				{
					MessageId: "wrongIndentation",
					Line:      320,
				},
				{
					MessageId: "wrongIndentation",
					Line:      321,
				},
				{
					MessageId: "wrongIndentation",
					Line:      322,
				},
				{
					MessageId: "wrongIndentation",
					Line:      326,
				},
				{
					MessageId: "wrongIndentation",
					Line:      327,
				},
				{
					MessageId: "wrongIndentation",
					Line:      328,
				},
				{
					MessageId: "wrongIndentation",
					Line:      329,
				},
				{
					MessageId: "wrongIndentation",
					Line:      330,
				},
				{
					MessageId: "wrongIndentation",
					Line:      331,
				},
				{
					MessageId: "wrongIndentation",
					Line:      332,
				},
				{
					MessageId: "wrongIndentation",
					Line:      333,
				},
				{
					MessageId: "wrongIndentation",
					Line:      334,
				},
				{
					MessageId: "wrongIndentation",
					Line:      335,
				},
				{
					MessageId: "wrongIndentation",
					Line:      340,
				},
				{
					MessageId: "wrongIndentation",
					Line:      341,
				},
				{
					MessageId: "wrongIndentation",
					Line:      344,
				},
				{
					MessageId: "wrongIndentation",
					Line:      345,
				},
				{
					MessageId: "wrongIndentation",
					Line:      348,
				},
				{
					MessageId: "wrongIndentation",
					Line:      349,
				},
				{
					MessageId: "wrongIndentation",
					Line:      355,
				},
				{
					MessageId: "wrongIndentation",
					Line:      357,
				},
				{
					MessageId: "wrongIndentation",
					Line:      361,
				},
				{
					MessageId: "wrongIndentation",
					Line:      362,
				},
				{
					MessageId: "wrongIndentation",
					Line:      363,
				},
				{
					MessageId: "wrongIndentation",
					Line:      368,
				},
				{
					MessageId: "wrongIndentation",
					Line:      370,
				},
				{
					MessageId: "wrongIndentation",
					Line:      374,
				},
				{
					MessageId: "wrongIndentation",
					Line:      376,
				},
				{
					MessageId: "wrongIndentation",
					Line:      383,
				},
				{
					MessageId: "wrongIndentation",
					Line:      385,
				},
				{
					MessageId: "wrongIndentation",
					Line:      390,
				},
				{
					MessageId: "wrongIndentation",
					Line:      392,
				},
				{
					MessageId: "wrongIndentation",
					Line:      409,
				},
				{
					MessageId: "wrongIndentation",
					Line:      410,
				},
				{
					MessageId: "wrongIndentation",
					Line:      416,
				},
				{
					MessageId: "wrongIndentation",
					Line:      417,
				},
				{
					MessageId: "wrongIndentation",
					Line:      418,
				},
				{
					MessageId: "wrongIndentation",
					Line:      422,
				},
				{
					MessageId: "wrongIndentation",
					Line:      423,
				},
				{
					MessageId: "wrongIndentation",
					Line:      427,
				},
				{
					MessageId: "wrongIndentation",
					Line:      428,
				},
				{
					MessageId: "wrongIndentation",
					Line:      429,
				},
				{
					MessageId: "wrongIndentation",
					Line:      430,
				},
				{
					MessageId: "wrongIndentation",
					Line:      433,
				},
				{
					MessageId: "wrongIndentation",
					Line:      434,
				},
				{
					MessageId: "wrongIndentation",
					Line:      437,
				},
				{
					MessageId: "wrongIndentation",
					Line:      438,
				},
				{
					MessageId: "wrongIndentation",
					Line:      442,
				},
				{
					MessageId: "wrongIndentation",
					Line:      443,
				},
				{
					MessageId: "wrongIndentation",
					Line:      444,
				},
				{
					MessageId: "wrongIndentation",
					Line:      451,
				},
				{
					MessageId: "wrongIndentation",
					Line:      453,
				},
				{
					MessageId: "wrongIndentation",
					Line:      499,
				},
				{
					MessageId: "wrongIndentation",
					Line:      500,
				},
				{
					MessageId: "wrongIndentation",
					Line:      504,
				},
				{
					MessageId: "wrongIndentation",
					Line:      505,
				},
				{
					MessageId: "wrongIndentation",
					Line:      506,
				},
			},
		},
		{
			Code: `switch(value){
    case "1":
        a();
    break;
    case "2":
        a();
    break;
    default:
        a();
        break;
}`,
			Output: `switch(value){
    case "1":
        a();
        break;
    case "2":
        a();
        break;
    default:
        a();
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `var x = 0 &&
    {
       a: 1,
          b: 2
    };`,
			Output: `var x = 0 &&
    {
        a: 1,
        b: 2
    };`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `switch(value){
    case "1":
        a();
        break;
    case "2":
        a();
        break;
    default:
    break;
}`,
			Output: `switch(value){
    case "1":
        a();
        break;
    case "2":
        a();
        break;
    default:
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
			},
		},
		{
			Code: `switch(value){
    case "1":
    case "2":
        a();
        break;
    default:
        break;
}
switch(value){
    case "1":
    break;
    case "2":
        a();
    break;
    default:
        a();
    break;
}`,
			Output: `switch(value){
    case "1":
    case "2":
        a();
        break;
    default:
        break;
}
switch(value){
    case "1":
        break;
    case "2":
        a();
        break;
    default:
        a();
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
				{
					MessageId: "wrongIndentation",
					Line:      14,
				},
				{
					MessageId: "wrongIndentation",
					Line:      17,
				},
			},
		},
		{
			Code: `switch(value){
case "1":
        a();
        break;
    case "2":
        break;
    default:
        break;
}`,
			Output: `switch(value){
case "1":
    a();
    break;
case "2":
    break;
default:
    break;
}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
		{
			Code: `var obj = {foo: 1, bar: 2};
with (obj) {
console.log(foo + bar);
}`,
			Output: `var obj = {foo: 1, bar: 2};
with (obj) {
    console.log(foo + bar);
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `switch (a) {
case '1':
b();
break;
default:
c();
break;
}`,
			Output: `switch (a) {
    case '1':
        b();
        break;
    default:
        c();
        break;
}`,
			Options: "[4,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `var foo = function(){
    foo
          .bar
}`,
			Output: `var foo = function(){
    foo
        .bar
}`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `(
    foo
    .bar
)`,
			Output: `(
    foo
        .bar
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = function(){
    foo
             .bar
}`,
			Output: `var foo = function(){
    foo
            .bar
}`,
			Options: "[4,{\"MemberExpression\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = () => {
    foo
             .bar
}`,
			Output: `var foo = () => {
    foo
            .bar
}`,
			Options: "[4,{\"MemberExpression\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `TestClass.prototype.method = function () {
  return Promise.resolve(3)
      .then(function (x) {
      return x;
    });
};`,
			Output: `TestClass.prototype.method = function () {
  return Promise.resolve(3)
    .then(function (x) {
      return x;
    });
};`,
			Options: "[2,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `while (a)
b();`,
			Output: `while (a)
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `lmn = [{
        a: 1
    },
    {
        b: 2
    },
    {
        x: 2
}];`,
			Output: `lmn = [{
    a: 1
},
{
    b: 2
},
{
    x: 2
}];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
		{
			Code: `for (var foo = 1;
foo < 10;
foo++) {}`,
			Output: `for (var foo = 1;
    foo < 10;
    foo++) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `for (
var foo = 1;
foo < 10;
foo++
    ) {}`,
			Output: `for (
    var foo = 1;
    foo < 10;
    foo++
) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `for (;;)
b();`,
			Output: `for (;;)
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `for (a in x)
b();`,
			Output: `for (a in x)
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `do
b();
while(true)`,
			Output: `do
    b();
while(true)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `with(a)
b();`,
			Output: `with(a)
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if(true)
b();`,
			Output: `if(true)
    b();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var test = {
      a: 1,
    b: 2
    };`,
			Output: `var test = {
  a: 1,
  b: 2
};`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = function() {
      a++;
    b++;
          c++;
    },
    b;`,
			Output: `var a = function() {
        a++;
        b++;
        c++;
    },
    b;`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = 1,
b = 2,
c = 3;`,
			Output: `var a = 1,
    b = 2,
    c = 3;`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `[a, b,
    c].forEach((index) => {
        index;
    });`,
			Output: `[a, b,
    c].forEach((index) => {
    index;
});`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `[a, b,
c].forEach(function(index){
  return index;
});`,
			Output: `[a, b,
    c].forEach(function(index){
    return index;
});`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `[a, b, c].forEach(function(index){
  return index;
});`,
			Output: `[a, b, c].forEach(function(index){
    return index;
});`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `(foo)
    .bar([
    baz
]);`,
			Output: `(foo)
    .bar([
        baz
    ]);`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var x = ['a',
         'b',
         'c'
];`,
			Output: `var x = ['a',
    'b',
    'c'
];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var x = [
         'a',
         'b',
         'c'
];`,
			Output: `var x = [
    'a',
    'b',
    'c'
];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var x = [
         'a',
         'b',
         'c',
'd'];`,
			Output: `var x = [
    'a',
    'b',
    'c',
    'd'];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `var x = [
         'a',
         'b',
         'c'
  ];`,
			Output: `var x = [
    'a',
    'b',
    'c'
];`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `[[
], function(
        foo
    ) {}
]`,
			Output: `[[
], function(
    foo
) {}
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `define([
    'foo'
], function(
        bar
    ) {
    baz;
}
)`,
			Output: `define([
    'foo'
], function(
    bar
) {
    baz;
}
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `while (1 < 2)
console.log('foo')
  console.log('bar')`,
			Output: `while (1 < 2)
  console.log('foo')
console.log('bar')`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function salutation () {
  switch (1) {
  case 0: return console.log('hi')
    case 1: return console.log('hey')
  }
}`,
			Output: `function salutation () {
  switch (1) {
    case 0: return console.log('hi')
    case 1: return console.log('hey')
  }
}`,
			Options: "[2,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth,
height, rotate;`,
			Output: `var geometry, box, face1, face2, colorT, colorB, sprite, padding, maxWidth,
  height, rotate;`,
			Options: "[2,{\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `switch (a) {
case '1':
b();
break;
default:
c();
break;
}`,
			Output: `switch (a) {
        case '1':
            b();
            break;
        default:
            c();
            break;
}`,
			Options: "[4,{\"SwitchCase\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `var geometry,
rotate;`,
			Output: `var geometry,
  rotate;`,
			Options: "[2,{\"VariableDeclarator\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var geometry,
  rotate;`,
			Output: `var geometry,
    rotate;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var geometry,
	rotate;`,
			Output: `var geometry,
		rotate;`,
			Options: "[\"tab\",{\"VariableDeclarator\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `let geometry,
  rotate;`,
			Output: `let geometry,
    rotate;`,
			Options: "[2,{\"VariableDeclarator\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `let foo = 'foo',
  bar = bar;
const a = 'a',
  b = 'b';`,
			Output: `let foo = 'foo',
    bar = bar;
const a = 'a',
      b = 'b';`,
			Options: "[2,{\"VariableDeclarator\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = 'foo',
  bar = bar;`,
			Output: `var foo = 'foo',
    bar = bar;`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if(true)
  if (true)
    if (true)
    console.log(val);`,
			Output: `if(true)
  if (true)
    if (true)
      console.log(val);`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = {
    a: 1,
    b: 2
}`,
			Output: `var a = {
  a: 1,
  b: 2
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = [
    a,
    b
]`,
			Output: `var a = [
  a,
  b
]`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `let a = [
    a,
    b
]`,
			Output: `let a = [
  a,
  b
]`,
			Options: "[2,{\"VariableDeclarator\":{\"let\":2},\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = new Test({
      a: 1
  }),
    b = 4;`,
			Output: `var a = new Test({
        a: 1
    }),
    b = 4;`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var a = new Test({
      a: 1
    }),
    b = 4;
const c = new Test({
      a: 1
    }),
    d = 4;`,
			Output: `var a = new Test({
      a: 1
    }),
    b = 4;
const c = new Test({
    a: 1
  }),
  d = 4;`,
			Options: "[2,{\"VariableDeclarator\":{\"var\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
		{
			Code: `var abc = 5,
    c = 2,
    xyz =
    {
      a: 1,
       b: 2
    };`,
			Output: `var abc = 5,
    c = 2,
    xyz =
    {
      a: 1,
      b: 2
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `var abc =
     {
       a: 1,
        b: 2
     };`,
			Output: `var abc =
     {
       a: 1,
       b: 2
     };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = {
    bar: 1,
    baz: {
        qux: 2
      }
  },
  bar = 1;`,
			Output: `var foo = {
    bar: 1,
    baz: {
      qux: 2
    }
  },
  bar = 1;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `var path     = require('path')
 , crypto    = require('crypto')
;`,
			Output: `var path     = require('path')
  , crypto    = require('crypto')
;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var a = 1
   ,b = 2
;`,
			Output: `var a = 1
    ,b = 2
;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `class A{
  constructor(){}
    a(){}
    get b(){}
}`,
			Output: `class A{
    constructor(){}
    a(){}
    get b(){}
}`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var A = class {
  constructor(){}
    a(){}
  get b(){}
};`,
			Output: `var A = class {
    constructor(){}
    a(){}
    get b(){}
};`,
			Options: "[4,{\"VariableDeclarator\":1,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var a = 1,
    B = class {
    constructor(){}
      a(){}
      get b(){}
    };`,
			Output: `var a = 1,
    B = class {
      constructor(){}
      a(){}
      get b(){}
    };`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `{
    if(a){
        foo();
    }
  else{
        bar();
    }
}`,
			Output: `{
    if(a){
        foo();
    }
    else{
        bar();
    }
}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `{
    if(a){
        foo();
    }
  else
        bar();

}`,
			Output: `{
    if(a){
        foo();
    }
    else
        bar();

}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `{
    if(a)
        foo();
  else
        bar();
}`,
			Output: `{
    if(a)
        foo();
    else
        bar();
}`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `(function(){
  function foo(x) {
    return x + 1;
  }
})();`,
			Output: `(function(){
function foo(x) {
  return x + 1;
}
})();`,
			Options: "[2,{\"outerIIFEBody\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `(function(){
    function foo(x) {
        return x + 1;
    }
})();`,
			Output: `(function(){
        function foo(x) {
            return x + 1;
        }
})();`,
			Options: "[4,{\"outerIIFEBody\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if(data) {
console.log('hi');
}`,
			Output: `if(data) {
  console.log('hi');
}`,
			Options: "[2,{\"outerIIFEBody\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var ns = function(){
    function fooVar(x) {
        return x + 1;
    }
}(x);`,
			Output: `var ns = function(){
        function fooVar(x) {
            return x + 1;
        }
}(x);`,
			Options: "[4,{\"outerIIFEBody\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var obj = {
  foo: function() {
  return true;
  }()
};`,
			Output: `var obj = {
  foo: function() {
    return true;
  }()
};`,
			Options: "[2,{\"outerIIFEBody\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `typeof function() {
    function fooVar(x) {
      return x + 1;
    }
}();`,
			Output: `typeof function() {
  function fooVar(x) {
    return x + 1;
  }
}();`,
			Options: "[2,{\"outerIIFEBody\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `{
	!function(x) {
				return x + 1;
	}()
};`,
			Output: `{
	!function(x) {
		return x + 1;
	}()
};`,
			Options: "[\"tab\",{\"outerIIFEBody\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `(function(){
    function foo(x) {
    return x + 1;
    }
})();`,
			Output: `(function(){
    function foo(x) {
        return x + 1;
    }
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `(function(){
function foo(x) {
return x + 1;
}
})();`,
			Output: `(function(){
function foo(x) {
    return x + 1;
}
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `(() => {
    function foo(x) {
    return x + 1;
    }
})();`,
			Output: `(() => {
    function foo(x) {
        return x + 1;
    }
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `(() => {
function foo(x) {
return x + 1;
}
})();`,
			Output: `(() => {
function foo(x) {
    return x + 1;
}
})();`,
			Options: "[4,{\"outerIIFEBody\":\"off\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `Buffer
.toString()`,
			Output: `Buffer
    .toString()`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `Buffer
    .indexOf('a')
.toString()`,
			Output: `Buffer
    .indexOf('a')
    .toString()`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `Buffer.
length`,
			Output: `Buffer.
    length`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `Buffer.
		length`,
			Output: `Buffer.
	length`,
			Options: "[\"tab\",{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `Buffer
  .foo
  .bar`,
			Output: `Buffer
    .foo
    .bar`,
			Options: "[2,{\"MemberExpression\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
    new
    .target
}`,
			Output: `function foo() {
    new
        .target
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
    new.
    target
}`,
			Output: `function foo() {
    new.
        target
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) foobar();
  else if (qux) qux();`,
			Output: `if (foo) bar();
else if (baz) foobar();
else if (qux) qux();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) foobar();
  else qux();`,
			Output: `if (foo) bar();
else if (baz) foobar();
else qux();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo();
  if (baz) foobar();
  else qux();`,
			Output: `foo();
if (baz) foobar();
else qux();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) foobar();
     else if (bip) {
       qux();
     }`,
			Output: `if (foo) bar();
else if (baz) foobar();
else if (bip) {
  qux();
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (foo) bar();
else if (baz) {
    foobar();
     } else if (boop) {
       qux();
     }`,
			Output: `if (foo) bar();
else if (baz) {
  foobar();
} else if (boop) {
  qux();
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `function foo(aaa,
    bbb, ccc, ddd) {
      bar();
}`,
			Output: `function foo(aaa,
  bbb, ccc, ddd) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo(aaa, bbb,
  ccc, ddd) {
bar();
}`,
			Output: `function foo(aaa, bbb,
      ccc, ddd) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":3,\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo(aaa,
        bbb,
  ccc) {
      bar();
}`,
			Output: `function foo(aaa,
    bbb,
    ccc) {
            bar();
}`,
			Options: "[4,{\"FunctionDeclaration\":{\"parameters\":1,\"body\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo(aaa,
  bbb, ccc,
                   ddd, eee, fff) {
   bar();
}`,
			Output: `function foo(aaa,
             bbb, ccc,
             ddd, eee, fff) {
  bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo(aaa, bbb)
{
bar();
}`,
			Output: `function foo(aaa, bbb)
{
      bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo(
aaa,
    bbb) {
bar();
}`,
			Output: `function foo(
  aaa,
  bbb) {
    bar();
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\",\"body\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = function(aaa,
  bbb,
    ccc,
      ddd) {
  bar();
}`,
			Output: `var foo = function(aaa,
    bbb,
    ccc,
    ddd) {
bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":2,\"body\":0}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `var foo = function(aaa,
   bbb,
 ccc) {
  bar();
}`,
			Output: `var foo = function(aaa,
  bbb,
  ccc) {
                    bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":1,\"body\":10}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = function(aaa,
  bbb, ccc, ddd,
                        eee, fff) {
        bar();
}`,
			Output: `var foo = function(aaa,
                   bbb, ccc, ddd,
                   eee, fff) {
    bar();
}`,
			Options: "[4,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = function(
aaa, bbb, ccc,
    ddd, eee) {
  bar();
}`,
			Output: `var foo = function(
  aaa, bbb, ccc,
  ddd, eee) {
      bar();
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":\"first\",\"body\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = bar;
			var baz = qux;`,
			Output: `var foo = bar;
var baz = qux;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() {
	bar();
  baz();
              qux();
}`,
			Output: `function foo() {
	bar();
	baz();
	qux();
}`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
  bar();
		}`,
			Output: `function foo() {
  bar();
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
  function bar() {
        baz();
  }
}`,
			Output: `function foo() {
  function bar() {
    baz();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
  function bar(baz,
    qux) {
    foobar();
  }
}`,
			Output: `function foo() {
  function bar(baz,
      qux) {
    foobar();
  }
}`,
			Options: "[2,{\"FunctionDeclaration\":{\"body\":1,\"parameters\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function foo() {
  var bar = function(baz,
          qux) {
    foobar();
  };
}`,
			Output: `function foo() {
  var bar = function(baz,
        qux) {
    foobar();
  };
}`,
			Options: "[2,{\"FunctionExpression\":{\"parameters\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo.bar(
      baz, qux, function() {
        qux;
      }
);`,
			Output: `foo.bar(
      baz, qux, function() {
            qux;
      }
);`,
			Options: "[2,{\"FunctionExpression\":{\"body\":3},\"CallExpression\":{\"arguments\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `{
    try {
    }
catch (err) {
    }
finally {
    }
}`,
			Output: `{
    try {
    }
    catch (err) {
    }
    finally {
    }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `{
    do {
    }
while (true)
}`,
			Output: `{
    do {
    }
    while (true)
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
  return (
    1
    )
}`,
			Output: `function foo() {
  return (
    1
  )
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
  return (
    1
    );
}`,
			Output: `function foo() {
  return (
    1
  );
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function test(){
  switch(length){
    case 1: return function(a){
    return fn.call(that, a);
    };
  }
}`,
			Output: `function test(){
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
  }
}`,
			Options: "[2,{\"VariableDeclarator\":2,\"SwitchCase\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
   return 1
}`,
			Output: `function foo() {
  return 1
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo(
bar,
  baz,
    qux);`,
			Output: `foo(
  bar,
  baz,
  qux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo(
	bar,
	baz);`,
			Output: `foo(
    bar,
    baz);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(bar,
		baz,
		qux);`,
			Output: `foo(bar,
	baz,
	qux);`,
			Options: "[\"tab\",{\"CallExpression\":{\"arguments\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(bar, baz,
         qux);`,
			Output: `foo(bar, baz,
    qux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo(
          bar,
    baz);`,
			Output: `foo(
  bar,
  baz);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(bar,
  1 + 2,
              !baz,
        new Car('!')
);`,
			Output: `foo(bar,
      1 + 2,
      !baz,
      new Car('!')
);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `return (
    foo
    );`,
			Output: `return (
    foo
);`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `return (
    foo
    )`,
			Output: `return (
    foo
)`,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) {
        /* comment */bar();
}`,
			Output: `if (foo) {
    /* comment */bar();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo('bar',
        /** comment */{
        ok: true
    });`,
			Output: `foo('bar',
    /** comment */{
        ok: true
    });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo(
(bar)
);`,
			Output: `foo(
    (bar)
);`,
			Options: "[4,{\"CallExpression\":{\"arguments\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `((
foo
))`,
			Output: `((
    foo
))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo
? bar
    : baz`,
			Output: `foo
  ? bar
  : baz`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `[
    foo ?
        bar :
        baz,
        qux
]`,
			Output: `[
    foo ?
        bar :
        baz,
    qux
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `condition
? () => {
return true
}
: condition2
? () => {
return true
}
: () => {
return false
}`,
			Output: `condition
  ? () => {
      return true
    }
  : condition2
    ? () => {
        return true
      }
    : () => {
        return false
      }`,
			Options: "[2,{\"offsetTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
			},
		},
		{
			Code: `condition
? () => {
return true
}
: condition2
? () => {
return true
}
: () => {
return false
}`,
			Output: `condition
  ? () => {
    return true
  }
  : condition2
    ? () => {
      return true
    }
    : () => {
      return false
    }`,
			Options: "[2,{\"offsetTernaryExpressions\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
			},
		},
		{
			Code: `foo();
  // comment
    /* multiline
  comment */
bar();
 // trailing comment`,
			Output: `foo();
// comment
/* multiline
  comment */
bar();
// trailing comment`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code:   `  // comment`,
			Output: `// comment`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `foo
  // comment`,
			Output: `foo
// comment`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `  // comment
foo`,
			Output: `// comment
foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `[
        // no elements
]`,
			Output: `[
    // no elements
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var {
foo,
  bar,
    baz: qux,
      foobar: baz = foobar
  } = qux;`,
			Output: `var {
  foo,
  bar,
  baz: qux,
  foobar: baz = foobar
} = qux;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `const {
  a
} = {
    a: 1
  }`,
			Output: `const {
  a
} = {
  a: 1
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `var foo = [
           bar,
  baz
          ]`,
			Output: `var foo = [
    bar,
    baz
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = [bar,
baz,
    qux
]`,
			Output: `var foo = [bar,
    baz,
    qux
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var foo = [bar,
  baz,
  qux
]`,
			Output: `var foo = [bar,
baz,
qux
]`,
			Options: "[2,{\"ArrayExpression\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = [bar,
  baz,
  qux
]`,
			Output: `var foo = [bar,
                baz,
                qux
]`,
			Options: "[2,{\"ArrayExpression\":8}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = [bar,
    baz,
    qux
]`,
			Output: `var foo = [bar,
           baz,
           qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = [bar,
    baz, qux
]`,
			Output: `var foo = [bar,
           baz, qux
]`,
			Options: "[2,{\"ArrayExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var foo = [
        { bar: 1,
            baz: 2 },
        { bar: 3,
            qux: 4 }
]`,
			Output: `var foo = [
        { bar: 1,
          baz: 2 },
        { bar: 3,
          qux: 4 }
]`,
			Options: "[4,{\"ArrayExpression\":2,\"ObjectExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `var foo = {
  bar: 1,
  baz: 2
};`,
			Output: `var foo = {
bar: 1,
baz: 2
};`,
			Options: "[2,{\"ObjectExpression\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var quux = { foo: 1, bar: 2,
baz: 3 }`,
			Output: `var quux = { foo: 1, bar: 2,
             baz: 3 }`,
			Options: "[2,{\"ObjectExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo() {
    [
            foo
    ]
}`,
			Output: `function foo() {
  [
          foo
  ]
}`,
			Options: "[2,{\"ArrayExpression\":4}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var [
foo,
  bar,
    baz,
      foobar = baz
  ] = qux;`,
			Output: `var [
  foo,
  bar,
  baz,
  foobar = baz
] = qux;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `import {
foo,
  bar,
    baz
} from 'qux';`,
			Output: `import {
    foo,
    bar,
    baz
} from 'qux';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `import { foo,
         bar,
          baz,
} from 'qux';`,
			Output: `import { foo,
         bar,
         baz,
} from 'qux';`,
			Options:         "[4,{\"ImportDeclaration\":\"first\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `import { foo,
    bar,
     baz,
} from 'qux';`,
			Output: `import { foo,
    bar,
    baz,
} from 'qux';`,
			Options:         "[2,{\"ImportDeclaration\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var foo = 0, bar = 0, baz = 0;
export {
foo,
  bar,
    baz
};`,
			Output: `var foo = 0, bar = 0, baz = 0;
export {
    foo,
    bar,
    baz
};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var foo = 0, bar = 0, baz = 0;
export {
foo,
  bar,
    baz
} from 'qux';`,
			Output: `var foo = 0, bar = 0, baz = 0;
export {
    foo,
    bar,
    baz
} from 'qux';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var folder = filePath
  .foo()
      .bar;`,
			Output: `var folder = filePath
    .foo()
    .bar;`,
			Options: "[2,{\"MemberExpression\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `for (const foo of bar)
    baz();`,
			Output: `for (const foo of bar)
  baz();`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `var x = () =>
    5;`,
			Output: `var x = () =>
  5;`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo && (
        bar
)`,
			Output: `foo && (
    bar
)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo &&
    !bar(
)`,
			Output: `foo &&
    !bar(
    )`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo &&
    ![].map(() => {
    bar();
})`,
			Output: `foo &&
    ![].map(() => {
        bar();
    })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `[
] || [
    ]`,
			Output: `[
] || [
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo
        || (
                bar
            )`,
			Output: `foo
        || (
            bar
        )`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `1
+ (
        1
    )`,
			Output: `1
+ (
    1
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `` + "`" + `foo${
bar}` + "`" + ``,
			Output: `` + "`" + `foo${
  bar}` + "`" + ``,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `` + "`" + `foo${
    ` + "`" + `bar${
baz}` + "`" + `}` + "`" + ``,
			Output: `` + "`" + `foo${
  ` + "`" + `bar${
    baz}` + "`" + `}` + "`" + ``,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `` + "`" + `foo${
    ` + "`" + `bar${
  baz
    }` + "`" + `
  }` + "`" + ``,
			Output: `` + "`" + `foo${
  ` + "`" + `bar${
    baz
  }` + "`" + `
}` + "`" + ``,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `` + "`" + `foo${
(
  bar
)
}` + "`" + ``,
			Output: `` + "`" + `foo${
  (
    bar
  )
}` + "`" + ``,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
    ` + "`" + `foo${bar}baz${
qux}foo${
  bar}baz` + "`" + `
}`,
			Output: `function foo() {
    ` + "`" + `foo${bar}baz${
        qux}foo${
        bar}baz` + "`" + `
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function foo() {
    const template = ` + "`" + `the indentation of
a curly element in a ${
        node.type
    } node is checked.` + "`" + `;
}`,
			Output: `function foo() {
    const template = ` + "`" + `the indentation of
a curly element in a ${
    node.type
} node is checked.` + "`" + `;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `function foo() {
    const template = ` + "`" + `this time the
closing curly is at the end of the line ${
            foo}
        so the spaces before this line aren't removed.` + "`" + `;
}`,
			Output: `function foo() {
    const template = ` + "`" + `this time the
closing curly is at the end of the line ${
    foo}
        so the spaces before this line aren't removed.` + "`" + `;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (true) {
    a = (
1 +
        2);
}`,
			Output: `if (true) {
    a = (
        1 +
        2);
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (true) {
    for (;;) {
      b();
  }
}`,
			Output: `if (true) {
  for (;;) {
    b();
  }
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `function f() {
    return asyncCall()
    .then(
               'some string',
              [
              1,
         2,
                                   3
                      ]
);
 }`,
			Output: `function f() {
    return asyncCall()
        .then(
            'some string',
            [
                1,
                2,
                3
            ]
        );
}`,
			Options: "[4,{\"MemberExpression\":1,\"CallExpression\":{\"arguments\":1}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
			},
		},
		{
			Code: `var x = [
      [1],
  [2]
]`,
			Output: `var x = [
    [1],
    [2]
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var y = [
      {a: 1},
  {b: 2}
]`,
			Output: `var y = [
    {a: 1},
    {b: 2}
]`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `echo = spawn('cmd.exe',
            ['foo', 'bar',
             'baz']);`,
			Output: `echo = spawn('cmd.exe',
             ['foo', 'bar',
              'baz']);`,
			Options: "[2,{\"ArrayExpression\":\"first\",\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(
  )`,
			Output: `foo(
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo(
        bar,
    {
        baz: 1
    }
)`,
			Output: `foo(
    bar,
    {
        baz: 1
    }
)`,
			Options: "[4,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code:   `  new Foo`,
			Output: `new Foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `var foo = 0, bar = 0, baz = 0;
export {
foo,
        bar,
  baz
}`,
			Output: `var foo = 0, bar = 0, baz = 0;
export {
    foo,
    bar,
    baz
}`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `foo
    ? bar
: baz`,
			Output: `foo
    ? bar
    : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo ?
    bar :
baz`,
			Output: `foo ?
    bar :
    baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo ?
    bar
  : baz`,
			Output: `foo ?
    bar
    : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo
    ? bar :
baz`,
			Output: `foo
    ? bar :
    baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo ? bar
    : baz ? qux
        : foobar ? boop
            : beep`,
			Output: `foo ? bar
    : baz ? qux
    : foobar ? boop
    : beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo ? bar :
    baz ? qux :
        foobar ? boop :
            beep`,
			Output: `foo ? bar :
    baz ? qux :
    foobar ? boop :
    beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var a =
    foo ? bar :
      baz ? qux :
  foobar ? boop :
    /*else*/ beep`,
			Output: `var a =
    foo ? bar :
    baz ? qux :
    foobar ? boop :
    /*else*/ beep`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var a =
    foo
    ? bar
    : baz`,
			Output: `var a =
    foo
        ? bar
        : baz`,
			Options: "[4,{\"flatTernaryExpressions\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo ? bar
    : baz ? qux
    : foobar ? boop
    : beep`,
			Output: `foo ? bar
    : baz ? qux
        : foobar ? boop
            : beep`,
			Options: "[4,{\"flatTernaryExpressions\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo ? bar :
    baz ? qux :
    foobar ? boop :
    beep`,
			Output: `foo ? bar :
    baz ? qux :
        foobar ? boop :
            beep`,
			Options: "[4,{\"flatTernaryExpressions\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo
    ? bar
    : baz
    ? qux
    : foobar
    ? boop
    : beep`,
			Output: `foo
    ? bar
    : baz
        ? qux
        : foobar
            ? boop
            : beep`,
			Options: "[4,{\"flatTernaryExpressions\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `foo ?
    bar :
    baz ?
    qux :
    foobar ?
    boop :
    beep`,
			Output: `foo ?
    bar :
    baz ?
        qux :
        foobar ?
            boop :
            beep`,
			Options: "[4,{\"flatTernaryExpressions\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `foo.bar('baz', function(err) {
          qux;
});`,
			Output: `foo.bar('baz', function(err) {
  qux;
});`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo.bar(function() {
  cookies;
}).baz(function() {
    cookies;
  });`,
			Output: `foo.bar(function() {
  cookies;
}).baz(function() {
  cookies;
});`,
			Options: "[2,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `foo.bar().baz(function() {
  cookies;
}).qux(function() {
    cookies;
  });`,
			Output: `foo.bar().baz(function() {
  cookies;
}).qux(function() {
  cookies;
});`,
			Options: "[2,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `[ foo,
  bar ].forEach(function() {
    baz;
  })`,
			Output: `[ foo,
  bar ].forEach(function() {
  baz;
})`,
			Options: "[2,{\"ArrayExpression\":\"first\",\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo[
    bar
    ];`,
			Output: `foo[
    bar
];`,
			Options: "[4,{\"MemberExpression\":1}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo({
bar: 1,
baz: 2
})`,
			Output: `foo({
    bar: 1,
    baz: 2
})`,
			Options: "[4,{\"ObjectExpression\":\"first\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(
                        bar, baz,
                        qux);`,
			Output: `foo(
  bar, baz,
  qux);`,
			Options: "[2,{\"CallExpression\":{\"arguments\":\"first\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar()

    ; [1, 2, 3].map(baz)`,
			Output: `if (foo) bar()

; [1, 2, 3].map(baz)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo)
;`,
			Output: `if (foo)
    ;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `import {foo}
from 'bar';`,
			Output: `import {foo}
    from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `export {foo}
from 'bar';`,
			Output: `export {foo}
    from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `(
    a
) => b => {
        c
    }`,
			Output: `(
    a
) => b => {
    c
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `(
    a
) => b => c => d => {
        e
    }`,
			Output: `(
    a
) => b => c => d => {
    e
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (
    foo
) bar(
        baz
    );`,
			Output: `if (
    foo
) bar(
    baz
);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `(
    foo
)(
        bar
    )`,
			Output: `(
    foo
)(
    bar
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `(() =>
    foo
)(
        bar
    )`,
			Output: `(() =>
    foo
)(
    bar
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `(() => {
    foo();
})(
        bar
    )`,
			Output: `(() => {
    foo();
})(
    bar
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `foo.
  bar.
      baz`,
			Output: `foo.
    bar.
    baz`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `const foo = a.b(),
    longName
    = (baz(
            'bar',
            'bar'
        ));`,
			Output: `const foo = a.b(),
    longName
    = (baz(
        'bar',
        'bar'
    ));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `const foo = a.b(),
    longName =
    (baz(
            'bar',
            'bar'
        ));`,
			Output: `const foo = a.b(),
    longName =
    (baz(
        'bar',
        'bar'
    ));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `const foo = a.b(),
    longName
        =baz(
            'bar',
            'bar'
    );`,
			Output: `const foo = a.b(),
    longName
        =baz(
            'bar',
            'bar'
        );`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `const foo = a.b(),
    longName
        =(
        'fff'
        );`,
			Output: `const foo = a.b(),
    longName
        =(
            'fff'
        );`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `namespace Foo {
    const bar = 3,
    baz = 2;

    if (true) {
    const bax = 3;
    }
}`,
			Output: `namespace Foo {
    const bar = 3,
        baz = 2;

    if (true) {
        const bax = 3;
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `abstract class Foo {
    public bar() {
        let aaa = 4,
        boo;

        if (true) {
        boo = 3;
        }

    boo = 3 + 2;
    }
}`,
			Output: `abstract class Foo {
    public bar() {
        let aaa = 4,
            boo;

        if (true) {
            boo = 3;
        }

        boo = 3 + 2;
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
			},
		},
		{
			Code: `function foo() {
    function bar() {
        abstract class X {
        public baz() {
        if (true) {
        qux();
        }
        }
        }
    }
}`,
			Output: `function foo() {
    function bar() {
        abstract class X {
            public baz() {
                if (true) {
                    qux();
                }
            }
        }
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
		{
			Code: `namespace Unknown {
    function foo() {
    function bar() {
            abstract class X {
                public baz() {
                    if (true) {
                    qux();
                    }
                }
            }
        }
    }
}`,
			Output: `namespace Unknown {
    function foo() {
        function bar() {
            abstract class X {
                public baz() {
                    if (true) {
                        qux();
                    }
                }
            }
        }
    }
}`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `<App>
  <Foo />
</App>`,
			Output: `<App>
    <Foo />
</App>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<App>
    <Foo />
</App>`,
			Output: `<App>
  <Foo />
</App>`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<App>
    <Foo />
</App>`,
			Output: `<App>
	<Foo />
</App>`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `function App() {
  return <App>
    <Foo />
         </App>;
}`,
			Output: `function App() {
  return <App>
    <Foo />
  </App>;
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function App() {
  return (<App>
    <Foo />
    </App>);
}`,
			Output: `function App() {
  return (<App>
    <Foo />
  </App>);
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `function App() {
  return (
<App>
  <Foo />
</App>
  );
}`,
			Output: `function App() {
  return (
    <App>
      <Foo />
    </App>
  );
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `<App>
 {test}
</App>`,
			Output: `<App>
    {test}
</App>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<App>
    {options.map((option, index) => (
        <option key={index} value={option.key}>
           {option.name}
        </option>
    ))}
</App>`,
			Output: `<App>
    {options.map((option, index) => (
        <option key={index} value={option.key}>
            {option.name}
        </option>
    ))}
</App>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `[
  <div />,
    <div />
]`,
			Output: `[
  <div />,
  <div />
]`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<App>

 <Foo />

</App>`,
			Output: `<App>

	<Foo />

</App>`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo ?
    <Foo /> :
<Bar />`,
			Output: `foo ?
    <Foo /> :
    <Bar />`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo ?
    <Foo />
:
<Bar />`,
			Output: `foo ?
    <Foo />
    :
    <Bar />`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo ? (
    <Foo />
) :
<Bar />`,
			Output: `foo ? (
    <Foo />
) :
    <Bar />`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<App
  foo
/>`,
			Output: `<App
    foo
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<App
  foo
  />`,
			Output: `<App
  foo
/>`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<App
  foo
  ></App>`,
			Output: `<App
  foo
></App>`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `const Button = function(props) {
  return (
    <Button
      size={size}
      onClick={onClick}
                                    >
      Button Text
    </Button>
  );
};`,
			Output: `const Button = function(props) {
  return (
    <Button
      size={size}
      onClick={onClick}
    >
      Button Text
    </Button>
  );
};`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `var x = function() {
  return <App
    foo
         />
}`,
			Output: `var x = function() {
  return <App
    foo
  />
}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `var x = <App
  foo
        />`,
			Output: `var x = <App
  foo
/>`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `var x = (
  <Something
    />
)`,
			Output: `var x = (
  <Something
  />
)`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<App
	foo
	/>`,
			Output: `<App
	foo
/>`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<App
	foo
	></App>`,
			Output: `<App
	foo
></App>`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<
    foo
    .bar
    .baz
>
    foo
</
    foo.
    bar.
    baz
>`,
			Output: `<
    foo
        .bar
        .baz
>
    foo
</
    foo.
        bar.
        baz
>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
			},
		},
		{
			Code: `<
    input
    type=
    "number"
/>`,
			Output: `<
    input
    type=
        "number"
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<
    input
    type=
    {'number'}
/>`,
			Output: `<
    input
    type=
        {'number'}
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<
    input
    type
    ="number"
/>`,
			Output: `<
    input
    type
        ="number"
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `foo ? (
    bar
) : (
        baz
    )`,
			Output: `foo ? (
    bar
) : (
    baz
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `foo ? (
    <div>
    </div>
) : (
        <span>
        </span>
    )`,
			Output: `foo ? (
    <div>
    </div>
) : (
    <span>
    </span>
)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `<div>
    {
    (
        1
    )
    }
</div>`,
			Output: `<div>
    {
        (
            1
        )
    }
</div>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `<div>
    {
      /* foo */
    }
</div>`,
			Output: `<div>
    {
        /* foo */
    }
</div>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<div
{...props}
/>`,
			Output: `<div
    {...props}
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<div
    {
      ...props
    }
/>`,
			Output: `<div
    {
        ...props
    }
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `<div>foo
<div>bar</div>
</div>`,
			Output: `<div>foo
    <div>bar</div>
</div>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<small>Foo bar&nbsp;
<a>baz qux</a>.
</small>`,
			Output: `<small>Foo bar&nbsp;
    <a>baz qux</a>.
</small>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<>
<A />
</>`,
			Output: `<>
    <A />
</>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<
    >
    <A />
</>`,
			Output: `<
>
    <A />
</>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<>
    <A />
<
    />`,
			Output: `<>
    <A />
<
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<>
    <A />
</
    >`,
			Output: `<>
    <A />
</
>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<
    >
    <A />
</
    >`,
			Output: `<
>
    <A />
</
>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `<
    >
    <A />
<
    />`,
			Output: `<
>
    <A />
<
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `< // Comment
    >
    <A />
</>`,
			Output: `< // Comment
>
    <A />
</>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<>
    <A />
< // Comment
    />`,
			Output: `<>
    <A />
< // Comment
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<>
    <A />
</ // Comment
    >`,
			Output: `<>
    <A />
</ // Comment
>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `< /* Comment */
    >
    <A />
</>`,
			Output: `< /* Comment */
>
    <A />
</>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `<>
    <A />
< /* Comment */
    />`,
			Output: `<>
    <A />
< /* Comment */
/>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `<>
    <A />
</ /* Comment */
    >`,
			Output: `<>
    <A />
</ /* Comment */
>`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `({
    foo
    }: bar) => baz`,
			Output: `({
    foo
}: bar) => baz`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `([
    foo
    ]: bar) => baz`,
			Output: `([
    foo
]: bar) => baz`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `({
    foo
    }: {}) => baz`,
			Output: `({
    foo
}: {}) => baz`,
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `class Foo {
foo() {
bar();
}
}`,
			Output: `class Foo {
foo() {
    bar();
}
}`,
			Options: "[4,{\"ignoredNodes\":[\"ClassBody\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `$(function() {

foo();
bar();

foo(function() {
baz();
});

});`,
			Output: `$(function() {

foo();
bar();

foo(function() {
    baz();
});

});`,
			Options: "[4,{\"ignoredNodes\":[\"ExpressionStatement > CallExpression[callee.name='$'] > FunctionExpression > BlockStatement\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `(function($) {
$(function() {
foo;
});
})()`,
			Output: `(function($) {
$(function() {
    foo;
});
})()`,
			Options: "[4,{\"ignoredNodes\":[\"ExpressionStatement > CallExpression > FunctionExpression.callee > BlockStatement\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) {
    doSomething();

// Intentionally unindented comment
    doSomethingElse();
}`,
			Output: `if (foo) {
    doSomething();

    // Intentionally unindented comment
    doSomethingElse();
}`,
			Options: "[4,{\"ignoreComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (foo) {
    doSomething();

/* Intentionally unindented comment */
    doSomethingElse();
}`,
			Output: `if (foo) {
    doSomething();

    /* Intentionally unindented comment */
    doSomethingElse();
}`,
			Options: "[4,{\"ignoreComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `const obj = {
    foo () {
        return condition ? // comment
        1 :
            2
    }
}`,
			Output: `const obj = {
    foo () {
        return condition ? // comment
            1 :
            2
    }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (foo) {

// Comment cannot align with code immediately above if there is a whitespace gap
    doSomething();
}`,
			Output: `if (foo) {

    // Comment cannot align with code immediately above if there is a whitespace gap
    doSomething();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) {
    foo(
        bar);
// Comment cannot align with code immediately below if there is a whitespace gap

}`,
			Output: `if (foo) {
    foo(
        bar);
    // Comment cannot align with code immediately below if there is a whitespace gap

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `[{
    foo
},

    // Comment between nodes

{
    bar
}];`,
			Output: `[{
    foo
},

// Comment between nodes

{
    bar
}];`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `let foo

    // comment

;(async () => {})()`,
			Output: `let foo

// comment

;(async () => {})()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `let foo
    // comment
;(async () => {})()`,
			Output: `let foo
// comment
;(async () => {})()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `let foo

/* comment */;

(async () => {})()`,
			Output: `let foo

    /* comment */;

(async () => {})()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `    // comment

;(async () => {})()`,
			Output: `// comment

;(async () => {})()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `    // comment
;(async () => {})()`,
			Output: `// comment
;(async () => {})()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `{
    let foo

        // comment

    ;(async () => {})()

}`,
			Output: `{
    let foo

    // comment

    ;(async () => {})()

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `{
    let foo
        // comment
    ;(async () => {})()

}`,
			Output: `{
    let foo
    // comment
    ;(async () => {})()

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `{
    let foo

    /* comment */;

    (async () => {})()

}`,
			Output: `{
    let foo

        /* comment */;

    (async () => {})()

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `const foo = 1
const bar = foo

    /* comment */

;[1, 2, 3].forEach(() => {})`,
			Output: `const foo = 1
const bar = foo

/* comment */

;[1, 2, 3].forEach(() => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `const foo = 1
const bar = foo
    /* comment */
;[1, 2, 3].forEach(() => {})`,
			Output: `const foo = 1
const bar = foo
/* comment */
;[1, 2, 3].forEach(() => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `const foo = 1
const bar = foo

/* comment */;

[1, 2, 3].forEach(() => {})`,
			Output: `const foo = 1
const bar = foo

    /* comment */;

[1, 2, 3].forEach(() => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `    /* comment */

;[1, 2, 3].forEach(() => {})`,
			Output: `/* comment */

;[1, 2, 3].forEach(() => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `    /* comment */
;[1, 2, 3].forEach(() => {})`,
			Output: `/* comment */
;[1, 2, 3].forEach(() => {})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      1,
				},
			},
		},
		{
			Code: `{
    const foo = 1
    const bar = foo

        /* comment */

    ;[1, 2, 3].forEach(() => {})

}`,
			Output: `{
    const foo = 1
    const bar = foo

    /* comment */

    ;[1, 2, 3].forEach(() => {})

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `{
    const foo = 1
    const bar = foo
        /* comment */
    ;[1, 2, 3].forEach(() => {})

}`,
			Output: `{
    const foo = 1
    const bar = foo
    /* comment */
    ;[1, 2, 3].forEach(() => {})

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `{
    const foo = 1
    const bar = foo

    /* comment */;

    [1, 2, 3].forEach(() => {})

}`,
			Output: `{
    const foo = 1
    const bar = foo

        /* comment */;

    [1, 2, 3].forEach(() => {})

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `import(
source
    )`,
			Output: `import(
    source
)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo(() => {
    tag` + "`" + `
    multiline
    template${a} ${b}
    literal
    ` + "`" + `(() => {
    bar();
    });
});`,
			Output: `foo(() => {
    tag` + "`" + `
    multiline
    template${a} ${b}
    literal
    ` + "`" + `(() => {
        bar();
    });
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `{
        tag` + "`" + `
    multiline
    template
    literal
    ${a} ${b}` + "`" + `(() => {
            bar();
        });
}`,
			Output: `{
    tag` + "`" + `
    multiline
    template
    literal
    ${a} ${b}` + "`" + `(() => {
        bar();
    });
}`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
		{
			Code: `foo(() => {
    tagOne` + "`" + `${a} ${b}
    multiline
    template
    literal
    ` + "`" + `(() => {
            tagTwo` + "`" + `
        multiline
        template
        literal
        ` + "`" + `(() => {
            bar();
        });

            baz();
});
});`,
			Output: `foo(() => {
    tagOne` + "`" + `${a} ${b}
    multiline
    template
    literal
    ` + "`" + `(() => {
        tagTwo` + "`" + `
        multiline
        template
        literal
        ` + "`" + `(() => {
            bar();
        });

        baz();
    });
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      15,
				},
				{
					MessageId: "wrongIndentation",
					Line:      16,
				},
			},
		},
		{
			Code: `{
    tagOne` + "`" + `
    multiline
    template
    literal
    ${a} ${b}` + "`" + `(() => {
            tagTwo` + "`" + `
        multiline
        template
        literal
        ` + "`" + `(() => {
            bar();
        });

            baz();
});
}`,
			Output: `{
    tagOne` + "`" + `
    multiline
    template
    literal
    ${a} ${b}` + "`" + `(() => {
        tagTwo` + "`" + `
        multiline
        template
        literal
        ` + "`" + `(() => {
            bar();
        });

        baz();
    });
}`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      15,
				},
				{
					MessageId: "wrongIndentation",
					Line:      16,
				},
			},
		},
		{
			Code: `tagOne` + "`" + `multiline ${a} ${b}
        template
        literal
        ` + "`" + `(() => {
foo();

    tagTwo` + "`" + `multiline
            template
            literal
        ` + "`" + `({
    bar: 1,
        baz: 2
    });
});`,
			Output: `tagOne` + "`" + `multiline ${a} ${b}
        template
        literal
        ` + "`" + `(() => {
    foo();

    tagTwo` + "`" + `multiline
            template
            literal
        ` + "`" + `({
        bar: 1,
        baz: 2
    });
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
			},
		},
		{
			Code: `tagOne` + "`" + `multiline
    template ${a} ${b}
    literal` + "`" + `({
        foo: 1,
bar: tagTwo` + "`" + `multiline
        template
        literal` + "`" + `(() => {

baz();
    })
});`,
			Output: `tagOne` + "`" + `multiline
    template ${a} ${b}
    literal` + "`" + `({
    foo: 1,
    bar: tagTwo` + "`" + `multiline
        template
        literal` + "`" + `(() => {

        baz();
    })
});`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
			},
		},
		{
			Code: `foo.bar` + "`" + ` template literal ` + "`" + `(() => {
        baz();
})`,
			Output: `foo.bar` + "`" + ` template literal ` + "`" + `(() => {
    baz();
})`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `foo.bar.baz` + "`" + ` template literal ` + "`" + `(() => {
baz();
    })`,
			Output: `foo.bar.baz` + "`" + ` template literal ` + "`" + `(() => {
    baz();
})`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `foo
    .bar` + "`" + ` template
        literal ` + "`" + `(() => {
        baz();
})`,
			Output: `foo
    .bar` + "`" + ` template
        literal ` + "`" + `(() => {
        baz();
    })`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `foo
    .test` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
bar();
    })`,
			Output: `foo
    .test` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
        bar();
    })`,
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `foo
    .test` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
bar();
    })`,
			Output: `foo
.test` + "`" + `
    ${a} ${b}
    ` + "`" + `(() => {
    bar();
})`,
			Options:         "[4,{\"MemberExpression\":0}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `obj
?.prop
?.[key]
?.
[key]`,
			Output: `obj
    ?.prop
    ?.[key]
    ?.
        [key]`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `(
    longSomething
        ?.prop
        ?.[key]
)
?.prop
?.[key]`,
			Output: `(
    longSomething
        ?.prop
        ?.[key]
)
    ?.prop
    ?.[key]`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `obj
?.(arg)
?.
(arg)`,
			Output: `obj
    ?.(arg)
    ?.
    (arg)`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `(
    longSomething
        ?.(arg)
        ?.(arg)
)
?.(arg)
?.(arg)`,
			Output: `(
    longSomething
        ?.(arg)
        ?.(arg)
)
    ?.(arg)
    ?.(arg)`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `const foo = async (arg1,
                    arg2) =>
{
  return arg1 + arg2;
}`,
			Output: `const foo = async (arg1,
                   arg2) =>
{
  return arg1 + arg2;
}`,
			Options:         "[2,{\"FunctionDeclaration\":{\"parameters\":\"first\"},\"FunctionExpression\":{\"parameters\":\"first\"}}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `const a = async
 b => {}`,
			Output: `const a = async
b => {}`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `class C {
field1;
static field2;
}`,
			Output: `class C {
    field1;
    static field2;
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `class C {
field1
=
0
;
static
field2
=
0
;
}`,
			Output: `class C {
    field1
        =
            0
            ;
    static
        field2
            =
                0
                ;
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
			},
		},
		{
			Code: `class C {
[
field1
]
=
0
;
static
[
field2
]
=
0
;
[
field3
] =
0;
[field4] =
0;
}`,
			Output: `class C {
    [
        field1
    ]
        =
            0
            ;
    static
    [
        field2
    ]
        =
            0
            ;
    [
        field3
    ] =
        0;
    [field4] =
        0;
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
				{
					MessageId: "wrongIndentation",
					Line:      12,
				},
				{
					MessageId: "wrongIndentation",
					Line:      13,
				},
				{
					MessageId: "wrongIndentation",
					Line:      14,
				},
				{
					MessageId: "wrongIndentation",
					Line:      15,
				},
				{
					MessageId: "wrongIndentation",
					Line:      16,
				},
				{
					MessageId: "wrongIndentation",
					Line:      17,
				},
				{
					MessageId: "wrongIndentation",
					Line:      18,
				},
				{
					MessageId: "wrongIndentation",
					Line:      19,
				},
				{
					MessageId: "wrongIndentation",
					Line:      20,
				},
			},
		},
		{
			Code: `class C {
field1 = (
foo
+ bar
);
}`,
			Output: `class C {
    field1 = (
        foo
+ bar
    );
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
#aaa
foo() {
return this.#aaa
}
}`,
			Output: `class C {
    #aaa
    foo() {
        return this.#aaa
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static {
foo();
bar();
}
}`,
			Output: `class C {
  static {
    foo();
    bar();
  }
}`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static {
foo();
bar();
}
}`,
			Output: `class C {
    static {
        foo();
        bar();
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
        static {
    foo();
bar();
        }
}`,
			Output: `class C {
    static {
        foo();
        bar();
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static {
foo();
bar();
}
}`,
			Output: `class C {
    static {
            foo();
            bar();
    }
}`,
			Options:         "[4,{\"StaticBlock\":{\"body\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static {
foo();
bar();
}
}`,
			Output: `class C {
    static {
    foo();
    bar();
    }
}`,
			Options:         "[4,{\"StaticBlock\":{\"body\":0}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static {
foo();
bar();
}
}`,
			Output: `class C {
	static {
		foo();
		bar();
	}
}`,
			Options:         "[\"tab\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static {
foo();
bar();
}
}`,
			Output: `class C {
	static {
			foo();
			bar();
	}
}`,
			Options:         "[\"tab\",{\"StaticBlock\":{\"body\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static
{
foo();
bar();
}
}`,
			Output: `class C {
    static
    {
        foo();
        bar();
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `class C {
    static
        {
        foo();
        bar();
        }
}`,
			Output: `class C {
    static
    {
        foo();
        bar();
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `class C {
static {
var x,
y;
}
}`,
			Output: `class C {
    static {
        var x,
            y;
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
static
{
var x,
y;
}
}`,
			Output: `class C {
    static
    {
        var x,
            y;
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `class C {
static {
if (foo) {
bar;
}
}
}`,
			Output: `class C {
    static {
        if (foo) {
            bar;
        }
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `class C {
static {
{
bar;
}
}
}`,
			Output: `class C {
    static {
        {
            bar;
        }
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `class C {
static {}

static {
}

static
{
}
}`,
			Output: `class C {
    static {}

    static {
    }

    static
    {
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
			},
		},
		{
			Code: `class C {

static {
    foo;
}

static {
    bar;
}

}`,
			Output: `class C {

    static {
        foo;
    }

    static {
        bar;
    }

}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
			},
		},
		{
			Code: `class C {

x = 1;

static {
    foo;
}

y = 2;

}`,
			Output: `class C {

    x = 1;

    static {
        foo;
    }

    y = 2;

}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
			},
		},
		{
			Code: `class C {

method1(param) {
    foo;
}

static {
    bar;
}

method2(param) {
    foo;
}

}`,
			Output: `class C {

    method1(param) {
        foo;
    }

    static {
        bar;
    }

    method2(param) {
        foo;
    }

}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      11,
				},
				{
					MessageId: "wrongIndentation",
					Line:      12,
				},
				{
					MessageId: "wrongIndentation",
					Line:      13,
				},
			},
		},
		{
			Code: `function f() {
class C {
static {
foo();
bar();
}
}
}`,
			Output: `function f() {
    class C {
        static {
            foo();
            bar();
        }
    }
}`,
			Options:         "[4]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `class C {
method() {
foo;
}
static {
bar;
}
}`,
			Output: `class C {
    method() {
            foo;
    }
    static {
            bar;
    }
}`,
			Options:         "[4,{\"FunctionExpression\":{\"body\":2},\"StaticBlock\":{\"body\":2}}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `if (2 > 1)
	console.log('a')
	;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `if (2 > 1)
	console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (2 > 1)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `if (2 > 1)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo) bar();
    baz()`,
			Output: `if (foo) bar();
baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if (foo) bar()
    ;baz()`,
			Output: `if (foo) bar()
;baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if (foo)
    bar();
    baz();`,
			Output: `if (foo)
    bar();
baz();`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo)
    bar()
    ; baz()`,
			Output: `if (foo)
    bar()
; baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo)
    bar()
    ;baz()
    qux()`,
			Output: `if (foo)
    bar()
;baz()
qux()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (foo)
    bar()
    ;else
    baz()`,
			Output: `if (foo)
    bar()
;else
    baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo)
    bar()
else
    baz()
    ;qux()`,
			Output: `if (foo)
    bar()
else
    baz()
;qux()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar)
        baz()
    ;qux()`,
			Output: `if (foo)
    if (bar)
        baz()
;qux()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (foo)
    bar()
else if (baz)
    qux()
    ;quux()`,
			Output: `if (foo)
    bar()
else if (baz)
    qux()
;quux()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar)
        baz()
    else
        qux()
    ;quux()`,
			Output: `if (foo)
    if (bar)
        baz()
    else
        qux()
;quux()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (foo)
    bar()
;
baz()`,
			Output: `if (foo)
    bar()
    ;
baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `if (foo)
;
baz()`,
			Output: `if (foo)
    ;
baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if (foo)
    ;baz()`,
			Output: `if (foo)
;baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if (foo);
    else
    baz()`,
			Output: `if (foo);
else
    baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if (foo)
;
else
    baz()`,
			Output: `if (foo)
    ;
else
    baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `if (foo)
    ;else
    baz()`,
			Output: `if (foo)
;else
    baz()`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `do foo();
    while (bar)`,
			Output: `do foo();
while (bar)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `do foo()
    ;while (bar)`,
			Output: `do foo()
;while (bar)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `do
    foo();
    while (bar)`,
			Output: `do
    foo();
while (bar)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `do
    foo()
    ;while (bar)`,
			Output: `do
    foo()
;while (bar)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `do;
    while (foo)`,
			Output: `do;
while (foo)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `do
;
while (foo)`,
			Output: `do
    ;
while (foo)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `do
    ;while (foo)`,
			Output: `do
;while (foo)`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
			},
		},
		{
			Code: `while (2 > 1)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `while (2 > 1)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `for (;;)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `for (;;)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `for (a in b)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `for (a in b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `for (a of b)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `for (a of b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `with (a)
    console.log(b)
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `with (a)
    console.log(b)
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `label: for (a of b)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `label: for (a of b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
			},
		},
		{
			Code: `label:
for (a of b)
    console.log('a')
    ;[1, 2, 3].forEach(x=>console.log(x))`,
			Output: `label:
for (a of b)
    console.log('a')
;[1, 2, 3].forEach(x=>console.log(x))`,
			Options: "[4]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
			},
		},
		{
			Code: `if (foo)
	if (bar) doSomething();
	else doSomething();
else
if (bar) doSomething();
else doSomething();`,
			Output: `if (foo)
	if (bar) doSomething();
	else doSomething();
else
	if (bar) doSomething();
	else doSomething();`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (foo)
	if (bar) doSomething();
	else doSomething();
else
		if (bar) doSomething();
		else doSomething();`,
			Output: `if (foo)
	if (bar) doSomething();
	else doSomething();
else
	if (bar) doSomething();
	else doSomething();`,
			Options: "[\"tab\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (bar) doSomething();
else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar) doSomething();
    else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (bar)
doSomething();
else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar)
        doSomething();
    else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (bar) doSomething();
else
doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar) doSomething();
    else
        doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (bar)
    doSomething();
else
doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar)
        doSomething();
    else
        doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar) doSomething();
    else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar) doSomething();
else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
    else if (bar)
        doSomething();
    else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar)
    doSomething();
else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      4,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar) doSomething();
     else
         doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar) doSomething();
else
    doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar)
doSomething();
else
doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (bar)
    doSomething();
else
    doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (bar) doSomething();
    else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo)
        if (bar) doSomething();
        else doSomething();
    else
        if (bar) doSomething();
        else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (foo)
if (bar) doSomething();
else
if (bar) doSomething();
else doSomething();
else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo)
        if (bar) doSomething();
        else
            if (bar) doSomething();
            else doSomething();
    else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
				{
					MessageId: "wrongIndentation",
					Line:      9,
				},
				{
					MessageId: "wrongIndentation",
					Line:      10,
				},
			},
		},
		{
			Code: `if (foo)
if (bar) doSomething();
else doSomething();
else if (foo) doSomething();
    else doSomething();`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo) doSomething();
else doSomething();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      2,
				},
				{
					MessageId: "wrongIndentation",
					Line:      3,
				},
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo) {
doSomething();
}`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo) {
    doSomething();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo)
    {
        doSomething();
    }`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else if (foo)
{
    doSomething();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (foo) {
    doSomething();
}`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo) {
        doSomething();
    }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
			},
		},
		{
			Code: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
if (foo)
{
    doSomething();
}`,
			Output: `if (foo)
    if (bar) doSomething();
    else doSomething();
else
    if (foo)
    {
        doSomething();
    }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "wrongIndentation",
					Line:      5,
				},
				{
					MessageId: "wrongIndentation",
					Line:      6,
				},
				{
					MessageId: "wrongIndentation",
					Line:      7,
				},
				{
					MessageId: "wrongIndentation",
					Line:      8,
				},
			},
		},
	})
}
