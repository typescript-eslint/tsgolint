// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUnmodifiedLoopConditionRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-unmodified-loop-condition", []ValidTestCase{
		{Code: `var foo = 0; while (foo) { ++foo; }`},
		{
			Code:            `let foo = 0; while (foo) { ++foo; }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var foo = 0; while (foo) { foo += 1; }`},
		{Code: `var foo = 0; while (foo++) { }`},
		{Code: `var foo = 0; while (foo = next()) { }`},
		{Code: `var foo = 0; while (ok(foo)) { }`},
		{Code: `var foo = 0, bar = 0; while (++foo < bar) { }`},
		{Code: `var foo = 0, obj = {}; while (foo === obj.bar) { }`},
		{Code: `var foo = 0, f = {}, bar = {}; while (foo === f(bar)) { }`},
		{Code: `var foo = 0, f = {}; while (foo === f()) { }`},
		{
			Code:            "var foo = 0, tag = 0; while (foo === tag`abc`) { }",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { var foo = 0; while (yield foo) { } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function* foo() { var foo = 0; while (foo === (yield)) { } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `var foo = 0; while (foo.ok) { }`},
		{Code: `var foo = 0; while (foo) { update(); } function update() { ++foo; }`},
		{Code: `var foo = 0, bar = 9; while (foo < bar) { foo += 1; }`},
		{Code: `var foo = 0, bar = 1, baz = 2; while (foo ? bar : baz) { foo += 1; }`},
		{Code: `var foo = 0, bar = 0; while (foo && bar) { ++foo; ++bar; }`},
		{Code: `var foo = 0, bar = 0; while (foo || bar) { ++foo; ++bar; }`},
		{Code: `var foo = 0; do { ++foo; } while (foo);`},
		{Code: `var foo = 0; do { } while (foo++);`},
		{Code: `for (var foo = 0; foo; ++foo) { }`},
		{Code: `for (var foo = 0; foo;) { ++foo }`},
		{Code: `var foo = 0, bar = 0; for (bar; foo;) { ++foo }`},
		{Code: `var foo; if (foo) { }`},
		{Code: `var a = [1, 2, 3]; var len = a.length; for (var i = 0; i < len - 1; i++) {}`},
	}, []InvalidTestCase{
		{
			Code: `var foo = 0; while (foo) { } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0; while (!foo) { } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0; while (foo != null) { } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0, bar = 9; while (foo < bar) { } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0, bar = 0; while (foo && bar) { ++bar; } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0, bar = 0; while (foo && bar) { ++foo; } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var a, b, c; while (a < c && b < c) { ++a; } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0; while (foo ? 1 : 0) { } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo = 0; while (foo) { update(); } function update(foo) { ++foo; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `var foo; do { } while (foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
		{
			Code: `for (var foo = 0; foo < 10; ) { } foo = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "loopConditionNotModified",
				},
			},
		},
	})
}
