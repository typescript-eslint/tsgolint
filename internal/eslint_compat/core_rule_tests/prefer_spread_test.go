// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferSpreadRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "prefer-spread", []ValidTestCase{
		{Code: `foo.apply(obj, args);`},
		{Code: `obj.foo.apply(null, args);`},
		{Code: `obj.foo.apply(otherObj, args);`},
		{Code: `a.b(x, y).c.foo.apply(a.b(x, z).c, args);`},
		{Code: `a.b.foo.apply(a.b.c, args);`},
		{Code: `foo.apply(undefined, [1, 2]);`},
		{Code: `foo.apply(null, [1, 2]);`},
		{Code: `obj.foo.apply(obj, [1, 2]);`},
		{Code: `var apply; foo[apply](null, args);`},
		{Code: `foo.apply();`},
		{Code: `obj.foo.apply();`},
		{Code: `obj.foo.apply(obj, ...args)`},
		{Code: `(a?.b).c.foo.apply(a?.b.c, args);`},
		{Code: `a?.b.c.foo.apply((a?.b).c, args);`},
		{Code: `class C { #apply; foo() { foo.#apply(undefined, args); } }`},
	}, []InvalidTestCase{
		{
			Code: `foo.apply(undefined, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `foo.apply(void 0, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `foo.apply(null, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `obj.foo.apply(obj, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `a.b.c.foo.apply(a.b.c, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `a.b(x, y).c.foo.apply(a.b(x, y).c, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `[].concat.apply([ ], args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `[].concat.apply([
/*empty*/
], args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `foo.apply?.(undefined, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `foo?.apply(undefined, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `foo?.apply?.(undefined, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `(foo?.apply)(undefined, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `(foo?.apply)?.(undefined, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `(obj?.foo).apply(obj, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `a?.b.c.foo.apply(a?.b.c, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `(a?.b.c).foo.apply(a?.b.c, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `(a?.b).c.foo.apply((a?.b).c, args);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
		{
			Code: `class C { #foo; foo() { obj.#foo.apply(obj, args); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferSpread",
				},
			},
		},
	})
}
