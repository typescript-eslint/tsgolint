// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPreferReflectRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "prefer-reflect", []ValidTestCase{
		{Code: `Reflect.apply(function(){}, null, 1, 2);`},
		{
			Code:    `Reflect.apply(function(){}, null, 1, 2);`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
		},
		{
			Code:    `(function(){}).apply(null, [1, 2]);`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
		},
		{
			Code:    `(function(){}).call(null, 1, 2);`,
			Options: "[{\"exceptions\":[\"call\"]}]",
		},
		{Code: `Reflect.defineProperty({}, 'foo', {value: 1})`},
		{
			Code:    `Reflect.defineProperty({}, 'foo', {value: 1})`,
			Options: "[{\"exceptions\":[\"defineProperty\"]}]",
		},
		{
			Code:    `Object.defineProperty({}, 'foo', {value: 1})`,
			Options: "[{\"exceptions\":[\"defineProperty\"]}]",
		},
		{Code: `Reflect.getOwnPropertyDescriptor({}, 'foo');`},
		{
			Code:    `Reflect.getOwnPropertyDescriptor({}, 'foo');`,
			Options: "[{\"exceptions\":[\"getOwnPropertyDescriptor\"]}]",
		},
		{
			Code:    `Object.getOwnPropertyDescriptor({}, 'foo');`,
			Options: "[{\"exceptions\":[\"getOwnPropertyDescriptor\"]}]",
		},
		{Code: `Reflect.getPrototypeOf({});`},
		{
			Code:    `Reflect.getPrototypeOf({});`,
			Options: "[{\"exceptions\":[\"getPrototypeOf\"]}]",
		},
		{
			Code:    `Object.getPrototypeOf({});`,
			Options: "[{\"exceptions\":[\"getPrototypeOf\"]}]",
		},
		{Code: `Reflect.setPrototypeOf({}, Object.prototype);`},
		{
			Code:    `Reflect.setPrototypeOf({}, Object.prototype);`,
			Options: "[{\"exceptions\":[\"setPrototypeOf\"]}]",
		},
		{
			Code:    `Object.setPrototypeOf({}, Object.prototype);`,
			Options: "[{\"exceptions\":[\"setPrototypeOf\"]}]",
		},
		{Code: `Reflect.isExtensible({});`},
		{
			Code:    `Reflect.isExtensible({});`,
			Options: "[{\"exceptions\":[\"isExtensible\"]}]",
		},
		{
			Code:    `Object.isExtensible({});`,
			Options: "[{\"exceptions\":[\"isExtensible\"]}]",
		},
		{Code: `Reflect.getOwnPropertyNames({});`},
		{
			Code:    `Reflect.getOwnPropertyNames({});`,
			Options: "[{\"exceptions\":[\"getOwnPropertyNames\"]}]",
		},
		{
			Code:    `Object.getOwnPropertyNames({});`,
			Options: "[{\"exceptions\":[\"getOwnPropertyNames\"]}]",
		},
		{Code: `Reflect.preventExtensions({});`},
		{
			Code:    `Reflect.preventExtensions({});`,
			Options: "[{\"exceptions\":[\"preventExtensions\"]}]",
		},
		{
			Code:    `Object.preventExtensions({});`,
			Options: "[{\"exceptions\":[\"preventExtensions\"]}]",
		},
		{Code: `Reflect.deleteProperty({}, 'foo');`},
		{
			Code:    `Reflect.deleteProperty({}, 'foo');`,
			Options: "[{\"exceptions\":[\"delete\"]}]",
		},
		{Code: `delete foo;`},
		{
			Code:    `delete ({}).foo`,
			Options: "[{\"exceptions\":[\"delete\"]}]",
		},
	}, []InvalidTestCase{
		{
			Code: `(function(){}).apply(null, [1, 2])`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `(function(){}).apply(null, [1, 2])`,
			Options: "[{\"exceptions\":[\"defineProperty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `(function(){}).call(null, 1, 2)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `(function(){}).call(null, 1, 2)`,
			Options: "[{\"exceptions\":[\"defineProperty\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.defineProperty({}, 'foo', { value: 1 })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.defineProperty({}, 'foo', { value: 1 })`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.getOwnPropertyDescriptor({}, 'foo')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.getOwnPropertyDescriptor({}, 'foo')`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.getPrototypeOf({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.getPrototypeOf({})`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.setPrototypeOf({}, Object.prototype)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.setPrototypeOf({}, Object.prototype)`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.isExtensible({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.isExtensible({})`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.getOwnPropertyNames({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.getOwnPropertyNames({})`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `Object.preventExtensions({})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `Object.preventExtensions({})`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code: `delete ({}).foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
		{
			Code:    `delete ({}).foo`,
			Options: "[{\"exceptions\":[\"apply\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "preferReflect",
				},
			},
		},
	})
}
