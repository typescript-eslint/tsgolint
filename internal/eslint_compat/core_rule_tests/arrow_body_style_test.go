// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestArrowBodyStyleRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "arrow-body-style", []ValidTestCase{
		{Code: `var foo = () => {};`},
		{Code: `var foo = () => 0;`},
		{Code: `var addToB = (a) => { b =  b + a };`},
		{Code: `var foo = () => { /* do nothing */ };`},
		{Code: `var foo = () => {
 /* do nothing */ 
};`},
		{Code: `var foo = (retv, name) => {
retv[name] = true;
return retv;
};`},
		{Code: `var foo = () => ({});`},
		{Code: `var foo = () => bar();`},
		{Code: `var foo = () => { bar(); };`},
		{Code: `var foo = () => { b = a };`},
		{Code: `var foo = () => { bar: 1 };`},
		{
			Code:    `var foo = () => { return 0; };`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = () => { return bar(); };`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var foo = () => 0;`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = () => ({ foo: 0 });`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var foo = () => {};`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code:    `var foo = () => 0;`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code:    `var addToB = (a) => { b =  b + a };`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code:    `var foo = () => { /* do nothing */ };`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code: `var foo = () => {
 /* do nothing */ 
};`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code: `var foo = (retv, name) => {
retv[name] = true;
return retv;
};`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code:    `var foo = () => bar();`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code:    `var foo = () => { bar(); };`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
		{
			Code:    `var foo = () => { return { bar: 0 }; };`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `for (var foo = () => { return a in b ? bar : () => {} } ;;);`,
			Output:  `for (var foo = () => (a in b ? bar : () => {}) ;;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:    `a in b; for (var f = () => { return c };;);`,
			Output:  `a in b; for (var f = () => c;;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code:    `for (a = b => { return c in d ? e : f } ;;);`,
			Output:  `for (a = b => (c in d ? e : f) ;;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:    `for (var f = () => { return a };;);`,
			Output:  `for (var f = () => a;;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:    `for (var f;f = () => { return a };);`,
			Output:  `for (var f;f = () => a;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:    `for (var f = () => { return a in c };;);`,
			Output:  `for (var f = () => (a in c);;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:    `for (var f;f = () => { return a in c };);`,
			Output:  `for (var f;f = () => a in c;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:    `for (;;){var f = () => { return a in c }}`,
			Output:  `for (;;){var f = () => a in c}`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:    `for (a = b => { return c = d in e } ;;);`,
			Output:  `for (a = b => (c = d in e) ;;);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    15,
				},
			},
		},
		{
			Code:    `for (var a;;a = b => { return c = d in e } );`,
			Output:  `for (var a;;a = b => c = d in e );`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:   `for (let a = (b, c, d) => { return vb && c in d; }; ;);`,
			Output: `for (let a = (b, c, d) => (vb && c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:   `for (let a = (b, c, d) => { return v in b && c in d; }; ;);`,
			Output: `for (let a = (b, c, d) => (v in b && c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:   `function foo(){ for (let a = (b, c, d) => { return v in b && c in d; }; ;); }`,
			Output: `function foo(){ for (let a = (b, c, d) => (v in b && c in d); ;); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    43,
				},
			},
		},
		{
			Code:   `for ( a = (b, c, d) => { return v in b && c in d; }; ;);`,
			Output: `for ( a = (b, c, d) => (v in b && c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:   `for ( a = (b) => { return (c in d) }; ;);`,
			Output: `for ( a = (b) => (c in d); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:   `for (let a = (b, c, d) => { return vb in dd ; }; ;);`,
			Output: `for (let a = (b, c, d) => (vb in dd ); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:   `for (let a = (b, c, d) => { return vb in c in dd ; }; ;);`,
			Output: `for (let a = (b, c, d) => (vb in c in dd ); ;);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:   `do{let a = () => {return f in ff}}while(true){}`,
			Output: `do{let a = () => f in ff}while(true){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:   `do{for (let a = (b, c, d) => { return vb in c in dd ; }; ;);}while(true){}`,
			Output: `do{for (let a = (b, c, d) => (vb in c in dd ); ;);}while(true){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:   `scores.map(score => { return x in +(score / maxScore).toFixed(2)});`,
			Output: `scores.map(score => x in +(score / maxScore).toFixed(2));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:   `const fn = (a, b) => { return a + x in Number(b) };`,
			Output: `const fn = (a, b) => a + x in Number(b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:    `var foo = () => 0`,
			Output:  `var foo = () => {return 0}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:    `var foo = () => 0;`,
			Output:  `var foo = () => {return 0};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => ({});`,
			Output:  `var foo = () => {return {}};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:    `var foo = () => (  {});`,
			Output:  `var foo = () => {return   {}};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:    `(() => ({}))`,
			Output:  `(() => {return {}})`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:    `(() => ( {}))`,
			Output:  `(() => {return  {}})`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code:    `var foo = () => { return 0; };`,
			Output:  `var foo = () => 0;`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return 0 };`,
			Output:  `var foo = () => 0;`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return bar(); };`,
			Output:  `var foo = () => bar();`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => {};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedEmptyBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = () => {
return 0;
};`,
			Output:  `var foo = () => 0;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return { bar: 0 }; };`,
			Output:  `var foo = () => ({ bar: 0 });`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedObjectBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return ({ bar: 0 }); };`,
			Output:  `var foo = () => ({ bar: 0 });`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:   `var foo = () => { return a, b }`,
			Output: `var foo = () => (a, b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return };`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return; };`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return ( /* a */ {ok: true} /* b */ ) };`,
			Output:  `var foo = () => ( /* a */ {ok: true} /* b */ );`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return '{' };`,
			Output:  `var foo = () => '{';`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return { bar: 0 }.bar; };`,
			Output:  `var foo = () => ({ bar: 0 }.bar);`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedObjectBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = (retv, name) => {
retv[name] = true;
return retv;
};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOtherBlock",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:    `var foo = () => { bar };`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedOtherBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return 0; };`,
			Output:  `var foo = () => 0;`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => { return bar(); };`,
			Output:  `var foo = () => bar();`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = () => ({});`,
			Output:  `var foo = () => {return {}};`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:    `var foo = () => ({ bar: 0 });`,
			Output:  `var foo = () => {return { bar: 0 }};`,
			Options: "[\"as-needed\",{\"requireReturnForObjectLiteral\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:    `var foo = () => (((((((5)))))));`,
			Output:  `var foo = () => {return (((((((5)))))))};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code: `var foo = () => { return bar }
[1, 2, 3].map(foo)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = () => { return bar }
(1).toString();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = () => { return bar };
[1, 2, 3].map(foo)`,
			Output: `var foo = () => bar;
[1, 2, 3].map(foo)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code:    `var foo = /* a */ ( /* b */ ) /* c */ => /* d */ { /* e */ return /* f */ 5 /* g */ ; /* h */ } /* i */ ;`,
			Output:  `var foo = /* a */ ( /* b */ ) /* c */ => /* d */  /* e */  /* f */ 5 /* g */  /* h */  /* i */ ;`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    50,
				},
			},
		},
		{
			Code:    `var foo = /* a */ ( /* b */ ) /* c */ => /* d */ ( /* e */ 5 /* f */ ) /* g */ ;`,
			Output:  `var foo = /* a */ ( /* b */ ) /* c */ => /* d */ {return ( /* e */ 5 /* f */ )} /* g */ ;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
					Line:      1,
					Column:    60,
				},
			},
		},
		{
			Code: `var foo = () => {
return bar;
};`,
			Output: `var foo = () => bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var foo = () => {
return bar;};`,
			Output: `var foo = () => bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
					EndLine:   2,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var foo = () => {return bar;
};`,
			Output: `var foo = () => bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      1,
					Column:    17,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `
              var foo = () => {
                return foo
                  .bar;
              };
            `,
			Output: `
              var foo = () => foo
                  .bar;
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSingleBlock",
					Line:      2,
					Column:    31,
				},
			},
		},
		{
			Code: `
              var foo = () => {
                return {
                  bar: 1,
                  baz: 2
                };
              };
            `,
			Output: `
              var foo = () => ({
                  bar: 1,
                  baz: 2
                });
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedObjectBlock",
					Line:      2,
					Column:    31,
					EndLine:   7,
					EndColumn: 16,
				},
			},
		},
		{
			Code:    `var foo = () => ({foo: 1}).foo();`,
			Output:  `var foo = () => {return {foo: 1}.foo()};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
				},
			},
		},
		{
			Code:    `var foo = () => ({foo: 1}.foo());`,
			Output:  `var foo = () => {return {foo: 1}.foo()};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
				},
			},
		},
		{
			Code:    `var foo = () => ( {foo: 1} ).foo();`,
			Output:  `var foo = () => {return  {foo: 1} .foo()};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
				},
			},
		},
		{
			Code: `
              var foo = () => ({
                  bar: 1,
                  baz: 2
                });
            `,
			Output: `
              var foo = () => {return {
                  bar: 1,
                  baz: 2
                }};
            `,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
				},
			},
		},
		{
			Code: `
              parsedYears = _map(years, (year) => (
                  {
                      index : year,
                      title : splitYear(year)
                  }
              ));
            `,
			Output: `
              parsedYears = _map(years, (year) => {
                  return {
                      index : year,
                      title : splitYear(year)
                  }
              });
            `,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
				},
			},
		},
		{
			Code:    `const createMarker = (color) => ({ latitude, longitude }, index) => {};`,
			Output:  `const createMarker = (color) => {return ({ latitude, longitude }, index) => {}};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBlock",
				},
			},
		},
	})
}
