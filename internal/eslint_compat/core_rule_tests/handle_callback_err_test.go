// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestHandleCallbackErrRule(t *testing.T) {
	RunRuleTester(t, "{}", "handle-callback-err", []ValidTestCase{
		{Code: `function test(error) {}`},
		{Code: `function test(err) {console.log(err);}`},
		{Code: `function test(err, data) {if(err){ data = 'ERROR';}}`},
		{Code: `var test = function(err) {console.log(err);};`},
		{Code: `var test = function(err) {if(err){/* do nothing */}};`},
		{Code: `var test = function(err) {if(!err){doSomethingHere();}else{};}`},
		{Code: `var test = function(err, data) {if(!err) { good(); } else { bad(); }}`},
		{Code: `try { } catch(err) {}`},
		{Code: `getData(function(err, data) {if (err) {}getMoreDataWith(data, function(err, moreData) {if (err) {}getEvenMoreDataWith(moreData, function(err, allOfTheThings) {if (err) {}});});});`},
		{Code: `var test = function(err) {if(! err){doSomethingHere();}};`},
		{Code: `function test(err, data) {if (data) {doSomething(function(err) {console.error(err);});} else if (err) {console.log(err);}}`},
		{Code: `function handler(err, data) {if (data) {doSomethingWith(data);} else if (err) {console.log(err);}}`},
		{Code: `function handler(err) {logThisAction(function(err) {if (err) {}}); console.log(err);}`},
		{Code: `function userHandler(err) {process.nextTick(function() {if (err) {}})}`},
		{Code: `function help() { function userHandler(err) {function tester() { err; process.nextTick(function() { err; }); } } }`},
		{Code: `function help(done) { var err = new Error('error'); done(); }`},
		{
			Code:            `var test = err => err;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var test = err => !err;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var test = err => err.message;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var test = function(error) {if(error){/* do nothing */}};`,
			Options: "[\"error\"]",
		},
		{
			Code:            `var test = (error) => {if(error){/* do nothing */}};`,
			Options:         "[\"error\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var test = function(error) {if(! error){doSomethingHere();}};`,
			Options: "[\"error\"]",
		},
		{
			Code:    `var test = function(err) { console.log(err); };`,
			Options: "[\"^(err|error)$\"]",
		},
		{
			Code:    `var test = function(error) { console.log(error); };`,
			Options: "[\"^(err|error)$\"]",
		},
		{
			Code:    `var test = function(anyError) { console.log(anyError); };`,
			Options: "[\"^.+Error$\"]",
		},
		{
			Code:    `var test = function(any_error) { console.log(anyError); };`,
			Options: "[\"^.+Error$\"]",
		},
		{
			Code:    `var test = function(any_error) { console.log(any_error); };`,
			Options: "[\"^.+(e|E)rror$\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `function test(err) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function test(err, data) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function test(err) {errorLookingWord();}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function test(err) {try{} catch(err) {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function test(err, callback) { foo(function(err, callback) {}); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:            `var test = (err) => {};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var test = function(err) {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var test = function test(err, data) {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `var test = function test(err) {/* if(err){} */};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function test(err) {doSomethingHere(function(err){console.log(err);})}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `function test(error) {}`,
			Options: "[\"error\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `getData(function(err, data) {getMoreDataWith(data, function(err, moreData) {if (err) {}getEvenMoreDataWith(moreData, function(err, allOfTheThings) {if (err) {}});}); });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `getData(function(err, data) {getMoreDataWith(data, function(err, moreData) {getEvenMoreDataWith(moreData, function(err, allOfTheThings) {if (err) {}});}); });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function userHandler(err) {logThisAction(function(err) {if (err) { console.log(err); } })}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function help() { function userHandler(err) {function tester(err) { err; process.nextTick(function() { err; }); } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var test = function(anyError) { console.log(otherError); };`,
			Options: "[\"^.+Error$\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var test = function(anyError) { };`,
			Options: "[\"^.+Error$\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code:    `var test = function(err) { console.log(error); };`,
			Options: "[\"^(err|error)$\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
	})
}
