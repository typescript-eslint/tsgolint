// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoMisleadingCharacterClassRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2015}}", "no-misleading-character-class", []ValidTestCase{
		{Code: `var r = /[👍]/u`},
		{Code: `var r = /[\uD83D\uDC4D]/u`},
		{Code: `var r = /[\u{1F44D}]/u`},
		{Code: `var r = /❇️/`},
		{Code: `var r = /Á/`},
		{Code: `var r = /[❇]/`},
		{Code: `var r = /👶🏻/`},
		{Code: `var r = /[👶]/u`},
		{Code: `var r = /🇯🇵/`},
		{Code: `var r = /[JP]/`},
		{Code: `var r = /👨‍👩‍👦/`},
		{Code: `new RegExp()`},
		{Code: `var r = RegExp(/[👍]/u)`},
		{Code: `const regex = /[👍]/u; new RegExp(regex);`},
		{
			Code:            `new RegExp('[👍]')`,
			LanguageOptions: "{\"globals\":{\"RegExp\":\"off\"}}",
		},
		{Code: `var r = /[\uD83D]/`},
		{Code: `var r = /[\uDC4D]/`},
		{Code: `var r = /[\uD83D]/u`},
		{Code: `var r = /[\uDC4D]/u`},
		{Code: `var r = /[\u0301]/`},
		{Code: `var r = /[\uFE0F]/`},
		{Code: `var r = /[\u0301]/u`},
		{Code: `var r = /[\uFE0F]/u`},
		{Code: `var r = /[\u{1F3FB}]/u`},
		{Code: `var r = /[🏻]/u`},
		{Code: `var r = /[🇯]/u`},
		{Code: `var r = /[🇵]/u`},
		{Code: `var r = /[\u200D]/`},
		{Code: `var r = /[\u200D]/u`},
		{Code: `new RegExp('[Á] [ ');`},
		{Code: `var r = new RegExp('[Á] [ ');`},
		{Code: `var r = RegExp('{ [Á]', 'u');`},
		{
			Code:            `var r = new globalThis.RegExp('[Á] [ ');`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `var r = globalThis.RegExp('{ [Á]', 'u');`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: "var r = RegExp(`${x}[👍]`)"},
		{Code: "var r = new RegExp('[🇯🇵]', `${foo}`)"},
		{Code: `var r = new RegExp("[👍]", flags)`},
		{Code: `const args = ['[👍]', 'i']; new RegExp(...args);`},
		{
			Code:            `var r = /[👍]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var r = /^[\q{👶🏻}]$/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var r = /[🇯\q{abc}🇵]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var r = /[🇯[A]🇵]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:            `var r = /[🇯[A--B]🇵]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
		},
		{
			Code:    `/[\ud83d\udc4d]/`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[�\udc4d]/u // U+D83D + Backslash + "udc4d"`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[A\u0301]/`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[👶\u{1f3fb}]/u`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[\u{1F1EF}\u{1F1F5}]/u`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[👨\u200d👩\u200d👦]/u`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[\u00B7\u0300-\u036F]/u`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `/[\n\u0305]/`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `RegExp("[\uD83D\uDC4D]")`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `RegExp("[A\u0301]")`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `RegExp("[\x41\\u0301]")`,
			Options: "[{\"allowEscape\":true}]",
		},
		{
			Code:    `RegExp(` + "`" + `[\uD83D\uDC4D]` + "`" + `) // Backslash + "uD83D" + Backslash + "uDC4D"`,
			Options: "[{\"allowEscape\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `var r = /[👍]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Line:      1,
					Column:    11,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[👍]/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[\uD83D\uDC4D]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 23,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[\uD83D\uDC4D]/u`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = /[\uD83D\uDC4D-\uffff]/`,
			LanguageOptions: "{\"ecmaVersion\":3,\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `var r = /[👍]/`,
			LanguageOptions: "{\"ecmaVersion\":3,\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /before[\uD83D\uDC4D]after/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    17,
					EndColumn: 29,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /before[\uD83D\uDC4D]after/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[before\uD83D\uDC4Dafter]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    17,
					EndColumn: 29,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[before\uD83D\uDC4Dafter]/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /\uDC4D[\uD83D\uDC4D]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    17,
					EndColumn: 29,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /\uDC4D[\uD83D\uDC4D]/u`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = /[👍]/`,
			LanguageOptions: "{\"ecmaVersion\":5,\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /[👍]\a/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /\a[👍]\a/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    13,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `var r = /(?<=[👍])/`,
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    15,
					EndColumn: 17,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /(?<=[👍])/u`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = /(?<=[👍])/`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    15,
					EndColumn: 17,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /(?<=[👍])/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[Á]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /[Á]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /[\u0041\u0301]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `var r = /[\u0041\u0301]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `var r = /[\u{41}\u{301}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = /[❇️]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /[❇️]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var r = /[\u2747\uFE0F]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `var r = /[\u2747\uFE0F]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `var r = /[\u{2747}\u{FE0F}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    11,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `var r = /[👶🏻]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[👶🏻]/u`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    13,
					EndColumn: 15,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[👶🏻]/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[👶🏻]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    11,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `var r = /[a\uD83C\uDFFB]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    11,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = /[\uD83D\uDC76\uD83C\uDFFB]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    11,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `var r = /[\u{1F476}\u{1F3FB}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    11,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `var r = /[🇯🇵]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[🇯🇵]/u`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    13,
					EndColumn: 15,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[🇯🇵]/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[🇯🇵]/i`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[🇯🇵]/iu`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    13,
					EndColumn: 15,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[🇯🇵]/iu`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[🇯🇵]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regionalIndicatorSymbol",
					Column:    11,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `var r = /[\uD83C\uDDEF\uD83C\uDDF5]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regionalIndicatorSymbol",
					Column:    11,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `var r = /[\u{1F1EF}\u{1F1F5}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regionalIndicatorSymbol",
					Column:    11,
					EndColumn: 29,
				},
			},
		},
		{
			Code: `var r = /[👨‍👩‍👦]/`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[👨‍👩‍👦]/u`,
						},
					},
				},
				{
					MessageId: "zwj",
					Column:    12,
					EndColumn: 15,
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    14,
					EndColumn: 16,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[👨‍👩‍👦]/u`,
						},
					},
				},
				{
					MessageId: "zwj",
					Column:    15,
					EndColumn: 18,
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    17,
					EndColumn: 19,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = /[👨‍👩‍👦]/u`,
						},
					},
				},
			},
		},
		{
			Code: `var r = /[👨‍👩‍👦]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 19,
				},
			},
		},
		{
			Code: `var r = /[👩‍👦]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `var r = /[👩‍👦][👩‍👦]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 16,
				},
				{
					MessageId: "zwj",
					Column:    18,
					EndColumn: 23,
				},
			},
		},
		{
			Code: `var r = /[👨‍👩‍👦]foo[👨‍👩‍👦]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 19,
				},
				{
					MessageId: "zwj",
					Column:    24,
					EndColumn: 32,
				},
			},
		},
		{
			Code: `var r = /[👨‍👩‍👦👩‍👦]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 19,
				},
				{
					MessageId: "zwj",
					Column:    19,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = /[\uD83D\uDC68\u200D\uD83D\uDC69\u200D\uD83D\uDC66]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 59,
				},
			},
		},
		{
			Code: `var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 54,
				},
			},
		},
		{
			Code: `var r = /[\uD83D\uDC68\u200D\uD83D\uDC69]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 41,
				},
			},
		},
		{
			Code: `var r = /[\u{1F468}\u{200D}\u{1F469}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 37,
				},
			},
		},
		{
			Code: `var r = /[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]foo[\u{1F468}\u{200D}\u{1F469}\u{200D}\u{1F466}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    11,
					EndColumn: 54,
				},
				{
					MessageId: "zwj",
					Column:    59,
					EndColumn: 102,
				},
			},
		},
		{
			Code: `var r = RegExp("[👍]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    18,
					EndColumn: 20,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp("[👍]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[👍]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[👍]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: "var r = new RegExp('[👍]', ``)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    "var r = new RegExp('[👍]', `u`)",
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp(` + "`" + `
                [👍]` + "`" + `)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Line:      2,
					Column:    18,
					EndLine:   2,
					EndColumn: 20,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output: `var r = new RegExp(` + "`" + `
                [👍]` + "`" + `, "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp(` + "`" + `
                [❇️]` + "`" + `)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    18,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `var r = new RegExp(` + "`" + `` + "\r" + `
[❇️]` + "`" + `)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Line:      2,
					Column:    2,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `const flags = ""; var r = new RegExp("[👍]", flags)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    40,
					EndColumn: 42,
				},
			},
		},
		{
			Code: `var r = RegExp("[\\uD83D\\uDC4D]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    18,
					EndColumn: 32,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp("[\\uD83D\\uDC4D]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = RegExp("before[\\uD83D\\uDC4D]after", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 38,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp("before[\\uD83D\\uDC4D]after", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = RegExp("[before\\uD83D\\uDC4Dafter]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 38,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp("[before\\uD83D\\uDC4Dafter]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = RegExp("\t\t\t👍[👍]")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    26,
					EndColumn: 28,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp("\t\t\t👍[👍]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("\u1234[\\uD83D\\uDC4D]")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    28,
					EndColumn: 42,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("\u1234[\\uD83D\\uDC4D]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("\\u1234\\u5678👎[👍]")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    38,
					EndColumn: 40,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("\\u1234\\u5678👎[👍]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("\\u1234\\u5678👍[👍]")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    38,
					EndColumn: 40,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("\\u1234\\u5678👍[👍]", "u")`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = new RegExp("[👍]", "")`,
			LanguageOptions: "{\"ecmaVersion\":3,\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `var r = new RegExp("[👍]", "")`,
			LanguageOptions: "{\"ecmaVersion\":5,\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👍]\\a", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `var r = new RegExp("/(?<=[👍])", "")`,
			LanguageOptions: "{\"ecmaVersion\":9}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    27,
					EndColumn: 29,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("/(?<=[👍])", "u")`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = new RegExp("/(?<=[👍])", "")`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    27,
					EndColumn: 29,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("/(?<=[👍])", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[Á]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = new RegExp("[Á]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u0041\\u0301]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u0041\\u0301]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u{41}\\u{301}]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 37,
				},
			},
		},
		{
			Code: `var r = new RegExp("[❇️]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `var r = new RegExp("[❇️]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 24,
				},
			},
		},
		{
			Code: `new RegExp("[ \\ufe0f]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    14,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `new RegExp("[ \\ufe0f]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    14,
					EndColumn: 22,
				},
			},
		},
		{
			Code: `new RegExp("[ \\ufe0f][ \\ufe0f]")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    14,
					EndColumn: 22,
				},
				{
					MessageId: "combiningClass",
					Column:    24,
					EndColumn: 32,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u2747\\uFE0F]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u2747\\uFE0F]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u{2747}\\u{FE0F}]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    22,
					EndColumn: 40,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👶🏻]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[👶🏻]", "u")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[👶🏻]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[👶🏻]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    22,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\uD83D\\uDC76\\uD83C\\uDFFB]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    22,
					EndColumn: 50,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u{1F476}\\u{1F3FB}]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    22,
					EndColumn: 42,
				},
			},
		},
		{
			Code: "var r = RegExp(`\t\t\t👍[👍]`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    23,
					EndColumn: 25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp(` + "`" + `			👍[👍]` + "`" + `, "u")`,
						},
					},
				},
			},
		},
		{
			Code: "var r = RegExp(`\\t\\t\\t👍[👍]`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    26,
					EndColumn: 28,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = RegExp(` + "`" + `\t\t\t👍[👍]` + "`" + `, "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[🇯🇵]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "u")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[🇯🇵]", "i")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "iu")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "iu")`,
						},
					},
				},
			},
		},
		{
			Code: "var r = new RegExp('[🇯🇵]', `i`)",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    "var r = new RegExp('[🇯🇵]', `iu`)",
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    "var r = new RegExp('[🇯🇵]', `iu`)",
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[🇯🇵]")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "u")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "u")`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = new RegExp("[🇯🇵]",)`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "u",)`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[🇯🇵]", "u",)`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp(("[🇯🇵]"))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    23,
					EndColumn: 25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp(("[🇯🇵]"), "u")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    25,
					EndColumn: 27,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp(("[🇯🇵]"), "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp((("[🇯🇵]")))`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    24,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp((("[🇯🇵]")), "u")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    26,
					EndColumn: 28,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp((("[🇯🇵]")), "u")`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = new RegExp(("[🇯🇵]"),)`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    23,
					EndColumn: 25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp(("[🇯🇵]"), "u",)`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    25,
					EndColumn: 27,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp(("[🇯🇵]"), "u",)`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[🇯🇵]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regionalIndicatorSymbol",
					Column:    22,
					EndColumn: 26,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\uD83C\\uDDEF\\uD83C\\uDDF5]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regionalIndicatorSymbol",
					Column:    22,
					EndColumn: 50,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u{1F1EF}\\u{1F1F5}]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "regionalIndicatorSymbol",
					Column:    22,
					EndColumn: 42,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👨‍👩‍👦]", "")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    22,
					EndColumn: 24,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[👨‍👩‍👦]", "u")`,
						},
					},
				},
				{
					MessageId: "zwj",
					Column:    23,
					EndColumn: 26,
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    25,
					EndColumn: 27,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[👨‍👩‍👦]", "u")`,
						},
					},
				},
				{
					MessageId: "zwj",
					Column:    26,
					EndColumn: 29,
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    28,
					EndColumn: 30,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new RegExp("[👨‍👩‍👦]", "u")`,
						},
					},
				},
			},
		},
		{
			Code: `var r = new RegExp("[👨‍👩‍👦]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 30,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👩‍👦]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👩‍👦][👩‍👦]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 27,
				},
				{
					MessageId: "zwj",
					Column:    29,
					EndColumn: 34,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👨‍👩‍👦]foo[👨‍👩‍👦]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 30,
				},
				{
					MessageId: "zwj",
					Column:    35,
					EndColumn: 43,
				},
			},
		},
		{
			Code: `var r = new RegExp("[👨‍👩‍👦👩‍👦]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 30,
				},
				{
					MessageId: "zwj",
					Column:    30,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\uD83D\\uDC68\\u200D\\uD83D\\uDC69\\u200D\\uD83D\\uDC66]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 78,
				},
			},
		},
		{
			Code: `var r = new RegExp("[\\u{1F468}\\u{200D}\\u{1F469}\\u{200D}\\u{1F466}]", "u")`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    22,
					EndColumn: 70,
				},
			},
		},
		{
			Code:            `var r = new globalThis.RegExp("[❇️]", "")`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    33,
					EndColumn: 35,
				},
			},
		},
		{
			Code:            `var r = new globalThis.RegExp("[👶🏻]", "u")`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    33,
					EndColumn: 37,
				},
			},
		},
		{
			Code:            `var r = new globalThis.RegExp("[🇯🇵]", "")`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    33,
					EndColumn: 35,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new globalThis.RegExp("[🇯🇵]", "u")`,
						},
					},
				},
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    35,
					EndColumn: 37,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `var r = new globalThis.RegExp("[🇯🇵]", "u")`,
						},
					},
				},
			},
		},
		{
			Code:            `var r = new globalThis.RegExp("[\\u{1F468}\\u{200D}\\u{1F469}\\u{200D}\\u{1F466}]", "u")`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    33,
					EndColumn: 81,
				},
			},
		},
		{
			Code: `/[\ud83d\u{dc4d}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePair",
				},
			},
		},
		{
			Code: `/[\u{d83d}\udc4d]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePair",
				},
			},
		},
		{
			Code: `/[\u{d83d}\u{dc4d}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePair",
				},
			},
		},
		{
			Code: `/[\uD83D\u{DC4d}]/u`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePair",
				},
			},
		},
		{
			Code: `new RegExp(` + "`" + `${"[👍🇯🇵]"}[😊]` + "`" + `);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    12,
					EndColumn: 31,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `new RegExp(` + "`" + `${"[👍🇯🇵]"}[😊]` + "`" + `, "u");`,
						},
					},
				},
			},
		},
		{
			Code: `const pattern = "[👍]"; new RegExp(pattern);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    36,
					EndColumn: 43,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `const pattern = "[👍]"; new RegExp(pattern, "u");`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp(/[a👍z]/u, '');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    11,
					EndColumn: 13,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `RegExp(/[a👍z]/u, 'u');`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp(/[👍]/)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    10,
					EndColumn: 12,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `RegExp(/[👍]/u)`,
						},
					},
				},
			},
		},
		{
			Code: `RegExp(/[👍]/, 'i');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    10,
					EndColumn: 12,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `RegExp(/[👍]/, 'iu');`,
						},
					},
				},
			},
		},
		{
			Code:            `RegExp(/[👍]/, 'g');`,
			LanguageOptions: "{\"globals\":{\"RegExp\":\"off\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    10,
					EndColumn: 12,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `RegExp(/[👍]/u, 'g');`,
						},
					},
				},
			},
		},
		{
			Code: `

            // "[" and "]" escaped as "\x5B" and "\u005D"
            new RegExp("\x5B \\ufe0f\u005D")

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    29,
					EndColumn: 37,
				},
			},
		},
		{
			Code: `

            // backslash escaped as "\u{5c}"
            new RegExp("[ \u{5c}ufe0f]")

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    26,
					EndColumn: 38,
				},
			},
		},
		{
			Code: `

            // "0" escaped as "\60"
            new RegExp("[ \\ufe\60f]")

            `,
			LanguageOptions: "{\"sourceType\":\"script\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    26,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `

            // "e" escaped as "\e"
            new RegExp("[ \\uf\e0f]")

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Column:    26,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `

            // line continuation: backslash + <CR> + <LF>
            new RegExp('[ \\u\` + "\r" + `
fe0f]')

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
					Line:      4,
					Column:    26,
					EndLine:   5,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `

            // just a backslash escaped as "\\"
            new RegExp(` + "`" + `[.\\u200D.]` + "`" + `)

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    26,
					EndColumn: 35,
				},
			},
		},
		{
			Code: `

            // "u" escaped as "\x75"
            new RegExp(` + "`" + `[.\\\x75200D.]` + "`" + `)

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Column:    26,
					EndColumn: 38,
				},
			},
		},
		{
			Code: `

            // unescaped <CR> <LF> counts as a single character
            new RegExp(` + "`" + `[
\\u200D.]` + "`" + `)

            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "zwj",
					Line:      4,
					Column:    26,
					EndLine:   5,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `var r = /[[👶🏻]]/v`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "emojiModifier",
					Column:    12,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `new RegExp(/^[👍]$/v, '')`,
			LanguageOptions: "{\"ecmaVersion\":2024}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Column:    15,
					EndColumn: 17,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `new RegExp(/^[👍]$/v, 'u')`,
						},
					},
				},
			},
		},
		{
			Code:    `/[Á]/`,
			Options: "[{\"allowEscape\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
		{
			Code:    `/[Á]/`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
		{
			Code:    `/[\\̶]/`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
		{
			Code:    `/[\n̅]/`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
		{
			Code:    `/[\👍]/`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
				},
			},
		},
		{
			Code:    `RegExp('[\è]')`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
		{
			Code:    `RegExp('[\👍]')`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `RegExp('[\👍]', "u")`,
						},
					},
				},
			},
		},
		{
			Code:    `RegExp('[\\👍]')`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
				},
			},
		},
		{
			Code:    `RegExp('[\❇️]')`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
		{
			Code:    "RegExp(`[\\👍]`) // Backslash + U+D83D + U+DC4D",
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "surrogatePairWithoutUFlag",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestUnicodeFlag",
							Output:    `RegExp(` + "`" + `[\👍]` + "`" + `, "u") // Backslash + U+D83D + U+DC4D`,
						},
					},
				},
			},
		},
		{
			Code:    `const pattern = "[\x41\u0301]"; RegExp(pattern);`,
			Options: "[{\"allowEscape\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "combiningClass",
				},
			},
		},
	})
}
