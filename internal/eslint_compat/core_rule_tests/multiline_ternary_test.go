// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMultilineTernaryRule(t *testing.T) {
	RunRuleTester(t, "{}", "multiline-ternary", []ValidTestCase{
		{Code: `a
? b
: c`},
		{Code: `a ?
b :
c`},
		{Code: `a
? b
? c
: d
: e`},
		{Code: `a
? (b
? c
: d)
: e`},
		{
			Code: `a
? b
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a ?
b :
c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a
? b
? c
: d
: e`,
			Options: "[\"always\"]",
		},
		{
			Code: `a
? (b
? c
: d)
: e`,
			Options: "[\"always\"]",
		},
		{
			Code: `(a
 ? b
 : c)`,
			Options: "[\"always\"]",
		},
		{
			Code: `(a)
? b
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `((a))
? b
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `(a)?
 b
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `((a))?
 b
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a
? (b)
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a
? ((b))
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a ?
 (b)
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a ?
 ((b))
: c`,
			Options: "[\"always\"]",
		},
		{
			Code: `a 
? b
: (c)`,
			Options: "[\"always\"]",
		},
		{
			Code: `a 
? b
: ((c))`,
			Options: "[\"always\"]",
		},
		{
			Code: `a 
? b:
 (c)`,
			Options: "[\"always\"]",
		},
		{
			Code: `a 
? b:
 ((c))`,
			Options: "[\"always\"]",
		},
		{
			Code: `(a) 
? (b)
: (c)`,
			Options: "[\"always\"]",
		},
		{
			Code: `((a)) 
? ((b))
: ((c))`,
			Options: "[\"always\"]",
		},
		{
			Code: `((a)) ?
 ((b)):
 ((c))`,
			Options: "[\"always\"]",
		},
		{
			Code: `a
? b
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a ?
b :
c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a
? b
? c
: d
: e`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a
? (b
? c
: d)
: e`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? b : c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? b ? c : d : e`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? (b ? c : d) : e`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a
? (b ? c : d)
: e`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a ?
(b ? c : d) :
e`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `(a
 ? b
 : c)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `(
a ? b : c
)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `(a)
? b
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `((a))
? b
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `(a)?
 b
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `((a))?
 b
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a
? (b)
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a
? ((b))
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a ?
 (b)
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a ?
 ((b))
: c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a 
? b
: (c)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a 
? b
: ((c))`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a 
? b:
 (c)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `a 
? b:
 ((c))`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `(a) 
? (b)
: (c)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `((a)) 
? ((b))
: ((c))`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code: `((a)) ?
 ((b)):
 ((c))`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `(a) ? b : c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `((a)) ? b : c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? (b) : c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? ((b)) : c`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? b : (c)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? b : ((c))`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `(a) ? (b) : (c)`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `((a)) ? ((b)) : ((c))`,
			Options: "[\"always-multiline\"]",
		},
		{
			Code:    `a ? b : c`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a ? b ? c : d : e`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a ? (b ? c : d) : e`,
			Options: "[\"never\"]",
		},
		{
			Code: `a  +
 b ? c +
 d : e + 
f`,
			Options: "[\"never\"]",
		},
		{
			Code: `(
a ? b : c
)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(a) ? b : c`,
			Options: "[\"never\"]",
		},
		{
			Code:    `((a)) ? b : c`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a ? (b) : c`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a ? ((b)) : c`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a ? b : (c)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `a ? b : ((c))`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(a) ? (b) : (c)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `((a)) ? ((b)) : ((c))`,
			Options: "[\"never\"]",
		},
		{
			Code: `(a
) ? b : c`,
			Options: "[\"never\"]",
		},
		{
			Code: `((a)
) ? b : c`,
			Options: "[\"never\"]",
		},
		{
			Code: `a ? (
b) : c`,
			Options: "[\"never\"]",
		},
		{
			Code: `a ? (
(b)) : c`,
			Options: "[\"never\"]",
		},
		{
			Code: `a ? (b
) : c`,
			Options: "[\"never\"]",
		},
		{
			Code: `a ? ((b)
) : c`,
			Options: "[\"never\"]",
		},
		{
			Code: `a ? b : (
c)`,
			Options: "[\"never\"]",
		},
		{
			Code: `a ? b : (
(c))`,
			Options: "[\"never\"]",
		},
		{
			Code: `(a
) ? (
b
) : (
c)`,
			Options: "[\"never\"]",
		},
		{
			Code: `((a)
) ? (
(b)
) : (
(c))`,
			Options: "[\"never\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `a ? b : c`,
			Output: `a
? b
: c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `a
? b : c`,
			Output: `a
? b
: c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `a ? b
: c`,
			Output: `a
? b
: c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `a ? (b ? c : d) : e`,
			Output: `a
? (b
? c
: d)
: e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    6,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `a ?
(b ? c : d) :
e`,
			Output: `a ?
(b
? c
: d) :
e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      2,
					Column:    2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    6,
				},
			},
		},
		{
			Code: `a ? (b
? c
: d) : e`,
			Output: `a
? (b
? c
: d)
: e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   3,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `a ?
(b? c
: d) : e`,
			Output: `a ?
(b
? c
: d)
: e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 5,
				},
				{
					MessageId: "expectedTestCons",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `a ?
(b
? c : d) : e`,
			Output: `a ?
(b
? c
: d)
: e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 9,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `a ?
(b
? c
 : d) : e`,
			Output: `a ?
(b
? c
 : d)
: e`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   4,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `a ? b : c`,
			Output: `a
? b
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `f() ? a + b : c`,
			Output: `f()
? a + b
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 4,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    7,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `a
? b : c`,
			Output: `a
? b
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `a ? b
: c`,
			Output: `a
? b
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `a ? (b ? c : d) : e`,
			Output: `a
? (b
? c
: d)
: e`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    6,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `a ?
(b ? c : d) :
e`,
			Output: `a ?
(b
? c
: d) :
e`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      2,
					Column:    2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    6,
				},
			},
		},
		{
			Code: `a ? (b
? c
: d) : e`,
			Output: `a
? (b
? c
: d)
: e`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   3,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `a ?
(b? c
: d) : e`,
			Output: `a ?
(b
? c
: d)
: e`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 5,
				},
				{
					MessageId: "expectedTestCons",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `a ?
(b
? c : d) : e`,
			Output: `a ?
(b
? c
: d)
: e`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 9,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `a ?
(b
? c
 : d) : e`,
			Output: `a ?
(b
? c
 : d)
: e`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   4,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `(a
) ? b
: c`,
			Output: `(a
)
? b
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `((a)
) ? b
: c`,
			Output: `((a)
)
? b
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a ? (
b)
: c`,
			Output: `a
? (
b)
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a ? (
(b))
: c`,
			Output: `a
? (
(b))
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? (b
): c`,
			Output: `a
? (b
)
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? ((b)
): c`,
			Output: `a
? ((b)
)
: c`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? b : (
c)`,
			Output: `a
? b
: (
c)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `a
? b : (
(c))`,
			Output: `a
? b
: (
(c))`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `(a
) ? (
b
) : (
c)`,
			Output: `(a
)
? (
b
)
: (
c)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    5,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `((a)
) ? (
(b)
) : (
(c))`,
			Output: `((a)
)
? (
(b)
)
: (
(c))`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    5,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? b : c`,
			Output: `a
? b
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `a ? b
: c`,
			Output: `a
? b
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `a &&
b ? c : d`,
			Output: `a &&
b
? c
: d`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `a ? b +
c : d`,
			Output: `a
? b +
c
: d`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `a ? b : c +
d`,
			Output: `a
? b
: c +
d`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `a ?
(b ? c : d) : e`,
			Output: `a ?
(b ? c : d)
: e`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `a ? (b ? c : d) :
e`,
			Output: `a
? (b ? c : d) :
e`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `a ? (b
? c
: d) : e`,
			Output: `a
? (b
? c
: d)
: e`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   3,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `a ?
(b ? c
: d) : e`,
			Output: `a ?
(b
? c
: d)
: e`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 5,
				},
				{
					MessageId: "expectedTestCons",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `a ?
(b
? c : d) : e`,
			Output: `a ?
(b
? c
: d)
: e`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   3,
					EndColumn: 9,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `a ?
(b
? c
 : d) : e`,
			Output: `a ?
(b
? c
 : d)
: e`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   4,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `(a
) ? b
: c`,
			Output: `(a
)
? b
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `((a)
) ? b
: c`,
			Output: `((a)
)
? b
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a ? (
b)
: c`,
			Output: `a
? (
b)
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a ? (
(b))
: c`,
			Output: `a
? (
(b))
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? (b
): c`,
			Output: `a
? (b
)
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? ((b)
): c`,
			Output: `a
? ((b)
)
: c`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? b : (
c)`,
			Output: `a
? b
: (
c)`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `a
? b : (
(c))`,
			Output: `a
? b
: (
(c))`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    3,
					EndLine:   2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `(a
) ? (
b
) : (
c)`,
			Output: `(a
)
? (
b
)
: (
c)`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    5,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `((a)
) ? (
(b)
) : (
(c))`,
			Output: `((a)
)
? (
(b)
)
: (
(c))`,
			Options: "[\"always-multiline\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "expectedConsAlt",
					Line:      2,
					Column:    5,
					EndLine:   4,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `a
? b : c`,
			Output:  `a? b : c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `a ? b
: c`,
			Output:  `a ? b: c`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedConsAlt",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `a ?
(b ? c : d) :
e`,
			Output:  `a ?(b ? c : d) :e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `a ? (b
? c
: d) : e`,
			Output:  `a ? (b? c: d) : e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    6,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `a ?
(b? c
: d) : e`,
			Output:  `a ?(b? c: d) : e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `a ?
(b
? c : d) : e`,
			Output:  `a ?(b? c : d) : e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedTestCons",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `a ?
(b
? c
 : d) : e`,
			Output:  `a ?(b? c: d) : e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedTestCons",
					Line:      2,
					Column:    2,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      3,
					Column:    3,
				},
			},
		},
		{
			Code: `a ? (b
? c
: d)
: e`,
			Output:  `a ? (b? c: d): e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedConsAlt",
					Line:      1,
					Column:    5,
					EndLine:   3,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    6,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    3,
				},
			},
		},
		{
			Code: `a
?
(b
?
c
:
d)
:
e`,
			Output:  `a?(b?c:d):e`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      3,
					Column:    1,
					EndLine:   7,
					EndColumn: 3,
				},
				{
					MessageId: "unexpectedTestCons",
					Line:      3,
					Column:    2,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `(a)
 ? b 
 : (c)`,
			Output:  `(a)? b: (c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `(a)
 ? (b) 
 : (c)`,
			Output:  `(a)? (b): (c)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 7,
				},
			},
		},
		{
			Code: `((a))
 ? ((b)) 
 : ((c))`,
			Output:  `((a))? ((b)): ((c))`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedTestCons",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "unexpectedConsAlt",
					Line:      2,
					Column:    4,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `a ? // comment
b : c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedConsAlt",
				},
			},
		},
	})
}
