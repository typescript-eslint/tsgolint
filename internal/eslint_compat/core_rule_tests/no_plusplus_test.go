// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoPlusplusRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-plusplus", []ValidTestCase{
		{Code: `var foo = 0; foo=+1;`},
		{
			Code:    `var foo = 0; foo=+1;`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (i = 0; i < l; i++) { console.log(i); }`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (var i = 0, j = i + 1; j < example.length; i++, j++) {}`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; i--, foo());`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; foo(), --i);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; foo(), ++i, bar);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; i++, (++j, k--));`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; foo(), (bar(), i++), baz());`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; (--i, j += 2), bar = j + 1);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
		{
			Code:    `for (;; a, (i--, (b, ++j, c)), d);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `var foo = 0; foo++;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code: `var foo = 0; foo--;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code: `for (i = 0; i < l; i++) { console.log(i); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code: `for (i = 0; i < l; foo, i++) { console.log(i); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `var foo = 0; foo++;`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (i = 0; i < l; i++) { v++; }`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (i++;;);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (;--i;);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (;;) ++i;`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (;; i = j++);`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (;; i++, f(--j));`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
		{
			Code:    `for (;; foo + (i++, bar));`,
			Options: "[{\"allowForLoopAfterthoughts\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUnaryOp",
				},
			},
		},
	})
}
