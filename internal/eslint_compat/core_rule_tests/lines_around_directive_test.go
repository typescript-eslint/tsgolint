// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestLinesAroundDirectiveRule(t *testing.T) {
	RunRuleTester(t, "{}", "lines-around-directive", []ValidTestCase{
		{Code: `//comment

'use strict';
'use asm';

var foo;`},
		{
			Code: `'use strict';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `
'use strict';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `'use strict';

//comment
var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `'use strict';

/*
multiline comment
*/
var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `
'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `'use strict';
'use asm';

//comment
var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `'use strict';
'use asm';

/*
multiline comment
*/
var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `#!/usr/bin/env node

'use strict';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `#!/usr/bin/env node
//comment

'use strict';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `//comment

'use strict';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*
multiline comment
*/

'use strict';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `#!/usr/bin/env node

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `#!/usr/bin/env node
//comment

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `//comment

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*
multiline comment
*/

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo() {
'use strict';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo() {

'use strict';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `() => {
'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo() {

'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `() => {
'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment

'use strict';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `() => {
//comment

'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment

'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `() => {
//comment

'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `/*
 * JSDoc comment
 */
function foo() {
'use strict';

var bar;
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo() {
'use strict';
}`,
			Options: "[\"always\"]",
		},
		{
			Code: `'use strict';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `'use strict';
//comment
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `'use strict';
/*
multiline comment
*/
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `'use strict';
'use asm';
//comment
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `'use strict';
'use asm';
/*
multiline comment
*/
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `#!/usr/bin/env node
'use strict';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `#!/usr/bin/env node
//comment
'use strict';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `//comment
'use strict';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*
multiline comment
*/
'use strict';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `#!/usr/bin/env node
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `#!/usr/bin/env node
//comment
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `//comment
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*
multiline comment
*/
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo() {
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo() {

'use strict';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `() => {
'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo() {

'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `() => {
'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `() => {
//comment
'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment
'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `() => {
//comment
'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `//comment
'use strict';

'use asm';
var foo;`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*
 * JSDoc comment
 */
function foo() {
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo() {

'use strict';

}`,
			Options: "[\"never\"]",
		},
		{
			Code: `'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `'use strict';

//comment
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `'use strict';

/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `'use strict';
'use asm';

//comment
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `'use strict';
'use asm';

/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `#!/usr/bin/env node
'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `//comment
'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `/*
multiline comment
*/
'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `#!/usr/bin/env node
'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `//comment
'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `/*
multiline comment
*/
'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `function foo() {
'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `function foo() {

'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `() => {
'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `function foo() {

'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `() => {
'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment
'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `() => {
//comment
'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment
'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `() => {
//comment
'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `
'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `'use strict';
//comment
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `'use strict';
/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `
'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `'use strict';
'use asm';
//comment
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `'use strict';
'use asm';
/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `#!/usr/bin/env node

'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `//comment

'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `/*
multiline comment
*/

'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `#!/usr/bin/env node

'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `//comment

'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `/*
multiline comment
*/

'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `function foo() {
'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `function foo() {

'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `() => {
'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `function foo() {

'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `() => {
'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {

'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment

'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `() => {
//comment

'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `function foo() {
//comment

'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
		},
		{
			Code: `() => {
//comment

'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `'use strict'

;foo();`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
		},
		{
			Code: `'use strict'
;foo();`,
			Options: "[{\"before\":\"never\",\"after\":\"never\"}]",
		},
	}, []InvalidTestCase{
		{
			Code: `'use strict';
var foo;`,
			Output: `'use strict';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
//comment
var foo;`,
			Output: `'use strict';

//comment
var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
/*
multiline comment
*/
var foo;`,
			Output: `'use strict';

/*
multiline comment
*/
var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';
var foo;`,
			Output: `'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';
//comment
var foo;`,
			Output: `'use strict';
'use asm';

//comment
var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';
/*
multiline comment
*/
var foo;`,
			Output: `'use strict';
'use asm';

/*
multiline comment
*/
var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
'use strict';
var foo;`,
			Output: `#!/usr/bin/env node

'use strict';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
//comment
'use strict';
var foo;`,
			Output: `#!/usr/bin/env node
//comment

'use strict';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `//comment
'use strict';
var foo;`,
			Output: `//comment

'use strict';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/
'use strict';
var foo;`,
			Output: `/*
multiline comment
*/

'use strict';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
'use strict';
'use asm';
var foo;`,
			Output: `#!/usr/bin/env node

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
//comment
'use strict';
'use asm';
var foo;`,
			Output: `#!/usr/bin/env node
//comment

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `//comment
'use strict';
'use asm';
var foo;`,
			Output: `//comment

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/
'use strict';
'use asm';
var foo;`,
			Output: `/*
multiline comment
*/

'use strict';
'use asm';

var foo;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';
var bar;
}`,
			Output: `function foo() {
'use strict';

var bar;
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
'use strict';
var foo;
}`,
			Output: `() => {
'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {
'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
'use strict';
'use asm';
var foo;
}`,
			Output: `() => {
'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
//comment
'use strict';
var bar;
}`,
			Output: `function foo() {
//comment

'use strict';

var bar;
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';
var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/

'use strict';

var bar;
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
//comment
'use strict';
var foo;
}`,
			Output: `() => {
//comment

'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';
var foo;
}`,
			Output: `() => {
/*
multiline comment
*/

'use strict';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
//comment
'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {
//comment

'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/

'use strict';
'use asm';

var bar;
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
//comment
'use strict';
'use asm';
var foo;
}`,
			Output: `() => {
//comment

'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';
'use asm';
var foo;
}`,
			Output: `() => {
/*
multiline comment
*/

'use strict';
'use asm';

var foo;
}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';

var foo;`,
			Output: `'use strict';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';

//comment
var foo;`,
			Output: `'use strict';
//comment
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';

/*
multiline comment
*/
var foo;`,
			Output: `'use strict';
/*
multiline comment
*/
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';

var foo;`,
			Output: `'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';

//comment
var foo;`,
			Output: `'use strict';
'use asm';
//comment
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';

/*
multiline comment
*/
var foo;`,
			Output: `'use strict';
'use asm';
/*
multiline comment
*/
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node

'use strict';

var foo;`,
			Output: `#!/usr/bin/env node
'use strict';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
//comment

'use strict';

var foo;`,
			Output: `#!/usr/bin/env node
//comment
'use strict';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `//comment

'use strict';

var foo;`,
			Output: `//comment
'use strict';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/

'use strict';

var foo;`,
			Output: `/*
multiline comment
*/
'use strict';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node

'use strict';
'use asm';

var foo;`,
			Output: `#!/usr/bin/env node
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
//comment

'use strict';
'use asm';

var foo;`,
			Output: `#!/usr/bin/env node
//comment
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `//comment

'use strict';
'use asm';

var foo;`,
			Output: `//comment
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/

'use strict';
'use asm';

var foo;`,
			Output: `/*
multiline comment
*/
'use strict';
'use asm';
var foo;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';

var bar;
}`,
			Output: `function foo() {
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
'use strict';

var foo;
}`,
			Output: `() => {
'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {
'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
'use strict';
'use asm';

var foo;
}`,
			Output: `() => {
'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
//comment

'use strict';

var bar;
}`,
			Output: `function foo() {
//comment
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';

var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/
'use strict';
var bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
//comment

'use strict';

var foo;
}`,
			Output: `() => {
//comment
'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';

var foo;
}`,
			Output: `() => {
/*
multiline comment
*/
'use strict';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
//comment

'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {
//comment
'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/
'use strict';
'use asm';
var bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
//comment

'use strict';
'use asm';

var foo;
}`,
			Output: `() => {
//comment
'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';
'use asm';

var foo;
}`,
			Output: `() => {
/*
multiline comment
*/
'use strict';
'use asm';
var foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
var foo;`,
			Output: `'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
//comment
var foo;`,
			Output: `'use strict';

//comment
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
/*
multiline comment
*/
var foo;`,
			Output: `'use strict';

/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';
var foo;`,
			Output: `'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';
//comment
var foo;`,
			Output: `'use strict';
'use asm';

//comment
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';
/*
multiline comment
*/
var foo;`,
			Output: `'use strict';
'use asm';

/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node

'use strict';
var foo;`,
			Output: `#!/usr/bin/env node
'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `//comment

'use strict';
var foo;`,
			Output: `//comment
'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/

'use strict';
var foo;`,
			Output: `/*
multiline comment
*/
'use strict';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node

'use strict';
'use asm';
var foo;`,
			Output: `#!/usr/bin/env node
'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `//comment

'use strict';
'use asm';
var foo;`,
			Output: `//comment
'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/

'use strict';
'use asm';
var foo;`,
			Output: `/*
multiline comment
*/
'use strict';
'use asm';

var foo;`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';
var bar;
}`,
			Output: `function foo() {
'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {

'use strict';
var bar;
}`,
			Output: `function foo() {

'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
'use strict';
var foo;
}`,
			Output: `() => {
'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {

'use strict';
var foo;
}`,
			Output: `() => {

'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {
'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {

'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {

'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
'use strict';
'use asm';
var foo;
}`,
			Output: `() => {
'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {

'use strict';
'use asm';
var foo;
}`,
			Output: `() => {

'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
//comment

'use strict';
var bar;
}`,
			Output: `function foo() {
//comment
'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';
var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/
'use strict';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
//comment

'use strict';
var foo;
}`,
			Output: `() => {
//comment
'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';
var foo;
}`,
			Output: `() => {
/*
multiline comment
*/
'use strict';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
//comment

'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {
//comment
'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/

'use strict';
'use asm';
var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/
'use strict';
'use asm';

var bar;
}`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
//comment

'use strict';
'use asm';
var foo;
}`,
			Output: `() => {
//comment
'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/

'use strict';
'use asm';
var foo;
}`,
			Output: `() => {
/*
multiline comment
*/
'use strict';
'use asm';

var foo;
}`,
			Options:         "[{\"before\":\"never\",\"after\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict';

var foo;`,
			Output: `'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';

//comment
var foo;`,
			Output: `'use strict';
//comment
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';

/*
multiline comment
*/
var foo;`,
			Output: `'use strict';
/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';

var foo;`,
			Output: `'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';

//comment
var foo;`,
			Output: `'use strict';
'use asm';
//comment
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict';
'use asm';

/*
multiline comment
*/
var foo;`,
			Output: `'use strict';
'use asm';
/*
multiline comment
*/
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
'use strict';

var foo;`,
			Output: `#!/usr/bin/env node

'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `//comment
'use strict';

var foo;`,
			Output: `//comment

'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/
'use strict';

var foo;`,
			Output: `/*
multiline comment
*/

'use strict';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `#!/usr/bin/env node
'use strict';
'use asm';

var foo;`,
			Output: `#!/usr/bin/env node

'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `//comment
'use strict';
'use asm';

var foo;`,
			Output: `//comment

'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `/*
multiline comment
*/
'use strict';
'use asm';

var foo;`,
			Output: `/*
multiline comment
*/

'use strict';
'use asm';
var foo;`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';

var bar;
}`,
			Output: `function foo() {
'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {

'use strict';

var bar;
}`,
			Output: `function foo() {

'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
'use strict';

var foo;
}`,
			Output: `() => {
'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {

'use strict';

var foo;
}`,
			Output: `() => {

'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {
'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {

'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {

'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
'use strict';
'use asm';

var foo;
}`,
			Output: `() => {
'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {

'use strict';
'use asm';

var foo;
}`,
			Output: `() => {

'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
//comment
'use strict';

var bar;
}`,
			Output: `function foo() {
//comment

'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';

var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/

'use strict';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
//comment
'use strict';

var foo;
}`,
			Output: `() => {
//comment

'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';

var foo;
}`,
			Output: `() => {
/*
multiline comment
*/

'use strict';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
//comment
'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {
//comment

'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `function foo() {
/*
multiline comment
*/
'use strict';
'use asm';

var bar;
}`,
			Output: `function foo() {
/*
multiline comment
*/

'use strict';
'use asm';
var bar;
}`,
			Options: "[{\"before\":\"always\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
//comment
'use strict';
'use asm';

var foo;
}`,
			Output: `() => {
//comment

'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `() => {
/*
multiline comment
*/
'use strict';
'use asm';

var foo;
}`,
			Output: `() => {
/*
multiline comment
*/

'use strict';
'use asm';
var foo;
}`,
			Options:         "[{\"before\":\"always\",\"after\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict'

;foo();`,
			Output: `'use strict'
;foo();`,
			Options: "[{\"before\":\"never\",\"after\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `'use strict'
;foo();`,
			Output: `'use strict'

;foo();`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
		{
			Code: `'use strict'
;
foo();`,
			Output: `'use strict'

;
foo();`,
			Options: "[{\"before\":\"never\",\"after\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expected",
				},
			},
		},
	})
}
