// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoLonelyIfRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-lonely-if", []ValidTestCase{
		{Code: `if (a) {;} else if (b) {;}`},
		{Code: `if (a) {;} else { if (b) {;} ; }`},
		{Code: `if (a) if (a) {} else { if (b) {} } else {}`},
	}, []InvalidTestCase{
		{
			Code:   `if (a) {;} else { if (b) {;} }`,
			Output: `if (a) {;} else if (b) {;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else {
  if (b) {
    bar();
  }
}`,
			Output: `if (a) {
  foo();
} else if (b) {
    bar();
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else /* comment */ {
  if (b) {
    bar();
  }
}`,
			Output: `if (a) {
  foo();
} else /* comment */ if (b) {
    bar();
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else {
  /* otherwise, do the other thing */ if (b) {
    bar();
  }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else {
  if /* this comment is ok */ (b) {
    bar();
  }
}`,
			Output: `if (a) {
  foo();
} else if /* this comment is ok */ (b) {
    bar();
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else {
  if (b) {
    bar();
  } /* this comment will prevent this test case from being autofixed. */
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code:   `if (foo) {} else { if (bar) baz(); }`,
			Output: `if (foo) {} else if (bar) baz();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (foo) {} else { if (bar) baz() } qux();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code:   `if (foo) {} else { if (bar) baz(); } qux();`,
			Output: `if (foo) {} else if (bar) baz(); qux();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (foo) {
} else {
  if (bar) baz()
}
[1, 2, 3].forEach(foo);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (foo) {
} else {
  if (bar) baz++
}
foo;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (foo) {
} else {
  if (bar) baz++;
}
foo;`,
			Output: `if (foo) {
} else if (bar) baz++;
foo;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else {
  if (b) bar()
}
` + "`" + `template literal` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
		{
			Code: `if (a) {
  foo();
} else {
  if (b) {
    bar();
  } else if (c) {
    baz();
  } else {
    qux();
  }
}`,
			Output: `if (a) {
  foo();
} else if (b) {
    bar();
  } else if (c) {
    baz();
  } else {
    qux();
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLonelyIf",
				},
			},
		},
	})
}
