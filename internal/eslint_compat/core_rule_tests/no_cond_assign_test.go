// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoCondAssignRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-cond-assign", []ValidTestCase{
		{Code: `var x = 0; if (x == 0) { var b = 1; }`},
		{
			Code:    `var x = 0; if (x == 0) { var b = 1; }`,
			Options: "[\"always\"]",
		},
		{Code: `var x = 5; while (x < 5) { x = x + 1; }`},
		{Code: `if ((someNode = someNode.parentNode) !== null) { }`},
		{
			Code:    `if ((someNode = someNode.parentNode) !== null) { }`,
			Options: "[\"except-parens\"]",
		},
		{Code: `if ((a = b));`},
		{Code: `while ((a = b));`},
		{Code: `do {} while ((a = b));`},
		{Code: `for (;(a = b););`},
		{Code: `for (;;) {}`},
		{Code: `if (someNode || (someNode = parentNode)) { }`},
		{Code: `while (someNode || (someNode = parentNode)) { }`},
		{Code: `do { } while (someNode || (someNode = parentNode));`},
		{Code: `for (;someNode || (someNode = parentNode););`},
		{
			Code:    `if ((function(node) { return node = parentNode; })(someNode)) { }`,
			Options: "[\"except-parens\"]",
		},
		{
			Code:    `if ((function(node) { return node = parentNode; })(someNode)) { }`,
			Options: "[\"always\"]",
		},
		{
			Code:            `if ((node => node = parentNode)(someNode)) { }`,
			Options:         "[\"except-parens\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `if ((node => node = parentNode)(someNode)) { }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `if (function(node) { return node = parentNode; }) { }`,
			Options: "[\"except-parens\"]",
		},
		{
			Code:    `if (function(node) { return node = parentNode; }) { }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `x = 0;`,
			Options: "[\"always\"]",
		},
		{Code: `var x; var b = (x === 0) ? 1 : 0;`},
		{
			Code:    `switch (foo) { case a = b: bar(); }`,
			Options: "[\"except-parens\"]",
		},
		{
			Code:    `switch (foo) { case a = b: bar(); }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `switch (foo) { case baz + (a = b): bar(); }`,
			Options: "[\"always\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `var x; if (x = 0) { var b = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `var x; while (x = 0) { var b = 1; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var x = 0, y; do { y = x; } while (x = x + 1);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var x; for(; x+=1 ;){};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `var x; if ((x) = (0));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `if (someNode || (someNode = parentNode)) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    18,
					EndColumn: 39,
				},
			},
		},
		{
			Code:    `while (someNode || (someNode = parentNode)) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `do { } while (someNode || (someNode = parentNode));`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `for (; (typeof l === 'undefined' ? (l = 0) : l); i++) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `if (x = 0) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while (x = 0) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `do { } while (x = x + 1);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `for(; x = y; ) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `if ((x = 0)) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `while ((x = 0)) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `do { } while ((x = x + 1));`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `for(; (x = y); ) { }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `var x; var b = (x = 0) ? 1 : 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var x; var b = x && (y = 0) ? 1 : 0;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `(((3496.29)).bkufyydt = 2e308) ? foo : bar;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
	})
}
