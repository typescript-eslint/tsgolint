// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestGroupedAccessorPairsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "grouped-accessor-pairs", []ValidTestCase{
		{Code: `({})`},
		{Code: `({ a })`},
		{Code: `({ a(){}, b(){}, a(){} })`},
		{Code: `({ a: 1, b: 2 })`},
		{Code: `({ a, ...b, c: 1 })`},
		{Code: `({ a, b, ...a })`},
		{Code: `({ a: 1, [b]: 2, a: 3, [b]: 4 })`},
		{Code: `({ a: function get(){}, b, a: function set(foo){} })`},
		{Code: `({ get(){}, a, set(){} })`},
		{Code: `class A {}`},
		{Code: `(class { a(){} })`},
		{Code: `class A { a(){} [b](){} a(){} [b](){} }`},
		{Code: `(class { a(){} b(){} static a(){} static b(){} })`},
		{Code: `class A { get(){} a(){} set(){} }`},
		{Code: `({ get a(){} })`},
		{Code: `({ set a(foo){} })`},
		{Code: `({ a: 1, get b(){}, c, ...d })`},
		{Code: `({ get a(){}, get b(){}, set c(foo){}, set d(foo){} })`},
		{Code: `({ get a(){}, b: 1, set c(foo){} })`},
		{Code: `({ set a(foo){}, b: 1, a: 2 })`},
		{Code: `({ get a(){}, b: 1, a })`},
		{Code: `({ set a(foo){}, b: 1, a(){} })`},
		{Code: `({ get a(){}, b: 1, set [a](foo){} })`},
		{Code: `({ set a(foo){}, b: 1, get 'a '(){} })`},
		{Code: `({ get a(){}, b: 1, ...a })`},
		{Code: `({ set a(foo){}, b: 1 }, { get a(){} })`},
		{Code: `({ get a(){}, b: 1, ...{ set a(foo){} } })`},
		{
			Code:    `({ set a(foo){}, get b(){} })`,
			Options: "[\"getBeforeSet\"]",
		},
		{
			Code:    `({ get a(){}, set b(foo){} })`,
			Options: "[\"setBeforeGet\"]",
		},
		{Code: `class A { get a(){} }`},
		{Code: `(class { set a(foo){} })`},
		{Code: `class A { static set a(foo){} }`},
		{Code: `(class { static get a(){} })`},
		{Code: `class A { a(){} set b(foo){} c(){} }`},
		{Code: `(class { a(){} get b(){} c(){} })`},
		{Code: `class A { get a(){} static get b(){} set c(foo){} static set d(bar){} }`},
		{Code: `(class { get a(){} b(){} a(foo){} })`},
		{Code: `class A { static set a(foo){} b(){} static a(){} }`},
		{Code: `(class { get a(){} static b(){} set [a](foo){} })`},
		{Code: `class A { static set a(foo){} b(){} static get ' a'(){} }`},
		{Code: `(class { set a(foo){} b(){} static get a(){} })`},
		{Code: `class A { static set a(foo){} b(){} get a(){} }`},
		{Code: `(class { get a(){} }, class { b(){} set a(foo){} })`},
		{Code: `({ get a(){}, set a(foo){} })`},
		{Code: `({ a: 1, set b(foo){}, get b(){}, c: 2 })`},
		{Code: `({ get a(){}, set a(foo){}, set b(bar){}, get b(){} })`},
		{Code: `({ get [a](){}, set [a](foo){} })`},
		{Code: `({ set a(foo){}, get 'a'(){} })`},
		{Code: `({ a: 1, b: 2, get a(){}, set a(foo){}, c: 3, a: 4 })`},
		{Code: `({ get a(){}, set a(foo){}, set b(bar){} })`},
		{Code: `({ get a(){}, get b(){}, set b(bar){} })`},
		{Code: `class A { get a(){} set a(foo){} }`},
		{Code: `(class { set a(foo){} get a(){} })`},
		{Code: `class A { static set a(foo){} static get a(){} }`},
		{Code: `(class { static get a(){} static set a(foo){} })`},
		{Code: `class A { a(){} set b(foo){} get b(){} c(){} get d(){} set d(bar){} }`},
		{Code: `(class { set a(foo){} get a(){} get b(){} set b(bar){} })`},
		{Code: `class A { static set [a](foo){} static get [a](){} }`},
		{Code: "(class { get a(){} set [`a`](foo){} })"},
		{Code: `class A { static get a(){} static set a(foo){} set a(bar){} static get a(){} }`},
		{Code: `(class { static get a(){} get a(){} set a(foo){} })`},
		{
			Code:    `({ get a(){}, set a(foo){} })`,
			Options: "[\"anyOrder\"]",
		},
		{
			Code:    `({ set a(foo){}, get a(){} })`,
			Options: "[\"anyOrder\"]",
		},
		{
			Code:    `({ get a(){}, set a(foo){} })`,
			Options: "[\"getBeforeSet\"]",
		},
		{
			Code:    `({ set a(foo){}, get a(){} })`,
			Options: "[\"setBeforeGet\"]",
		},
		{
			Code:    `class A { get a(){} set a(foo){} }`,
			Options: "[\"anyOrder\"]",
		},
		{
			Code:    `(class { set a(foo){} get a(){} })`,
			Options: "[\"anyOrder\"]",
		},
		{
			Code:    `class A { get a(){} set a(foo){} }`,
			Options: "[\"getBeforeSet\"]",
		},
		{
			Code:    `(class { static set a(foo){} static get a(){} })`,
			Options: "[\"setBeforeGet\"]",
		},
		{Code: `({ get a(){}, b: 1, get a(){} })`},
		{Code: `({ set a(foo){}, b: 1, set a(foo){} })`},
		{Code: `({ get a(){}, b: 1, set a(foo){}, c: 2, get a(){} })`},
		{Code: `({ set a(foo){}, b: 1, set 'a'(bar){}, c: 2, get a(){} })`},
		{Code: `class A { get [a](){} b(){} get [a](){} c(){} set [a](foo){} }`},
		{Code: `(class { static set a(foo){} b(){} static get a(){} static c(){} static set a(bar){} })`},
		{Code: `class A { get '#abc'(){} b(){} set #abc(foo){} }`},
		{Code: `class A { get #abc(){} b(){} set '#abc'(foo){} }`},
		{
			Code:    `class A { set '#abc'(foo){} get #abc(){} }`,
			Options: "[\"getBeforeSet\"]",
		},
		{
			Code:    `class A { set #abc(foo){} get '#abc'(){} }`,
			Options: "[\"getBeforeSet\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `({ get a(){}, b:1, set a(foo){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    20,
				},
			},
		},
		{
			Code: `({ set 'abc'(foo){}, b:1, get 'abc'(){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    27,
				},
			},
		},
		{
			Code: `({ get [a](){}, b:1, set [a](foo){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    22,
				},
			},
		},
		{
			Code: `class A { get abc(){} b(){} set abc(foo){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    29,
				},
			},
		},
		{
			Code: `(class { set abc(foo){} b(){} get abc(){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    31,
				},
			},
		},
		{
			Code: `class A { static set a(foo){} b(){} static get a(){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    37,
				},
			},
		},
		{
			Code: `(class { static get 123(){} b(){} static set 123(foo){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    35,
				},
			},
		},
		{
			Code: `class A { static get [a](){} b(){} static set [a](foo){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    36,
				},
			},
		},
		{
			Code: `class A { get '#abc'(){} b(){} set '#abc'(foo){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    32,
				},
			},
		},
		{
			Code: `class A { get #abc(){} b(){} set #abc(foo){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    30,
				},
			},
		},
		{
			Code:    `({ set a(foo){}, get a(){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    18,
				},
			},
		},
		{
			Code:    `({ get 123(){}, set 123(foo){} })`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    17,
				},
			},
		},
		{
			Code:    `({ get [a](){}, set [a](foo){} })`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    17,
				},
			},
		},
		{
			Code:    `class A { set abc(foo){} get abc(){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    26,
				},
			},
		},
		{
			Code:    "(class { get [`abc`](){} set [`abc`](foo){} })",
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    26,
				},
			},
		},
		{
			Code:    `class A { static get a(){} static set a(foo){} }`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    28,
				},
			},
		},
		{
			Code:    `(class { static set 'abc'(foo){} static get 'abc'(){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    34,
				},
			},
		},
		{
			Code:    `class A { static set [abc](foo){} static get [abc](){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    35,
				},
			},
		},
		{
			Code:    `class A { set '#abc'(foo){} get '#abc'(){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    29,
				},
			},
		},
		{
			Code:    `class A { set #abc(foo){} get #abc(){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    27,
				},
			},
		},
		{
			Code:    `({ get a(){}, b: 1, set a(foo){} })`,
			Options: "[\"anyOrder\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
				},
			},
		},
		{
			Code:    `({ get a(){}, b: 1, set a(foo){} })`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
				},
			},
		},
		{
			Code:    `({ get a(){}, b: 1, set a(foo){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
				},
			},
		},
		{
			Code:    `class A { set a(foo){} b(){} get a(){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
				},
			},
		},
		{
			Code:    `(class { static set a(foo){} b(){} static get a(){} })`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
				},
			},
		},
		{
			Code: `({ get 'abc'(){}, d(){}, set 'abc'(foo){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
				},
			},
		},
		{
			Code:    `({ set ''(foo){}, get [''](){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    `class A { set abc(foo){} get 'abc'(){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    "(class { set [`abc`](foo){} get abc(){} })",
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    "({ set ['abc'](foo){}, get [`abc`](){} })",
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    `({ set 123(foo){}, get [123](){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    `class A { static set '123'(foo){} static get 123(){} }`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    `(class { set [a+b](foo){} get [a+b](){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code:    `({ set [f(a)](foo){}, get [f(a)](){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
				},
			},
		},
		{
			Code: `({ get a(){}, b: 1, set a(foo){}, set c(foo){}, d(){}, get c(){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    21,
				},
				{
					MessageId: "notGrouped",
					Column:    56,
				},
			},
		},
		{
			Code: `({ get a(){}, set b(foo){}, set a(bar){}, get b(){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    29,
				},
				{
					MessageId: "notGrouped",
					Column:    43,
				},
			},
		},
		{
			Code: `({ get a(){}, set [a](foo){}, set a(bar){}, get [a](){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    31,
				},
				{
					MessageId: "notGrouped",
					Column:    45,
				},
			},
		},
		{
			Code:    `({ a(){}, set b(foo){}, ...c, get b(){}, set c(bar){}, get c(){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    31,
				},
				{
					MessageId: "invalidOrder",
					Column:    56,
				},
			},
		},
		{
			Code:    `({ set [a](foo){}, get [a](){}, set [-a](bar){}, get [-a](){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    20,
				},
				{
					MessageId: "invalidOrder",
					Column:    50,
				},
			},
		},
		{
			Code: `class A { get a(){} constructor (){} set a(foo){} get b(){} static c(){} set b(bar){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    38,
				},
				{
					MessageId: "notGrouped",
					Column:    74,
				},
			},
		},
		{
			Code: `(class { set a(foo){} static get a(){} get a(){} static set a(bar){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    40,
				},
				{
					MessageId: "notGrouped",
					Column:    50,
				},
			},
		},
		{
			Code:    `class A { get a(){} set a(foo){} static get b(){} static set b(bar){} }`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    21,
				},
				{
					MessageId: "invalidOrder",
					Column:    51,
				},
			},
		},
		{
			Code: `(class { set [a+b](foo){} get [a-b](){} get [a+b](){} set [a-b](bar){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    41,
				},
				{
					MessageId: "notGrouped",
					Column:    55,
				},
			},
		},
		{
			Code: `({ get a(){}, set a(foo){}, get b(){}, c: function(){}, set b(bar){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    57,
				},
			},
		},
		{
			Code: `({ get a(){}, get b(){}, set a(foo){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    26,
				},
			},
		},
		{
			Code: `({ set a(foo){}, get [a](){}, get a(){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    31,
				},
			},
		},
		{
			Code: `({ set [a](foo){}, set a(bar){}, get [a](){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    34,
				},
			},
		},
		{
			Code:    `({ get a(){}, set a(foo){}, set b(bar){}, get b(){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    43,
				},
			},
		},
		{
			Code: `class A { get a(){} static set b(foo){} static get b(){} set a(foo){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    58,
				},
			},
		},
		{
			Code: `(class { static get a(){} set a(foo){} static set a(bar){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    40,
				},
			},
		},
		{
			Code:    `class A { set a(foo){} get a(){} static get a(){} static set a(bar){} }`,
			Options: "[\"setBeforeGet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    51,
				},
			},
		},
		{
			Code: `({ get a(){}, a: 1, set a(foo){} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    21,
				},
			},
		},
		{
			Code:    `({ a(){}, set a(foo){}, get a(){} })`,
			Options: "[\"getBeforeSet\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidOrder",
					Column:    25,
				},
			},
		},
		{
			Code: `class A { get a(){} a(){} set a(foo){} }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    27,
				},
			},
		},
		{
			Code:            `class A { get a(){} a; set a(foo){} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Column:    24,
				},
			},
		},
		{
			Code: `({ get a(){},
    b: 1,
    set a(foo){}
})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Line:      3,
					Column:    5,
					EndLine:   3,
					EndColumn: 10,
				},
			},
		},
		{
			Code: `class A { static set a(foo){} b(){} static get 
 a(){}
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notGrouped",
					Line:      1,
					Column:    37,
					EndLine:   2,
					EndColumn: 3,
				},
			},
		},
	})
}
