// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessCatchRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-useless-catch", []ValidTestCase{
		{Code: `
            try {
                foo();
            } catch (err) {
                console.error(err);
            }
        `},
		{Code: `
            try {
                foo();
            } catch (err) {
                console.error(err);
            } finally {
                bar();
            }
        `},
		{Code: `
            try {
                foo();
            } catch (err) {
                doSomethingBeforeRethrow();
                throw err;
            }
        `},
		{Code: `
            try {
                foo();
            } catch (err) {
                throw err.msg;
            }
        `},
		{Code: `
            try {
                foo();
            } catch (err) {
                throw new Error("whoops!");
            }
        `},
		{Code: `
            try {
                foo();
            } catch (err) {
                throw bar;
            }
        `},
		{Code: `
            try {
                foo();
            } catch (err) { }
        `},
		{
			Code: `
                try {
                    foo();
                } catch ({ err }) {
                    throw err;
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
                try {
                    foo();
                } catch ([ err ]) {
                    throw err;
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
                async () => {
                    try {
                        await doSomething();
                    } catch (e) {
                        doSomethingAfterCatch();
                        throw e;
                    }
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":8}",
		},
		{
			Code: `
                try {
                    throw new Error('foo');
                } catch {
                    throw new Error('foo');
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":2019}",
		},
	}, []InvalidTestCase{
		{
			Code: `
                try {
                    foo();
                } catch (err) {
                    throw err;
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCatch",
				},
			},
		},
		{
			Code: `
                try {
                    foo();
                } catch (err) {
                    throw err;
                } finally {
                    foo();
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCatchClause",
				},
			},
		},
		{
			Code: `
                try {
                    foo();
                } catch (err) {
                    /* some comment */
                    throw err;
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCatch",
				},
			},
		},
		{
			Code: `
                try {
                    foo();
                } catch (err) {
                    /* some comment */
                    throw err;
                } finally {
                    foo();
                }
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCatchClause",
				},
			},
		},
		{
			Code: `
                async () => {
                    try {
                        await doSomething();
                    } catch (e) {
                        throw e;
                    }
                }
            `,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCatch",
				},
			},
		},
	})
}
