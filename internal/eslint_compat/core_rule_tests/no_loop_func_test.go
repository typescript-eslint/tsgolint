// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoLoopFuncRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"parser\":{\"version\":\"8.30.1\",\"meta\":{\"name\":\"typescript-eslint/parser\",\"version\":\"8.30.1\"}}}}", "no-loop-func", []ValidTestCase{
		{Code: `
  for (let i = 0; i < 10; i++) {
	function foo() {
	  console.log('A');
	}
  }
	  `},
		{Code: `
  let someArray: MyType[] = [];
  for (let i = 0; i < 10; i += 1) {
	someArray = someArray.filter((item: MyType) => !!item);
  }
	  `},
		{
			Code: `
  let someArray: MyType[] = [];
  for (let i = 0; i < 10; i += 1) {
	someArray = someArray.filter((item: MyType) => !!item);
  }
		`,
			LanguageOptions: "{\"globals\":{\"MyType\":\"readonly\"}}",
		},
		{
			Code: `
  let someArray: MyType[] = [];
  for (let i = 0; i < 10; i += 1) {
	someArray = someArray.filter((item: MyType) => !!item);
  }
		`,
			LanguageOptions: "{\"globals\":{\"MyType\":\"writable\"}}",
		},
		{Code: `
  type MyType = 1;
  let someArray: MyType[] = [];
  for (let i = 0; i < 10; i += 1) {
	someArray = someArray.filter((item: MyType) => !!item);
  }
	  `},
		{Code: `
    // UnconfiguredGlobalType is not defined anywhere or configured in globals
    for (var i = 0; i < 10; i++) {
      const process = (item: UnconfiguredGlobalType) => {
        // This is valid because the type reference is considered safe
        // even though UnconfiguredGlobalType is not configured
        return item.id;
      };
    }
    `},
		{
			Code: `
    for (var i = 0; i < 10; i++) {
      // ConfiguredType is in globals, UnconfiguredType is not
      // Both should be considered safe as they are type references
      const process = (configItem: ConfiguredType, unconfigItem: UnconfiguredType) => {
        return { 
          config: configItem.value,
          unconfig: unconfigItem.value
        };
      };
    }
      `,
			LanguageOptions: "{\"globals\":{\"ConfiguredType\":\"readonly\"}}",
		},
	}, []InvalidTestCase{
		{
			Code: `
  for (var i = 0; i < 10; i++) {
    function foo() {
      console.log(i);
    }
  }
			`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeRefs",
				},
			},
		},
		{
			Code: `
  for (var i = 0; i < 10; i++) {
    const handler = (event: Event) => {
      console.log(i);
    };
  }
			`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeRefs",
				},
			},
		},
		{
			Code: `
  interface Item {
    id: number;
    name: string;
  }
  
  const items: Item[] = [];
  for (var i = 0; i < 10; i++) {
    items.push({
      id: i,
      name: "Item " + i
    });
    
    const process = function(callback: (item: Item) => void): void {
      callback({ id: i, name: "Item " + i });
    };
  }
			`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeRefs",
				},
			},
		},
		{
			Code: `
  type Processor<T> = (item: T) => void;
		
  for (var i = 0; i < 10; i++) {
    const processor: Processor<number> = (item) => {
      return item + i;
    };
  }
			`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeRefs",
				},
			},
		},
		{
			Code: `
      for (var i = 0; i < 10; i++) {
        // UnconfiguredGlobalType is not defined anywhere
        // But the function still references i which makes it unsafe
        const process = (item: UnconfiguredGlobalType) => {
          console.log(i, item.value);
        };
      }
      `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unsafeRefs",
				},
			},
		},
	})
}
