// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessAssignmentRule(t *testing.T) {
	RunRuleTester(t, "{\"plugins\":{\"test\":{\"rules\":{\"use-a\":{},\"jsx\":{}}}}}", "no-useless-assignment", []ValidTestCase{
		{Code: `let v = 'used';
        console.log(v);
        v = 'used-2'
        console.log(v);`},
		{Code: `function foo() {
            let v = 'used';
            console.log(v);
            v = 'used-2';
            console.log(v);
        }`},
		{Code: `function foo() {
            let v = 'used';
            if (condition) {
                v = 'used-2';
                console.log(v);
                return
            }
            console.log(v);
        }`},
		{Code: `function foo() {
            let v = 'used';
            if (condition) {
                console.log(v);
            } else {
                v = 'used-2';
                console.log(v);
            }
        }`},
		{Code: `function foo() {
            let v = 'used';
            if (condition) {
                //
            } else {
                v = 'used-2';
            }
            console.log(v);
        }`},
		{Code: `var foo = function () {
            let v = 'used';
            console.log(v);
            v = 'used-2'
            console.log(v);
        }`},
		{Code: `var foo = () => {
            let v = 'used';
            console.log(v);
            v = 'used-2'
            console.log(v);
        }`},
		{Code: `class foo {
            static {
                let v = 'used';
                console.log(v);
                v = 'used-2'
                console.log(v);
            }
        }`},
		{Code: `function foo () {
            let v = 'used';
            for (let i = 0; i < 10; i++) {
                console.log(v);
                v = 'used in next iteration';
            }
        }`},
		{Code: `function foo () {
            let i = 0;
            i++;
            i++;
            console.log(i);
        }`},
		{Code: `export let foo = 'used';
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `export function foo () {};
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `export class foo {};
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `export default function foo () {};
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `export default class foo {};
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `let foo = 'used';
        export { foo };
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `function foo () {};
        export { foo };
        console.log(foo);
        foo = 'unused like but exported';`},
		{Code: `class foo {};
        export { foo };
        console.log(foo);
        foo = 'unused like but exported';`},
		{
			Code: `/* exported foo */
            let foo = 'used';
            console.log(foo);
            foo = 'unused like but exported with directive';`,
			LanguageOptions: "{\"sourceType\":\"script\"}",
		},
		{Code: `/*eslint test/use-a:1*/
        let a = 'used';
        console.log(a);
        a = 'unused like but marked by markVariableAsUsed()';
        `},
		{Code: `v = 'used';
        console.log(v);
        v = 'unused'`},
		{Code: `let v = 'used variable';`},
		{Code: `function foo() {
            return;

            const x = 1;
            if (y) {
                bar(x);
            }
        }`},
		{Code: `function foo() {
            const x = 1;
            console.log(x);
            return;

            x = 'Foo'
        }`},
		{Code: `function foo() {
            let a = 42;
            console.log(a);
            a++;
            console.log(a);
        }`},
		{Code: `function foo() {
            let a = 42;
            console.log(a);
            a--;
            console.log(a);
        }`},
		{Code: `function foo() {
            let a = 42;
            console.log(a);
            a = 10;
            a = a + 1;
            console.log(a);
        }`},
		{Code: `function foo() {
            let a = 42;
            console.log(a);
            a = 10;
            if (cond) {
                a = a + 1;
            } else {
                a = 2 + a;
            }
            console.log(a);
        }`},
		{Code: `function foo() {
            let a = 'used', b = 'used', c = 'used', d = 'used';
            console.log(a, b, c, d);
            ({ a, arr: [b, c, ...d] } = fn());
            console.log(a, b, c, d);
        }`},
		{Code: `function foo() {
            let a = 'used', b = 'used', c = 'used';
            console.log(a, b, c);
            ({ a = 'unused', foo: b, ...c } = fn());
            console.log(a, b, c);
        }`},
		{Code: `function foo() {
            let a = {};
            console.log(a);
            a.b = 'unused like, but maybe used in setter';
        }`},
		{Code: `function foo() {
            let a = { b: 42 };
            console.log(a);
            a.b++;
        }`},
		{Code: `function foo () {
            let v = 'used';
            console.log(v);
            function bar() {
                v = 'used in outer scope';
            }
            bar();
            console.log(v);
        }`},
		{Code: `function foo () {
            let v = 'used';
            console.log(v);
            setTimeout(() => console.log(v), 1);
            v = 'used in other scope';
        }`},
		{Code: `function foo () {
            let v = 'used';
            console.log(v);
            for (let i = 0; i < 10; i++) {
                if (condition) {
                    v = 'maybe used';
                    continue;
                }
                console.log(v);
            }
        }`},
		{Code: `/* globals foo */
        const bk = foo;
        foo = 42;
        try {
            // process
        } finally {
            foo = bk;
        }`},
		{
			Code: `
            const bk = console;
            console = { log () {} };
            try {
                // process
            } finally {
                console = bk;
            }`,
			LanguageOptions: "{\"globals\":{\"console\":false}}",
		},
		{Code: `let message = 'init';
        try {
            const result = call();
            message = result.message;
        } catch (e) {
            // ignore
        }
        console.log(message)`},
		{Code: `let message = 'init';
        try {
            message = call().message;
        } catch (e) {
            // ignore
        }
        console.log(message)`},
		{Code: `let v = 'init';
        try {
            v = callA();
            try {
                v = callB();
            } catch (e) {
                // ignore
            }
        } catch (e) {
            // ignore
        }
        console.log(v)`},
		{Code: `let v = 'init';
        try {
            try {
                v = callA();
            } catch (e) {
                // ignore
            }
        } catch (e) {
            // ignore
        }
        console.log(v)`},
		{Code: `let a;
        try {
            foo();
        } finally {
            a = 5;
        }
        console.log(a);`},
		{Code: `const obj = { a: 5 };
        const { a, b = a } = obj;
        console.log(b); // 5`},
		{Code: `const arr = [6];
        const [c, d = c] = arr;
        console.log(d); // 6`},
		{Code: `const obj = { a: 1 };
        let {
            a,
            b = (a = 2)
        } = obj;
        console.log(a, b);`},
		{Code: `let { a, b: {c = a} = {} } = obj;
        console.log(c);`},
		{Code: `function foo(){
            let bar;
            try {
                bar = 2;
                unsafeFn();
                return { error: undefined };
            } catch {
                return { bar }; 
            }
        }   
        function unsafeFn() {
            throw new Error();
        }`},
		{Code: `function foo(){
            let bar, baz;
            try {
                bar = 2;
                unsafeFn();
                return { error: undefined };
            } catch {
               baz = bar;
            }
            return baz;
        }   
        function unsafeFn() {
            throw new Error();
        }`},
		{Code: `function foo(){
            let bar;
            try {
                bar = 2;
                unsafeFn();
                bar = 4;
            } catch {
               // handle error
            }
            return bar;
        }   
        function unsafeFn() {
            throw new Error();
        }`},
		{
			Code: `/*eslint test/jsx:1*/
                function App() {
                    const A = "";
                    return <A/>;
                }
            `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code: `/*eslint test/jsx:1*/
                function App() {
                    let A = "";
                    foo(A);
                    A = "A";
                    return <A/>;
                }
            `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
		{
			Code: `/*eslint test/jsx:1*/
                function App() {
                    let A = "a";
                    A = "b";
                    A = "c";
                    foo(A);
                    return <A/>;
                }
            `,
			LanguageOptions: "{\"parserOptions\":{\"ecmaFeatures\":{\"jsx\":true}}}",
		},
	}, []InvalidTestCase{
		{
			Code: `let v = 'used';
            console.log(v);
            v = 'unused'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      3,
					Column:    13,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                console.log(v);
                v = 'unused';
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                if (condition) {
                    v = 'unused';
                    return
                }
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                if (condition) {
                    console.log(v);
                } else {
                    v = 'unused';
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      6,
					Column:    21,
				},
			},
		},
		{
			Code: `var foo = function () {
                let v = 'used';
                console.log(v);
                v = 'unused'
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `var foo = () => {
                let v = 'used';
                console.log(v);
                v = 'unused'
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `class foo {
                static {
                    let v = 'used';
                    console.log(v);
                    v = 'unused'
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'unused';
                if (condition) {
                    v = 'used';
                    console.log(v);
                    return
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      2,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                console.log(v);
                v = 'unused';
                v = 'unused';
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                console.log(v);
                v = 'unused';
                v = 'used';
                console.log(v);
                v = 'used';
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `
            let v;
            v = 'unused';
            if (foo) {
                v = 'used';
            } else {
                v = 'used';
            }
            console.log(v);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      3,
					Column:    13,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                console.log(v);
                v = 'unused';
                v = 'unused';
                v = 'used';
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'unused';
                if (condition) {
                    if (condition2) {
                        v = 'used-2';
                    } else {
                        v = 'used-3';
                    }
                } else {
                    v = 'used-4';
                }
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      2,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo() {
                let v;
                if (condition) {
                    v = 'unused';
                } else {
                    //
                }
                if (condition2) {
                    v = 'used-1';
                } else {
                    v = 'used-2';
                }
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                if (condition) {
                    v = 'unused';
                    v = 'unused';
                    v = 'used';
                }
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    21,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo() {
                let a = 42;
                console.log(a);
                a++;
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let a = 42;
                console.log(a);
                a--;
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let a = 'used', b = 'used', c = 'used', d = 'used';
                console.log(a, b, c, d);
                ({ a, arr: [b, c,, ...d] } = fn());
                console.log(c);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    20,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    29,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    39,
				},
			},
		},
		{
			Code: `function foo() {
                let a = 'used', b = 'used', c = 'used';
                console.log(a, b, c);
                ({ a = 'unused', foo: b, ...c } = fn());
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    20,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    39,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    45,
				},
			},
		},
		{
			Code: `function foo () {
                let v = 'used';
                console.log(v);
                setTimeout(() => v = 42, 1);
                v = 'unused and variable is only updated in other scopes';
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                if (condition) {
                    let v = 'used';
                    console.log(v);
                    v = 'unused';
                }
                console.log(v);
                v = 'unused';
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      6,
					Column:    21,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      9,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo() {
                let v = 'used';
                if (condition) {
                    console.log(v);
                    v = 'unused';
                } else {
                    v = 'unused';
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    21,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      7,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo () {
                let v = 'used';
                console.log(v);
                v = 'unused';
                return;
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo () {
                let v = 'used';
                console.log(v);
                v = 'unused';
                throw new Error();
                console.log(v);
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `function foo () {
                let v = 'used';
                console.log(v);
                for (let i = 0; i < 10; i++) {
                    v = 'unused';
                    continue;
                    console.log(v);
                }
            }
            function bar () {
                let v = 'used';
                console.log(v);
                for (let i = 0; i < 10; i++) {
                    v = 'unused';
                    break;
                    console.log(v);
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      5,
					Column:    21,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      14,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo () {
                let v = 'used';
                console.log(v);
                for (let i = 0; i < 10; i++) {
                    if (condition) {
                        v = 'unused';
                        break;
                    }
                    console.log(v);
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      6,
					Column:    25,
				},
			},
		},
		{
			Code: `let message = 'unused';
            try {
                const result = call();
                message = result.message;
            } catch (e) {
                message = 'used';
            }
            console.log(message)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `let message = 'unused';
            try {
                message = 'used';
                console.log(message)
            } catch (e) {
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `let message = 'unused';
            try {
                message = call();
            } catch (e) {
                message = 'used';
            }
            console.log(message)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `let v = 'unused';
            try {
                v = callA();
                try {
                    v = callB();
                } catch (e) {
                    // ignore
                }
            } catch (e) {
                v = 'used';
            }
            console.log(v)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `
            var x = 1; // used
            x = x + 1; // unused
            x = 5; // used
            f(x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      3,
					Column:    13,
				},
			},
		},
		{
			Code: `
            var x = 1; // used
            x = // used
                x++; // unused
            f(x);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    17,
				},
			},
		},
		{
			Code: `const obj = { a: 1 };
            let {
                a,
                b = (a = 2)
            } = obj;
            a = 3
            console.log(a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryAssignment",
					Line:      3,
					Column:    17,
				},
				{
					MessageId: "unnecessaryAssignment",
					Line:      4,
					Column:    22,
				},
			},
		},
	})
}
