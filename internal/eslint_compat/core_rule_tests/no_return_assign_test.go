// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoReturnAssignRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "no-return-assign", []ValidTestCase{
		{
			Code:            `module.exports = {'a': 1};`,
			LanguageOptions: "{\"sourceType\":\"module\"}",
		},
		{Code: `var result = a * b;`},
		{Code: `function x() { var result = a * b; return result; }`},
		{Code: `function x() { return (result = a * b); }`},
		{
			Code:    `function x() { var result = a * b; return result; }`,
			Options: "[\"except-parens\"]",
		},
		{
			Code:    `function x() { return (result = a * b); }`,
			Options: "[\"except-parens\"]",
		},
		{
			Code:    `function x() { var result = a * b; return result; }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function x() { return function y() { result = a * b }; }`,
			Options: "[\"always\"]",
		},
		{
			Code:    `() => { return (result = a * b); }`,
			Options: "[\"except-parens\"]",
		},
		{
			Code:    `() => (result = a * b)`,
			Options: "[\"except-parens\"]",
		},
		{Code: `const foo = (a,b,c) => ((a = b), c)`},
		{Code: `function foo(){
            return (a = b)
        }`},
		{Code: `function bar(){
            return function foo(){
                return (a = b) && c
            }
        }`},
		{
			Code:            `const foo = (a) => (b) => (a = b)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `function x() { return result = a * b; };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `function x() { return (result) = (a * b); };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code:    `function x() { return result = a * b; };`,
			Options: "[\"except-parens\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code:    `function x() { return (result) = (a * b); };`,
			Options: "[\"except-parens\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `() => { return result = a * b; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `() => result = a * b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "arrowAssignment",
				},
			},
		},
		{
			Code:    `function x() { return result = a * b; };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code:    `function x() { return (result = a * b); };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code:    `function x() { return result || (result = a * b); };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `function foo(){
                return a = b
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `function doSomething() {
                return foo = bar && foo > 0;
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `function doSomething() {
                return foo = function(){
                    return (bar = bar1)
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `function doSomething() {
                return foo = () => a
            }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code: `function doSomething() {
                return () => a = () => b
            }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "arrowAssignment",
				},
			},
		},
		{
			Code: `function foo(a){
                return function bar(b){
                    return a = b
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnAssignment",
				},
			},
		},
		{
			Code:            `const foo = (a) => (b) => a = b`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "arrowAssignment",
				},
			},
		},
	})
}
