// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMaxNestedCallbacksRule(t *testing.T) {
	RunRuleTester(t, "{}", "max-nested-callbacks", []ValidTestCase{
		{
			Code:    `foo(function() { bar(thing, function(data) {}); });`,
			Options: "[3]",
		},
		{
			Code:    `var foo = function() {}; bar(function(){ baz(function() { qux(foo); }) });`,
			Options: "[2]",
		},
		{
			Code:    `fn(function(){}, function(){}, function(){});`,
			Options: "[2]",
		},
		{
			Code:            `fn(() => {}, function(){}, function(){});`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {});});});});});});});});});});`},
		{
			Code:    `foo(function() { bar(thing, function(data) {}); });`,
			Options: "[{\"max\":3}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `foo(function() { bar(thing, function(data) { baz(function() {}); }); });`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `foo(function() { bar(thing, (data) => { baz(function() {}); }); });`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:            `foo(() => { bar(thing, (data) => { baz( () => {}); }); });`,
			Options:         "[2]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `foo(function() { if (isTrue) { bar(function(data) { baz(function() {}); }); } });`,
			Options: "[2]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {});});});});});});});});});});});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {foo(function() {});});});});});});});});});});});`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `foo(function() {})`,
			Options: "[{\"max\":0}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code:    `foo(function() { bar(thing, function(data) { baz(function() {}); }); });`,
			Options: "[{\"max\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
	})
}
