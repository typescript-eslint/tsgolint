// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoThisBeforeSuperRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "no-this-before-super", []ValidTestCase{
		{Code: `class A { }`},
		{Code: `class A { constructor() { } }`},
		{Code: `class A { constructor() { this.b = 0; } }`},
		{Code: `class A { constructor() { this.b(); } }`},
		{Code: `class A extends null { }`},
		{Code: `class A extends null { constructor() { } }`},
		{Code: `class A extends B { }`},
		{Code: `class A extends B { constructor() { super(); } }`},
		{Code: `class A extends B { constructor() { super(); this.c = this.d; } }`},
		{Code: `class A extends B { constructor() { super(); this.c(); } }`},
		{Code: `class A extends B { constructor() { super(); super.c(); } }`},
		{Code: `class A extends B { constructor() { if (true) { super(); } else { super(); } this.c(); } }`},
		{Code: `class A extends B { constructor() { foo = super(); this.c(); } }`},
		{Code: `class A extends B { constructor() { foo += super().a; this.c(); } }`},
		{Code: `class A extends B { constructor() { foo |= super().a; this.c(); } }`},
		{Code: `class A extends B { constructor() { foo &= super().a; this.c(); } }`},
		{Code: `class A extends B { constructor() { class B extends C { constructor() { super(); this.d = 0; } } super(); } }`},
		{Code: `class A extends B { constructor() { var B = class extends C { constructor() { super(); this.d = 0; } }; super(); } }`},
		{Code: `class A extends B { constructor() { function c() { this.d(); } super(); } }`},
		{Code: `class A extends B { constructor() { var c = function c() { this.d(); }; super(); } }`},
		{Code: `class A extends B { constructor() { var c = () => this.d(); super(); } }`},
		{Code: `class A { b() { this.c = 0; } }`},
		{Code: `class A extends B { c() { this.d = 0; } }`},
		{Code: `function a() { this.b = 0; }`},
		{Code: `class A extends B { constructor() { if (a) { super(); this.a(); } else { super(); this.b(); } } }`},
		{Code: `class A extends B { constructor() { if (a) super(); else super(); this.a(); } }`},
		{Code: `class A extends B { constructor() { try { super(); } finally {} this.a(); } }`},
		{Code: `class A extends B {
            constructor() {
                while (foo) {
                    super();
                    this.a();
                }
            }
        }`},
		{Code: `class A extends B {
            constructor() {
                while (foo) {
                    if (init) {
                        super();
                        this.a();
                    }
                }
            }
        }`},
		{Code: `class A extends B { constructor(a) { super(); for (const b of a) { this.a(); } } }`},
		{Code: `class A extends B { constructor(a) { for (const b of a) { foo(b); } super(); } }`},
		{Code: `class A extends B { constructor(a) { super(); this.a = a && function(){} && this.foo; } }`},
		{Code: `class A extends Object {
    constructor() {
        super();
        for (let i = 0; i < 0; i++);
        this;
    }
}`},
		{Code: `class A { constructor() { return; this; } }`},
		{Code: `class A extends B { constructor() { return; this; } }`},
		{Code: `
            class A extends B {
                constructor(props) {
                    super(props);

                    try {
                        let arr = [];
                        for (let a of arr) {
                        }
                    } catch (err) {
                    }
                }
            }
        `},
		{Code: `class C { field = this.toString(); }`},
		{Code: `class C extends B { field = this.foo(); }`},
		{Code: `class C extends B { field = this.foo(); constructor() { super(); } }`},
		{Code: `class C extends B { field = this.foo(); constructor() { } }`},
	}, []InvalidTestCase{
		{
			Code: `class A extends B { constructor() { this.c = 0; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { this.c(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super.c(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { this.c = 0; super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { this.c(); super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super.c(); super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super(this.c); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super(this.c()); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { super(super.c()); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { class C extends D { constructor() { super(); this.e(); } } this.f(); super(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
					Column:    96,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { class C extends D { constructor() { this.e(); super(); } } super(); this.f(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
					Column:    73,
				},
			},
		},
		{
			Code: `class A extends B { constructor() { if (a) super(); this.a(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { try { super(); } finally { this.a; } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `class A extends B { constructor() { try { super(); } catch (err) { } this.a; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code:            `class A extends B { constructor() { foo &&= super().a; this.c(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code:            `class A extends B { constructor() { foo ||= super().a; this.c(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code:            `class A extends B { constructor() { foo ??= super().a; this.c(); } }`,
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `
            class A extends B {
                constructor() {
                    if (foo) {
                        if (bar) { }
                        super();
                    }
                    this.a();
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `
            class A extends B {
                constructor() {
                    if (foo) {
                    } else {
                      super();
                    }
                    this.a();
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `
            class A extends B {
                constructor() {
                    try {
                        call();
                    } finally {
                        this.a();
                    }
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `
            class A extends B {
                constructor() {
                    while (foo) {
                        super();
                    }
                    this.a();
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `
            class A extends B {
                constructor() {
                    while (foo) {
                        this.a();
                        super();
                    }
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
		{
			Code: `
            class A extends B {
                constructor() {
                    while (foo) {
                        if (init) {
                            this.a();
                            super();
                        }
                    }
                }
            }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noBeforeSuper",
				},
			},
		},
	})
}
