// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestForDirectionRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2020}}", "for-direction", []ValidTestCase{
		{Code: `for(var i = 0; i < 10; i++){}`},
		{Code: `for(var i = 0; i <= 10; i++){}`},
		{Code: `for(var i = 10; i > 0; i--){}`},
		{Code: `for(var i = 10; i >= 0; i--){}`},
		{Code: `for(var i = 0; 10 > i; i++){}`},
		{Code: `for(var i = 0; 10 >= i; i++){}`},
		{Code: `for(var i = 10; 0 < i; i--){}`},
		{Code: `for(var i = 10; 0 <= i; i--){}`},
		{Code: `for(var i = 0; i < 10; i+=1){}`},
		{Code: `for(var i = 0; i <= 10; i+=1){}`},
		{Code: `for(var i = 0; i < 10; i-=-1){}`},
		{Code: `for(var i = 0; i <= 10; i-=-1){}`},
		{Code: `for(var i = 10; i > 0; i-=1){}`},
		{Code: `for(var i = 10; i >= 0; i-=1){}`},
		{Code: `for(var i = 10; i > 0; i+=-1){}`},
		{Code: `for(var i = 10; i >= 0; i+=-1){}`},
		{Code: `for(var i = 0n; i > l; i-=1n){}`},
		{Code: `for(var i = 0n; i < l; i-=-1n){}`},
		{Code: `for(var i = MIN; i <= MAX; i+=true){}`},
		{Code: `for(var i = 0; i < 10; i+=+5e-7){}`},
		{Code: `for(var i = 0; i < MAX; i -= ~2);`},
		{Code: `for(var i = 0, n = -1; i < MAX; i += -n);`},
		{Code: `for(var i = 0; 10 > i; i+=1){}`},
		{Code: `for(var i = 10; i > 0;){}`},
		{Code: `for(var i = 10; i >= 0;){}`},
		{Code: `for(var i = 10; i < 0;){}`},
		{Code: `for(var i = 10; i <= 0;){}`},
		{Code: `for(var i = 10; i <= 0; j++){}`},
		{Code: `for(var i = 10; i <= 0; j--){}`},
		{Code: `for(var i = 10; i >= 0; j++){}`},
		{Code: `for(var i = 10; i >= 0; j--){}`},
		{Code: `for(var i = 10; i >= 0; j += 2){}`},
		{Code: `for(var i = 10; i >= 0; j -= 2){}`},
		{Code: `for(var i = 10; i >= 0; i |= 2){}`},
		{Code: `for(var i = 10; i >= 0; i %= 2){}`},
		{Code: `for(var i = 0; i < MAX; i += STEP_SIZE);`},
		{Code: `for(var i = 0; i < MAX; i -= STEP_SIZE);`},
		{Code: `for(var i = 10; i > 0; i += STEP_SIZE);`},
		{Code: `for(var i = 10; i >= 0; i += 0);`},
		{Code: `for(var i = 10n; i >= 0n; i += 0n);`},
		{Code: `for(var i = 10; i >= 0; i += this.step);`},
		{Code: `for(var i = 10; i >= 0; i += 'foo');`},
		{Code: `for(var i = 10; i > 0; i += !foo);`},
		{Code: `for(var i = MIN; i <= MAX; i -= false);`},
		{Code: `for(var i = MIN; i <= MAX; i -= 0/0);`},
		{Code: `for(var i = 0; i !== 10; i+=1){}`},
		{Code: `for(var i = 0; i === 10; i+=1){}`},
		{Code: `for(var i = 0; i == 10; i+=1){}`},
		{Code: `for(var i = 0; i != 10; i+=1){}`},
	}, []InvalidTestCase{
		{
			Code: `for(var i = 0; i < 10; i--){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i <= 10; i--){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; i > 10; i++){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; i >= 0; i++){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; 10 > i; i--){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; 10 >= i; i--){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; 10 < i; i++){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; 0 <= i; i++){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i < 10; i-=1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i <= 10; i-=1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; i > 10; i+=1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; i >= 0; i+=1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i < 10; i+=-1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i <= 10; i+=-1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; i > 10; i-=-1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 10; i >= 0; i-=-1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0n; i > l; i+=1n){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0n; i < l; i+=-1n){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = MIN; i <= MAX; i-=true){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i < 10; i-=+5e-7){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; i < MAX; i += (2 - 3));`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `var n = -2; for(var i = 0; i < 10; i += n);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
		{
			Code: `for(var i = 0; 10 > i; i-=1){}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "incorrectDirection",
				},
			},
		},
	})
}
