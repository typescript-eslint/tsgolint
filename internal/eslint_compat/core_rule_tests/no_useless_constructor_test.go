// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessConstructorRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"parser\":{\"version\":\"8.30.1\",\"meta\":{\"name\":\"typescript-eslint/parser\",\"version\":\"8.30.1\"}}}}", "no-useless-constructor", []ValidTestCase{
		{Code: `
      declare class A {
        constructor();
      }
          `},
		{Code: `
      class A {
        constructor();
      }
          `},
		{Code: `
      abstract class A {
        constructor();
      }
          `},
		{Code: `
      class A {
        constructor(private name: string) {}
      }
          `},
		{Code: `
      class A {
        constructor(public name: string) {}
      }
          `},
		{Code: `
      class A {
        constructor(protected name: string) {}
      }
          `},
		{Code: `
      class A {
        private constructor() {}
      }
          `},
		{Code: `
      class A {
        protected constructor() {}
      }
          `},
		{Code: `
      class A extends B {
        public constructor() {}
      }
          `},
		{Code: `
      class A extends B {
        public constructor() {
            super();
        }
      }
          `},
		{Code: `
      class A extends B {
        protected constructor(foo, bar) {
          super(bar);
        }
      }
          `},
		{Code: `
      class A extends B {
        private constructor(foo, bar) {
          super(bar);
        }
      }
          `},
		{Code: `
      class A extends B {
        public constructor(foo) {
          super(foo);
        }
      }
          `},
		{Code: `
      class A extends B {
        public constructor(foo) {}
      }
          `},
		{Code: `
      class A {
        constructor(foo);
      }
          `},
		{Code: `
      class A {
        constructor(@Foo foo) {}
      }
          `},
		{Code: `
      class A {
        constructor(@Foo foo: string) {}
      }
          `},
		{Code: `
      class A extends Object {
        constructor(@Foo foo: string) {
          super(foo);
        }
      }
          `},
		{Code: `
      class A extends Object {
        constructor(foo: string, @Bar() bar) {
          super(foo, bar);
        }
      }
          `},
	}, []InvalidTestCase{
		{
			Code: `
            class A {
                constructor() {}
            }
              `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noUselessConstructor",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConstructor",
							Output: `
            class A {
                
            }
              `,
						},
					},
				},
			},
		},
		{
			Code: `
            class A {
                public constructor() {}
            }
        `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "noUselessConstructor",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "removeConstructor",
							Output: `
            class A {
                
            }
        `,
						},
					},
				},
			},
		},
	})
}
