// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestKeySpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "key-spacing", []ValidTestCase{
		{Code: `({
})`},
		{Code: `({
a: b
})`},
		{
			Code: `({
})`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `({
a: b
})`,
			Options: "[{\"align\":\"value\"}]",
		},
		{
			Code:    `var obj = { key: value };`,
			Options: "[{}]",
		},
		{
			Code:            `var obj = { [(a + b)]: value };`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var foo = { a:bar };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":false}]",
		},
		{
			Code:    `var foo = { a: bar };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":true}]",
		},
		{
			Code:    `foo({ 'default': function(){}});`,
			Options: "[{\"beforeColon\":false,\"afterColon\":true}]",
		},
		{
			Code: `function foo() { return {
    key: (foo === 4)
}; }`,
			Options: "[{\"beforeColon\":false,\"afterColon\":true}]",
		},
		{
			Code:    `var obj = {'key' :42 };`,
			Options: "[{\"beforeColon\":true,\"afterColon\":false}]",
		},
		{
			Code:    `({a : foo, b : bar})['a'];`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
		},
		{
			Code: `var obj = {
    'a'     : (42 - 12),
    foobar  : 'value',
    [(expr)]: val
};`,
			Options:         "[{\"align\":\"colon\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `callExpr(arg, {
    key       :val,
    'another' :false,
    [compute] :'value'
});`,
			Options:         "[{\"align\":\"colon\",\"beforeColon\":true,\"afterColon\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    a:        (42 - 12),
    'foobar': 'value',
    bat:      function() {
        return this.a;
    },
    baz: 42
};`,
			Options: "[{\"align\":\"value\"}]",
		},
		{
			Code: `callExpr(arg, {
    'asdf' :val,
    foobar :false,
    key :   value
});`,
			Options: "[{\"align\":\"value\",\"beforeColon\":true,\"afterColon\":false}]",
		},
		{
			Code: `({
    a  : 0,
    // same group
    bcd: 0, /*
    end of group */

    // different group
    e: 0,
    /* group b */
    f: 0
})`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `obj = { key 
 : 
 longName };`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
		},
		{
			Code: `obj = { key 
    :longName };`,
			Options: "[{\"beforeColon\":true,\"afterColon\":false,\"mode\":\"minimum\"}]",
		},
		{
			Code:    `obj = { key     :longName };`,
			Options: "[{\"beforeColon\":true,\"afterColon\":false,\"mode\":\"minimum\"}]",
		},
		{
			Code:    `var obj = { get fn() { return 42; } };`,
			Options: "[{}]",
		},
		{
			Code:    `({ get fn() {} })`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code:    `var obj = {foo: 'fee', bar: 'bam'};`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code:    `var obj = {a: 'foo', bar: 'bam'};`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `var x = {
    foo: 10
  , b  : 20
};`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `var x = {
    foo : 10
  , b   : 20
};`,
			Options: "[{\"align\":\"colon\",\"beforeColon\":true}]",
		},
		{
			Code: `var x = {
        foo: 10,
 /*lol*/b  : 20
};`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `var a = 'a';
var b = 'b';

export default {
    a,
    b
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var test = {
    prop: 123,
    a,
    b
};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var test = {
    prop: 456,
    c,
    d
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    foobar: 123,
    prop,
    baz:    456
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var test = {
    prop: 123,
    a() { }
};`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var test = {
    prop: 123,
    a() { },
    b() { }
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    foobar: 123,
    method() { },
    baz:    456
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    foobar: 123,
    method() {
        return 42;
    },
    baz: 456,
    10:     
    10
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    foo : foo
  , bar : bar
  , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `var obj = { foo : foo
          , bar : bar
          , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `var obj = {
    foo :  foo
  , bar :  bar
  , cats : cats
};`,
			Options: "[{\"align\":\"value\",\"beforeColon\":true}]",
		},
		{
			Code:            `({a : foo, ...x, b : bar})['a'];`,
			Options:         "[{\"beforeColon\":true,\"afterColon\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `var obj = {
    'a'     : (42 - 12),
    ...x,
    foobar  : 'value',
    [(expr)]: val
};`,
			Options:         "[{\"align\":\"colon\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `callExpr(arg, {
    key       :val,
    ...x,
    ...y,
    'another' :false,
    [compute] :'value'
});`,
			Options:         "[{\"align\":\"colon\",\"beforeColon\":true,\"afterColon\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `var obj = {
    a:        (42 - 12),
    ...x,
    'foobar': 'value',
    bat:      function() {
        return this.a;
    },
    barfoo:
    [
        1
    ],
    baz: 42
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `({
    ...x,
    a  : 0,
    // same group
    bcd: 0, /*
    end of group */

    // different group
    e: 0,
    ...y,
    /* group b */
    f: 0
})`,
			Options:         "[{\"align\":\"colon\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `({
    a: 42,
    get b() { return 42; }
})`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `({
    set a(b) { b; },
    c: 42
})`,
			Options: "[{\"align\":\"value\"}]",
		},
		{
			Code: `({
    a  : 42,
    get b() { return 42; },
    set c(v) { v; },
    def: 42
})`,
			Options: "[{\"align\":\"colon\"}]",
		},
		{
			Code: `({
    a  : 42,
    get b() { return 42; },
    set c(v) { v; },
    def: 42
})`,
			Options: "[{\"multiLine\":{\"afterColon\":true,\"align\":\"colon\"}}]",
		},
		{
			Code: `({
    a   : 42,
    get b() { return 42; },
    set c(v) { v; },
    def : 42,
    obj : {a: 1, b: 2, c: 3}
})`,
			Options: "[{\"singleLine\":{\"afterColon\":true,\"beforeColon\":false},\"multiLine\":{\"afterColon\":true,\"beforeColon\":true,\"align\":\"colon\"}}]",
		},
		{
			Code: `({
    a   : 42,
    get b() { return 42; },
    set c(v) { v; },
    def : 42,
    def : {a: 1, b: 2, c: 3}
})`,
			Options: "[{\"multiLine\":{\"afterColon\":true,\"beforeColon\":true,\"align\":\"colon\"},\"singleLine\":{\"afterColon\":true,\"beforeColon\":false}}]",
		},
		{
			Code: `var obj = {
    foobar: 42,
    bat:    2
};`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":true,\"mode\":\"strict\"},\"multiLine\":{\"beforeColon\":false,\"afterColon\":true,\"mode\":\"minimum\"}}]",
		},
		{
			Code:            `({...object})`,
			Options:         "[{\"align\":\"colon\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code: `({
    longName: 1,
    small   : 2,
    f       : function() {
    },
    xs :3
})`,
			Options:         "[{\"align\":{\"afterColon\":true},\"beforeColon\":true,\"afterColon\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    longName: 1,
    small:    2,
    f:        function() {
    },
    xs :3
})`,
			Options:         "[{\"align\":{\"on\":\"value\",\"afterColon\":true},\"beforeColon\":true,\"afterColon\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    longName : 1,
    small :    2,
    xs :       3
})`,
			Options:         "[{\"multiLine\":{\"align\":{\"on\":\"value\",\"beforeColon\":true,\"afterColon\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    longName :1,
    small    :2,
    xs       :3
})`,
			Options:         "[{\"align\":{\"on\":\"colon\",\"beforeColon\":true,\"afterColon\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    longName: 1,
    small   : 2,
    xs      :        3
})`,
			Options:         "[{\"align\":{\"on\":\"colon\",\"beforeColon\":false,\"afterColon\":true,\"mode\":\"minimum\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    longName: 1,
    small   : 2,
    xs      : 3
})`,
			Options:         "[{\"multiLine\":{\"align\":{\"on\":\"colon\",\"beforeColon\":false,\"afterColon\":true}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    func: function() {
        var test = true;
    },
    longName : 1,
    small    : 2,
    xs       : 3,
    func2    : function() {
        var test2 = true;
    },
    internalGroup: {
        internal : true,
        ext      : false
    },
    func3:
    function () {
        var test3 = true;
    }
})`,
			Options:         "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":true},\"multiLine\":{\"beforeColon\":false,\"afterColon\":true},\"align\":{\"on\":\"colon\",\"beforeColon\":true,\"afterColon\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    func: function() {
        var test = true;
    },
    longName: 1,
    small:    2,
    xs:       3,
    func2:    function() {
        var test2 = true;
    },
    final: 10
})`,
			Options:         "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":true},\"multiLine\":{\"align\":{\"on\":\"value\",\"beforeColon\":false,\"afterColon\":true},\"beforeColon\":false,\"afterColon\":true}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `({
    f:function() {
        var test = true;
    },
    stateName : 'NY',
    borough   : 'Brooklyn',
    zip       : 11201,
    f2        : function() {
        var test2 = true;
    },
    final:10
})`,
			Options:         "[{\"multiLine\":{\"align\":{\"on\":\"colon\",\"beforeColon\":true,\"afterColon\":true,\"mode\":\"strict\"},\"beforeColon\":false,\"afterColon\":false}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    key1: 1,

    key2:    2,
    key3:    3,

    key4: 4
}`,
			Options:         "[{\"multiLine\":{\"beforeColon\":false,\"afterColon\":true,\"mode\":\"strict\",\"align\":{\"beforeColon\":false,\"afterColon\":true,\"on\":\"colon\",\"mode\":\"minimum\"}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    key1: 1,

    key2:    2,
    key3:    3,

    key4: 4
}`,
			Options:         "[{\"multiLine\":{\"beforeColon\":false,\"afterColon\":true,\"mode\":\"strict\"},\"align\":{\"beforeColon\":false,\"afterColon\":true,\"on\":\"colon\",\"mode\":\"minimum\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var obj = {
    foo : 1, 'bar' : 2, baz : 3, longlonglong : 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"multiLine\":{\"beforeColon\":true,\"afterColon\":true,\"align\":\"colon\"}}]",
		},
		{
			Code: `var obj = {
    foo: 1, 'bar': 2, baz: 3
}`,
			Options: "[{\"multiLine\":{\"align\":\"value\"}}]",
		},
		{
			Code: `var obj = {
    foo: 1
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"multiLine\":{\"align\":\"value\"}}]",
		},
		{
			Code: `foo({
    bar: 1
})`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
		},
		{
			Code:    `var obj = { foo:1, 'bar':2, baz:3, longlonglong:4 }`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
		},
		{
			Code: `var obj = {
    foo         : 1,
    'bar'       : 2, baz         : 3, longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
		},
		{
			Code: `var obj = {
    foo:          1,
    'bar':        2, baz:          3, longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"value\"}}]",
		},
		{
			Code: `var obj = {
    foo         : 1,
    'bar'       : 2, baz         : 3,
    longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
		},
		{
			Code: `var obj = {
    foo:          1,
    'bar':        2, baz:          3,
    longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"value\"}}]",
		},
		{
			Code: `
            var foo = {
                "a": "bar",
                "𐌘": "baz"
            };
        `,
			Options: "[{\"align\":{\"on\":\"value\"}}]",
		},
		{
			Code: `
            var foo = {
                "a": "bar",
                "Á": "baz",
                "o͂": "qux",
                "m̅": "xyz",
                "ř": "abc"

            };
        `,
			Options: "[{\"align\":{\"on\":\"value\"}}]",
		},
		{
			Code: `
            var foo = {
                "🌷": "bar", // 1 grapheme, 1 code point, 2 code units
                "🎁": "baz", // 1 grapheme, 1 code point, 2 code units
                "🇮🇳": "qux", // 1 grapheme, 2 code points, 4 code units
                "🏳️‍🌈": "xyz", // 1 grapheme, 4 code points, 6 code units
            };
        `,
			Options: "[{\"align\":{\"on\":\"value\"}}]",
		},
		{
			Code: `
            const foo = {
                "a": "bar",
                [𐌘]: "baz"
            };
        `,
			Options:         "[{\"align\":{\"on\":\"value\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
            const foo = {
                "abc": "bar",
                [ 𐌘 ]: "baz"
            };
        `,
			Options:         "[{\"align\":{\"on\":\"value\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
            var foo =
            {
                id:   1,
                code: 2,
                [n]:  3,
                message:
                "some value on the next line",
            };
        `,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
            var foo =
            {
                id   : 1,
                code : 2,
                message :
                "some value on the next line",
            };
        `,
			Options: "[{\"align\":\"colon\",\"beforeColon\":true}]",
		},
		{
			Code: `
            ({
                a: 1,
                // different group
                bcd:
                2
            })
        `,
			Options: "[{\"align\":\"value\"}]",
		},
		{
			Code: `
            ({
                foo  :  1,
                bar  :  2,
                foobar :
                3
            })
        `,
			Options: "[{\"align\":\"value\",\"beforeColon\":true,\"mode\":\"minimum\"}]",
		},
		{
			Code: `
            ({
                oneLine: 1,
                ["some key " +
                "spanning multiple lines"]: 2
            })
        `,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `
        a = {
            item       : 123,
            longerItem : (
              1 + 1
            ),
        };
        `,
			Options: "[{\"align\":{\"beforeColon\":true,\"afterColon\":true,\"on\":\"colon\"}}]",
		},
		{
			Code: `
        a = {
            item: 123,
            longerItem: // a comment - not a token
            (1 + 1),
        };
        `,
			Options: "[{\"align\":\"value\"}]",
		},
	}, []InvalidTestCase{
		{
			Code:    `var a ={'key' : value };`,
			Output:  `var a ={'key':value };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:    `var a ={'key' :value };`,
			Output:  `var a ={'key': value };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code: `var a ={'key'
 : 
value };`,
			Output:  `var a ={'key':value };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    14,
					EndLine:   2,
					EndColumn: 2,
				},
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    2,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `var bat = function() { return { foo:bar, 'key': value }; };`,
			Output:  `var bat = function() { return { foo:bar, 'key':value }; };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    47,
					EndLine:   1,
					EndColumn: 49,
				},
			},
		},
		{
			Code:            `var obj = { [ (a + b) ]:value };`,
			Output:          `var obj = { [ (a + b) ]: value };`,
			Options:         "[{}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    25,
				},
			},
		},
		{
			Code:    `fn({ foo:bar, 'key' :value });`,
			Output:  `fn({ foo:bar, 'key':value });`,
			Options: "[{\"beforeColon\":false,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:    `var obj = {prop :(42)};`,
			Output:  `var obj = {prop : (42)};`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:    `({'a' : foo, b: bar() }).b();`,
			Output:  `({'a' : foo, b : bar() }).b();`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code:    `({'a'  :foo(), b:  bar() }).b();`,
			Output:  `({'a' : foo(), b : bar() }).b();`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
				},
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "missingKey",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:    `bar = { key:value };`,
			Output:  `bar = { key: value };`,
			Options: "[{\"beforeColon\":false,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `obj = {
    key:   value,
    foobar:fn(),
    'a'   : (2 * 2)
};`,
			Output: `obj = {
    key   : value,
    foobar: fn(),
    'a'   : (2 * 2)
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    8,
				},
				{
					MessageId: "missingValue",
					Line:      3,
					Column:    12,
				},
			},
		},
		{
			Code: `({
    'a' : val,
    foo:fn(),
    b    :[42],
    c   :call()
}).a();`,
			Output: `({
    'a' :val,
    foo :fn(),
    b   :[42],
    c   :call()
}).a();`,
			Options: "[{\"align\":\"colon\",\"beforeColon\":true,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    9,
				},
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    5,
				},
				{
					MessageId: "extraKey",
					Line:      4,
					Column:    6,
				},
			},
		},
		{
			Code: `var obj = {
    a:    fn(),
    'b' : 42,
    foo:(bar),
    bat: 'valid',
    [a] : value
};`,
			Output: `var obj = {
    a:   fn(),
    'b': 42,
    foo: (bar),
    bat: 'valid',
    [a]: value
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    6,
				},
				{
					MessageId: "extraKey",
					Line:      3,
					Column:    8,
				},
				{
					MessageId: "missingValue",
					Line:      4,
					Column:    9,
				},
				{
					MessageId: "extraKey",
					Line:      6,
					Column:    8,
				},
			},
		},
		{
			Code: `foo = {
    a:  value,
    b :  42,
    foo :['a'],
    bar : call()
};`,
			Output: `foo = {
    a :  value,
    b :  42,
    foo :['a'],
    bar :call()
};`,
			Options: "[{\"align\":\"value\",\"beforeColon\":true,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "extraValue",
					Line:      5,
					Column:    9,
				},
			},
		},
		{
			Code: `({
    a : 0,
    bcd: 0,

    e: 0,
    fg:0
})`,
			Output: `({
    a  : 0,
    bcd: 0,

    e : 0,
    fg: 0
})`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "missingKey",
					Line:      5,
					Column:    5,
				},
				{
					MessageId: "missingValue",
					Line:      6,
					Column:    8,
				},
			},
		},
		{
			Code: `foo = {
    key:
        longValueName,
    key2
        :anotherLongValue
};`,
			Output: `foo = {
    key:longValueName,
    key2:anotherLongValue
};`,
			Options: "[{\"beforeColon\":false,\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    8,
				},
				{
					MessageId: "extraKey",
					Line:      4,
					Column:    9,
				},
			},
		},
		{
			Code: `foo = {
    key1: 42,
    // still the same group
    key12: '42', /*

    */
    key123: 'forty two'
};`,
			Output: `foo = {
    key1:   42,
    // still the same group
    key12:  '42', /*

    */
    key123: 'forty two'
};`,
			Options: "[{\"align\":\"value\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
				},
				{
					MessageId: "missingValue",
				},
			},
		},
		{
			Code:   `foo = { key:(1+2) };`,
			Output: `foo = { key: (1+2) };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:   `foo = { key:( ( (1+2) ) ) };`,
			Output: `foo = { key: ( ( (1+2) ) ) };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code:    `var obj = {a  : 'foo', bar: 'bam'};`,
			Output:  `var obj = {a: 'foo', bar: 'bam'};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var x = {
    foo: 10
  , b   : 20
};`,
			Output: `var x = {
    foo: 10
  , b  : 20
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      3,
					Column:    6,
				},
			},
		},
		{
			Code: `var x = {
        foo : 10,
 /*lol*/  b : 20
};`,
			Output: `var x = {
        foo : 10,
 /*lol*/  b   : 20
};`,
			Options: "[{\"align\":\"colon\",\"beforeColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    11,
				},
			},
		},
		{
			Code: `obj = { key 
 :     longName };`,
			Output: `obj = { key 
 : longName };`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `var obj = {
    foobar: 123,
    prop,
    baz: 456
};`,
			Output: `var obj = {
    foobar: 123,
    prop,
    baz:    456
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      4,
					Column:    10,
				},
			},
		},
		{
			Code: `var obj = {
    foobar:  123,
    prop,
    baz:    456
};`,
			Output: `var obj = {
    foobar: 123,
    prop,
    baz:    456
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code: `var obj = {
    foobar: 123,
    method() { },
    baz: 456
};`,
			Output: `var obj = {
    foobar: 123,
    method() { },
    baz:    456
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      4,
					Column:    10,
				},
			},
		},
		{
			Code: `var obj = {
    foobar:  123,
    method() { },
    baz:    456
};`,
			Output: `var obj = {
    foobar: 123,
    method() { },
    baz:    456
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code: `var obj = {
    foobar: 123,
    method() {
        return 42;
    },
    baz:    456,
    10:     
    10
};`,
			Output: `var obj = {
    foobar: 123,
    method() {
        return 42;
    },
    baz: 456,
    10:     
    10
};`,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      6,
					Column:    8,
				},
			},
		},
		{
			Code: `var obj = {
    foo: foo
  , cats: cats
};`,
			Output: `var obj = {
    foo : foo
  , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `var obj = {
    foo : foo
  , cats:  cats
};`,
			Output: `var obj = {
    foo : foo
  , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      3,
					Column:    9,
				},
			},
		},
		{
			Code: `var obj = { foo: foo
          , cats: cats
};`,
			Output: `var obj = { foo : foo
          , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `var obj = { foo  : foo
          , cats: cats
};`,
			Output: `var obj = { foo : foo
          , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code: `var obj = { foo :foo
          , cats: cats
};`,
			Output: `var obj = { foo : foo
          , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `var obj = { foo :  foo
          , cats: cats
};`,
			Output: `var obj = { foo : foo
          , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    17,
				},
			},
		},
		{
			Code: `var obj = { foo : foo
          , cats:  cats
};`,
			Output: `var obj = { foo : foo
          , cats: cats
};`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      2,
					Column:    17,
				},
			},
		},
		{
			Code: `({
    ...x,
    a : 0,
    // same group
    bcd: 0, /*
    end of group */

    // different group
    e: 0,
    ...y,
    /* group b */
    f : 0
})`,
			Output: `({
    ...x,
    a  : 0,
    // same group
    bcd: 0, /*
    end of group */

    // different group
    e: 0,
    ...y,
    /* group b */
    f: 0
})`,
			Options:         "[{\"align\":\"colon\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    5,
				},
				{
					MessageId: "extraKey",
					Line:      12,
					Column:    6,
				},
			},
		},
		{
			Code: `({
    a : 42,
    get b() { return 42; }
})`,
			Output: `({
    a: 42,
    get b() { return 42; }
})`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      2,
					Column:    6,
				},
			},
		},
		{
			Code: `({
    set a(b) { b; },
    c : 42
})`,
			Output: `({
    set a(b) { b; },
    c: 42
})`,
			Options: "[{\"align\":\"value\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      3,
					Column:    6,
				},
			},
		},
		{
			Code: `({
    a: 42,
    get b() { return 42; },
    set c(v) { v; },
    def: 42
})`,
			Output: `({
    a  : 42,
    get b() { return 42; },
    set c(v) { v; },
    def: 42
})`,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `({
    a :    42,
    get b() { return 42; },
    set c(v) { v; },
    def  :  42,
    def2 : {a1: 1, b1:2, c1:3}
})`,
			Output: `({
    a :    42,
    get b() { return 42; },
    set c(v) { v; },
    def  :  42,
    def2 : {a1:1, b1:2, c1:3}
})`,
			Options: "[{\"singleLine\":{\"afterColon\":false,\"beforeColon\":false},\"multiLine\":{\"mode\":\"minimum\",\"afterColon\":true,\"beforeColon\":true,\"align\":\"value\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      6,
					Column:    15,
				},
			},
		},
		{
			Code: `({
    a  : 42,
    get b() { return 42; },
    set c(v) { v; },
    def: 42,
    de1: {a2: 1, b2 : 2, c2 : 3}
})`,
			Output: `({
    a  : 42,
    get b() { return 42; },
    set c(v) { v; },
    def: 42,
    de1: {a2 : 1, b2 : 2, c2 : 3}
})`,
			Options: "[{\"multiLine\":{\"afterColon\":true,\"beforeColon\":false,\"align\":\"colon\"},\"singleLine\":{\"afterColon\":true,\"beforeColon\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      6,
					Column:    11,
				},
			},
		},
		{
			Code: `obj = {
   get fx() { return 'f'; },
   get gx() { return 'g'; },
   ex:e
};`,
			Output: `obj = {
   get fx() { return 'f'; },
   get gx() { return 'g'; },
   ex: e
};`,
			Options: "[{\"align\":\"colon\",\"beforeColon\":false,\"afterColon\":true,\"mode\":\"minimum\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      4,
					Column:    7,
				},
			},
		},
		{
			Code: `obj = {
   get fx() { return 'f'; },
   get gx() { return 'g'; },
   ex : e
};`,
			Output: `obj = {
   get fx() { return 'f'; },
   get gx() { return 'g'; },
   ex: e
};`,
			Options: "[{\"align\":\"colon\",\"beforeColon\":false,\"afterColon\":true,\"mode\":\"minimum\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      4,
					Column:    6,
				},
			},
		},
		{
			Code: `({
    aInv :43,
    get b() { return 43; },
    set c(v) { v; },
    defInv: 43
})`,
			Output: `({
    aInv  : 43,
    get b() { return 43; },
    set c(v) { v; },
    defInv: 43
})`,
			Options: "[{\"multiLine\":{\"afterColon\":true,\"align\":\"colon\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    11,
				},
			},
		},
		{
			Code:            `({ a:b, ...object, c : d })`,
			Output:          `({ a: b, ...object, c: d })`,
			Options:         "[{\"align\":\"colon\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    6,
				},
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `({
    longName:1,
    small    :2,
    xs      : 3
})`,
			Output: `({
    longName : 1,
    small    : 2,
    xs       : 3
})`,
			Options:         "[{\"align\":{\"on\":\"colon\",\"beforeColon\":true,\"afterColon\":true,\"mode\":\"strict\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    14,
				},
				{
					MessageId: "missingValue",
					Line:      3,
					Column:    15,
				},
				{
					MessageId: "missingKey",
					Line:      4,
					Column:    5,
				},
			},
		},
		{
			Code: `({
    func:function() {
        var test = true;
    },
    longName: 1,
    small: 2,
    xs            : 3,
    func2    : function() {
        var test2 = true;
    },
    singleLine : 10
})`,
			Output: `({
    func: function() {
        var test = true;
    },
    longName : 1,
    small    : 2,
    xs       : 3,
    func2    : function() {
        var test2 = true;
    },
    singleLine: 10
})`,
			Options:         "[{\"multiLine\":{\"beforeColon\":false,\"afterColon\":true},\"align\":{\"on\":\"colon\",\"beforeColon\":true,\"afterColon\":true,\"mode\":\"strict\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    10,
				},
				{
					MessageId: "missingKey",
					Line:      5,
					Column:    5,
				},
				{
					MessageId: "missingKey",
					Line:      6,
					Column:    5,
				},
				{
					MessageId: "extraKey",
					Line:      7,
					Column:    7,
				},
				{
					MessageId: "extraKey",
					Line:      11,
					Column:    15,
				},
			},
		},
		{
			Code: `({
    func:function() {
        var test = false;
    },
    longName :1,
    small :2,
    xs            : 3,
    func2    : function() {
        var test2 = true;
    },
    singleLine : 10
})`,
			Output: `({
    func: function() {
        var test = false;
    },
    longName :1,
    small    :2,
    xs       :3,
    func2    :function() {
        var test2 = true;
    },
    singleLine: 10
})`,
			Options:         "[{\"multiLine\":{\"beforeColon\":false,\"afterColon\":true,\"align\":{\"on\":\"colon\",\"beforeColon\":true,\"afterColon\":false,\"mode\":\"strict\"}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    10,
				},
				{
					MessageId: "missingKey",
					Line:      6,
					Column:    5,
				},
				{
					MessageId: "extraKey",
					Line:      7,
					Column:    7,
				},
				{
					MessageId: "extraValue",
					Line:      7,
					Column:    19,
				},
				{
					MessageId: "extraValue",
					Line:      8,
					Column:    14,
				},
				{
					MessageId: "extraKey",
					Line:      11,
					Column:    15,
				},
			},
		},
		{
			Code: `var obj = {
    key1: 1,

    key2:    2,
    key3:    3,

    key4: 4
}`,
			Output: `var obj = {
    key1: 1,

    key2: 2,
    key3: 3,

    key4: 4
}`,
			Options:         "[{\"multiLine\":{\"beforeColon\":false,\"afterColon\":true,\"mode\":\"strict\",\"align\":{\"beforeColon\":false,\"afterColon\":true,\"on\":\"colon\"}}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      4,
					Column:    9,
				},
				{
					MessageId: "extraValue",
					Line:      5,
					Column:    9,
				},
			},
		},
		{
			Code: `var obj = {
    key1: 1,

    key2:    2,
    key3:    3,

    key4: 4
}`,
			Output: `var obj = {
    key1: 1,

    key2: 2,
    key3: 3,

    key4: 4
}`,
			Options:         "[{\"multiLine\":{\"beforeColon\":false,\"afterColon\":true,\"mode\":\"strict\"},\"align\":{\"beforeColon\":false,\"afterColon\":true,\"on\":\"colon\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      4,
					Column:    9,
				},
				{
					MessageId: "extraValue",
					Line:      5,
					Column:    9,
				},
			},
		},
		{
			Code:   `({ foo/* comment */ : bar })`,
			Output: `({ foo/* comment */: bar })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:    `({ foo: /* comment */bar })`,
			Output:  `({ foo:/* comment */bar })`,
			Options: "[{\"afterColon\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    7,
				},
			},
		},
		{
			Code:    `({ foo/*comment*/:/*comment*/bar })`,
			Output:  `({ foo/*comment*/ : /*comment*/bar })`,
			Options: "[{\"beforeColon\":true,\"afterColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      1,
					Column:    7,
				},
				{
					MessageId: "missingValue",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code: `var obj = {
    foo:1, 'bar':2, baz:3
}`,
			Output: `var obj = {
    foo : 1, 'bar' : 2, baz : 3
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"multiLine\":{\"beforeColon\":true,\"afterColon\":true,\"align\":\"colon\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    9,
				},
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    12,
				},
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    18,
				},
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    21,
				},
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    25,
				},
			},
		},
		{
			Code: `var obj = {
    foo : 1, 'bar' : 2, baz : 3, longlonglong : 4
}`,
			Output: `var obj = {
    foo: 1, 'bar': 2, baz: 3, longlonglong: 4
}`,
			Options: "[{\"multiLine\":{\"align\":\"value\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      2,
					Column:    8,
				},
				{
					MessageId: "extraKey",
					Line:      2,
					Column:    19,
				},
				{
					MessageId: "extraKey",
					Line:      2,
					Column:    28,
				},
				{
					MessageId: "extraKey",
					Line:      2,
					Column:    46,
				},
			},
		},
		{
			Code: `var obj = {
    foo:1
}`,
			Output: `var obj = {
    foo: 1
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"multiLine\":{\"align\":\"value\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `foo({
    bar:1
})`,
			Output: `foo({
    bar: 1
})`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code:    `var obj = { foo: 1, 'bar': 2, baz :3, longlonglong :4 }`,
			Output:  `var obj = { foo:1, 'bar':2, baz:3, longlonglong:4 }`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    16,
				},
				{
					MessageId: "extraValue",
					Line:      1,
					Column:    26,
				},
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    34,
				},
				{
					MessageId: "extraKey",
					Line:      1,
					Column:    51,
				},
			},
		},
		{
			Code: `var obj = {
    foo: 1,
    'bar': 2, baz: 3, longlonglong: 4
}`,
			Output: `var obj = {
    foo         : 1,
    'bar'       : 2, baz         : 3, longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    5,
				},
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    15,
				},
			},
		},
		{
			Code: `var obj = {
    foo : 1,
    'bar' : 2, baz : 3,
    longlonglong: 4
}`,
			Output: `var obj = {
    foo         : 1,
    'bar'       : 2, baz         : 3,
    longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"colon\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      2,
					Column:    5,
				},
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    5,
				},
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    16,
				},
			},
		},
		{
			Code: `var obj = {
    foo: 1,
    'bar': 2, baz: 3,
    longlonglong: 4
}`,
			Output: `var obj = {
    foo:          1,
    'bar':        2, baz:          3,
    longlonglong: 4
}`,
			Options: "[{\"singleLine\":{\"beforeColon\":false,\"afterColon\":false},\"align\":{\"on\":\"value\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      2,
					Column:    10,
				},
				{
					MessageId: "missingValue",
					Line:      3,
					Column:    12,
				},
				{
					MessageId: "missingValue",
					Line:      3,
					Column:    20,
				},
			},
		},
		{
			Code: `
            const foo = {
                "a": "bar",
                [ 𐌘 ]: "baz"
            };
        `,
			Output: `
            const foo = {
                "a":   "bar",
                [ 𐌘 ]: "baz"
            };
        `,
			Options:         "[{\"align\":{\"on\":\"value\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingValue",
					Line:      3,
					Column:    22,
				},
			},
		},
		{
			Code: `
            const foo = {
                "a": "bar",
                [ 𐌘 ]: "baz"
            };
        `,
			Output: `
            const foo = {
                "a"  : "bar",
                [ 𐌘 ]: "baz"
            };
        `,
			Options:         "[{\"align\":{\"on\":\"colon\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    17,
				},
			},
		},
		{
			Code: `
            const foo = {
                "a":  "bar",
                "𐌘": "baz"
            };
        `,
			Output: `
            const foo = {
                "a": "bar",
                "𐌘": "baz"
            };
        `,
			Options:         "[{\"align\":{\"on\":\"value\"}}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      3,
					Column:    20,
				},
			},
		},
		{
			Code: `
            var foo = {
                "🌷":     "bar", // 1 grapheme, 1 code point, 2 code units
                "🎁":     "baz", // 1 grapheme, 1 code point, 2 code units
                "🇮🇳":   "qux", // 1 grapheme, 2 code points, 4 code units
                "🏳️‍🌈": "xyz", // 1 grapheme, 4 code points, 6 code units
            };
        `,
			Output: `
            var foo = {
                "🌷": "bar", // 1 grapheme, 1 code point, 2 code units
                "🎁": "baz", // 1 grapheme, 1 code point, 2 code units
                "🇮🇳": "qux", // 1 grapheme, 2 code points, 4 code units
                "🏳️‍🌈": "xyz", // 1 grapheme, 4 code points, 6 code units
            };
        `,
			Options: "[{\"align\":{\"on\":\"value\"}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      3,
					Column:    21,
				},
				{
					MessageId: "extraValue",
					Line:      4,
					Column:    21,
				},
				{
					MessageId: "extraValue",
					Line:      5,
					Column:    23,
				},
			},
		},
		{
			Code: `
            var foo =
            {
                id:      1,
                code:    2,
                [n]:     3,
                message:
                "some value on the next line",
            };
        `,
			Output: `
            var foo =
            {
                id:   1,
                code: 2,
                [n]:  3,
                message:
                "some value on the next line",
            };
        `,
			Options:         "[{\"align\":\"value\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      4,
					Column:    19,
				},
				{
					MessageId: "extraValue",
					Line:      5,
					Column:    21,
				},
				{
					MessageId: "extraValue",
					Line:      6,
					Column:    20,
				},
			},
		},
		{
			Code: `
            var foo =
            {
                id      : 1,
                code    : 2,
                message :
                "some value on the next line",
            };
        `,
			Output: `
            var foo =
            {
                id   : 1,
                code : 2,
                message :
                "some value on the next line",
            };
        `,
			Options: "[{\"align\":\"colon\",\"beforeColon\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      4,
					Column:    19,
				},
				{
					MessageId: "extraKey",
					Line:      5,
					Column:    21,
				},
			},
		},
		{
			Code: `
            ({
                a:   1,
                // different group
                bcd:
                2
            })
        `,
			Output: `
            ({
                a: 1,
                // different group
                bcd:
                2
            })
        `,
			Options: "[{\"align\":\"value\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraValue",
					Line:      3,
					Column:    18,
				},
			},
		},
		{
			Code: `({
    singleLine : 10,
    newGroup :
    function() {
        var test3 = true;
    }
})`,
			Output: `({
    singleLine: 10,
    newGroup:
    function() {
        var test3 = true;
    }
})`,
			Options: "[{\"multiLine\":{\"beforeColon\":false},\"align\":{\"on\":\"colon\",\"beforeColon\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "extraKey",
					Line:      2,
					Column:    15,
				},
				{
					MessageId: "extraKey",
					Line:      3,
					Column:    13,
				},
			},
		},
		{
			Code: `
        c = {
            item: 123,
            longerItem: (
              1 + 1
            ),
        };
        `,
			Output: `
        c = {
            item      : 123,
            longerItem: (
              1 + 1
            ),
        };
        `,
			Options: "[{\"align\":\"colon\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingKey",
					Line:      3,
					Column:    13,
				},
			},
		},
	})
}
