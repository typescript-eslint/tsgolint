// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestLinesAroundCommentRule(t *testing.T) {
	RunRuleTester(t, "{}", "lines-around-comment", []ValidTestCase{
		{Code: `bar()

/** block block block
 * block 
 */

var a = 1;`},
		{Code: `bar()

/** block block block
 * block 
 */
var a = 1;`},
		{Code: `bar()
// line line line 
var a = 1;`},
		{Code: `bar()

// line line line
var a = 1;`},
		{Code: `bar()
// line line line

var a = 1;`},
		{
			Code: `bar()
// line line line

var a = 1;`,
			Options: "[{\"afterLineComment\":true}]",
		},
		{
			Code: `foo()

// line line line
var a = 1;`,
			Options: "[{\"beforeLineComment\":true}]",
		},
		{
			Code: `foo()

// line line line

var a = 1;`,
			Options: "[{\"beforeLineComment\":true,\"afterLineComment\":true}]",
		},
		{
			Code: `foo()

// line line line
// line line

var a = 1;`,
			Options: "[{\"beforeLineComment\":true,\"afterLineComment\":true}]",
		},
		{
			Code: `// line line line
// line line`,
			Options: "[{\"beforeLineComment\":true,\"afterLineComment\":true}]",
		},
		{
			Code: `bar()

/** A Block comment with an empty line after
 *
 */
var a = 1;`,
			Options: "[{\"afterBlockComment\":false,\"beforeBlockComment\":true}]",
		},
		{
			Code: `bar()

/** block block block
 * block 
 */
var a = 1;`,
			Options: "[{\"afterBlockComment\":false}]",
		},
		{
			Code: `/** 
block 
block block
 */
/* block 
 block 
 */`,
			Options: "[{\"afterBlockComment\":true,\"beforeBlockComment\":true}]",
		},
		{
			Code: `bar()

/** block block block
 * block 
 */

var a = 1;`,
			Options: "[{\"afterBlockComment\":true,\"beforeBlockComment\":true}]",
		},
		{
			Code: `foo() // An inline comment with an empty line after
var a = 1;`,
			Options: "[{\"afterLineComment\":true,\"beforeLineComment\":true}]",
		},
		{
			Code: `foo();
bar() /* An inline block comment with an empty line after
 *
 */
var a = 1;`,
			Options: "[{\"beforeBlockComment\":true}]",
		},
		{
			Code: `bar()

/** block block block
 * block 
 */
//line line line
var a = 1;`,
			Options: "[{\"afterBlockComment\":true}]",
		},
		{
			Code: `bar()

/** block block block
 * block 
 */
//line line line
var a = 1;`,
			Options: "[{\"beforeLineComment\":true}]",
		},
		{
			Code: `var a,

// line
b;`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `function foo(){   
// line at block start
var g = 1;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `function foo(){// line at block start
var g = 1;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `var foo = function(){
// line at block start
var g = 1;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `var foo = function(){
// line at block start
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `if(true){
// line at block start
var g = 1;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `if(true){

// line at block start
var g = 1;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `if(true){
// line at block start
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `if(true){ bar(); } else {
// line at block start
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
// line at switch case start
break;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':

// line at switch case start
break;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
// line at switch case start
break;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:

// line at switch case start
break;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `function foo(){   
/* block comment at block start */
var g = 1;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `function foo(){/* block comment at block start */
var g = 1;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `var foo = function(){
/* block comment at block start */
var g = 1;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `if(true){
/* block comment at block start */
var g = 1;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `if(true){

/* block comment at block start */
var g = 1;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `while(true){

/* 
block comment at block start
 */
var g = 1;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `class A {
/**
* hi
 */
constructor() {}
}`,
			Options:         "[{\"allowBlockStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A {
/**
* hi
 */
constructor() {}
}`,
			Options:         "[{\"allowClassStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A {
/**
* hi
 */
constructor() {}
}`,
			Options:         "[{\"allowBlockStart\":false,\"allowClassStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `switch ('foo'){
case 'foo':
/* block comment at switch case start */
break;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':

/* block comment at switch case start */
break;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
/* block comment at switch case start */
break;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:

/* block comment at switch case start */
break;
}`,
			Options: "[{\"allowBlockStart\":true}]",
		},
		{
			Code: `class C {
    static {
        // line comment
    }

    static {
        // line comment
        foo();
    }
}`,
			Options:         "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static
    {
        // line comment
    }

    static
    {
        // line comment
        foo();
    }
}`,
			Options:         "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        /* block comment */
    }

    static {
        /* block
           comment */
    }

    static {
        /* block comment */
        foo();
    }

    static {
        /* block
           comment */
        foo();
    }
}`,
			Options:         "[{\"beforeBlockComment\":true,\"allowBlockStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static
    {
        /* block comment */
    }

    static
    {
        /* block
        comment */
    }

    static
    {
        /* block comment */
        foo();
    }

    static
    {
        /* block
        comment */
        foo();
    }
}`,
			Options:         "[{\"beforeBlockComment\":true,\"allowBlockStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
            switch (foo) {
            // this comment is allowed by allowBlockStart: true

            case 1:
                bar();
                break;

            // this comment is allowed by allowBlockEnd: true
            }
            `,
			Options: "[{\"allowBlockStart\":true,\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `
            switch (foo)
            {
            // this comment is allowed by allowBlockStart: true

            case 1:
                bar();
                break;
            }
            `,
			Options: "[{\"allowBlockStart\":true,\"beforeLineComment\":true,\"afterLineComment\":true}]",
		},
		{
			Code: `
            switch (
                function(){}()
            )
            {
                // this comment is allowed by allowBlockStart: true
                case foo:
                    break;
            }
            `,
			Options: "[{\"allowBlockStart\":true,\"beforeLineComment\":true}]",
		},
		{
			Code: `var a,
// line

b;`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `function foo(){
var g = 91;
// line at block end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `function foo(){
var g = 61;


// line at block end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `var foo = function(){
var g = 1;


// line at block end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `if(true){
var g = 1;
// line at block end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `if(true){
var g = 1;

// line at block end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
var g = 1;

// line at switch case end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
var g = 1;

// line at switch case end

}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
var g = 1;

// line at switch case end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
var g = 1;

// line at switch case end

}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Options: "[{\"afterLineComment\":true,\"beforeLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
		},
		{
			Code: `function foo(){   
var g = 1;
/* block comment at block end */
}`,
			Options: "[{\"beforeBlockComment\":false,\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `function foo(){
var g = 1;
/* block comment at block end */}`,
			Options: "[{\"beforeBlockComment\":false,\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `var foo = function(){
var g = 1;
/* block comment at block end */
}`,
			Options: "[{\"beforeBlockComment\":false,\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `if(true){
var g = 1;
/* block comment at block end */
}`,
			Options: "[{\"beforeBlockComment\":false,\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `if(true){
var g = 1;

/* block comment at block end */
}`,
			Options: "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `while(true){

var g = 1;

/* 
block comment at block end
 */}`,
			Options: "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `class B {
constructor() {}

/**
* hi
 */
}`,
			Options:         "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class B {
constructor() {}

/**
* hi
 */
}`,
			Options:         "[{\"afterBlockComment\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class B {
constructor() {}

/**
* hi
 */
}`,
			Options:         "[{\"afterBlockComment\":true,\"allowBlockEnd\":false,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `switch ('foo'){
case 'foo':
var g = 1;

/* block comment at switch case end */
}`,
			Options: "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
var g = 1;

/* block comment at switch case end */

}`,
			Options: "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
var g = 1;

/* block comment at switch case end */
}`,
			Options: "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
var g = 1;

/* block comment at switch case end */

}`,
			Options: "[{\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
		},
		{
			Code: `class C {
    static {
        // line comment
    }

    static {
        foo();
        // line comment
    }
}`,
			Options:         "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        /* block comment */
    }

    static {
        /* block
           comment */
    }

    static {
        foo();
        /* block comment */
    }

    static {
        foo();
        /* block
           comment */
    }
}`,
			Options:         "[{\"beforeBlockComment\":false,\"afterBlockComment\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `var a,

// line
b;`,
			Options: "[{\"beforeLineComment\":true,\"allowObjectStart\":true}]",
		},
		{
			Code: `var obj = {
  // line at object start
  g: 1
};`,
			Options: "[{\"beforeLineComment\":true,\"allowObjectStart\":true}]",
		},
		{
			Code: `function hi() {
  return {
    // hi
    test: function() {
    }
  }
}`,
			Options: "[{\"beforeLineComment\":true,\"allowObjectStart\":true}]",
		},
		{
			Code: `var obj = {
  /* block comment at object start*/
  g: 1
};`,
			Options: "[{\"beforeBlockComment\":true,\"allowObjectStart\":true}]",
		},
		{
			Code: `function hi() {
  return {
    /**
    * hi
    */
    test: function() {
    }
  }
}`,
			Options: "[{\"beforeLineComment\":true,\"allowObjectStart\":true}]",
		},
		{
			Code: `const {
  // line at object start
  g: a
} = {};`,
			Options:         "[{\"beforeLineComment\":true,\"allowObjectStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const {
  // line at object start
  g
} = {};`,
			Options:         "[{\"beforeLineComment\":true,\"allowObjectStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const {
  /* block comment at object-like start*/
  g: a
} = {};`,
			Options:         "[{\"beforeBlockComment\":true,\"allowObjectStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const {
  /* block comment at object-like start*/
  g
} = {};`,
			Options:         "[{\"beforeBlockComment\":true,\"allowObjectStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var a,
// line

b;`,
			Options: "[{\"afterLineComment\":true,\"allowObjectEnd\":true}]",
		},
		{
			Code: `var obj = {
  g: 1
  // line at object end
};`,
			Options: "[{\"afterLineComment\":true,\"allowObjectEnd\":true}]",
		},
		{
			Code: `function hi() {
  return {
    test: function() {
    }
    // hi
  }
}`,
			Options: "[{\"afterLineComment\":true,\"allowObjectEnd\":true}]",
		},
		{
			Code: `var obj = {
  g: 1
  
  /* block comment at object end*/
};`,
			Options: "[{\"afterBlockComment\":true,\"allowObjectEnd\":true}]",
		},
		{
			Code: `function hi() {
  return {
    test: function() {
    }
    
    /**
    * hi
    */
  }
}`,
			Options: "[{\"afterBlockComment\":true,\"allowObjectEnd\":true}]",
		},
		{
			Code: `const {
  g: a
  // line at object end
} = {};`,
			Options:         "[{\"afterLineComment\":true,\"allowObjectEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const {
  g
  // line at object end
} = {};`,
			Options:         "[{\"afterLineComment\":true,\"allowObjectEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const {
  g: a
  
  /* block comment at object-like end*/
} = {};`,
			Options:         "[{\"afterBlockComment\":true,\"allowObjectEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const {
  g
  
  /* block comment at object-like end*/
} = {};`,
			Options:         "[{\"afterBlockComment\":true,\"allowObjectEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var a,

// line
b;`,
			Options: "[{\"beforeLineComment\":true,\"allowArrayStart\":true}]",
		},
		{
			Code: `var arr = [
  // line at array start
  1
];`,
			Options: "[{\"beforeLineComment\":true,\"allowArrayStart\":true}]",
		},
		{
			Code: `var arr = [
  /* block comment at array start*/
  1
];`,
			Options: "[{\"beforeBlockComment\":true,\"allowArrayStart\":true}]",
		},
		{
			Code: `const [
  // line at array start
  a
] = [];`,
			Options:         "[{\"beforeLineComment\":true,\"allowArrayStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const [
  /* block comment at array start*/
  a
] = [];`,
			Options:         "[{\"beforeBlockComment\":true,\"allowArrayStart\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var a,
// line

b;`,
			Options: "[{\"afterLineComment\":true,\"allowArrayEnd\":true}]",
		},
		{
			Code: `var arr = [
  1
  // line at array end
];`,
			Options: "[{\"afterLineComment\":true,\"allowArrayEnd\":true}]",
		},
		{
			Code: `var arr = [
  1
  
  /* block comment at array end*/
];`,
			Options: "[{\"afterBlockComment\":true,\"allowArrayEnd\":true}]",
		},
		{
			Code: `const [
  a
  // line at array end
] = [];`,
			Options:         "[{\"afterLineComment\":true,\"allowArrayEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `const [
  a
  
  /* block comment at array end*/
] = [];`,
			Options:         "[{\"afterBlockComment\":true,\"allowArrayEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `foo;

/* eslint-disable no-underscore-dangle */

this._values = values;
this._values2 = true;
/* eslint-enable no-underscore-dangle */
bar`,
			Options: "[{\"beforeBlockComment\":true,\"afterBlockComment\":true}]",
		},
		{Code: `foo;
/* eslint */`},
		{Code: `foo;
/* jshint */`},
		{Code: `foo;
/* jslint */`},
		{Code: `foo;
/* istanbul */`},
		{Code: `foo;
/* global */`},
		{Code: `foo;
/* globals */`},
		{Code: `foo;
/* exported */`},
		{Code: `foo;
/* jscs */`},
		{
			Code: `foo
/* this is pragmatic */`,
			Options: "[{\"ignorePattern\":\"pragma\"}]",
		},
		{
			Code: `foo
/* this is pragmatic */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false,\"ignorePattern\":\"pragma\"}]",
		},
		{
			Code: `#!comment

var a = 1;`,
			Options: "[{\"afterHashbangComment\":true}]",
		},
		{Code: `#!comment
var a = 1;`},
		{
			Code: `#!comment
var a = 1;`,
			Options: "[{}]",
		},
		{
			Code: `#!comment
var a = 1;`,
			Options: "[{\"afterHashbangComment\":false}]",
		},
		{
			Code: `#!comment
var a = 1;`,
			Options: "[{\"afterLineComment\":true,\"afterBlockComment\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `bar()
/** block block block
 * block 
 */
var a = 1;`,
			Output: `bar()

/** block block block
 * block 
 */
var a = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `baz()
// A line comment with no empty line after
var a = 1;`,
			Output: `baz()
// A line comment with no empty line after

var a = 1;`,
			Options: "[{\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
				},
			},
		},
		{
			Code: `baz()
// A line comment with no empty line after
var a = 1;`,
			Output: `baz()

// A line comment with no empty line after
var a = 1;`,
			Options: "[{\"beforeLineComment\":true,\"afterLineComment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `// A line comment with no empty line after
var a = 1;`,
			Output: `// A line comment with no empty line after

var a = 1;`,
			Options: "[{\"beforeLineComment\":true,\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `baz()
// A line comment with no empty line after
var a = 1;`,
			Output: `baz()

// A line comment with no empty line after

var a = 1;`,
			Options: "[{\"beforeLineComment\":true,\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `bar()
/**
 * block block block
 */
var a = 1;`,
			Output: `bar()

/**
 * block block block
 */

var a = 1;`,
			Options: "[{\"afterBlockComment\":true,\"beforeBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `bar()
/* first block comment */ /* second block comment */
var a = 1;`,
			Output: `bar()

/* first block comment */ /* second block comment */

var a = 1;`,
			Options: "[{\"afterBlockComment\":true,\"beforeBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `bar()
/* first block comment */ /* second block
 comment */
var a = 1;`,
			Output: `bar()

/* first block comment */ /* second block
 comment */

var a = 1;`,
			Options: "[{\"afterBlockComment\":true,\"beforeBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `bar()
/**
 * block block block
 */
var a = 1;`,
			Output: `bar()
/**
 * block block block
 */

var a = 1;`,
			Options: "[{\"afterBlockComment\":true,\"beforeBlockComment\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `bar()
/**
 * block block block
 */
var a = 1;`,
			Output: `bar()

/**
 * block block block
 */
var a = 1;`,
			Options: "[{\"afterBlockComment\":false,\"beforeBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `var a,
// line
b;`,
			Output: `var a,

// line
b;`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo(){
var a = 1;
// line at block start
var g = 1;
}`,
			Output: `function foo(){
var a = 1;

// line at block start
var g = 1;
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockStart\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
			},
		},
		{
			Code: `var a,
// line
b;`,
			Output: `var a,
// line

b;`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `function foo(){
var a = 1;

// line at block start
var g = 1;
}`,
			Output: `function foo(){
var a = 1;

// line at block start

var g = 1;
}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockEnd\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `switch ('foo'){
case 'foo':
// line at switch case start
break;
}`,
			Output: `switch ('foo'){
case 'foo':

// line at switch case start
break;
}`,
			Options: "[{\"beforeLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
			},
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
// line at switch case start
break;
}`,
			Output: `switch ('foo'){
case 'foo':
break;

default:

// line at switch case start
break;
}`,
			Options: "[{\"beforeLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      6,
				},
			},
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Output: `while(true){
// line at block start and end

}`,
			Options: "[{\"afterLineComment\":true,\"allowBlockStart\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `while(true){
// line at block start and end
}`,
			Output: `while(true){

// line at block start and end
}`,
			Options: "[{\"beforeLineComment\":true,\"allowBlockEnd\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `class A {
// line at class start
constructor() {}
}`,
			Output: `class A {

// line at class start
constructor() {}
}`,
			Options:         "[{\"beforeLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `class A {
// line at class start
constructor() {}
}`,
			Output: `class A {

// line at class start
constructor() {}
}`,
			Options:         "[{\"allowBlockStart\":true,\"allowClassStart\":false,\"beforeLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `class B {
constructor() {}

// line at class end
}`,
			Output: `class B {
constructor() {}

// line at class end

}`,
			Options:         "[{\"afterLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `class B {
constructor() {}

// line at class end
}`,
			Output: `class B {
constructor() {}

// line at class end

}`,
			Options:         "[{\"afterLineComment\":true,\"allowBlockEnd\":true,\"allowClassEnd\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `switch ('foo'){
case 'foo':
var g = 1;

// line at switch case end
}`,
			Output: `switch ('foo'){
case 'foo':
var g = 1;

// line at switch case end

}`,
			Options: "[{\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      5,
				},
			},
		},
		{
			Code: `switch ('foo'){
case 'foo':
break;

default:
var g = 1;

// line at switch case end
}`,
			Output: `switch ('foo'){
case 'foo':
break;

default:
var g = 1;

// line at switch case end

}`,
			Options: "[{\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      8,
				},
			},
		},
		{
			Code: `class C {
    // line comment
    static{}
}`,
			Output: `class C {
    // line comment

    static{}
}`,
			Options:         "[{\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true,\"allowClassStart\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `class C {
    /* block
       comment */
    static{}
}`,
			Output: `class C {
    /* block
       comment */

    static{}
}`,
			Options:         "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true,\"allowClassStart\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      2,
				},
			},
		},
		{
			Code: `class C {
    static
    // line comment
    {}
}`,
			Output: `class C {
    static

    // line comment

    {}
}`,
			Options:         "[{\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true,\"allowClassStart\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `class C {
    static
    /* block
       comment */
    {}
}`,
			Output: `class C {
    static

    /* block
       comment */

    {}
}`,
			Options:         "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true,\"allowClassStart\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `class C {
    static {
        // line comment
        foo();
    }
}`,
			Output: `class C {
    static {
        // line comment

        foo();
    }
}`,
			Options:         "[{\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `class C {
    static {
        /* block
           comment */
        foo();
    }
}`,
			Output: `class C {
    static {
        /* block
           comment */

        foo();
    }
}`,
			Options:         "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `class C {
    static {
        foo();
        // line comment
    }
}`,
			Output: `class C {
    static {
        foo();

        // line comment
    }
}`,
			Options:         "[{\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      4,
				},
			},
		},
		{
			Code: `class C {
    static {
        foo();
        /* block
           comment */
    }
}`,
			Output: `class C {
    static {
        foo();

        /* block
           comment */
    }
}`,
			Options:         "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      4,
				},
			},
		},
		{
			Code: `class C {
    static {
        foo();
        // line comment
        bar();
    }
}`,
			Output: `class C {
    static {
        foo();

        // line comment

        bar();
    }
}`,
			Options:         "[{\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      4,
				},
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `class C {
    static {
        foo();
        /* block
           comment */
        bar();
    }
}`,
			Output: `class C {
    static {
        foo();

        /* block
           comment */

        bar();
    }
}`,
			Options:         "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      4,
				},
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `class C {
    static{}
    // line comment
}`,
			Output: `class C {
    static{}

    // line comment
}`,
			Options:         "[{\"beforeLineComment\":true,\"afterLineComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true,\"allowClassStart\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
			},
		},
		{
			Code: `class C {
    static{}
    /* block
       comment */
}`,
			Output: `class C {
    static{}

    /* block
       comment */
}`,
			Options:         "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"allowBlockStart\":true,\"allowBlockEnd\":true,\"allowClassStart\":true,\"allowClassEnd\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
			},
		},
		{
			Code: `var obj = {
  // line at object start
  g: 1
};`,
			Output: `var obj = {

  // line at object start
  g: 1
};`,
			Options: "[{\"beforeLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `function hi() {
  return {
    // hi
    test: function() {
    }
  }
}`,
			Output: `function hi() {
  return {

    // hi
    test: function() {
    }
  }
}`,
			Options: "[{\"beforeLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
			},
		},
		{
			Code: `var obj = {
  /* block comment at object start*/
  g: 1
};`,
			Output: `var obj = {

  /* block comment at object start*/
  g: 1
};`,
			Options: "[{\"beforeBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `function hi() {
  return {
    /**
    * hi
    */
    test: function() {
    }
  }
}`,
			Output: `function hi() {
  return {

    /**
    * hi
    */
    test: function() {
    }
  }
}`,
			Options: "[{\"beforeLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      3,
				},
			},
		},
		{
			Code: `const {
  // line at object start
  g: a
} = {};`,
			Output: `const {

  // line at object start
  g: a
} = {};`,
			Options:         "[{\"beforeLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `const {
  // line at object start
  g
} = {};`,
			Output: `const {

  // line at object start
  g
} = {};`,
			Options:         "[{\"beforeLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `const {
  /* block comment at object-like start*/
  g: a
} = {};`,
			Output: `const {

  /* block comment at object-like start*/
  g: a
} = {};`,
			Options:         "[{\"beforeBlockComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `const {
  /* block comment at object-like start*/
  g
} = {};`,
			Output: `const {

  /* block comment at object-like start*/
  g
} = {};`,
			Options:         "[{\"beforeBlockComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `var obj = {
  g: 1
  // line at object end
};`,
			Output: `var obj = {
  g: 1
  // line at object end

};`,
			Options: "[{\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `function hi() {
  return {
    test: function() {
    }
    // hi
  }
}`,
			Output: `function hi() {
  return {
    test: function() {
    }
    // hi

  }
}`,
			Options: "[{\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      5,
				},
			},
		},
		{
			Code: `var obj = {
  g: 1
  
  /* block comment at object end*/
};`,
			Output: `var obj = {
  g: 1
  
  /* block comment at object end*/

};`,
			Options: "[{\"afterBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `function hi() {
  return {
    test: function() {
    }
    
    /**
    * hi
    */
  }
}`,
			Output: `function hi() {
  return {
    test: function() {
    }
    
    /**
    * hi
    */

  }
}`,
			Options: "[{\"afterBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      6,
				},
			},
		},
		{
			Code: `const {
  g: a
  // line at object end
} = {};`,
			Output: `const {
  g: a
  // line at object end

} = {};`,
			Options:         "[{\"afterLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `const {
  g
  // line at object end
} = {};`,
			Output: `const {
  g
  // line at object end

} = {};`,
			Options:         "[{\"afterLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `const {
  g: a
  
  /* block comment at object-like end*/
} = {};`,
			Output: `const {
  g: a
  
  /* block comment at object-like end*/

} = {};`,
			Options:         "[{\"afterBlockComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `const {
  g
  
  /* block comment at object-like end*/
} = {};`,
			Output: `const {
  g
  
  /* block comment at object-like end*/

} = {};`,
			Options:         "[{\"afterBlockComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `var arr = [
  // line at array start
  1
];`,
			Output: `var arr = [

  // line at array start
  1
];`,
			Options: "[{\"beforeLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `var arr = [
  /* block comment at array start*/
  1
];`,
			Output: `var arr = [

  /* block comment at array start*/
  1
];`,
			Options: "[{\"beforeBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `const [
  // line at array start
  a
] = [];`,
			Output: `const [

  // line at array start
  a
] = [];`,
			Options:         "[{\"beforeLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `const [
  /* block comment at array start*/
  a
] = [];`,
			Output: `const [

  /* block comment at array start*/
  a
] = [];`,
			Options:         "[{\"beforeBlockComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      2,
				},
			},
		},
		{
			Code: `var arr = [
  1
  // line at array end
];`,
			Output: `var arr = [
  1
  // line at array end

];`,
			Options: "[{\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `var arr = [
  1
  
  /* block comment at array end*/
];`,
			Output: `var arr = [
  1
  
  /* block comment at array end*/

];`,
			Options: "[{\"afterBlockComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `const [
  a
  // line at array end
] = [];`,
			Output: `const [
  a
  // line at array end

] = [];`,
			Options:         "[{\"afterLineComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      3,
				},
			},
		},
		{
			Code: `const [
  a
  
  /* block comment at array end*/
] = [];`,
			Output: `const [
  a
  
  /* block comment at array end*/

] = [];`,
			Options:         "[{\"afterBlockComment\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
					Line:      4,
				},
			},
		},
		{
			Code: `foo;

/* eslint-disable no-underscore-dangle */

this._values = values;
this._values2 = true;
/* eslint-enable no-underscore-dangle */
bar`,
			Output: `foo;

/* eslint-disable no-underscore-dangle */

this._values = values;
this._values2 = true;

/* eslint-enable no-underscore-dangle */

bar`,
			Options: "[{\"beforeBlockComment\":true,\"afterBlockComment\":true,\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
					Line:      7,
				},
				{
					MessageId: "after",
					Line:      7,
				},
			},
		},
		{
			Code: `foo;
/* eslint */`,
			Output: `foo;

/* eslint */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* jshint */`,
			Output: `foo;

/* jshint */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* jslint */`,
			Output: `foo;

/* jslint */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* istanbul */`,
			Output: `foo;

/* istanbul */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* global */`,
			Output: `foo;

/* global */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* globals */`,
			Output: `foo;

/* globals */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* exported */`,
			Output: `foo;

/* exported */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* jscs */`,
			Output: `foo;

/* jscs */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo
/* something else */`,
			Output: `foo

/* something else */`,
			Options: "[{\"ignorePattern\":\"pragma\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo
/* eslint */`,
			Output: `foo

/* eslint */`,
			Options: "[{\"applyDefaultIgnorePatterns\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `foo;
/* fallthrough */`,
			Output: `foo;

/* fallthrough */`,
			Options: "[]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `
            switch (
            // this comment is not allowed by allowBlockStart: true

                foo
            )
            {
            case 1:
                bar();
                break;
            }
            `,
			Output: `
            switch (

            // this comment is not allowed by allowBlockStart: true

                foo
            )
            {
            case 1:
                bar();
                break;
            }
            `,
			Options: "[{\"allowBlockStart\":true,\"beforeLineComment\":true,\"afterLineComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "before",
				},
			},
		},
		{
			Code: `#!foo
var a = 1;`,
			Output: `#!foo

var a = 1;`,
			Options: "[{\"afterHashbangComment\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "after",
				},
			},
		},
	})
}
