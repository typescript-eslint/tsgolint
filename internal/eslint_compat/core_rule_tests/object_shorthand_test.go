// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestObjectShorthandRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2018}}", "object-shorthand", []ValidTestCase{
		{Code: `var x = {y() {}}`},
		{Code: `var x = {y}`},
		{Code: `var x = {a: b}`},
		{Code: `var x = {a: 'a'}`},
		{Code: `var x = {'a': 'a'}`},
		{Code: `var x = {'a': b}`},
		{Code: `var x = {y(x) {}}`},
		{Code: `var {x,y,z} = x`},
		{Code: `var {x: {y}} = z`},
		{Code: `var x = {*x() {}}`},
		{Code: `var x = {x: y}`},
		{Code: `var x = {x: y, y: z}`},
		{Code: `var x = {x: y, y: z, z: 'z'}`},
		{Code: `var x = {x() {}, y: z, l(){}}`},
		{Code: `var x = {x: y, y: z, a: b}`},
		{Code: `var x = {x: y, y: z, 'a': b}`},
		{Code: `var x = {x: y, y() {}, z: a}`},
		{Code: `var x = {[y]: y}`},
		{Code: `doSomething({x: y})`},
		{Code: `doSomething({'x': y})`},
		{Code: `doSomething({x: 'x'})`},
		{Code: `doSomething({'x': 'x'})`},
		{Code: `doSomething({y() {}})`},
		{Code: `doSomething({x: y, y() {}})`},
		{Code: `doSomething({y() {}, z: a})`},
		{Code: `!{ a: function a(){} };`},
		{Code: `var x = {y: (x)=>x}`},
		{Code: `doSomething({y: (x)=>x})`},
		{Code: `var x = {y: (x)=>x, y: a}`},
		{Code: `doSomething({x, y: (x)=>x})`},
		{Code: `({ foo: x => { return; }})`},
		{Code: `({ foo: (x) => { return; }})`},
		{Code: `({ foo: () => { return; }})`},
		{Code: `var x = {get y() {}}`},
		{Code: `var x = {set y(z) {}}`},
		{Code: `var x = {get y() {}, set y(z) {}}`},
		{Code: `doSomething({get y() {}})`},
		{Code: `doSomething({set y(z) {}})`},
		{Code: `doSomething({get y() {}, set y(z) {}})`},
		{
			Code:    `var x = {[y]: y}`,
			Options: "[\"properties\"]",
		},
		{
			Code:    `var x = {['y']: 'y'}`,
			Options: "[\"properties\"]",
		},
		{
			Code:    `var x = {['y']: y}`,
			Options: "[\"properties\"]",
		},
		{
			Code:    `var x = {[y]() {}}`,
			Options: "[\"methods\"]",
		},
		{
			Code:    `var x = {[y]: function x() {}}`,
			Options: "[\"methods\"]",
		},
		{
			Code:    `var x = {[y]: y}`,
			Options: "[\"methods\"]",
		},
		{
			Code:    `var x = {y() {}}`,
			Options: "[\"methods\"]",
		},
		{
			Code:    `var x = {x, y() {}, a:b}`,
			Options: "[\"methods\"]",
		},
		{
			Code:    `var x = {y}`,
			Options: "[\"properties\"]",
		},
		{
			Code:    `var x = {y: {b}}`,
			Options: "[\"properties\"]",
		},
		{
			Code:    `var x = {a: n, c: d, f: g}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x = {a: function(){}, b: {c: d}}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x = {ConstructorFunction: function(){}, a: b}`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {_ConstructorFunction: function(){}, a: b}`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {$ConstructorFunction: function(){}, a: b}`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {__ConstructorFunction: function(){}, a: b}`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {_0ConstructorFunction: function(){}, a: b}`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {notConstructorFunction(){}, b: c}`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {ConstructorFunction: function(){}, a: b}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {_ConstructorFunction: function(){}, a: b}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {$ConstructorFunction: function(){}, a: b}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {__ConstructorFunction: function(){}, a: b}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {_0ConstructorFunction: function(){}, a: b}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {notConstructorFunction(){}, b: c}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
		},
		{
			Code:    `var x = {ConstructorFunction: function(){}, a: b}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x = {notConstructorFunction: function(){}, b: c}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var x = { foo: function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
		},
		{
			Code:    `var x = { foo: function() {}  }`,
			Options: "[\"methods\",{\"methodsIgnorePattern\":\"^foo$\"}]",
		},
		{
			Code:    `var x = { foo: function*() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
		},
		{
			Code:    `var x = { foo: async function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
		},
		{
			Code:    `var x = { foo: () => { return 5; }  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\",\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `var x = { 'foo': function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
		},
		{
			Code:    `var x = { ['foo']: function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
		},
		{
			Code:    `var x = { 123: function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^123$\"}]",
		},
		{
			Code:    `var x = { afoob: function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"foo\"}]",
		},
		{
			Code:    `var x = { afoob: function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^.foo.$\"}]",
		},
		{
			Code:    `var x = { '👍foo👍': function() {}  }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^.foo.$\"}]",
		},
		{
			Code:    `var x = {'a': function(){}}`,
			Options: "[\"always\",{\"avoidQuotes\":true}]",
		},
		{
			Code:    `var x = {['a']: function(){}}`,
			Options: "[\"methods\",{\"avoidQuotes\":true}]",
		},
		{
			Code:    `var x = {'y': y}`,
			Options: "[\"properties\",{\"avoidQuotes\":true}]",
		},
		{
			Code:    `let {a, b} = o;`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var x = {foo: foo, bar: bar, ...baz}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:    `var x = {a: a, b: b}`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var x = {a: b, c: d, f: g}`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var x = {a, b}`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `var x = {a, b, get test() { return 1; }}`,
			Options: "[\"consistent\"]",
		},
		{
			Code:            `var x = {...bar}`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var x = {foo, bar, ...baz}`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var x = {bar: baz, ...qux}`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var x = {...foo, bar: bar, baz: baz}`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:    `var x = {a, b}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {a, b, get test(){return 1;}}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {0: 'foo'}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {'key': 'baz'}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {foo: 'foo'}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {[foo]: foo}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {foo: function foo() {}}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `var x = {[foo]: 'foo'}`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:            `var x = {bar, ...baz}`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var x = {bar: baz, ...qux}`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `var x = {...foo, bar, baz}`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:    `({ x: () => foo })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":false}]",
		},
		{
			Code:    `({ x: () => { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":false}]",
		},
		{
			Code:    `({ x: () => foo })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `({ x() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `({ x() { return; }, y() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `({ x() { return; }, y: () => foo })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `({ x: () => foo, y() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `({ x: () => { this; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `function foo() { ({ x: () => { arguments; } }) }`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code: `
                class Foo extends Bar {
                  constructor() {
                      var foo = { x: () => { super(); } };
                  }
              }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code: `
                class Foo extends Bar {
                    baz() {
                        var foo = { x: () => { super.baz(); } };
                    }
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code: `
                function foo() {
                    var x = { x: () => { new.target; } };
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code: `
                function foo() {
                    var x = {
                        x: () => {
                            var y = () => { this; };
                        }
                    };
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code: `
                function foo() {
                    var x = {
                        x: () => {
                            var y = () => { this; };
                            function foo() { this; }
                        }
                    };
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code: `
                function foo() {
                    var x = {
                        x: () => {
                            return { y: () => { this; } };
                        }
                    };
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
		},
		{
			Code:    `({ [foo.bar]: () => {} })`,
			Options: "[\"always\",{\"ignoreConstructors\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `var x = {x: x}`,
			Output: `var x = {x}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `var x = {'x': x}`,
			Output: `var x = {x}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `var x = {y: y, x: x}`,
			Output: `var x = {y, x}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `var x = {y: z, x: x, a: b}`,
			Output: `var x = {y: z, x, a: b}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {y: z,
 x: x,
 a: b
 // comment 
}`,
			Output: `var x = {y: z,
 x,
 a: b
 // comment 
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {y: z,
 a: b,
 // comment 
f: function() {}}`,
			Output: `var x = {y: z,
 a: b,
 // comment 
f() {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `var x = {a: b,
/* comment */
y: y
 }`,
			Output: `var x = {a: b,
/* comment */
y
 }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {
  a: b,
  /* comment */
  y: y
}`,
			Output: `var x = {
  a: b,
  /* comment */
  y
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {
  f: function() {
    /* comment */
    a(b);
    }
  }`,
			Output: `var x = {
  f() {
    /* comment */
    a(b);
    }
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `var x = {
  [f]: function() {
    /* comment */
    a(b);
    }
  }`,
			Output: `var x = {
  [f]() {
    /* comment */
    a(b);
    }
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `var x = {
  f: function*() {
    /* comment */
    a(b);
    }
  }`,
			Output: `var x = {
  *f() {
    /* comment */
    a(b);
    }
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `var x = {
  f: /* comment */ function() {
  }
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `var x = {
 f /* comment */: function() {
  }
  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `var x = {a: /* comment */ a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {a /* comment */: a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {a: (a /* comment */)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {'a': /* comment */ a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {'a': (a /* comment */)}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code: `var x = {'a' /* comment */: a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `var x = {y: function() {}}`,
			Output: `var x = {y() {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `var x = {y: function*() {}}`,
			Output: `var x = {*y() {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `var x = {x: y, y: z, a: a}`,
			Output: `var x = {x: y, y: z, a}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `var x = {ConstructorFunction: function(){}, a: b}`,
			Output: `var x = {ConstructorFunction(){}, a: b}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `var x = {x: y, y: z, a: function(){}, b() {}}`,
			Output: `var x = {x: y, y: z, a(){}, b() {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `var x = {x: x, y: function() {}}`,
			Output: `var x = {x, y() {}}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `doSomething({x: x})`,
			Output: `doSomething({x})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `doSomething({'x': x})`,
			Output: `doSomething({x})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `doSomething({a: 'a', 'x': x})`,
			Output: `doSomething({a: 'a', x})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:   `doSomething({y: function() {}})`,
			Output: `doSomething({y() {}})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `doSomething({[y]: function() {}})`,
			Output: `doSomething({[y]() {}})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `doSomething({['y']: function() {}})`,
			Output: `doSomething({['y']() {}})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ foo: async function () {} })`,
			Output:          `({ async foo () {} })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ 'foo': async function() {} })`,
			Output:          `({ async 'foo'() {} })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ [foo]: async function() {} })`,
			Output:          `({ async [foo]() {} })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ [foo.bar]: function*() {} })`,
			Output: `({ *[foo.bar]() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ [foo   ]: function() {} })`,
			Output: `({ [foo   ]() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ [ foo ]: async function() {} })`,
			Output:          `({ async [ foo ]() {} })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ foo: function *() {} })`,
			Output: `({ *foo() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ [  foo   ]: function() {} })`,
			Output: `({ [  foo   ]() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ [  foo]: function() {} })`,
			Output: `({ [  foo]() {} })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {y: function() {}}`,
			Output:  `var x = {y() {}}`,
			Options: "[\"methods\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {x, y() {}, z: function() {}}`,
			Output:  `var x = {x, y() {}, z() {}}`,
			Options: "[\"methods\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {ConstructorFunction: function(){}, a: b}`,
			Output:  `var x = {ConstructorFunction(){}, a: b}`,
			Options: "[\"methods\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {[y]: function() {}}`,
			Output:  `var x = {[y]() {}}`,
			Options: "[\"methods\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ [(foo)]: function() { return; } })`,
			Output: `({ [(foo)]() { return; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ [(foo)]: async function() { return; } })`,
			Output:          `({ async [(foo)]() { return; } })`,
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ [(((((((foo)))))))]: function() { return; } })`,
			Output: `({ [(((((((foo)))))))]() { return; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ [(foo)]() { return; } })`,
			Output:  `({ [(foo)]: function() { return; } })`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:            `({ async [(foo)]() { return; } })`,
			Output:          `({ [(foo)]: async function() { return; } })`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `({ *[((foo))]() { return; } })`,
			Output:  `({ [((foo))]: function*() { return; } })`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `({ [(((((((foo)))))))]() { return; } })`,
			Output:  `({ [(((((((foo)))))))]: function() { return; } })`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `({ 'foo bar'() { return; } })`,
			Output:  `({ 'foo bar': function() { return; } })`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `({ *foo() { return; } })`,
			Output:  `({ foo: function*() { return; } })`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:            `({ async foo() { return; } })`,
			Output:          `({ foo: async function() { return; } })`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:            `({ *['foo bar']() { return; } })`,
			Output:          `({ ['foo bar']: function*() { return; } })`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {x: x}`,
			Output:  `var x = {x}`,
			Options: "[\"properties\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:    `var x = {a, b, c(){}, x: x}`,
			Output:  `var x = {a, b, c(){}, x}`,
			Options: "[\"properties\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:    `var x = {y() {}}`,
			Output:  `var x = {y: function() {}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {*y() {}}`,
			Output:  `var x = {y: function*() {}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {y}`,
			Output:  `var x = {y: y}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyLongform",
				},
			},
		},
		{
			Code:    `var x = {y, a: b, *x(){}}`,
			Output:  `var x = {y: y, a: b, x: function*(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyLongform",
				},
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {y: {x}}`,
			Output:  `var x = {y: {x: x}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyLongform",
				},
			},
		},
		{
			Code:    `var x = {ConstructorFunction(){}, a: b}`,
			Output:  `var x = {ConstructorFunction: function(){}, a: b}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {notConstructorFunction(){}, b: c}`,
			Output:  `var x = {notConstructorFunction: function(){}, b: c}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code:            `var x = {foo: foo, bar: baz, ...qux}`,
			Output:          `var x = {foo, bar: baz, ...qux}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:            `var x = {foo, bar: baz, ...qux}`,
			Output:          `var x = {foo: foo, bar: baz, ...qux}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyLongform",
				},
			},
		},
		{
			Code:    `var x = {y: function() {}}`,
			Output:  `var x = {y() {}}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {_y: function() {}}`,
			Output:  `var x = {_y() {}}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {$y: function() {}}`,
			Output:  `var x = {$y() {}}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {__y: function() {}}`,
			Output:  `var x = {__y() {}}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {_0y: function() {}}`,
			Output:  `var x = {_0y() {}}`,
			Options: "[\"methods\",{\"ignoreConstructors\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { afoob: function() {} }`,
			Output:  `var x = { afoob() {} }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { afoob: function() {} }`,
			Output:  `var x = { afoob() {} }`,
			Options: "[\"methods\",{\"methodsIgnorePattern\":\"^foo$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { 'afoob': function() {} }`,
			Output:  `var x = { 'afoob'() {} }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { 1234: function() {} }`,
			Output:  `var x = { 1234() {} }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^123$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { bar: function() {} }`,
			Output:  `var x = { bar() {} }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { [foo]: function() {} }`,
			Output:  `var x = { [foo]() {} }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = { foo: foo }`,
			Output:  `var x = { foo }`,
			Options: "[\"always\",{\"methodsIgnorePattern\":\"^foo$\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:    `var x = {a: a}`,
			Output:  `var x = {a}`,
			Options: "[\"always\",{\"avoidQuotes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedPropertyShorthand",
				},
			},
		},
		{
			Code:    `var x = {a: function(){}}`,
			Output:  `var x = {a(){}}`,
			Options: "[\"methods\",{\"avoidQuotes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {[a]: function(){}}`,
			Output:  `var x = {[a](){}}`,
			Options: "[\"methods\",{\"avoidQuotes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `var x = {'a'(){}}`,
			Output:  `var x = {'a': function(){}}`,
			Options: "[\"always\",{\"avoidQuotes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLiteralMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {['a'](){}}`,
			Output:  `var x = {['a']: function(){}}`,
			Options: "[\"methods\",{\"avoidQuotes\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLiteralMethodLongform",
				},
			},
		},
		{
			Code:    `var x = {a: a, b}`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMix",
				},
			},
		},
		{
			Code:    `var x = {b, c: d, f: g}`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMix",
				},
			},
		},
		{
			Code:            `var x = {foo, bar: baz, ...qux}`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMix",
				},
			},
		},
		{
			Code:    `var x = {a: a, b: b}`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAllPropertiesShorthanded",
				},
			},
		},
		{
			Code:    `var x = {a, z: function z(){}}`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMix",
				},
			},
		},
		{
			Code:    `var x = {foo: function() {}}`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAllPropertiesShorthanded",
				},
			},
		},
		{
			Code:            `var x = {a: a, b: b, ...baz}`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAllPropertiesShorthanded",
				},
			},
		},
		{
			Code:            `var x = {foo, bar: bar, ...qux}`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMix",
				},
			},
		},
		{
			Code:    `({ x: (arg => { return; }) })`,
			Output:  `({ x(arg) { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: () => { return; } })`,
			Output:  `({ x() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x() { return; }, y: () => { return; } })`,
			Output:  `({ x() { return; }, y() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: () => { return; }, y: () => foo })`,
			Output:  `({ x() { return; }, y: () => foo })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: () => { return; }, y: () => { return; } })`,
			Output:  `({ x() { return; }, y() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: foo => { return; } })`,
			Output:  `({ x(foo) { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: (foo = 1) => { return; } })`,
			Output:  `({ x(foo = 1) { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: ({ foo: bar = 1 } = {}) => { return; } })`,
			Output:  `({ x({ foo: bar = 1 } = {}) { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: () => { function foo() { this; } } })`,
			Output:  `({ x() { function foo() { this; } } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: () => { var foo = function() { arguments; } } })`,
			Output:  `({ x() { var foo = function() { arguments; } } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ x: () => { function foo() { arguments; } } })`,
			Output:  `({ x() { function foo() { arguments; } } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `
                ({
                    x: () => {
                        class Foo extends Bar {
                            constructor() {
                                super();
                            }
                        }
                    }
                })
            `,
			Output: `
                ({
                    x() {
                        class Foo extends Bar {
                            constructor() {
                                super();
                            }
                        }
                    }
                })
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `
                ({
                    x: () => {
                        function foo() {
                            new.target;
                        }
                    }
                })
            `,
			Output: `
                ({
                    x() {
                        function foo() {
                            new.target;
                        }
                    }
                })
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ 'foo bar': () => { return; } })`,
			Output:  `({ 'foo bar'() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ [foo]: () => { return; } })`,
			Output:  `({ [foo]() { return; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ a: 1, foo: async (bar = 1) => { return; } })`,
			Output:          `({ a: 1, async foo(bar = 1) { return; } })`,
			Options:         "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:            `({ [ foo ]: async bar => { return; } })`,
			Output:          `({ async [ foo ](bar) { return; } })`,
			Options:         "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			LanguageOptions: "{\"ecmaVersion\":8}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ key: (arg = () => {}) => {} })`,
			Output:  `({ key(arg = () => {}) {} })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `
                function foo() {
                    var x = {
                        x: () => {
                            this;
                            return { y: () => { foo; } };
                        }
                    };
                }
            `,
			Output: `
                function foo() {
                    var x = {
                        x: () => {
                            this;
                            return { y() { foo; } };
                        }
                    };
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `
                function foo() {
                    var x = {
                        x: () => {
                            ({ y: () => { foo; } });
                            this;
                        }
                    };
                }
            `,
			Output: `
                function foo() {
                    var x = {
                        x: () => {
                            ({ y() { foo; } });
                            this;
                        }
                    };
                }
            `,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:   `({ a: (function(){ return foo; }) })`,
			Output: `({ a(){ return foo; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: (() => { return foo; }) })`,
			Output:  `({ a() { return foo; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: ((arg) => { return foo; }) })`,
			Output:  `({ a(arg) { return foo; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: ((arg, arg2) => { return foo; }) })`,
			Output:  `({ a(arg, arg2) { return foo; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: (async () => { return foo; }) })`,
			Output:  `({ async a() { return foo; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: (async (arg) => { return foo; }) })`,
			Output:  `({ async a(arg) { return foo; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: (async (arg, arg2) => { return foo; }) })`,
			Output:  `({ async a(arg, arg2) { return foo; } })`,
			Options: "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ a: async function*() {} })`,
			Output:  `({ async *a() {} })`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code:    `({ async* a() {} })`,
			Output:  `({ a: async function*() {} })`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodLongform",
				},
			},
		},
		{
			Code: `const test = {
    key: <T>(): void => { },
    key: async <T>(): Promise<void> => { },

    key: <T>(arg: T): T => { return arg },
    key: async <T>(arg: T): Promise<T> => { return arg },
}`,
			Output: `const test = {
    key<T>(): void { },
    async key<T>(): Promise<void> { },

    key<T>(arg: T): T { return arg },
    async key<T>(arg: T): Promise<T> { return arg },
}`,
			Options:         "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
		{
			Code: `const test = {
    key: (): void => {x()},
    key: ( (): void => {x()} ),
    key: ( (): (void) => {x()} ),

    key: (arg: t): void => {x()},
    key: ( (arg: t): void => {x()} ),
    key: ( (arg: t): (void) => {x()} ),

    key: (arg: t, arg2: t): void => {x()},
    key: ( (arg: t, arg2: t): void => {x()} ),
    key: ( (arg: t, arg2: t): (void) => {x()} ),

    key: async (): void => {x()},
    key: ( async (): void => {x()} ),
    key: ( async (): (void) => {x()} ),

    key: async (arg: t): void => {x()},
    key: ( async (arg: t): void => {x()} ),
    key: ( async (arg: t): (void) => {x()} ),

    key: async (arg: t, arg2: t): void => {x()},
    key: ( async (arg: t, arg2: t): void => {x()} ),
    key: ( async (arg: t, arg2: t): (void) => {x()} ),
}`,
			Output: `const test = {
    key(): void {x()},
    key(): void {x()},
    key(): (void) {x()},

    key(arg: t): void {x()},
    key(arg: t): void {x()},
    key(arg: t): (void) {x()},

    key(arg: t, arg2: t): void {x()},
    key(arg: t, arg2: t): void {x()},
    key(arg: t, arg2: t): (void) {x()},

    async key(): void {x()},
    async key(): void {x()},
    async key(): (void) {x()},

    async key(arg: t): void {x()},
    async key(arg: t): void {x()},
    async key(arg: t): (void) {x()},

    async key(arg: t, arg2: t): void {x()},
    async key(arg: t, arg2: t): void {x()},
    async key(arg: t, arg2: t): (void) {x()},
}`,
			Options:         "[\"always\",{\"avoidExplicitReturnArrows\":true}]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
				{
					MessageId: "expectedMethodShorthand",
				},
			},
		},
	})
}
