// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSpacedCommentRule(t *testing.T) {
	RunRuleTester(t, "{}", "spaced-comment", []ValidTestCase{
		{
			Code: `// A valid comment starting with space
var a = 1;`,
			Options: "[\"always\"]",
		},
		{
			Code: `//   A valid comment starting with tab
var a = 1;`,
			Options: "[\"always\"]",
		},
		{
			Code: `//A valid comment NOT starting with space
var a = 2;`,
			Options: "[\"never\"]",
		},
		{
			Code: `//-----------------------
// A comment
//-----------------------`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
		},
		{
			Code: `//-----------------------
// A comment
//-----------------------`,
			Options: "[\"always\",{\"line\":{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}}]",
		},
		{
			Code: `//===========
// A comment
//*************`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
		},
		{
			Code: `//######
// A comment`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
		},
		{
			Code: `//!@#!@#!@#
// A comment
//!@#`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
		},
		{
			Code:    `var a = 1; /*######*/`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
		},
		{
			Code:    `var a = 1; /*######*/`,
			Options: "[\"always\",{\"block\":{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}}]",
		},
		{
			Code: `/*****************
 * A comment
 *****************/`,
			Options: "[\"always\",{\"exceptions\":[\"*\"]}]",
		},
		{
			Code: `/*++++++++++++++
 * A comment
 +++++++++++++++++*/`,
			Options: "[\"always\",{\"exceptions\":[\"+\"]}]",
		},
		{
			Code: `/*++++++++++++++
 + A comment
 * B comment
 - C comment
----------------*/`,
			Options: "[\"always\",{\"exceptions\":[\"+\",\"-\"]}]",
		},
		{
			Code:    `//!< docblock style comment`,
			Options: "[\"always\",{\"markers\":[\"/\",\"!<\"]}]",
		},
		{
			Code:    `//!< docblock style comment`,
			Options: "[\"always\",{\"line\":{\"markers\":[\"/\",\"!<\"]}}]",
		},
		{
			Code: `//----
// a comment
//----
/// xmldoc style comment
//!< docblock style comment`,
			Options: "[\"always\",{\"exceptions\":[\"-\"],\"markers\":[\"/\",\"!<\"]}]",
		},
		{
			Code:    `/* x*/`,
			Options: "[\"always\",{\"markers\":[\"/\",\"!<\"]}]",
		},
		{
			Code:    `///xmldoc style comment`,
			Options: "[\"never\",{\"markers\":[\"/\",\"!<\"]}]",
		},
		{
			Code: `var a = 1; /*# This is an example of a marker in a block comment
subsequent lines do not count*/`,
			Options: "[\"always\",{\"markers\":[\"#\"]}]",
		},
		{
			Code: `/*!
 *comment
 */`,
			Options: "[\"always\",{\"markers\":[\"!\"]}]",
		},
		{
			Code: `/*!
 *comment
 */`,
			Options: "[\"always\",{\"block\":{\"markers\":[\"!\"]}}]",
		},
		{
			Code: `/**
 *jsdoc
 */`,
			Options: "[\"always\",{\"markers\":[\"*\"]}]",
		},
		{
			Code:    `/*global ABC*/`,
			Options: "[\"always\",{\"markers\":[\"global\"]}]",
		},
		{
			Code:    `/*eslint-env node*/`,
			Options: "[\"always\",{\"markers\":[\"eslint-env\"]}]",
		},
		{
			Code:    `/*eslint eqeqeq:0, curly: 2*/`,
			Options: "[\"always\",{\"markers\":[\"eslint\"]}]",
		},
		{
			Code: `/*eslint-disable no-alert, no-console */
alert()
console.log()
/*eslint-enable no-alert */`,
			Options: "[\"always\",{\"markers\":[\"eslint-enable\",\"eslint-disable\"]}]",
		},
		{
			Code: `#!/path/to/node
var a = 3;`,
			Options: "[\"always\"]",
		},
		{
			Code: `#!/path/to/node
var a = 3;`,
			Options: "[\"never\"]",
		},
		{
			Code:    `//`,
			Options: "[\"always\"]",
		},
		{
			Code: `//
`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// space only at start; valid since balanced doesn't apply to line comments`,
			Options: "[\"always\",{\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `//space only at end; valid since balanced doesn't apply to line comments `,
			Options: "[\"never\",{\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `var a = 1; /* A valid comment starting with space */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var a = 1; /*A valid comment NOT starting with space */`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo(/* height */a) { 
 }`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo(/*height */a) { 
 }`,
			Options: "[\"never\"]",
		},
		{
			Code: `function foo(a/* height */) { 
 }`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*
 * Test
 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*
 *Test
 */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*     
 *Test
 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*` + "\r" + `
 *Test` + "\r" + `
 */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*     ` + "\r" + `
 *Test` + "\r" + `
 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**
 *jsdoc
 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**` + "\r" + `
 *jsdoc` + "\r" + `
 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**
 *jsdoc
 */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/**   
 *jsdoc 
 */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var a = 1; /* comment */`,
			Options: "[\"always\",{\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `var a = 1; /*comment*/`,
			Options: "[\"never\",{\"block\":{\"balanced\":true}}]",
		},
		{
			Code: `function foo(/* height */a) { 
 }`,
			Options: "[\"always\",{\"block\":{\"balanced\":true}}]",
		},
		{
			Code: `function foo(/*height*/a) { 
 }`,
			Options: "[\"never\",{\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `var a = 1; /*######*/`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"],\"block\":{\"balanced\":true}}]",
		},
		{
			Code: `/*****************
 * A comment
 *****************/`,
			Options: "[\"always\",{\"exceptions\":[\"*\"],\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `/*! comment */`,
			Options: "[\"always\",{\"markers\":[\"!\"],\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `/*!comment*/`,
			Options: "[\"never\",{\"markers\":[\"!\"],\"block\":{\"balanced\":true}}]",
		},
		{
			Code: `/*!
 *comment
 */`,
			Options: "[\"always\",{\"markers\":[\"!\"],\"block\":{\"balanced\":true}}]",
		},
		{
			Code:    `/*global ABC */`,
			Options: "[\"always\",{\"markers\":[\"global\"],\"block\":{\"balanced\":true}}]",
		},
		{
			Code: `///--------` + "\r" + `
/// test` + "\r" + `
///--------`,
			Options: "[\"always\",{\"markers\":[\"/\"],\"exceptions\":[\"-\"]}]",
		},
		{
			Code: `///--------` + "\r" + `
/// test` + "\r" + `
///--------` + "\r" + `
/* blah */`,
			Options: "[\"always\",{\"markers\":[\"/\"],\"exceptions\":[\"-\"],\"block\":{\"markers\":[]}}]",
		},
		{
			Code:    `/*** */`,
			Options: "[\"always\",{\"exceptions\":[\"*\"]}]",
		},
		{
			Code:    `//#endregion`,
			Options: "[\"always\",{\"line\":{\"markers\":[\"#endregion\"]}}]",
		},
		{
			Code:    `/*foo*/`,
			Options: "[\"always\",{\"block\":{\"markers\":[\"foo\"]}}]",
		},
		{
			Code:    `/*foo*/`,
			Options: "[\"always\",{\"block\":{\"markers\":[\"foo\"],\"balanced\":true}}]",
		},
		{
			Code:    `/*foo*/ /*bar*/`,
			Options: "[\"always\",{\"markers\":[\"foo\",\"bar\"]}]",
		},
		{
			Code: `//foo
//bar`,
			Options: "[\"always\",{\"markers\":[\"foo\",\"bar\"]}]",
		},
		{
			Code:    `/* foo */`,
			Options: "[\"never\",{\"markers\":[\" foo \"]}]",
		},
		{
			Code:    `// foo `,
			Options: "[\"never\",{\"markers\":[\" foo \"]}]",
		},
		{
			Code:    `//*`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/***/`,
			Options: "[\"always\"]",
		},
	}, []InvalidTestCase{
		{
			Code: `//An invalid comment NOT starting with space
var a = 1;`,
			Output: `// An invalid comment NOT starting with space
var a = 1;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code: `// An invalid comment starting with space
var a = 2;`,
			Output: `//An invalid comment starting with space
var a = 2;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
			},
		},
		{
			Code: `//   An invalid comment starting with tab
var a = 2;`,
			Output: `//An invalid comment starting with tab
var a = 2;`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
			},
		},
		{
			Code: `//*********************-
// Comment Block 3
//***********************`,
			Output: `//* ********************-
// Comment Block 3
//***********************`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedExceptionAfter",
				},
			},
		},
		{
			Code: `//-=-=-=-=-=-=
// A comment
//-=-=-=-=-=-=`,
			Output: `// -=-=-=-=-=-=
// A comment
// -=-=-=-=-=-=`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedExceptionAfter",
				},
				{
					MessageId: "expectedExceptionAfter",
				},
			},
		},
		{
			Code:    `//!<docblock style comment`,
			Output:  `//!< docblock style comment`,
			Options: "[\"always\",{\"markers\":[\"/\",\"!<\"]}]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `//!< docblock style comment`,
			Output:  `//!<docblock style comment`,
			Options: "[\"never\",{\"markers\":[\"/\",\"!<\"]}]",
			Errors: []InvalidTestCaseError{
				{},
			},
		},
		{
			Code:    `var a = 1; /* A valid comment starting with space */`,
			Output:  `var a = 1; /*A valid comment starting with space */`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
			},
		},
		{
			Code:    `var a = 1; /*######*/`,
			Output:  `var a = 1; /* ######*/`,
			Options: "[\"always\",{\"exceptions\":[\"-\",\"=\",\"*\",\"!@#\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedExceptionAfter",
				},
			},
		},
		{
			Code:    `var a = 1; /*A valid comment NOT starting with space */`,
			Output:  `var a = 1; /* A valid comment NOT starting with space */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code: `function foo(/* height */a) { 
 }`,
			Output: `function foo(/*height */a) { 
 }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
			},
		},
		{
			Code: `function foo(/*height */a) { 
 }`,
			Output: `function foo(/* height */a) { 
 }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code: `function foo(a/*height */) { 
 }`,
			Output: `function foo(a/* height */) { 
 }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code: `/*     
 *Test
 */`,
			Output: `/*
 *Test
 */`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
			},
		},
		{
			Code: `//-----------------------
// A comment
//-----------------------`,
			Output: `// -----------------------
// A comment
// -----------------------`,
			Options: "[\"always\",{\"block\":{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code:    `var a = 1; /*######*/`,
			Output:  `var a = 1; /* ######*/`,
			Options: "[\"always\",{\"line\":{\"exceptions\":[\"-\",\"=\",\"*\",\"#\",\"!@#\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code:    `//!< docblock style comment`,
			Output:  `// !< docblock style comment`,
			Options: "[\"always\",{\"block\":{\"markers\":[\"/\",\"!<\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code: `/*!
 *comment
 */`,
			Output: `/* !
 *comment
 */`,
			Options: "[\"always\",{\"line\":{\"markers\":[\"!\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code: `///--------` + "\r" + `
/// test` + "\r" + `
///--------` + "\r" + `
/*/ blah *//*-----*/`,
			Output: `///--------` + "\r" + `
/// test` + "\r" + `
///--------` + "\r" + `
/* / blah *//*-----*/`,
			Options: "[\"always\",{\"markers\":[\"/\"],\"exceptions\":[\"-\"],\"block\":{\"markers\":[]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedExceptionAfter",
				},
			},
		},
		{
			Code: `///--------` + "\r" + `
/// test` + "\r" + `
///--------` + "\r" + `
/*/ blah */ /*-----*/`,
			Output: `///--------` + "\r" + `
/// test` + "\r" + `
///--------` + "\r" + `
/* / blah */ /* -----*/`,
			Options: "[\"always\",{\"line\":{\"markers\":[\"/\"],\"exceptions\":[\"-\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
					Line:      4,
					Column:    1,
				},
				{
					MessageId: "expectedSpaceAfter",
					Line:      4,
					Column:    13,
				},
			},
		},
		{
			Code:    `var a = 1; /* A balanced comment starting with space*/`,
			Output:  `var a = 1; /* A balanced comment starting with space */`,
			Options: "[\"always\",{\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceBefore",
				},
			},
		},
		{
			Code:    `var a = 1; /*A balanced comment NOT starting with space */`,
			Output:  `var a = 1; /*A balanced comment NOT starting with space*/`,
			Options: "[\"never\",{\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code: `function foo(/* height*/a) { 
 }`,
			Output: `function foo(/* height */a) { 
 }`,
			Options: "[\"always\",{\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceBefore",
				},
			},
		},
		{
			Code: `function foo(/*height */a) { 
 }`,
			Output: `function foo(/*height*/a) { 
 }`,
			Options: "[\"never\",{\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code:    `/*! comment*/`,
			Output:  `/*! comment */`,
			Options: "[\"always\",{\"markers\":[\"!\"],\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceBefore",
				},
			},
		},
		{
			Code:    `/*!comment */`,
			Output:  `/*!comment*/`,
			Options: "[\"never\",{\"markers\":[\"!\"],\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
		{
			Code:    `//#endregionfoo`,
			Output:  `//#endregion foo`,
			Options: "[\"always\",{\"line\":{\"markers\":[\"#endregion\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code:    `/*#endregion*/`,
			Output:  `/* #endregion*/`,
			Options: "[\"always\",{\"line\":{\"markers\":[\"#endregion\"]}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code:    `/****/`,
			Output:  `/** **/`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
			},
		},
		{
			Code:    `/****/`,
			Output:  `/** * */`,
			Options: "[\"always\",{\"block\":{\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSpaceAfter",
				},
				{
					MessageId: "expectedSpaceBefore",
				},
			},
		},
		{
			Code:    `/* foo */`,
			Output:  `/*foo*/`,
			Options: "[\"never\",{\"block\":{\"markers\":[\"foo\"],\"balanced\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
				},
				{
					MessageId: "unexpectedSpaceBefore",
				},
			},
		},
	})
}
