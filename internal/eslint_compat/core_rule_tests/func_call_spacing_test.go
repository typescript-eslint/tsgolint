// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestFuncCallSpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "func-call-spacing", []ValidTestCase{
		{Code: `f();`},
		{Code: `f(a, b);`},
		{Code: `f.b();`},
		{Code: `f.b().c();`},
		{Code: `f()()`},
		{Code: `(function() {}())`},
		{Code: `var f = new Foo()`},
		{Code: `var f = new Foo`},
		{Code: `f( (0) )`},
		{Code: `( f )( 0 )`},
		{Code: `( (f) )( (0) )`},
		{Code: `( f()() )(0)`},
		{Code: `(function(){ if (foo) { bar(); } }());`},
		{Code: `f(0, (1))`},
		{Code: `describe/**/('foo', function () {});`},
		{Code: `new (foo())`},
		{
			Code:            `import(source)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `f();`,
			Options: "[\"never\"]",
		},
		{
			Code:    `f(a, b);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `f.b();`,
			Options: "[\"never\"]",
		},
		{
			Code:    `f.b().c();`,
			Options: "[\"never\"]",
		},
		{
			Code:    `f()()`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(function() {}())`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var f = new Foo()`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var f = new Foo`,
			Options: "[\"never\"]",
		},
		{
			Code:    `f( (0) )`,
			Options: "[\"never\"]",
		},
		{
			Code:    `( f )( 0 )`,
			Options: "[\"never\"]",
		},
		{
			Code:    `( (f) )( (0) )`,
			Options: "[\"never\"]",
		},
		{
			Code:    `( f()() )(0)`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(function(){ if (foo) { bar(); } }());`,
			Options: "[\"never\"]",
		},
		{
			Code:    `f(0, (1))`,
			Options: "[\"never\"]",
		},
		{
			Code:    `describe/**/('foo', function () {});`,
			Options: "[\"never\"]",
		},
		{
			Code:    `new (foo())`,
			Options: "[\"never\"]",
		},
		{
			Code:            `import(source)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `f ();`,
			Options: "[\"always\"]",
		},
		{
			Code:    `f (a, b);`,
			Options: "[\"always\"]",
		},
		{
			Code:    `f.b ();`,
			Options: "[\"always\"]",
		},
		{
			Code:    `f.b ().c ();`,
			Options: "[\"always\"]",
		},
		{
			Code:    `f () ()`,
			Options: "[\"always\"]",
		},
		{
			Code:    `(function() {} ())`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var f = new Foo ()`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var f = new Foo`,
			Options: "[\"always\"]",
		},
		{
			Code:    `f ( (0) )`,
			Options: "[\"always\"]",
		},
		{
			Code:    `f (0) (1)`,
			Options: "[\"always\"]",
		},
		{
			Code:    `(f) (0)`,
			Options: "[\"always\"]",
		},
		{
			Code: `f ();
 t   ();`,
			Options: "[\"always\"]",
		},
		{
			Code:            `import (source)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `f
();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `f.b 
 ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `f
() ().b 
()
 ()`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `var f = new Foo
();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `f// comment
()`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `f // comment
 ()`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `f
/*
*/
()`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code:    `f` + "\r" + `();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code:    `f ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code:    `f ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `f` + "\r" + `
();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
		},
		{
			Code: `import
(source)`,
			Options:         "[\"always\",{\"allowNewlines\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `func?.()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `func ?.()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `func?. ()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `func ?. ()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
	}, []InvalidTestCase{
		{
			Code:   `f ();`,
			Output: `f();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `f (a, b);`,
			Output: `f(a, b);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `f.b ();`,
			Output: `f.b();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 4,
				},
			},
		},
		{
			Code:   `f.b().c ();`,
			Output: `f.b().c();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code:   `f() ()`,
			Output: `f()()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `(function() {} ())`,
			Output: `(function() {}())`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `var f = new Foo ()`,
			Output: `var f = new Foo()`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `f ( (0) )`,
			Output: `f( (0) )`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `f(0) (1)`,
			Output: `f(0)(1)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:   `(f) (0)`,
			Output: `(f)(0)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f ();
 t   ();`,
			Output: `f();
 t();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:            `import (source);`,
			Output:          `import(source);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f
();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f` + "\r" + `();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f ();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f ();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f` + "\r" + `
();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `import
(source);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f ();`,
			Output:  `f();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f (a, b);`,
			Output:  `f(a, b);`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f.b  ();`,
			Output:  `f.b();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code:    `f.b().c ();`,
			Output:  `f.b().c();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `f() ()`,
			Output:  `f()()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `(function() {} ())`,
			Output:  `(function() {}())`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `var f = new Foo ()`,
			Output:  `var f = new Foo()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f ( (0) )`,
			Output:  `f( (0) )`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f(0) (1)`,
			Output:  `f(0)(1)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `(f) (0)`,
			Output:  `(f)(0)`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f ();
 t   ();`,
			Output: `f();
 t();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:            `import (source);`,
			Output:          `import(source);`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f
();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    2,
					EndLine:   2,
					EndColumn: 0,
				},
			},
		},
		{
			Code: `this.cancelled.add(request)
this.decrement(request)
(0, request.reject)(new api.Cancel())`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      2,
					Column:    24,
					EndLine:   3,
					EndColumn: 0,
				},
			},
		},
		{
			Code: `var a = foo
(function(global) {}(this));`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 0,
				},
			},
		},
		{
			Code: `var a = foo
(0, baz())`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 0,
				},
			},
		},
		{
			Code:    `f` + "\r" + `();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f ();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f ();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f` + "\r" + `
();`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f();`,
			Output:  `f ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `f
();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code:    `f(a, b);`,
			Output:  `f (a, b);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `f
(a, b);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code:    `f.b();`,
			Output:  `f.b ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `f.b
();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
					Line:      1,
					Column:    4,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `f.b().c ();`,
			Output:  `f.b ().c ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Column:    3,
				},
			},
		},
		{
			Code: `f.b
().c ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
					Line:      1,
					Column:    4,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `f() ()`,
			Output:  `f () ()`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `f
() ()`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code: `f
()()`,
			Output: `f
() ()`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `(function() {}())`,
			Output:  `(function() {} ())`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var f = new Foo()`,
			Output:  `var f = new Foo ()`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f( (0) )`,
			Output:  `f ( (0) )`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f(0) (1)`,
			Output:  `f (0) (1)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `(f)(0)`,
			Output:  `(f) (0)`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `import(source);`,
			Output:          `import (source);`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `f();
 t();`,
			Output: `f ();
 t ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f` + "\r" + `();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code:    `f ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code:    `f ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code: `f` + "\r" + `
();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code:    `f();`,
			Output:  `f ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f(a, b);`,
			Output:  `f (a, b);`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f.b();`,
			Output:  `f.b ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Column:    3,
				},
			},
		},
		{
			Code:    `f.b().c ();`,
			Output:  `f.b ().c ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Column:    3,
				},
			},
		},
		{
			Code:    `f() ()`,
			Output:  `f () ()`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `(function() {}())`,
			Output:  `(function() {} ())`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `var f = new Foo()`,
			Output:  `var f = new Foo ()`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f( (0) )`,
			Output:  `f ( (0) )`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `f(0) (1)`,
			Output:  `f (0) (1)`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:    `(f)(0)`,
			Output:  `(f) (0)`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `f();
 t();`,
			Output: `f ();
 t ();`,
			Options: "[\"always\",{\"allowNewlines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:   `f    ();`,
			Output: `f();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `f
 ();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
					Line:      1,
					Column:    2,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code:    `fn();`,
			Output:  `fn ();`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
					Line:      1,
					Column:    2,
					EndLine:   1,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `fnn
 (a, b);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
					Line:      1,
					Column:    4,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code:    `f /*comment*/ ()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `f /*
*/ ()`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:    `f/*comment*/()`,
			Output:  `f/*comment*/ ()`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code:            `func ?.()`,
			Output:          `func?.()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:            `func?. ()`,
			Output:          `func?.()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:            `func ?. ()`,
			Output:          `func?.()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `func
?.()`,
			Output:          `func?.()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code: `func
//comment
?.()`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespace",
				},
			},
		},
		{
			Code:            `func?.()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missing",
				},
			},
		},
		{
			Code: `func
  ?.()`,
			Output:          `func ?.()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code: `func?.
  ()`,
			Output:          `func?. ()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code: `func  ?.
  ()`,
			Output:          `func ?. ()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
		{
			Code: `func
 /*comment*/ ?.()`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedNewline",
				},
			},
		},
	})
}
