// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestInitDeclarationsRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"parser\":{\"version\":\"8.30.1\",\"meta\":{\"name\":\"typescript-eslint/parser\",\"version\":\"8.30.1\"}}}}", "init-declarations", []ValidTestCase{
		{
			Code:    `declare const foo: number;`,
			Options: "[\"always\"]",
		},
		{
			Code:    `declare const foo: number;`,
			Options: "[\"never\"]",
		},
		{
			Code: `
	  declare namespace myLib {
		let numberOfGreetings: number;
	  }
			`,
			Options: "[\"always\"]",
		},
		{
			Code: `
	  declare namespace myLib {
		let numberOfGreetings: number;
	  }
			`,
			Options: "[\"never\"]",
		},
		{
			Code: `
	  declare namespace myLib {
		let valueInside: number;
	  }
		let valueOutside: number;
			`,
			Options: "[\"never\"]",
		},
		{Code: `
	  interface GreetingSettings {
		greeting: string;
		duration?: number;
		color?: string;
	  }
			`},
		{
			Code: `
	  interface GreetingSettings {
		greeting: string;
		duration?: number;
		color?: string;
	  }
			`,
			Options: "[\"never\"]",
		},
		{Code: `type GreetingLike = string | (() => string) | Greeter;`},
		{
			Code:    `type GreetingLike = string | (() => string) | Greeter;`,
			Options: "[\"never\"]",
		},
		{
			Code: `
	  function foo() {
		var bar: string;
	  }
			`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var bar: string;`,
			Options: "[\"never\"]",
		},
		{
			Code: `
	  var bar: string = function (): string {
		return 'string';
	  };
			`,
			Options: "[\"always\"]",
		},
		{
			Code: `
	  var bar: string = function (arg1: stirng): string {
		return 'string';
	  };
			`,
			Options: "[\"always\"]",
		},
		{
			Code:    `function foo(arg1: string = 'string'): void {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `const foo: string = 'hello';`,
			Options: "[\"never\"]",
		},
		{Code: `
	  const class1 = class NAME {
		constructor() {
		  var name1: string = 'hello';
		}
	  };
			`},
		{Code: `
	  const class1 = class NAME {
		static pi: number = 3.14;
	  };
			`},
		{
			Code: `
	  const class1 = class NAME {
		static pi: number = 3.14;
	  };
			`,
			Options: "[\"never\"]",
		},
		{Code: `
	  interface IEmployee {
		empCode: number;
		empName: string;
		getSalary: (number) => number; // arrow function
		getManagerName(number): string;
	  }
			`},
		{
			Code: `
	  interface IEmployee {
		empCode: number;
		empName: string;
		getSalary: (number) => number; // arrow function
		getManagerName(number): string;
	  }
			`,
			Options: "[\"never\"]",
		},
		{
			Code:    `const foo: number = 'asd';`,
			Options: "[\"always\"]",
		},
		{
			Code:    `const foo: number;`,
			Options: "[\"never\"]",
		},
		{
			Code: `
	  namespace myLib {
		let numberOfGreetings: number;
	  }
			`,
			Options: "[\"never\"]",
		},
		{
			Code: `
	  namespace myLib {
		let numberOfGreetings: number = 2;
	  }
			`,
			Options: "[\"always\"]",
		},
		{
			Code: `
	  declare namespace myLib1 {
		const foo: number;
		namespace myLib2 {
		  let bar: string;
		  namespace myLib3 {
			let baz: object;
		  }
		}
	  }
			`,
			Options: "[\"always\"]",
		},
		{
			Code: `
	  declare namespace myLib1 {
		const foo: number;
		namespace myLib2 {
		  let bar: string;
		  namespace myLib3 {
			let baz: object;
		  }
		}
	  }
			`,
			Options: "[\"never\"]",
		},
	}, []InvalidTestCase{
		{
			Code:    `let arr: string[] = ['arr', 'ar'];`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notInitialized",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 34,
				},
			},
		},
		{
			Code:    `let arr: string = function () {};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notInitialized",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code: `
	  const class1 = class NAME {
		constructor() {
		  var name1: string = 'hello';
		}
	  };
			`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notInitialized",
					Line:      4,
					Column:    9,
					EndLine:   4,
					EndColumn: 32,
				},
			},
		},
		{
			Code:    `let arr: string;`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "initialized",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code: `
	  namespace myLib {
		let numberOfGreetings: number;
	  }
			`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "initialized",
					Line:      3,
					Column:    7,
					EndLine:   3,
					EndColumn: 32,
				},
			},
		},
		{
			Code: `
	  namespace myLib {
		let numberOfGreetings: number = 2;
	  }
			`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notInitialized",
					Line:      3,
					Column:    7,
					EndLine:   3,
					EndColumn: 36,
				},
			},
		},
		{
			Code: `
		namespace myLib1 {
		  const foo: number;
			namespace myLib2 {
			  let bar: string;
			  namespace myLib3 {
				let baz: object;
			  }
		  }
		}
			`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "initialized",
					Line:      3,
					Column:    11,
					EndLine:   3,
					EndColumn: 22,
				},
				{
					MessageId: "initialized",
					Line:      5,
					Column:    10,
					EndLine:   5,
					EndColumn: 21,
				},
				{
					MessageId: "initialized",
					Line:      7,
					Column:    9,
					EndLine:   7,
					EndColumn: 20,
				},
			},
		},
		{
			Code: `
	  declare namespace myLib {
		let valueInside: number;
	  }
		let valueOutside: number;
			`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "initialized",
					Line:      5,
					Column:    7,
					EndLine:   5,
					EndColumn: 27,
				},
			},
		},
	})
}
