// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestObjectCurlyNewlineRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"module\"}}", "object-curly-newline", []ValidTestCase{
		{Code: `var a = {
};`},
		{Code: `var a = {
   foo
};`},
		{Code: `var a = { foo }`},
		{
			Code: `var a = {
};`,
			Options: "[\"always\"]",
		},
		{
			Code: `var b = {
    a: 1
};`,
			Options: "[\"always\"]",
		},
		{
			Code: `var c = {
    a: 1, b: 2
};`,
			Options: "[\"always\"]",
		},
		{
			Code: `var d = {
    a: 1,
    b: 2
};`,
			Options: "[\"always\"]",
		},
		{
			Code: `var e = {
    a: function foo() {
        dosomething();
    }
};`,
			Options: "[\"always\"]",
		},
		{
			Code: `function foo({
 a,
 b
} : MyType) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code: `function foo({
 a,
 b
} : { a : string, b : string }) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:    `var a = {};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var b = {a: 1};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var c = {a: 1, b: 2};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var d = {a: 1,
    b: 2};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var e = {a: function foo() {
    dosomething();
}};`,
			Options: "[\"never\"]",
		},
		{
			Code:            `function foo({ a, b } : MyType) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:            `function foo({ a, b } : { a : string, b : string }) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
		{
			Code:    `var a = {};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var b = {a: 1};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var c = {a: 1, b: 2};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var d = {
    a: 1,
    b: 2
};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var e = {
    a: function foo() {
        dosomething();
    }
};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var obj = {
    // comment
    a: 1
};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code: `var obj = { // comment
    a: 1
};`,
			Options: "[{\"multiline\":true}]",
		},
		{
			Code:    `var a = {};`,
			Options: "[{\"minProperties\":2}]",
		},
		{
			Code:    `var b = {a: 1};`,
			Options: "[{\"minProperties\":2}]",
		},
		{
			Code: `var c = {
    a: 1, b: 2
};`,
			Options: "[{\"minProperties\":2}]",
		},
		{
			Code: `var d = {
    a: 1,
    b: 2
};`,
			Options: "[{\"minProperties\":2}]",
		},
		{
			Code: `var e = {a: function foo() {
    dosomething();
}};`,
			Options: "[{\"minProperties\":2}]",
		},
		{
			Code:    `var a = {};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
		},
		{
			Code:    `var b = {a: 1};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
		},
		{
			Code: `var c = {
    a: 1, b: 2
};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
		},
		{
			Code: `var d = {
    a: 1, 
    b: 2
};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
		},
		{
			Code: `var e = {
    a: function foo() {
        dosomething();
    }
};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
		},
		{
			Code: `var b = {
    a: 1
};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
		},
		{
			Code:    `var c = {a: 1, b: 2};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
		},
		{
			Code: `var c = {
    a: 1,
    b: 2
};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
		},
		{
			Code:    `var e = {a: function() { dosomething();}};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
		},
		{
			Code: `var e = {
    a: function() { dosomething();}
};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
		},
		{
			Code:            `let {} = {a: 1};`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {a} = {a: 1};`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let {
} = {a: 1};`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let {
    a
} = {a: 1};`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {a, b} = {a: 1, b: 1};`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let {
    a, b
} = {a: 1, b: 1};`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {k = function() {dosomething();}} = obj;`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let {
    k = function() {
        dosomething();
    }
} = obj;`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var c = {a: 1,
b: 2};`,
			Options: "[{\"multiline\":false,\"consistent\":true}]",
		},
		{
			Code: `let {a,
b} = {a: 1, b: 1};`,
			Options:         "[{\"multiline\":false,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var c = { a: 1 };`,
			Options: "[{\"multiline\":true,\"consistent\":true,\"minProperties\":2}]",
		},
		{
			Code: `var c = {
a: 1
};`,
			Options: "[{\"multiline\":true,\"consistent\":true,\"minProperties\":2}]",
		},
		{
			Code: `let {a} = {
a: 1
};`,
			Options:         "[{\"multiline\":true,\"consistent\":true,\"minProperties\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let {
a
} = {
a: 1
};`,
			Options:         "[{\"multiline\":true,\"consistent\":true,\"minProperties\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let {a, b} = {
    a: 1, b: 2
};`,
			Options:         "[{\"ObjectExpression\":\"always\",\"ObjectPattern\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `import {
    a,
 b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":\"always\"}]",
		},
		{
			Code:    `import {a as a, b} from 'module';`,
			Options: "[{\"ImportDeclaration\":\"never\"}]",
		},
		{
			Code:    `import { a, } from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"multiline\":true}}]",
		},
		{
			Code: `import {
a, 
b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"multiline\":true}}]",
		},
		{
			Code: `import {
 a,
} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"consistent\":true}}]",
		},
		{
			Code:    `import { a } from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"consistent\":true}}]",
		},
		{
			Code: `import {
a, b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"minProperties\":2}}]",
		},
		{
			Code:    `import {a, b} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"minProperties\":3}}]",
		},
		{
			Code:    `import DefaultExport, {a} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"minProperties\":2}}]",
		},
		{
			Code: `var a = 0, b = 0;
export {a,
b};`,
			Options: "[{\"ExportDeclaration\":\"never\"}]",
		},
		{
			Code: `var a = 0, b = 0;
export {
a as a, b
} from 'module';`,
			Options: "[{\"ExportDeclaration\":\"always\"}]",
		},
		{
			Code:    `export { a } from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"multiline\":true}}]",
		},
		{
			Code: `export {
a, 
b
} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"multiline\":true}}]",
		},
		{
			Code: `export {a, 
b} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"consistent\":true}}]",
		},
		{
			Code: `export {
a, b
} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"minProperties\":2}}]",
		},
		{
			Code:    `export {a, b} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"minProperties\":3}}]",
		},
	}, []InvalidTestCase{
		{
			Code: `var a = { a
};`,
			Output: `var a = { a};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var a = {};`,
			Output: `var a = {
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `var b = {a: 1};`,
			Output: `var b = {
a: 1
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code: `var c = {a: 1, b: 2};`,
			Output: `var c = {
a: 1, b: 2
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code: `var d = {a: 1,
    b: 2};`,
			Output: `var d = {
a: 1,
    b: 2
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `var e = {a: function foo() {
    dosomething();
}};`,
			Output: `var e = {
a: function foo() {
    dosomething();
}
};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `function foo({ a, b } : MyType) {}`,
			Output: `function foo({
 a, b 
} : MyType) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `function foo({ a, b } : { a : string, b : string }) {}`,
			Output: `function foo({
 a, b 
} : { a : string, b : string }) {}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code: `var a = {
};`,
			Output:  `var a = {};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var b = {
    a: 1
};`,
			Output:  `var b = {a: 1};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `var c = {
    a: 1, b: 2
};`,
			Output:  `var c = {a: 1, b: 2};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var d = {
    a: 1,
    b: 2
};`,
			Output: `var d = {a: 1,
    b: 2};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `var e = {
    a: function foo() {
        dosomething();
    }
};`,
			Output: `var e = {a: function foo() {
        dosomething();
    }};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `function foo({
 a,
 b
} : MyType) {}`,
			Output: `function foo({a,
 b} : MyType) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `function foo({
 a,
 b
} : { a : string, b : string }) {}`,
			Output: `function foo({a,
 b} : { a : string, b : string }) {}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    14,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `var a = {
};`,
			Output:  `var a = {};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var a = {
 /* comment */ 
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var a = { // comment
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var b = {
    a: 1
};`,
			Output:  `var b = {a: 1};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var b = {
   a: 1 // comment
};`,
			Output: `var b = {a: 1 // comment
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var c = {
    a: 1, b: 2
};`,
			Output:  `var c = {a: 1, b: 2};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var c = {
    a: 1, b: 2 // comment
};`,
			Output: `var c = {a: 1, b: 2 // comment
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var d = {a: 1,
    b: 2};`,
			Output: `var d = {
a: 1,
    b: 2
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `var d = {a: 1, // comment
    b: 2};`,
			Output: `var d = {
a: 1, // comment
    b: 2
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `var e = {a: function foo() {
    dosomething();
}};`,
			Output: `var e = {
a: function foo() {
    dosomething();
}
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var e = {a: function foo() { // comment
    dosomething();
}};`,
			Output: `var e = {
a: function foo() { // comment
    dosomething();
}
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var e = {a: 1, /* comment */
    b: 2, // another comment
};`,
			Output: `var e = {
a: 1, /* comment */
    b: 2, // another comment
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var f = { /* comment */ a:
2
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var f = {
/* comment */
a: 1};`,
			Output: `var f = {
/* comment */
a: 1
};`,
			Options: "[{\"multiline\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    5,
				},
			},
		},
		{
			Code: `var a = {
};`,
			Output:  `var a = {};`,
			Options: "[{\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var b = {
    a: 1
};`,
			Output:  `var b = {a: 1};`,
			Options: "[{\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var c = {a: 1, b: 2};`,
			Output: `var c = {
a: 1, b: 2
};`,
			Options: "[{\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code: `var d = {a: 1,
    b: 2};`,
			Output: `var d = {
a: 1,
    b: 2
};`,
			Options: "[{\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `var e = {
    a: function foo() {
        dosomething();
    }
};`,
			Output: `var e = {a: function foo() {
        dosomething();
    }};`,
			Options: "[{\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `var a = {
};`,
			Output:  `var a = {};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var b = {
    a: 1
};`,
			Output:  `var b = {a: 1};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var c = {a: 1, b: 2};`,
			Output: `var c = {
a: 1, b: 2
};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code: `var d = {a: 1, 
    b: 2};`,
			Output: `var d = {
a: 1, 
    b: 2
};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    9,
				},
			},
		},
		{
			Code: `var e = {a: function foo() {
    dosomething();
}};`,
			Output: `var e = {
a: function foo() {
    dosomething();
}
};`,
			Options: "[{\"multiline\":true,\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var b = {a: 1
};`,
			Output:  `var b = {a: 1};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var b = {
a: 1};`,
			Output:  `var b = {a: 1};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var c = {a: 1, b: 2
};`,
			Output:  `var c = {a: 1, b: 2};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `var c = {
a: 1, b: 2};`,
			Output:  `var c = {a: 1, b: 2};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var c = {a: 1,
b: 2};`,
			Output: `var c = {
a: 1,
b: 2
};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    5,
				},
			},
		},
		{
			Code: `var e = {a: function() {
dosomething();
}};`,
			Output: `var e = {
a: function() {
dosomething();
}
};`,
			Options: "[{\"multiline\":true,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `let {a
} = {a: 1}`,
			Output:          `let {a} = {a: 1}`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `let {
a} = {a: 1}`,
			Output:          `let {a} = {a: 1}`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `let {a, b
} = {a: 1, b: 2}`,
			Output:          `let {a, b} = {a: 1, b: 2}`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `let {
a, b} = {a: 1, b: 2}`,
			Output:          `let {a, b} = {a: 1, b: 2}`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `let {a,
b} = {a: 1, b: 2}`,
			Output: `let {
a,
b
} = {a: 1, b: 2}`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `let {e = function() {
dosomething();
}} = a;`,
			Output: `let {
e = function() {
dosomething();
}
} = a;`,
			Options:         "[{\"multiline\":true,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code: `var c = {
a: 1,
b: 2};`,
			Output: `var c = {a: 1,
b: 2};`,
			Options: "[{\"multiline\":false,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `var c = {a: 1,
b: 2
};`,
			Output: `var c = {a: 1,
b: 2};`,
			Options: "[{\"multiline\":false,\"consistent\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `let {
a,
b} = {a: 1, b: 2};`,
			Output: `let {a,
b} = {a: 1, b: 2};`,
			Options:         "[{\"multiline\":false,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `let {a,
b
} = {a: 1, b: 2};`,
			Output: `let {a,
b} = {a: 1, b: 2};`,
			Options:         "[{\"multiline\":false,\"consistent\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `var c = {a: 1, b: 2};`,
			Output: `var c = {
a: 1, b: 2
};`,
			Options: "[{\"multiline\":true,\"consistent\":true,\"minProperties\":2}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    9,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code: `let {a, b} = {
a: 1, b: 2
};`,
			Output: `let {
a, b
} = {
a: 1, b: 2
};`,
			Options:         "[{\"multiline\":true,\"consistent\":true,\"minProperties\":2}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    10,
				},
			},
		},
		{
			Code: `let {
    a, b
} = {a: 1, b: 2};`,
			Output: `let {a, b} = {
a: 1, b: 2
};`,
			Options:         "[{\"ObjectExpression\":\"always\",\"ObjectPattern\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    5,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      3,
					Column:    5,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    16,
				},
			},
		},
		{
			Code: `import {
    a,
 b
} from 'module';`,
			Output: `import {a,
 b} from 'module';`,
			Options: "[{\"ImportDeclaration\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `import {a, b} from 'module';`,
			Output: `import {
a, b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `import {a as c, b} from 'module';`,
			Output: `import {
a as c, b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `import {a, 
b} from 'module';`,
			Output: `import {
a, 
b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"multiline\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `import {a, 
b
} from 'module';`,
			Output: `import {a, 
b} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"consistent\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `import {a, b
} from 'module';`,
			Output:  `import {a, b} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"consistent\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `import {a, b} from 'module';`,
			Output: `import {
a, b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"minProperties\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `import {
a, b
} from 'module';`,
			Output:  `import {a, b} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"minProperties\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `import DefaultExport, {a, b} from 'module';`,
			Output: `import DefaultExport, {
a, b
} from 'module';`,
			Options: "[{\"ImportDeclaration\":{\"minProperties\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    23,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    28,
				},
			},
		},
		{
			Code: `var a = 0; var b = 0;
export {
    a,
    b
};`,
			Output: `var a = 0; var b = 0;
export {a,
    b};`,
			Options: "[{\"ExportDeclaration\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      2,
					Column:    8,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      5,
					Column:    1,
				},
			},
		},
		{
			Code: `export {a as a, b} from 'module';`,
			Output: `export {
a as a, b
} from 'module';`,
			Options: "[{\"ExportDeclaration\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `export {a, 
b} from 'module';`,
			Output: `export {
a, 
b
} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"multiline\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code: `export {a, 
b,
} from 'module';`,
			Output: `export {a, 
b,} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"consistent\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `export {a, b
} from 'module';`,
			Output:  `export {a, b} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"consistent\":true}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `export {a, b,} from 'module';`,
			Output: `export {
a, b,
} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"minProperties\":2}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "expectedLinebreakBeforeClosingBrace",
					Line:      1,
					Column:    14,
				},
			},
		},
		{
			Code: `export {
a, b
} from 'module';`,
			Output:  `export {a, b} from 'module';`,
			Options: "[{\"ExportDeclaration\":{\"minProperties\":3}}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLinebreakAfterOpeningBrace",
					Line:      1,
					Column:    8,
				},
				{
					MessageId: "unexpectedLinebreakBeforeClosingBrace",
					Line:      3,
					Column:    1,
				},
			},
		},
	})
}
