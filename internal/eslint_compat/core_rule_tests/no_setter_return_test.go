// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoSetterReturnRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022,\"sourceType\":\"script\"}}", "no-setter-return", []ValidTestCase{
		{Code: `function foo() { return 1; }`},
		{Code: `function set(val) { return 1; }`},
		{Code: `var foo = function() { return 1; };`},
		{Code: `var foo = function set() { return 1; };`},
		{Code: `var set = function() { return 1; };`},
		{Code: `var set = function set(val) { return 1; };`},
		{Code: `var set = val => { return 1; };`},
		{Code: `var set = val => 1;`},
		{Code: `({ set a(val) { }}); function foo() { return 1; }`},
		{Code: `({ set a(val) { }}); (function () { return 1; });`},
		{Code: `({ set a(val) { }}); (() => { return 1; });`},
		{Code: `({ set a(val) { }}); (() => 1);`},
		{
			Code:            `return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `return 1;`,
			LanguageOptions: "{\"sourceType\":\"script\",\"parserOptions\":{\"ecmaFeatures\":{\"globalReturn\":true}}}",
		},
		{
			Code:            `return 1; function foo(){ return 1; } return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{
			Code:            `function foo(){} return 1; var bar = function*(){ return 1; }; return 1; var baz = () => {}; return 1;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
		},
		{Code: `({ set foo(val) { return; } })`},
		{Code: `({ set foo(val) { if (val) { return; } } })`},
		{Code: `class A { set foo(val) { return; } }`},
		{Code: `(class { set foo(val) { if (val) { return; } else { return; } return; } })`},
		{Code: `class A { set foo(val) { try {} catch(e) { return; } } }`},
		{Code: `({ get foo() { return 1; } })`},
		{Code: `({ get set() { return 1; } })`},
		{Code: `({ set(val) { return 1; } })`},
		{Code: `({ set: function(val) { return 1; } })`},
		{Code: `({ foo: function set(val) { return 1; } })`},
		{Code: `({ set: function set(val) { return 1; } })`},
		{Code: `({ set: (val) => { return 1; } })`},
		{Code: `({ set: (val) => 1 })`},
		{Code: `set = { foo(val) { return 1; } };`},
		{Code: `class A { constructor(val) { return 1; } }`},
		{Code: `class set { constructor(val) { return 1; } }`},
		{Code: `class set { foo(val) { return 1; } }`},
		{Code: `var set = class { foo(val) { return 1; } }`},
		{Code: `(class set { foo(val) { return 1; } })`},
		{Code: `class A { get foo() { return val; } }`},
		{Code: `class A { get set() { return val; } }`},
		{Code: `class A { set(val) { return 1; } }`},
		{Code: `class A { static set(val) { return 1; } }`},
		{Code: `({ set: set = function set(val) { return 1; } } = {})`},
		{Code: `({ set: set = (val) => 1 } = {})`},
		{Code: `class C { set; foo() { return 1; } }`},
		{Code: `({ set foo(val) { function foo(val) { return 1; } } })`},
		{Code: `({ set foo(val) { var foo = function(val) { return 1; } } })`},
		{Code: `({ set foo(val) { var foo = (val) => { return 1; } } })`},
		{Code: `({ set foo(val) { var foo = (val) => 1; } })`},
		{Code: `({ set [function() { return 1; }](val) {} })`},
		{Code: `({ set [() => { return 1; }](val) {} })`},
		{Code: `({ set [() => 1](val) {} })`},
		{Code: `({ set foo(val = function() { return 1; }) {} })`},
		{Code: `({ set foo(val = v => 1) {} })`},
		{Code: `(class { set foo(val) { function foo(val) { return 1; } } })`},
		{Code: `(class { set foo(val) { var foo = function(val) { return 1; } } })`},
		{Code: `(class { set foo(val) { var foo = (val) => { return 1; } } })`},
		{Code: `(class { set foo(val) { var foo = (val) => 1; } })`},
		{Code: `(class { set [function() { return 1; }](val) {} })`},
		{Code: `(class { set [() => { return 1; }](val) {} })`},
		{Code: `(class { set [() => 1](val) {} })`},
		{Code: `(class { set foo(val = function() { return 1; }) {} })`},
		{Code: `(class { set foo(val = (v) => 1) {} })`},
		{Code: `Object.defineProperty(foo, 'bar', { set(val) { return; } })`},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { set(val) { if (val) { return; } } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.defineProperties(foo, { bar: { set(val) { try { return; } catch(e){} } } })`},
		{Code: `Object.create(foo, { bar: { set: function(val) { return; } } })`},
		{Code: `x = { set(val) { return 1; } }`},
		{Code: `x = { foo: { set(val) { return 1; } } }`},
		{Code: `Object.defineProperty(foo, 'bar', { value(val) { return 1; } })`},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { value: function set(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.defineProperties(foo, { bar: { [set](val) { return 1; } } })`},
		{Code: `Object.create(foo, { bar: { 'set ': function(val) { return 1; } } })`},
		{Code: "Object.defineProperty(foo, 'bar', { [`set `]: (val) => { return 1; } })"},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { Set(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.defineProperties(foo, { bar: { value: (val) => 1 } })`},
		{Code: `Object.create(foo, { set: { value: function(val) { return 1; } } })`},
		{Code: `Object.defineProperty(foo, 'bar', { baz(val) { return 1; } })`},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { get(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.create(foo, { set: function(val) { return 1; } })`},
		{Code: `Object.defineProperty(foo, { set: (val) => 1 })`},
		{Code: `Object.defineProperty(foo, 'bar', { set(val) { function foo() { return 1; } } })`},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { set(val) { var foo = function() { return 1; } } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.defineProperties(foo, { bar: { set(val) { () => { return 1 }; } } })`},
		{Code: `Object.create(foo, { bar: { set: (val) => { (val) => 1; } } })`},
		{Code: `Object.defineProperty(foo, 'bar', 'baz', { set(val) { return 1; } })`},
		{Code: `Object.defineProperty(foo, { set(val) { return 1; } }, 'bar')`},
		{Code: `Object.defineProperty({ set(val) { return 1; } }, foo, 'bar')`},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', 'baz', { set(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Reflect.defineProperty(foo, { set(val) { return 1; } }, 'bar')`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Reflect.defineProperty({ set(val) { return 1; } }, foo, 'bar')`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.defineProperties(foo, bar, { baz: { set(val) { return 1; } } })`},
		{Code: `Object.defineProperties({ bar: { set(val) { return 1; } } }, foo)`},
		{Code: `Object.create(foo, bar, { baz: { set(val) { return 1; } } })`},
		{Code: `Object.create({ bar: { set(val) { return 1; } } }, foo)`},
		{Code: `Object.DefineProperty(foo, 'bar', { set(val) { return 1; } })`},
		{
			Code:            `Reflect.DefineProperty(foo, 'bar', { set(val) { if (val) { return 1; } } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `Object.DefineProperties(foo, { bar: { set(val) { try { return 1; } catch(e){} } } })`},
		{Code: `Object.Create(foo, { bar: { set: function(val) { return 1; } } })`},
		{Code: `object.defineProperty(foo, 'bar', { set(val) { return 1; } })`},
		{
			Code:            `reflect.defineProperty(foo, 'bar', { set(val) { if (val) { return 1; } } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `Reflect.defineProperties(foo, { bar: { set(val) { try { return 1; } catch(e){} } } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `object.create(foo, { bar: { set: function(val) { return 1; } } })`},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { set(val) { if (val) { return 1; } } })`,
			LanguageOptions: "{\"globals\":{\"Reflect\":\"off\"}}",
		},
		{Code: `/* globals Object:off */ Object.defineProperty(foo, 'bar', { set(val) { return 1; } })`},
		{
			Code:            `Object.defineProperties(foo, { bar: { set(val) { try { return 1; } catch(e){} } } })`,
			LanguageOptions: "{\"globals\":{\"Object\":\"off\"}}",
		},
		{Code: `let Object; Object.defineProperty(foo, 'bar', { set(val) { return 1; } })`},
		{
			Code:            `function f() { Reflect.defineProperty(foo, 'bar', { set(val) { if (val) { return 1; } } }); var Reflect;}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `function f(Object) { Object.defineProperties(foo, { bar: { set(val) { try { return 1; } catch(e){} } } }) }`},
		{Code: `if (x) { const Object = getObject(); Object.create(foo, { bar: { set: function(val) { return 1; } } }) }`},
		{Code: `x = function Object() { Object.defineProperty(foo, 'bar', { set(val) { return 1; } }) }`},
	}, []InvalidTestCase{
		{
			Code: `({ set a(val){ return val + 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    16,
					EndColumn: 31,
				},
			},
		},
		{
			Code: `({ set a(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `class A { set a(val) { return 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `class A { static set a(val) { return 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `(class { set a(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `({ set a(val) { return val; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `class A { set a(val) { return undefined; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `(class { set a(val) { return null; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `({ set a(val) { return x + y; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `class A { set a(val) { return foo(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `(class { set a(val) { return this._a; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `({ set a(val) { return this.a; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `({ set a(val) { if (foo) { return 1; }; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `class A { set a(val) { try { return 1; } catch(e) {} } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `(class { set a(val) { while (foo){ if (bar) break; else return 1; } } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `({ set a(val) { return 1; }, set b(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    17,
				},
				{
					MessageId: "returnsValue",
					Column:    43,
				},
			},
		},
		{
			Code: `class A { set a(val) { return 1; } set b(val) { return 1; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    24,
				},
				{
					MessageId: "returnsValue",
					Column:    49,
				},
			},
		},
		{
			Code: `(class { set a(val) { return 1; } static set b(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    23,
				},
				{
					MessageId: "returnsValue",
					Column:    55,
				},
			},
		},
		{
			Code: `({ set a(val) { if(val) { return 1; } else { return 2 }; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    27,
				},
				{
					MessageId: "returnsValue",
					Column:    46,
				},
			},
		},
		{
			Code: `class A { set a(val) { switch(val) { case 1: return x; case 2: return y; default: return z } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    46,
				},
				{
					MessageId: "returnsValue",
					Column:    64,
				},
				{
					MessageId: "returnsValue",
					Column:    83,
				},
			},
		},
		{
			Code: `(class { static set a(val) { if (val > 0) { this._val = val; return val; } return false; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    62,
				},
				{
					MessageId: "returnsValue",
					Column:    76,
				},
			},
		},
		{
			Code: `({ set a(val) { if(val) { return 1; } else { return; }; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    27,
				},
			},
		},
		{
			Code: `class A { set a(val) { switch(val) { case 1: return x; case 2: return; default: return z } } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    46,
				},
				{
					MessageId: "returnsValue",
					Column:    81,
				},
			},
		},
		{
			Code: `(class { static set a(val) { if (val > 0) { this._val = val; return; } return false; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    72,
				},
			},
		},
		{
			Code: `({ set a(val) { function b(){} return b(); } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    32,
				},
			},
		},
		{
			Code: `class A { set a(val) { return () => {}; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    24,
				},
			},
		},
		{
			Code: `(class { set a(val) { function b(){ return 1; } return 2; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    49,
				},
			},
		},
		{
			Code: `({ set a(val) { function b(){ return; } return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    41,
				},
			},
		},
		{
			Code: `class A { set a(val) { var x = function() { return 1; }; return 2; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    58,
				},
			},
		},
		{
			Code: `(class { set a(val) { var x = () => { return; }; return 2; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    50,
				},
			},
		},
		{
			Code: `function f(){}; ({ set a(val) { return 1; } });`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `x = function f(){}; class A { set a(val) { return 1; } };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `x = () => {}; A = class { set a(val) { return 1; } };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code:            `return; ({ set a(val) { return 1; } }); return 2;`,
			LanguageOptions: "{\"sourceType\":\"commonjs\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    25,
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { set(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { set(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `Object.defineProperties(foo, { baz: { set(val) { return 1; } } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `Object.create(null, { baz: { set(val) { return 1; } } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { set: val => val })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    49,
				},
			},
		},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { set: val => f(val) })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    50,
				},
			},
		},
		{
			Code: `Object.defineProperties(foo, { baz: { set: val => a + b } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    51,
				},
			},
		},
		{
			Code: `Object.create({}, { baz: { set: val => this._val } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    40,
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { set(val) { if (val) { return; } return false; }, get(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    69,
				},
			},
		},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { set(val) { try { return f(val) } catch (e) { return e }; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    55,
				},
				{
					MessageId: "returnsValue",
					Column:    83,
				},
			},
		},
		{
			Code: `Object.defineProperties(foo, { bar: { get(){ return null; }, set(val) { return null; } } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    73,
				},
			},
		},
		{
			Code: `Object.create(null, { baz: { set(val) { return this._val; return; return undefined; } } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    41,
				},
				{
					MessageId: "returnsValue",
					Column:    67,
				},
			},
		},
		{
			Code: `Object.defineProperties(foo, { baz: { set(val) { return 1; } }, bar: { set(val) { return 1; } } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    50,
				},
				{
					MessageId: "returnsValue",
					Column:    83,
				},
			},
		},
		{
			Code: `Object.create({}, { baz: { set(val) { return 1; } }, bar: { set: (val) => 1 } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
					Column:    39,
				},
				{
					MessageId: "returnsValue",
					Column:    75,
				},
			},
		},
		{
			Code: `Object['defineProperty'](foo, 'bar', { set: function bar(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code:            `Reflect.defineProperty(foo, 'bar', { 'set'(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: "Object[`defineProperties`](foo, { baz: { ['set'](val) { return 1; } } })",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: "Object.create({}, { baz: { [`set`]: (val) => { return 1; } } })",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { set: function Object(val) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code: `Object.defineProperty(foo, 'bar', { set: function(Object) { return 1; } })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code:            `Object?.defineProperty(foo, 'bar', { set(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
		{
			Code:            `(Object?.defineProperty)(foo, 'bar', { set(val) { return 1; } })`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "returnsValue",
				},
			},
		},
	})
}
