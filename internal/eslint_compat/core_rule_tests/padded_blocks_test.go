// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestPaddedBlocksRule(t *testing.T) {
	RunRuleTester(t, "{}", "padded-blocks", []ValidTestCase{
		{Code: `{

a();

}`},
		{Code: `{


a();


}`},
		{Code: `{

//comment
a();

}`},
		{Code: `{

a();
//comment

}`},
		{Code: `{

a()
//comment

}`},
		{Code: `{

a = 1

}`},
		{Code: `{//comment

a();

}`},
		{Code: `{ /* comment */

a();

}`},
		{Code: `{ /* comment 
 */

a();

}`},
		{Code: `{ /* comment 
 */ /* another comment 
 */

a();

}`},
		{Code: `{ /* comment 
 */ /* another comment 
 */

a();

/* comment 
 */ /* another comment 
 */}`},
		{Code: `{

a();

/* comment */ }`},
		{
			Code: `{

a();

/* comment */ }`,
			Options: "[\"always\"]",
		},
		{
			Code: `{

a();

/* comment */ }`,
			Options: "[{\"blocks\":\"always\"}]",
		},
		{
			Code:    `switch (a) {}`,
			Options: "[{\"switches\":\"always\"}]",
		},
		{
			Code: `switch (a) {

case 0: foo();
case 1: bar();

}`,
			Options: "[\"always\"]",
		},
		{
			Code: `switch (a) {

case 0: foo();
case 1: bar();

}`,
			Options: "[{\"switches\":\"always\"}]",
		},
		{
			Code: `switch (a) {

//comment
case 0: foo();//comment

}`,
			Options: "[{\"switches\":\"always\"}]",
		},
		{
			Code: `switch (a) {//comment

case 0: foo();
case 1: bar();

/* comment */}`,
			Options: "[{\"switches\":\"always\"}]",
		},
		{
			Code: `class A{

foo(){}

}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{

foo(){}

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class A{}`,
			Options:         "[{\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{

}`,
			Options:         "[{\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{

foo(){}

}`,
			Options:         "[{\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `{
a();
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
a();}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{a();
}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `{a();}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `{a();}`,
			Options: "[\"always\",{\"allowSingleLineBlocks\":true}]",
		},
		{
			Code: `{

a();

}`,
			Options: "[\"always\",{\"allowSingleLineBlocks\":true}]",
		},
		{
			Code: `{//comment
a();}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
//comment
a()
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{a();//comment
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
a();
//comment
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
a()
//comment
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
a()
//comment
b()
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `function a() {
/* comment */
return;
/* comment*/
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
// comment
debugger;
// comment
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `{

// comment
if (
// comment
 a) {}

 }`,
			Options: "[\"always\"]",
		},
		{
			Code: `{
// comment
if (
// comment
 a) {}
 }`,
			Options: "[\"never\"]",
		},
		{
			Code: `{
// comment
if (
// comment
 a) {}
 }`,
			Options: "[{\"blocks\":\"never\"}]",
		},
		{
			Code: `switch (a) {
case 0: foo();
}`,
			Options: "[\"never\"]",
		},
		{
			Code: `switch (a) {
case 0: foo();
}`,
			Options: "[{\"switches\":\"never\"}]",
		},
		{
			Code: `class A{
foo(){}
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{
foo(){}
}`,
			Options:         "[{\"classes\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{

foo;

}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class A{
foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `{
a();
}`,
			Options: "[{\"switches\":\"always\"}]",
		},
		{
			Code: `{

a();

}`,
			Options: "[{\"switches\":\"never\"}]",
		},
		{
			Code: `switch (a) {
case 0: foo();
case 1: bar();
}`,
			Options: "[{\"blocks\":\"always\",\"classes\":\"always\"}]",
		},
		{
			Code: `switch (a) {

case 0: foo();
case 1: bar();

}`,
			Options: "[{\"blocks\":\"never\",\"classes\":\"never\"}]",
		},
		{
			Code: `class A{
foo(){}
}`,
			Options:         "[{\"blocks\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class A{

foo(){}

}`,
			Options:         "[{\"blocks\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `class C {

 static {

foo;

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static {// comment

foo;

/* comment */} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static {

// comment
foo;
// comment

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static {

// comment

foo;

// comment

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static { foo; } 

}`,
			Options:         "[\"always\",{\"allowSingleLineBlocks\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static
 { foo; } 

}`,
			Options:         "[\"always\",{\"allowSingleLineBlocks\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static {} static {
} static {

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static

 { foo; } 

}`,
			Options:         "[\"always\",{\"allowSingleLineBlocks\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {

foo;

} 
}`,
			Options:         "[{\"blocks\":\"always\",\"classes\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {foo;} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static
 {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static

 {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static

 {foo;} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {// comment
foo;
/* comment */} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
// comment
foo;
// comment
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {} static {
} static {

} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static {
foo;
} 

}`,
			Options:         "[{\"blocks\":\"never\",\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {

 static {
foo;
} static {

foo;

} 

}`,
			Options:         "[{\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
 static {
foo;
} static {

foo;

} 
}`,
			Options:         "[{\"classes\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `{
//comment
a();

}`,
			Output: `{

//comment
a();

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{ //comment
a();

}`,
			Output: `{ //comment

a();

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    3,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

a();
//comment
}`,
			Output: `{

a();
//comment

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      4,
					Column:    10,
					EndLine:   5,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

a()
//comment
}`,
			Output: `{

a()
//comment

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      4,
					Column:    10,
					EndLine:   5,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{
a();

}`,
			Output: `{

a();

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

a();
}`,
			Output: `{

a();

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      3,
					Column:    5,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{
a();
}`,
			Output: `{

a();

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      2,
					Column:    5,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{` + "\r" + `
a();` + "\r" + `
}`,
			Output: `{
` + "\r" + `
a();` + "\r" + `

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      2,
					Column:    5,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{
a();}`,
			Output: `{

a();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      2,
					Column:    5,
					EndLine:   2,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `{a();
}`,
			Output: `{
a();

}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{a();
}`,
			Output: `{
a();

}`,
			Options: "[{\"blocks\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    6,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `switch (a) {
case 0: foo();
case 1: bar();
}`,
			Output: `switch (a) {

case 0: foo();
case 1: bar();

}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      3,
					Column:    15,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `switch (a) {
case 0: foo();
case 1: bar();
}`,
			Output: `switch (a) {

case 0: foo();
case 1: bar();

}`,
			Options: "[{\"switches\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      3,
					Column:    15,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `switch (a) {
//comment
case 0: foo();//comment
}`,
			Output: `switch (a) {

//comment
case 0: foo();//comment

}`,
			Options: "[{\"switches\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    12,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      3,
					Column:    24,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class A {
constructor(){}
}`,
			Output: `class A {

constructor(){}

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    9,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      2,
					Column:    16,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class A {
constructor(){}
}`,
			Output: `class A {

constructor(){}

}`,
			Options:         "[{\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    9,
					EndLine:   2,
					EndColumn: 1,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      2,
					Column:    16,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{a();}`,
			Output: `{
a();
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 2,
				},
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `{
a()
//comment

}`,
			Output: `{
a()
//comment
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      3,
					Column:    10,
					EndLine:   5,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

a();

}`,
			Output: `{
a();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      3,
					Column:    5,
					EndLine:   5,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{` + "\r" + `
` + "\r" + `
a();` + "\r" + `
` + "\r" + `
}`,
			Output: `{
a();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      3,
					Column:    5,
					EndLine:   5,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{


  a();


}`,
			Output: `{
  a();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   4,
					EndColumn: 3,
				},
				{
					MessageId: "neverPadBlock",
					Line:      4,
					Column:    7,
					EndLine:   7,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

a();
}`,
			Output: `{
a();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

	a();
}`,
			Output: `{
	a();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   3,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `{
a();

}`,
			Output: `{
a();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      2,
					Column:    5,
					EndLine:   4,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `  {
    a();

  }`,
			Output: `  {
    a();
  }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      2,
					Column:    9,
					EndLine:   4,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `{
// comment
if (
// comment
 a) {}

}`,
			Output: `{

// comment
if (
// comment
 a) {}

}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   2,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

// comment
if (
// comment
 a) {}
}`,
			Output: `{
// comment
if (
// comment
 a) {}
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `{

// comment
if (
// comment
 a) {}
}`,
			Output: `{
// comment
if (
// comment
 a) {}
}`,
			Options: "[{\"blocks\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    1,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `switch (a) {

case 0: foo();

}`,
			Output: `switch (a) {
case 0: foo();
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    12,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      3,
					Column:    15,
					EndLine:   5,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `switch (a) {

case 0: foo();
}`,
			Output: `switch (a) {
case 0: foo();
}`,
			Options: "[{\"switches\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    12,
					EndLine:   3,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `switch (a) {
case 0: foo();

  }`,
			Output: `switch (a) {
case 0: foo();
  }`,
			Options: "[{\"switches\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      2,
					Column:    15,
					EndLine:   4,
					EndColumn: 3,
				},
			},
		},
		{
			Code: `class A {

constructor(){

foo();

}

}`,
			Output: `class A {
constructor(){
foo();
}
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    9,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      3,
					Column:    14,
					EndLine:   5,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      5,
					Column:    7,
					EndLine:   7,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      7,
					Column:    2,
					EndLine:   9,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class A {

constructor(){

foo();

}

}`,
			Output: `class A {
constructor(){

foo();

}
}`,
			Options:         "[{\"classes\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    9,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      7,
					Column:    2,
					EndLine:   9,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `class A {

constructor(){

foo();

}

}`,
			Output: `class A {
constructor(){
foo();
}
}`,
			Options:         "[{\"blocks\":\"never\",\"classes\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
					Line:      1,
					Column:    9,
					EndLine:   3,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      3,
					Column:    14,
					EndLine:   5,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      5,
					Column:    7,
					EndLine:   7,
					EndColumn: 1,
				},
				{
					MessageId: "neverPadBlock",
					Line:      7,
					Column:    2,
					EndLine:   9,
					EndColumn: 1,
				},
			},
		},
		{
			Code: `function foo() { // a

  b;
}`,
			Output: `function foo() { // a
  b;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `function foo() { /* a
 */

  bar;
}`,
			Output: `function foo() { /* a
 */
  bar;
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `function foo() {

  bar;
/* a
 */}`,
			Output: `function foo() {

  bar;

/* a
 */}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `function foo() { /* a
 */
/* b
 */
  bar;
}`,
			Output: `function foo() { /* a
 */

/* b
 */
  bar;

}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `function foo() { /* a
 */ /* b
 */
  bar;
}`,
			Output: `function foo() { /* a
 */ /* b
 */

  bar;

}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `function foo() { /* a
 */ /* b
 */
  bar;
/* c
 *//* d
 */}`,
			Output: `function foo() { /* a
 */ /* b
 */

  bar;

/* c
 *//* d
 */}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class A{
foo;
}`,
			Output: `class A{

foo;

}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class A{

foo;

}`,
			Output: `class A{
foo;
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {
foo;

} 

}`,
			Output: `class C {

 static {

foo;

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static
 {
foo;

} 

}`,
			Output: `class C {

 static
 {

foo;

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static

 {
foo;

} 

}`,
			Output: `class C {

 static

 {

foo;

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {

foo;
} 

}`,
			Output: `class C {

 static {

foo;

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {foo;} 

}`,
			Output: `class C {

 static {
foo;
} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {
foo;
} 

}`,
			Output: `class C {

 static {

foo;

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {// comment
foo;
/* comment */} 

}`,
			Output: `class C {

 static {// comment

foo;

/* comment */} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {
// comment
foo;
// comment
} 

}`,
			Output: `class C {

 static {

// comment
foo;
// comment

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {
// comment

foo;

// comment
} 

}`,
			Output: `class C {

 static {

// comment

foo;

// comment

} 

}`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static {
foo;
} 
}`,
			Output: `class C {
 static {

foo;

} 
}`,
			Options:         "[{\"blocks\":\"always\",\"classes\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "alwaysPadBlock",
				},
				{
					MessageId: "alwaysPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static {

foo;
} 
}`,
			Output: `class C {
 static {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static
 {

foo;
} 
}`,
			Output: `class C {
 static
 {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static

 {

foo;
} 
}`,
			Output: `class C {
 static

 {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static {
foo;

} 
}`,
			Output: `class C {
 static {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static {

foo;

} 
}`,
			Output: `class C {
 static {
foo;
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static {// comment

foo;

/* comment */} 
}`,
			Output: `class C {
 static {// comment
foo;
/* comment */} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {
 static {

// comment
foo;
// comment

} 
}`,
			Output: `class C {
 static {
// comment
foo;
// comment
} 
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
				{
					MessageId: "neverPadBlock",
				},
			},
		},
		{
			Code: `class C {

 static {

foo;

} 

}`,
			Output: `class C {

 static {
foo;
} 

}`,
			Options:         "[{\"blocks\":\"never\",\"classes\":\"always\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "neverPadBlock",
				},
				{
					MessageId: "neverPadBlock",
				},
			},
		},
	})
}
