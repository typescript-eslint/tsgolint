// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoPrototypeBuiltinsRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-prototype-builtins", []ValidTestCase{
		{Code: `Object.prototype.hasOwnProperty.call(foo, 'bar')`},
		{Code: `Object.prototype.isPrototypeOf.call(foo, 'bar')`},
		{Code: `Object.prototype.propertyIsEnumerable.call(foo, 'bar')`},
		{Code: `Object.prototype.hasOwnProperty.apply(foo, ['bar'])`},
		{Code: `Object.prototype.isPrototypeOf.apply(foo, ['bar'])`},
		{Code: `Object.prototype.propertyIsEnumerable.apply(foo, ['bar'])`},
		{Code: `foo.hasOwnProperty`},
		{Code: `foo.hasOwnProperty.bar()`},
		{Code: `foo(hasOwnProperty)`},
		{Code: `hasOwnProperty(foo, 'bar')`},
		{Code: `isPrototypeOf(foo, 'bar')`},
		{Code: `propertyIsEnumerable(foo, 'bar')`},
		{Code: `({}.hasOwnProperty.call(foo, 'bar'))`},
		{Code: `({}.isPrototypeOf.call(foo, 'bar'))`},
		{Code: `({}.propertyIsEnumerable.call(foo, 'bar'))`},
		{Code: `({}.hasOwnProperty.apply(foo, ['bar']))`},
		{Code: `({}.isPrototypeOf.apply(foo, ['bar']))`},
		{Code: `({}.propertyIsEnumerable.apply(foo, ['bar']))`},
		{Code: `foo[hasOwnProperty]('bar')`},
		{Code: `foo['HasOwnProperty']('bar')`},
		{
			Code:            "foo[`isPrototypeOff`]('bar')",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `foo?.['propertyIsEnumerabl']('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{Code: `foo[1]('bar')`},
		{Code: `foo[null]('bar')`},
		{
			Code:            `class C { #hasOwnProperty; foo() { obj.#hasOwnProperty('bar'); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `foo['hasOwn' + 'Property']('bar')`},
		{
			Code:            "foo[`hasOwnProperty${''}`]('bar')",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
	}, []InvalidTestCase{
		{
			Code: `foo.hasOwnProperty('bar')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 19,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.hasOwnProperty.call(foo, 'bar')`,
						},
					},
				},
			},
		},
		{
			Code: `foo.isPrototypeOf('bar')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 18,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.isPrototypeOf.call(foo, 'bar')`,
						},
					},
				},
			},
		},
		{
			Code: `foo.propertyIsEnumerable('bar')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 25,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.propertyIsEnumerable.call(foo, 'bar')`,
						},
					},
				},
			},
		},
		{
			Code: `foo.bar.hasOwnProperty('bar')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 23,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.hasOwnProperty.call(foo.bar, 'bar')`,
						},
					},
				},
			},
		},
		{
			Code: `foo.bar.baz.isPrototypeOf('bar')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 26,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.isPrototypeOf.call(foo.bar.baz, 'bar')`,
						},
					},
				},
			},
		},
		{
			Code: `foo['hasOwnProperty']('bar')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 21,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.hasOwnProperty.call(foo, 'bar')`,
						},
					},
				},
			},
		},
		{
			Code:            "foo[`isPrototypeOf`]('bar').baz",
			LanguageOptions: "{\"ecmaVersion\":2015}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 20,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.isPrototypeOf.call(foo, 'bar').baz`,
						},
					},
				},
			},
		},
		{
			Code: `foo.bar["propertyIsEnumerable"]('baz')`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 31,
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.propertyIsEnumerable.call(foo.bar, 'baz')`,
						},
					},
				},
			},
		},
		{
			Code: `(function(Object) {return foo.hasOwnProperty('bar');})`,
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.hasOwnProperty('bar')`,
			LanguageOptions: "{\"globals\":{\"Object\":\"off\"}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo?.hasOwnProperty('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo?.bar.hasOwnProperty('baz')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.hasOwnProperty?.('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo?.hasOwnProperty('bar').baz`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo.hasOwnProperty('bar')?.baz`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.hasOwnProperty.call(foo, 'bar')?.baz`,
						},
					},
				},
			},
		},
		{
			Code:            `(a,b).hasOwnProperty('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "callObjectPrototype",
							Output:    `Object.prototype.hasOwnProperty.call((a,b), 'bar')`,
						},
					},
				},
			},
		},
		{
			Code:            `(foo?.hasOwnProperty)('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `(foo?.hasOwnProperty)?.('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            `foo?.['hasOwnProperty']('bar')`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
		{
			Code:            "(foo?.[`hasOwnProperty`])('bar')",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId:   "prototypeBuildIn",
					Suggestions: []InvalidTestCaseSuggestion{},
				},
			},
		},
	})
}
