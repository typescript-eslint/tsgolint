// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoDupeClassMembersRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"parser\":{\"version\":\"8.30.1\",\"meta\":{\"name\":\"typescript-eslint/parser\",\"version\":\"8.30.1\"}}}}", "no-dupe-class-members", []ValidTestCase{
		{Code: `
		  class A {
			foo() {}
			bar() {}
		  }
			  `},
		{Code: `
		  class A {
			static foo() {}
			foo() {}
		  }
			  `},
		{Code: `
		  class A {
			get foo() {}
			set foo(value) {}
		  }
			  `},
		{Code: `
		  class A {
			static foo() {}
			get foo() {}
			set foo(value) {}
		  }
			  `},
		{Code: `
		  class A {
			foo() {}
		  }
		  class B {
			foo() {}
		  }
			  `},
		{Code: `
		  class A {
			[foo]() {}
			foo() {}
		  }
			  `},
		{Code: `
		  class A {
			foo() {}
			bar() {}
			baz() {}
		  }
			  `},
		{Code: `
		  class A {
			*foo() {}
			*bar() {}
			*baz() {}
		  }
			  `},
		{Code: `
		  class A {
			get foo() {}
			get bar() {}
			get baz() {}
		  }
			  `},
		{Code: `
		  class A {
			1() {}
			2() {}
		  }
			  `},
		{Code: `
		class Foo {
		  foo(a: string): string;
		  foo(a: number): number;
		  foo(a: any): any {}
		}
	  `},
	}, []InvalidTestCase{
		{
			Code: `
  class A {
	foo() {}
    foo() {}
  }
		`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    5,
				},
			},
		},
		{
			Code: `
		  !class A {
			foo() {}
			foo() {}
		  };
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			'foo'() {}
			'foo'() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			10() {}
			1e1() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			foo() {}
			foo() {}
			foo() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
				{
					MessageId: "unexpected",
					Line:      5,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			static foo() {}
			static foo() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			foo() {}
			get foo() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			set foo(value) {}
			foo() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			foo;
			foo = 42;
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
		{
			Code: `
		  class A {
			foo;
			foo() {}
		  }
				`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      4,
					Column:    4,
				},
			},
		},
	})
}
