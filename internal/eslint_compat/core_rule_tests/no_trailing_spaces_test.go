// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoTrailingSpacesRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-trailing-spaces", []ValidTestCase{
		{
			Code:    `var a = 5;`,
			Options: "[{}]",
		},
		{
			Code: `var a = 5,
    b = 3;`,
			Options: "[{}]",
		},
		{Code: `var a = 5;`},
		{Code: `var a = 5,
    b = 3;`},
		{
			Code: `var a = 5,
    b = 3;`,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code:    `     `,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code:    `	`,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code: `     
    var c = 1;`,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code: `	
	var c = 2;`,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code: `
   var c = 3;`,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code: `
	var c = 4;`,
			Options: "[{\"skipBlankLines\":true}]",
		},
		{
			Code: `let str = ` + "`" + `${a}
   
${b}` + "`" + `;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `let str = ` + "`" + `${a}
   
${b}` + "`" + `;
   
   `,
			Options:         "[{\"skipBlankLines\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `// Trailing comment test. `,
			Options: "[{\"ignoreComments\":true}]",
		},
		{
			Code:    `// Trailing comment test.`,
			Options: "[{\"ignoreComments\":false}]",
		},
		{
			Code:    `// Trailing comment test.`,
			Options: "[]",
		},
		{
			Code: `/* 
Trailing comments test. 
*/`,
			Options: "[{\"ignoreComments\":true}]",
		},
		{
			Code:    `#!/usr/bin/env node `,
			Options: "[{\"ignoreComments\":true}]",
		},
		{
			Code: `/* 
 */ // `,
			Options: "[{\"ignoreComments\":true}]",
		},
		{
			Code: `/* 
 */ /* 
 */`,
			Options: "[{\"ignoreComments\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `var short2 = true;` + "\r" + `
` + "\r" + `
module.exports = {` + "\r" + `
  short: short,    ` + "\r" + `
  short2: short` + "\r" + `
}`,
			Output: `var short2 = true;` + "\r" + `
` + "\r" + `
module.exports = {` + "\r" + `
  short: short,` + "\r" + `
  short2: short` + "\r" + `
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var short2 = true;
` + "\r" + `
module.exports = {` + "\r" + `
  short: short,    ` + "\r" + `
  short2: short
}`,
			Output: `var short2 = true;
` + "\r" + `
module.exports = {` + "\r" + `
  short: short,` + "\r" + `
  short2: short
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var short2 = true;

module.exports = {
  short: short,    
  short2: short
}
`,
			Output: `var short2 = true;

module.exports = {
  short: short,
  short2: short
}
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var short2 = true;

module.exports = {
  short,    
  short2
}
`,
			Output: `var short2 = true;

module.exports = {
  short,
  short2
}
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `
measAr.push("<dl></dl>",  
         " </dt><dd class ='pta-res'>");`,
			Output: `
measAr.push("<dl></dl>",
         " </dt><dd class ='pta-res'>");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `measAr.push("<dl></dl>",  
         " </dt><dd class ='pta-res'>");`,
			Output: `measAr.push("<dl></dl>",
         " </dt><dd class ='pta-res'>");`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 5;      
`,
			Output: `var a = 5;
`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 5; 
 b = 3; `,
			Output: `var a = 5;
 b = 3;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 5; 

 b = 3; `,
			Output: `var a = 5;

 b = 3;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 5;	
  b = 3;`,
			Output: `var a = 5;
  b = 3;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `     
    var c = 1;`,
			Output: `
    var c = 1;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `	
	var c = 2;`,
			Output: `
	var c = 2;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 5;      
`,
			Output: `var a = 5;
`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 5; 
 b = 3; `,
			Output: `var a = 5;
 b = 3;`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `var a = 5;	
  b = 3;`,
			Output: `var a = 5;
  b = 3;`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `     
    var c = 1;`,
			Output: `
    var c = 1;`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `	
	var c = 2;`,
			Output: `
	var c = 2;`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
				},
			},
		},
		{
			Code: `var a = 'bar';  
 
	`,
			Output: `var a = 'bar';
 
	`,
			Options: "[{\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `var a = 'foo';   
var b = 'bar';  
  
`,
			Output: `var a = 'foo';
var b = 'bar';
  
`,
			Options: "[{\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 18,
				},
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    15,
					EndLine:   2,
					EndColumn: 17,
				},
			},
		},
		{
			Code: `let str = ` + "`" + `${a}
  
${b}` + "`" + `;  
`,
			Output: `let str = ` + "`" + `${a}
  
${b}` + "`" + `;
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      3,
					Column:    7,
					EndLine:   3,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `let str = ` + "`" + `
${a}
  
${b}` + "`" + `;  
	`,
			Output: `let str = ` + "`" + `
${a}
  
${b}` + "`" + `;
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      4,
					Column:    7,
					EndLine:   4,
					EndColumn: 9,
				},
				{
					MessageId: "trailingSpace",
					Line:      5,
					Column:    1,
					EndLine:   5,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `let str = ` + "`" + `  
  ${a}
  
${b}` + "`" + `;  
`,
			Output: `let str = ` + "`" + `  
  ${a}
  
${b}` + "`" + `;
`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      4,
					Column:    7,
					EndLine:   4,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `let str = ` + "`" + `${a}
  
${b}` + "`" + `;  
  
`,
			Output: `let str = ` + "`" + `${a}
  
${b}` + "`" + `;
  
`,
			Options:         "[{\"skipBlankLines\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      3,
					Column:    7,
					EndLine:   3,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `    
abcdefg `,
			Output: `    
abcdefg`,
			Options: "[{\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `    
abcdefg `,
			Output: `
abcdefg`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    1,
					EndLine:   1,
					EndColumn: 5,
				},
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `var foo = 'bar'; `,
			Output:  `var foo = 'bar';`,
			Options: "[{\"ignoreComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:    `/* */ `,
			Output:  `/* */`,
			Options: "[{\"ignoreComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code:    `/* */foo `,
			Output:  `/* */foo`,
			Options: "[{\"ignoreComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code: `/* 
 */ `,
			Output: `/* 
 */`,
			Options: "[{\"ignoreComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    4,
				},
			},
		},
		{
			Code: `/* 
 */ foo `,
			Output: `/* 
 */ foo`,
			Options: "[{\"ignoreComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    8,
				},
			},
		},
		{
			Code:    `// Trailing comment test. `,
			Output:  `// Trailing comment test.`,
			Options: "[{\"ignoreComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `/* 
Trailing comments test. 
*/`,
			Output: `/*
Trailing comments test.
*/`,
			Options: "[{\"ignoreComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    3,
					EndLine:   1,
					EndColumn: 4,
				},
				{
					MessageId: "trailingSpace",
					Line:      2,
					Column:    24,
					EndLine:   2,
					EndColumn: 25,
				},
			},
		},
		{
			Code:    `#!/usr/bin/env node `,
			Output:  `#!/usr/bin/env node`,
			Options: "[{\"ignoreComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:    `// Trailing comment default test. `,
			Output:  `// Trailing comment default test.`,
			Options: "[]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "trailingSpace",
					Line:      1,
					Column:    34,
					EndLine:   1,
					EndColumn: 35,
				},
			},
		},
	})
}
