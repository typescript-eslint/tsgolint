// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestObjectCurlySpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "object-curly-spacing", []ValidTestCase{
		{
			Code:    `var obj = { foo: bar, baz: qux };`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = { foo: { bar: quxx }, baz: qux };`,
			Options: "[\"always\"]",
		},
		{
			Code: `var obj = {
foo: bar,
baz: qux
};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = { /**/foo:bar/**/ };`,
			Options: "[\"always\"]",
		},
		{
			Code: `var obj = { //
foo:bar };`,
			Options: "[\"always\"]",
		},
		{
			Code:            `var { x } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { x, y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { x,y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {
x,y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {
x,y
} = z`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { /**/x/**/ } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var { //
x } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { x = 10, y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { x: { z }, y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {
y,
} = x`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { y, } = x`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var { y: x } = x`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import door from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as door from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { door } from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
door } from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { /**/door/**/ } from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import { //
door } from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { door } from 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { house, mouse } from 'caravan'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import house, { mouse } from 'caravan'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import door, { house, mouse } from 'caravan'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var door = 0;export { door }`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import 'room'`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { bar as x } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { x, } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
x,
} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { x, } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export {
x,
} from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export { /**/x/**/ } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export { //
x } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var x = 1;
export { /**/x/**/ };`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var x = 1;
export { //
x };`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:    `var foo = {};`,
			Options: "[\"always\"]",
		},
		{
			Code:    `var obj = { 'foo': { 'bar': 1, 'baz': 2 }};`,
			Options: "[\"always\",{\"objectsInObjects\":false}]",
		},
		{
			Code:    `var a = { noop: function () {} };`,
			Options: "[\"always\",{\"objectsInObjects\":false}]",
		},
		{
			Code:            `var { y: { z }} = x`,
			Options:         "[\"always\",{\"objectsInObjects\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `var obj = { 'foo': [ 1, 2 ]};`,
			Options: "[\"always\",{\"arraysInObjects\":false}]",
		},
		{
			Code:    `var a = { thingInList: list[0] };`,
			Options: "[\"always\",{\"arraysInObjects\":false}]",
		},
		{
			Code:    `var obj = { 'qux': [ 1, 2 ], 'foo': { 'bar': 1, 'baz': 2 }};`,
			Options: "[\"always\",{\"arraysInObjects\":false,\"objectsInObjects\":false}]",
		},
		{
			Code:    `var obj = { 'foo': { 'bar': 1, 'baz': 2 }, 'qux': [ 1, 2 ]};`,
			Options: "[\"always\",{\"arraysInObjects\":false,\"objectsInObjects\":false}]",
		},
		{
			Code: `var obj = {foo: bar,
baz: qux
};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var obj = {
foo: bar,
baz: qux};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = {foo: {bar: quxx}, baz: qux};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var obj = {foo: {
bar: quxx}, baz: qux
};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var obj = {foo: {
bar: quxx
}, baz: qux};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var obj = {
foo: bar,
baz: qux
};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = {foo: bar, baz: qux /* */};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = {/* */ foo: bar, baz: qux};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var obj = {//
 foo: bar};`,
			Options: "[\"never\"]",
		},
		{
			Code: `var obj = { // line comment exception
 foo: bar};`,
			Options: "[\"never\"]",
		},
		{
			Code:            `var {x} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x,y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {
x,y
} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x = 10} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x = 10, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {x: {z}, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {
x: {z
}, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {
y,
} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {y,} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {y:x} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {/* */ y} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {y /* */} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var {//
 y} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code: `var { // line comment exception
 y} = x`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import door from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as door from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {/* */ door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {/* */ door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {door /* */} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {door /* */} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {//
 door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export {//
 door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var door = foo;
export {//
 door}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import { // line comment exception
 door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export { // line comment exception
 door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var door = foo; export { // line comment exception
 door}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
door} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export {
door
} from 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {house,mouse} from 'caravan'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {house, mouse} from 'caravan'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var door = 0;export {door}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import 'room'`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import x, {bar} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import x, {bar, baz} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {bar as y} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import {x,} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `import {
x,
} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {x,} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export {
x,
} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:    `var foo = {};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `var obj = {'foo': {'bar': 1, 'baz': 2} };`,
			Options: "[\"never\",{\"objectsInObjects\":true}]",
		},
		{
			Code:            `var {} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [] = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a: {}} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a: []} = foo;`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import {} from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {} from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {};`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `var {} = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var [] = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a: {}} = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var {a: []} = foo;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `import {} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `export {};`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `function foo ({a, b}: Props) {
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code:            `import {bar} from 'foo.js';`,
			Output:          `import { bar } from 'foo.js';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `import { bar as y} from 'foo.js';`,
			Output:          `import { bar as y } from 'foo.js';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    18,
					EndLine:   1,
					EndColumn: 19,
				},
			},
		},
		{
			Code:            `import {bar as y} from 'foo.js';`,
			Output:          `import { bar as y } from 'foo.js';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    17,
					EndLine:   1,
					EndColumn: 18,
				},
			},
		},
		{
			Code:            `import { bar} from 'foo.js';`,
			Output:          `import { bar } from 'foo.js';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `import x, { bar} from 'foo';`,
			Output:          `import x, { bar } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:            `import x, { bar/* */} from 'foo';`,
			Output:          `import x, { bar/* */ } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `import x, {/* */bar } from 'foo';`,
			Output:          `import x, { /* */bar } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `import x, {//
 bar } from 'foo';`,
			Output: `import x, { //
 bar } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `import x, { bar, baz} from 'foo';`,
			Output:          `import x, { bar, baz } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `import x, {bar} from 'foo';`,
			Output:          `import x, { bar } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `import x, {bar, baz} from 'foo';`,
			Output:          `import x, { bar, baz } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
		{
			Code:            `import {bar,} from 'foo';`,
			Output:          `import { bar, } from 'foo';`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:            `import { bar, } from 'foo';`,
			Output:          `import {bar,} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
		{
			Code:            `import { /* */ bar, /* */ } from 'foo';`,
			Output:          `import {/* */ bar, /* */} from 'foo';`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    26,
					EndLine:   1,
					EndColumn: 27,
				},
			},
		},
		{
			Code: `var bar = 0;
export {bar};`,
			Output: `var bar = 0;
export { bar };`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      2,
					Column:    12,
				},
			},
		},
		{
			Code: `var bar = 0;
export {/* */ bar /* */};`,
			Output: `var bar = 0;
export { /* */ bar /* */ };`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      2,
					Column:    24,
					EndLine:   2,
					EndColumn: 25,
				},
			},
		},
		{
			Code: `var bar = 0;
export {//
 bar };`,
			Output: `var bar = 0;
export { //
 bar };`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      2,
					Column:    8,
					EndLine:   2,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `var bar = 0;
export { /* */ bar /* */ };`,
			Output: `var bar = 0;
export {/* */ bar /* */};`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      2,
					Column:    9,
					EndLine:   2,
					EndColumn: 10,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    25,
					EndLine:   2,
					EndColumn: 26,
				},
			},
		},
		{
			Code:    `var obj = { 'foo': [ 1, 2 ] };`,
			Output:  `var obj = { 'foo': [ 1, 2 ]};`,
			Options: "[\"always\",{\"arraysInObjects\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    28,
					EndLine:   1,
					EndColumn: 29,
				},
			},
		},
		{
			Code:    `var obj = { 'foo': [ 1, 2 ] , 'bar': [ 'baz', 'qux' ] };`,
			Output:  `var obj = { 'foo': [ 1, 2 ] , 'bar': [ 'baz', 'qux' ]};`,
			Options: "[\"always\",{\"arraysInObjects\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    54,
					EndLine:   1,
					EndColumn: 55,
				},
			},
		},
		{
			Code:    `var obj = { 'foo': { 'bar': 1, 'baz': 2 } };`,
			Output:  `var obj = { 'foo': { 'bar': 1, 'baz': 2 }};`,
			Options: "[\"always\",{\"objectsInObjects\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    42,
					EndLine:   1,
					EndColumn: 43,
				},
			},
		},
		{
			Code:    `var obj = { 'foo': [ 1, 2 ] , 'bar': { 'baz': 1, 'qux': 2 } };`,
			Output:  `var obj = { 'foo': [ 1, 2 ] , 'bar': { 'baz': 1, 'qux': 2 }};`,
			Options: "[\"always\",{\"objectsInObjects\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    60,
					EndLine:   1,
					EndColumn: 61,
				},
			},
		},
		{
			Code:            `var { a,} = x;`,
			Output:          `var { a, } = x;`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:            `var {a, } = x;`,
			Output:          `var {a,} = x;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code:            `var {a:b } = x;`,
			Output:          `var {a:b} = x;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    9,
					EndLine:   1,
					EndColumn: 10,
				},
			},
		},
		{
			Code:            `var { a:b } = x;`,
			Output:          `var {a:b} = x;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `var {  a:b  } = x;`,
			Output:          `var {a:b} = x;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 8,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `var {   a:b    } = x;`,
			Output:          `var {a:b} = x;`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 9,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:    `var obj = {'foo': {'bar': 1, 'baz': 2}};`,
			Output:  `var obj = {'foo': {'bar': 1, 'baz': 2} };`,
			Options: "[\"never\",{\"objectsInObjects\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    39,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code:    `var obj = {'foo': [1, 2] , 'bar': {'baz': 1, 'qux': 2}};`,
			Output:  `var obj = {'foo': [1, 2] , 'bar': {'baz': 1, 'qux': 2} };`,
			Options: "[\"never\",{\"objectsInObjects\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    55,
					EndLine:   1,
					EndColumn: 56,
				},
			},
		},
		{
			Code:    `var obj = {foo: bar, baz: qux};`,
			Output:  `var obj = { foo: bar, baz: qux };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code:    `var obj = {foo: bar, baz: qux };`,
			Output:  `var obj = { foo: bar, baz: qux };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `var obj = {/* */foo: bar, baz: qux };`,
			Output:  `var obj = { /* */foo: bar, baz: qux };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code: `var obj = {//
 foo: bar };`,
			Output: `var obj = { //
 foo: bar };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:    `var obj = { foo: bar, baz: qux};`,
			Output:  `var obj = { foo: bar, baz: qux };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    31,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code:    `var obj = { foo: bar, baz: qux/* */};`,
			Output:  `var obj = { foo: bar, baz: qux/* */ };`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    36,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code:    `var obj = { foo: bar, baz: qux };`,
			Output:  `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    31,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code:    `var obj = {  foo: bar, baz: qux };`,
			Output:  `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    32,
					EndLine:   1,
					EndColumn: 33,
				},
			},
		},
		{
			Code:    `var obj = {foo: bar, baz: qux };`,
			Output:  `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 31,
				},
			},
		},
		{
			Code:    `var obj = {foo: bar, baz: qux  };`,
			Output:  `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    30,
					EndLine:   1,
					EndColumn: 32,
				},
			},
		},
		{
			Code:    `var obj = {foo: bar, baz: qux /* */ };`,
			Output:  `var obj = {foo: bar, baz: qux /* */};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    36,
					EndLine:   1,
					EndColumn: 37,
				},
			},
		},
		{
			Code:    `var obj = { foo: bar, baz: qux};`,
			Output:  `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var obj = {  foo: bar, baz: qux};`,
			Output:  `var obj = {foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:    `var obj = { /* */ foo: bar, baz: qux};`,
			Output:  `var obj = {/* */ foo: bar, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var obj = { // line comment exception
 foo: bar };`,
			Output: `var obj = { // line comment exception
 foo: bar};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      2,
					Column:    10,
					EndLine:   2,
					EndColumn: 11,
				},
			},
		},
		{
			Code:    `var obj = { foo: { bar: quxx}, baz: qux};`,
			Output:  `var obj = {foo: {bar: quxx}, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:    `var obj = {foo: {bar: quxx }, baz: qux };`,
			Output:  `var obj = {foo: {bar: quxx}, baz: qux};`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 28,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    39,
					EndLine:   1,
					EndColumn: 40,
				},
			},
		},
		{
			Code:            `export const thing = {value: 1 };`,
			Output:          `export const thing = { value: 1 };`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:            `var {x, y} = y`,
			Output:          `var { x, y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `var { x, y} = y`,
			Output:          `var { x, y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `var { x, y/* */} = y`,
			Output:          `var { x, y/* */ } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    16,
					EndLine:   1,
					EndColumn: 17,
				},
			},
		},
		{
			Code:            `var {/* */x, y } = y`,
			Output:          `var { /* */x, y } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code: `var {//
 x } = y`,
			Output: `var { //
 x } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code:            `var { x, y } = y`,
			Output:          `var {x, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `var {x, y } = y`,
			Output:          `var {x, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    10,
					EndLine:   1,
					EndColumn: 11,
				},
			},
		},
		{
			Code:            `var {x, y/* */ } = y`,
			Output:          `var {x, y/* */} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `var { /* */x, y} = y`,
			Output:          `var {/* */x, y} = y`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceAfter",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code:            `var { x=10} = y`,
			Output:          `var { x=10 } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    11,
					EndLine:   1,
					EndColumn: 12,
				},
			},
		},
		{
			Code:            `var {x=10 } = y`,
			Output:          `var { x=10 } = y`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceAfter",
					Line:      1,
					Column:    5,
					EndLine:   1,
					EndColumn: 6,
				},
			},
		},
		{
			Code:    `var obj = {'foo': [1, 2]};`,
			Output:  `var obj = {'foo': [1, 2] };`,
			Options: "[\"never\",{\"arraysInObjects\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    25,
					EndLine:   1,
					EndColumn: 26,
				},
			},
		},
		{
			Code:    `var obj = {'foo': [1, 2] , 'bar': ['baz', 'qux']};`,
			Output:  `var obj = {'foo': [1, 2] , 'bar': ['baz', 'qux'] };`,
			Options: "[\"never\",{\"arraysInObjects\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireSpaceBefore",
					Line:      1,
					Column:    49,
					EndLine:   1,
					EndColumn: 50,
				},
			},
		},
		{
			Code: `function foo ({a, b }: Props) {
}`,
			Output: `function foo ({a, b}: Props) {
}`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedSpaceBefore",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 21,
				},
			},
		},
	})
}
