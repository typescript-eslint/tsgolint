// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessRenameRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"module\"}}", "no-useless-rename", []ValidTestCase{
		{Code: `let {foo} = obj;`},
		{Code: `let {foo: bar} = obj;`},
		{Code: `let {foo: bar, baz: qux} = obj;`},
		{Code: `let {foo: {bar: baz}} = obj;`},
		{Code: `let {foo, bar: {baz: qux}} = obj;`},
		{Code: `let {'foo': bar} = obj;`},
		{Code: `let {'foo': bar, 'baz': qux} = obj;`},
		{Code: `let {'foo': {'bar': baz}} = obj;`},
		{Code: `let {foo, 'bar': {'baz': qux}} = obj;`},
		{Code: `let {['foo']: bar} = obj;`},
		{Code: `let {['foo']: bar, ['baz']: qux} = obj;`},
		{Code: `let {['foo']: {['bar']: baz}} = obj;`},
		{Code: `let {foo, ['bar']: {['baz']: qux}} = obj;`},
		{Code: `let {[foo]: foo} = obj;`},
		{Code: `let {['foo']: foo} = obj;`},
		{Code: `let {[foo]: bar} = obj;`},
		{Code: `function func({foo}) {}`},
		{Code: `function func({foo: bar}) {}`},
		{Code: `function func({foo: bar, baz: qux}) {}`},
		{Code: `({foo}) => {}`},
		{Code: `({foo: bar}) => {}`},
		{Code: `({foo: bar, baz: qui}) => {}`},
		{Code: `import * as foo from 'foo';`},
		{Code: `import foo from 'foo';`},
		{Code: `import {foo} from 'foo';`},
		{Code: `import {foo as bar} from 'foo';`},
		{Code: `import {foo as bar, baz as qux} from 'foo';`},
		{
			Code:            `import {'foo' as bar} from 'baz';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `export {foo} from 'foo';`},
		{Code: `var foo = 0;export {foo as bar};`},
		{Code: `var foo = 0; var baz = 0; export {foo as bar, baz as qux};`},
		{Code: `export {foo as bar} from 'foo';`},
		{Code: `export {foo as bar, baz as qux} from 'foo';`},
		{
			Code:            `var foo = 0; export {foo as 'bar'};`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export {foo as 'bar'} from 'baz';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export {'foo' as bar} from 'baz';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export {'foo' as 'bar'} from 'baz';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export {'' as ' '} from 'baz';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export {' ' as ''} from 'baz';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `export {'foo'} from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `const {...stuff} = myObject;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `const {foo, ...stuff} = myObject;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `const {foo: bar, ...stuff} = myObject;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:    `let {foo: foo} = obj;`,
			Options: "[{\"ignoreDestructuring\":true}]",
		},
		{
			Code:    `let {foo: foo, bar: baz} = obj;`,
			Options: "[{\"ignoreDestructuring\":true}]",
		},
		{
			Code:    `let {foo: foo, bar: bar} = obj;`,
			Options: "[{\"ignoreDestructuring\":true}]",
		},
		{
			Code:    `import {foo as foo} from 'foo';`,
			Options: "[{\"ignoreImport\":true}]",
		},
		{
			Code:    `import {foo as foo, bar as baz} from 'foo';`,
			Options: "[{\"ignoreImport\":true}]",
		},
		{
			Code:    `import {foo as foo, bar as bar} from 'foo';`,
			Options: "[{\"ignoreImport\":true}]",
		},
		{
			Code:    `var foo = 0;export {foo as foo};`,
			Options: "[{\"ignoreExport\":true}]",
		},
		{
			Code:    `var foo = 0;var bar = 0;export {foo as foo, bar as baz};`,
			Options: "[{\"ignoreExport\":true}]",
		},
		{
			Code:    `var foo = 0;var bar = 0;export {foo as foo, bar as bar};`,
			Options: "[{\"ignoreExport\":true}]",
		},
		{
			Code:    `export {foo as foo} from 'foo';`,
			Options: "[{\"ignoreExport\":true}]",
		},
		{
			Code:    `export {foo as foo, bar as baz} from 'foo';`,
			Options: "[{\"ignoreExport\":true}]",
		},
		{
			Code:    `export {foo as foo, bar as bar} from 'foo';`,
			Options: "[{\"ignoreExport\":true}]",
		},
		{
			Code:            `const { ...foo } = bar;`,
			LanguageOptions: "{\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code:   `let {foo: foo} = obj;`,
			Output: `let {foo} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: (foo)} = obj);`,
			Output: `({foo} = obj);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {\u0061: a} = obj;`,
			Output: `let {a} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {a: \u0061} = obj;`,
			Output: `let {\u0061} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {\u0061: \u0061} = obj;`,
			Output: `let {\u0061} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {a, foo: foo} = obj;`,
			Output: `let {a, foo} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: foo, bar: baz} = obj;`,
			Output: `let {foo, bar: baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: bar, baz: baz} = obj;`,
			Output: `let {foo: bar, baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: foo, bar: bar} = obj;`,
			Output: `let {foo, bar} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: {bar: bar}} = obj;`,
			Output: `let {foo: {bar}} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: {bar: bar}, baz: baz} = obj;`,
			Output: `let {foo: {bar}, baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {'foo': foo} = obj;`,
			Output: `let {foo} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {'foo': foo, 'bar': baz} = obj;`,
			Output: `let {foo, 'bar': baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {'foo': bar, 'baz': baz} = obj;`,
			Output: `let {'foo': bar, baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {'foo': foo, 'bar': bar} = obj;`,
			Output: `let {foo, bar} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {'foo': {'bar': bar}} = obj;`,
			Output: `let {'foo': {bar}} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {'foo': {'bar': bar}, 'baz': baz} = obj;`,
			Output: `let {'foo': {bar}, baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: foo = 1, 'bar': bar = 1, baz: baz} = obj;`,
			Output: `let {foo = 1, bar = 1, baz} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: {bar: bar = 1, 'baz': baz = 1}} = obj;`,
			Output: `let {foo: {bar = 1, baz = 1}} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: {bar: bar = {}} = {}} = obj;`,
			Output: `let {foo: {bar = {}} = {}} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: (foo) = a} = obj);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: foo = (a)} = obj;`,
			Output: `let {foo = (a)} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let {foo: foo = (a, b)} = obj;`,
			Output: `let {foo = (a, b)} = obj;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: foo}) {}`,
			Output: `function func({foo}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: foo, bar: baz}) {}`,
			Output: `function func({foo, bar: baz}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: bar, baz: baz}) {}`,
			Output: `function func({foo: bar, baz}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: foo, bar: bar}) {}`,
			Output: `function func({foo, bar}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: foo = 1, 'bar': bar = 1, baz: baz}) {}`,
			Output: `function func({foo = 1, bar = 1, baz}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: {bar: bar = 1, 'baz': baz = 1}}) {}`,
			Output: `function func({foo: {bar = 1, baz = 1}}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `function func({foo: {bar: bar = {}} = {}}) {}`,
			Output: `function func({foo: {bar = {}} = {}}) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo}) => {}`,
			Output: `({foo}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo, bar: baz}) => {}`,
			Output: `({foo, bar: baz}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: bar, baz: baz}) => {}`,
			Output: `({foo: bar, baz}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo, bar: bar}) => {}`,
			Output: `({foo, bar}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo = 1, 'bar': bar = 1, baz: baz}) => {}`,
			Output: `({foo = 1, bar = 1, baz}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: {bar: bar = 1, 'baz': baz = 1}}) => {}`,
			Output: `({foo: {bar = 1, baz = 1}}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: {bar: bar = {}} = {}}) => {}`,
			Output: `({foo: {bar = {}} = {}}) => {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `const {foo: foo, ...stuff} = myObject;`,
			Output:          `const {foo, ...stuff} = myObject;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `const {foo: foo, bar: baz, ...stuff} = myObject;`,
			Output:          `const {foo, bar: baz, ...stuff} = myObject;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `const {foo: foo, bar: bar, ...stuff} = myObject;`,
			Output:          `const {foo, bar, ...stuff} = myObject;`,
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo as foo} from 'foo';`,
			Output: `import {foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `import {'foo' as foo} from 'foo';`,
			Output:          `import {foo} from 'foo';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {\u0061 as a} from 'foo';`,
			Output: `import {a} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {a as \u0061} from 'foo';`,
			Output: `import {\u0061} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {\u0061 as \u0061} from 'foo';`,
			Output: `import {\u0061} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo as foo, bar as baz} from 'foo';`,
			Output: `import {foo, bar as baz} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo as bar, baz as baz} from 'foo';`,
			Output: `import {foo as bar, baz} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo as foo, bar as bar} from 'foo';`,
			Output: `import {foo, bar} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var foo = 0; export {foo as foo};`,
			Output: `var foo = 0; export {foo};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `var foo = 0; export {foo as 'foo'};`,
			Output:          `var foo = 0; export {foo};`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `export {foo as 'foo'} from 'bar';`,
			Output:          `export {foo} from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `export {'foo' as foo} from 'bar';`,
			Output:          `export {'foo'} from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `export {'foo' as 'foo'} from 'bar';`,
			Output:          `export {'foo'} from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `export {' 👍 ' as ' 👍 '} from 'bar';`,
			Output:          `export {' 👍 '} from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:            `export {'' as ''} from 'bar';`,
			Output:          `export {''} from 'bar';`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var a = 0; export {a as \u0061};`,
			Output: `var a = 0; export {a};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var \u0061 = 0; export {\u0061 as a};`,
			Output: `var \u0061 = 0; export {\u0061};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var \u0061 = 0; export {\u0061 as \u0061};`,
			Output: `var \u0061 = 0; export {\u0061};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var foo = 0; var bar = 0; export {foo as foo, bar as baz};`,
			Output: `var foo = 0; var bar = 0; export {foo, bar as baz};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var foo = 0; var baz = 0; export {foo as bar, baz as baz};`,
			Output: `var foo = 0; var baz = 0; export {foo as bar, baz};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var foo = 0; var bar = 0;export {foo as foo, bar as bar};`,
			Output: `var foo = 0; var bar = 0;export {foo, bar};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `export {foo as foo} from 'foo';`,
			Output: `export {foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `export {a as \u0061} from 'foo';`,
			Output: `export {a} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `export {\u0061 as a} from 'foo';`,
			Output: `export {\u0061} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `export {\u0061 as \u0061} from 'foo';`,
			Output: `export {\u0061} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `export {foo as foo, bar as baz} from 'foo';`,
			Output: `export {foo, bar as baz} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `var foo = 0; var bar = 0; export {foo as bar, baz as baz} from 'foo';`,
			Output: `var foo = 0; var bar = 0; export {foo as bar, baz} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `export {foo as foo, bar as bar} from 'foo';`,
			Output: `export {foo, bar} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({/* comment */foo: foo} = {});`,
			Output: `({/* comment */foo} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({/* comment */foo: foo = 1} = {});`,
			Output: `({/* comment */foo = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo, /* comment */bar: bar} = {});`,
			Output: `({foo, /* comment */bar} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo/**/ : foo} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo/**/ : foo = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo /**/: foo} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo /**/: foo = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo://
foo} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: /**/foo} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: (/**/foo)} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: (foo/**/)} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: (foo //
)} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: /**/foo = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: (/**/foo) = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: (foo/**/) = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo/* comment */} = {});`,
			Output: `({foo/* comment */} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: foo//comment
,bar} = {});`,
			Output: `({foo//comment
,bar} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo/* comment */ = 1} = {});`,
			Output: `({foo/* comment */ = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: foo // comment
 = 1} = {});`,
			Output: `({foo // comment
 = 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo = /* comment */ 1} = {});`,
			Output: `({foo = /* comment */ 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `({foo: foo = // comment
 1} = {});`,
			Output: `({foo = // comment
 1} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `({foo: foo = (1/* comment */)} = {});`,
			Output: `({foo = (1/* comment */)} = {});`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {/* comment */foo as foo} from 'foo';`,
			Output: `import {/* comment */foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo,/* comment */bar as bar} from 'foo';`,
			Output: `import {foo,/* comment */bar} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `import {foo/**/ as foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `import {foo /**/as foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `import {foo //
as foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `import {foo as/**/foo} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo as foo/* comment */} from 'foo';`,
			Output: `import {foo/* comment */} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `import {foo as foo/* comment */,bar} from 'foo';`,
			Output: `import {foo/* comment */,bar} from 'foo';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let foo; export {/* comment */foo as foo};`,
			Output: `let foo; export {/* comment */foo};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let foo, bar; export {foo,/* comment */bar as bar};`,
			Output: `let foo, bar; export {foo,/* comment */bar};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `let foo; export {foo/**/as foo};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `let foo; export {foo as/**/ foo};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `let foo; export {foo as /**/foo};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `let foo; export {foo as//comment
 foo};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let foo; export {foo as foo/* comment*/};`,
			Output: `let foo; export {foo/* comment*/};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code:   `let foo, bar; export {foo as foo/* comment*/,bar};`,
			Output: `let foo, bar; export {foo/* comment*/,bar};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
		{
			Code: `let foo, bar; export {foo as foo//comment
,bar};`,
			Output: `let foo, bar; export {foo//comment
,bar};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyRenamed",
				},
			},
		},
	})
}
