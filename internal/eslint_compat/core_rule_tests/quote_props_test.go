// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestQuotePropsRule(t *testing.T) {
	RunRuleTester(t, "{}", "quote-props", []ValidTestCase{
		{Code: `({ '0': 0 })`},
		{Code: `({ 'a': 0 })`},
		{Code: `({ "a": 0 })`},
		{Code: `({ 'null': 0 })`},
		{Code: `({ 'true': 0 })`},
		{Code: `({ 'a-b': 0 })`},
		{Code: `({ 'if': 0 })`},
		{Code: `({ '@': 0 })`},
		{
			Code:            `({ 'a': 0, b(){} })`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ [x]: 0 });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ x });`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: 0, b(){} })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: 0, [x]: 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: 0, x })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ '@': 0, [x]: 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ '@': 0, x })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `({ a: 0, b: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, 0: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, true: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, null: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, if: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, while: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, volatile: 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, '-b': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, '@': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ a: 0, '0x0': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ ' 0': 0, '0x0': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ '0 ': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ 'hey//meh': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ 'hey/*meh': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ 'hey/*meh*/': 0 })`,
			Options: "[\"as-needed\"]",
		},
		{
			Code:    `({ 'a': 0, '-b': 0 })`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `({ 'true': 0, 'b': 0 })`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `({ null: 0, a: 0 })`,
			Options: "[\"consistent\"]",
		},
		{
			Code:    `({ a: 0, b: 0 })`,
			Options: "[\"consistent\"]",
		},
		{
			Code:            `({ 'a': 1, [x]: 0 });`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ 'a': 1, x });`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `({ a: 0, b: 0 })`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `({ a: 0, null: 0 })`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `({ 'a': 0, '-b': 0 })`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `({ '@': 0, 'B': 0 })`,
			Options: "[\"consistent-as-needed\"]",
		},
		{
			Code:    `({ 'while': 0, 'B': 0 })`,
			Options: "[\"consistent-as-needed\",{\"keywords\":true}]",
		},
		{
			Code:    `({ '@': 0, 'B': 0 })`,
			Options: "[\"consistent-as-needed\",{\"keywords\":true}]",
		},
		{
			Code:            `({ '@': 1, [x]: 0 });`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ '@': 1, x });`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: 1, [x]: 0 });`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `({ a: 1, x });`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `({ a: 0, 'if': 0 })`,
			Options: "[\"as-needed\",{\"keywords\":true}]",
		},
		{
			Code:    `({ a: 0, 'while': 0 })`,
			Options: "[\"as-needed\",{\"keywords\":true}]",
		},
		{
			Code:    `({ a: 0, 'volatile': 0 })`,
			Options: "[\"as-needed\",{\"keywords\":true}]",
		},
		{
			Code:    `({'unnecessary': 1, 'if': 0})`,
			Options: "[\"as-needed\",{\"keywords\":true,\"unnecessary\":false}]",
		},
		{
			Code:    `({'1': 1})`,
			Options: "[\"as-needed\",{\"numbers\":true}]",
		},
		{
			Code:    `({1: 1, x: 2})`,
			Options: "[\"consistent\",{\"numbers\":true}]",
		},
		{
			Code:    `({1: 1, x: 2})`,
			Options: "[\"consistent-as-needed\",{\"numbers\":true}]",
		},
		{
			Code:            `({ ...x })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `({ ...x })`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `({ ...x })`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `({ 1n: 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `({ 1n: 1 })`,
			Options:         "[\"as-needed\",{\"numbers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `({ 1n: 1 })`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `({ 1n: 1 })`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `({ '99999999999999999': 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `({ '1n': 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `({ 1_0: 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `({ 1_0: 1 })`,
			Options:         "[\"as-needed\",{\"numbers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `({ '1_0': 1 })`,
			Options:         "[\"as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `({ '1_0': 1 })`,
			Options:         "[\"as-needed\",{\"numbers\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `({ '1_0': 1 })`,
			Options:         "[\"as-needed\",{\"numbers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
		{
			Code:            `({ 1_0: 1, 1: 1 })`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
		},
	}, []InvalidTestCase{
		{
			Code:   `({ a: 0 })`,
			Output: `({ "a": 0 })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:   `({ 0: '0' })`,
			Output: `({ "0": '0' })`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:    `({ 'a': 0 })`,
			Output:  `({ a: 0 })`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ 'null': 0 })`,
			Output:  `({ null: 0 })`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ 'true': 0 })`,
			Output:  `({ true: 0 })`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ '0': 0 })`,
			Output:  `({ 0: 0 })`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ '-a': 0, b: 0 })`,
			Output:  `({ '-a': 0, "b": 0 })`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "inconsistentlyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ a: 0, 'b': 0 })`,
			Output:  `({ "a": 0, 'b': 0 })`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "inconsistentlyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ '-a': 0, b: 0 })`,
			Output:  `({ '-a': 0, "b": 0 })`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "inconsistentlyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ 'a': 0, 'b': 0 })`,
			Output:  `({ a: 0, b: 0 })`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code:            `({ 'a': 0, [x]: 0 })`,
			Output:          `({ a: 0, [x]: 0 })`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code:            `({ 'a': 0, x })`,
			Output:          `({ a: 0, x })`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code:    `({ 'true': 0, 'null': 0 })`,
			Output:  `({ true: 0, null: 0 })`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code:    `({ true: 0, 'null': 0 })`,
			Output:  `({ "true": 0, 'null': 0 })`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "inconsistentlyQuotedProperty",
				},
			},
		},
		{
			Code:    `({ 'a': 0, 'b': 0 })`,
			Output:  `({ a: 0, b: 0 })`,
			Options: "[\"consistent-as-needed\",{\"keywords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code:    `({ while: 0, b: 0 })`,
			Output:  `({ "while": 0, "b": 0 })`,
			Options: "[\"consistent-as-needed\",{\"keywords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireQuotesDueToReservedWord",
				},
				{
					MessageId: "requireQuotesDueToReservedWord",
				},
			},
		},
		{
			Code:    `({ while: 0, 'b': 0 })`,
			Output:  `({ "while": 0, 'b': 0 })`,
			Options: "[\"consistent-as-needed\",{\"keywords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "requireQuotesDueToReservedWord",
				},
			},
		},
		{
			Code:    `({ foo: 0, 'bar': 0 })`,
			Output:  `({ foo: 0, bar: 0 })`,
			Options: "[\"consistent-as-needed\",{\"keywords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code: `({
  /* a */ 'prop1' /* b */ : /* c */ value1 /* d */ ,
  /* e */ prop2 /* f */ : /* g */ value2 /* h */,
  /* i */ "prop3" /* j */ : /* k */ value3 /* l */
})`,
			Output: `({
  /* a */ 'prop1' /* b */ : /* c */ value1 /* d */ ,
  /* e */ "prop2" /* f */ : /* g */ value2 /* h */,
  /* i */ "prop3" /* j */ : /* k */ value3 /* l */
})`,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "inconsistentlyQuotedProperty",
				},
			},
		},
		{
			Code: `({
  /* a */ "foo" /* b */ : /* c */ value1 /* d */ ,
  /* e */ "bar" /* f */ : /* g */ value2 /* h */,
  /* i */ "baz" /* j */ : /* k */ value3 /* l */
})`,
			Output: `({
  /* a */ foo /* b */ : /* c */ value1 /* d */ ,
  /* e */ bar /* f */ : /* g */ value2 /* h */,
  /* i */ baz /* j */ : /* k */ value3 /* l */
})`,
			Options: "[\"consistent-as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "redundantQuoting",
				},
				{
					MessageId: "redundantQuoting",
				},
				{
					MessageId: "redundantQuoting",
				},
			},
		},
		{
			Code:    `({'if': 0})`,
			Output:  `({if: 0})`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyQuotedProperty",
				},
			},
		},
		{
			Code:    `({'synchronized': 0})`,
			Output:  `({synchronized: 0})`,
			Options: "[\"as-needed\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessarilyQuotedProperty",
				},
			},
		},
		{
			Code:    `({while: 0})`,
			Output:  `({"while": 0})`,
			Options: "[\"as-needed\",{\"keywords\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedReservedProperty",
				},
			},
		},
		{
			Code:    `({'unnecessary': 1, if: 0})`,
			Output:  `({'unnecessary': 1, "if": 0})`,
			Options: "[\"as-needed\",{\"keywords\":true,\"unnecessary\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedReservedProperty",
				},
			},
		},
		{
			Code:    `({1: 1})`,
			Output:  `({"1": 1})`,
			Options: "[\"as-needed\",{\"numbers\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedNumericProperty",
				},
			},
		},
		{
			Code:    `({1: 1})`,
			Output:  `({"1": 1})`,
			Options: "[\"always\",{\"numbers\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:    `({0x123: 1})`,
			Output:  `({"291": 1})`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:    `({1e2: 1})`,
			Output:  `({"100": 1})`,
			Options: "[\"always\",{\"numbers\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:    `({5.: 1})`,
			Output:  `({"5": 1})`,
			Options: "[\"always\",{\"numbers\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:            `({ 1n: 1 })`,
			Output:          `({ "1": 1 })`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:            `({ 1n: 1 })`,
			Output:          `({ "1": 1 })`,
			Options:         "[\"as-needed\",{\"numbers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedNumericProperty",
				},
			},
		},
		{
			Code:            `({ 1_0: 1 })`,
			Output:          `({ "10": 1 })`,
			Options:         "[\"as-needed\",{\"numbers\":true}]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedNumericProperty",
				},
			},
		},
		{
			Code:            `({ 1_2.3_4e0_2: 1 })`,
			Output:          `({ "1234": 1 })`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:            `({ 0b1_000: 1 })`,
			Output:          `({ "8": 1 })`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unquotedPropertyFound",
				},
			},
		},
		{
			Code:            `({ 1_000: a, '1_000': b })`,
			Output:          `({ "1000": a, '1_000': b })`,
			Options:         "[\"consistent-as-needed\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "inconsistentlyQuotedProperty",
				},
			},
		},
	})
}
