// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCapitalizedCommentsRule(t *testing.T) {
	RunRuleTester(t, "{}", "capitalized-comments", []ValidTestCase{
		{Code: `//Uppercase`},
		{Code: `// Uppercase`},
		{Code: `/*Uppercase */`},
		{Code: `/* Uppercase */`},
		{Code: `/*
Uppercase */`},
		{Code: `/** Uppercase */`},
		{Code: `/**
Uppercase */`},
		{Code: `//√úber`},
		{Code: `//Œ†`},
		{Code: `/* Uppercase
second line need not be uppercase */`},
		{Code: `// `},
		{Code: `//	`},
		{Code: `/* */`},
		{Code: `/*	*/`},
		{Code: `/*
*/`},
		{Code: `/*` + "\r" + `*/`},
		{Code: `/*` + "\r" + `
*/`},
		{Code: `/*‚Ä®*/`},
		{Code: `/*‚Ä©*/`},
		{Code: `//123`},
		{Code: `// 123`},
		{Code: `/*123*/`},
		{Code: `/* 123 */`},
		{Code: `/**123 */`},
		{Code: `/** 123 */`},
		{Code: `/**
123 */`},
		{Code: `/*
123 */`},
		{Code: `/*123
second line need not be uppercase */`},
		{Code: `/**
 * @fileoverview This is a file */`},
		{Code: `// jscs: enable`},
		{Code: `// jscs:disable`},
		{Code: `// eslint-disable-line`},
		{Code: `// eslint-disable-next-line`},
		{Code: `/* eslint semi:off */`},
		{Code: `/* eslint-env node */`},
		{Code: `/* istanbul ignore next */`},
		{Code: `/* jshint asi:true */`},
		{Code: `/* jscs: enable */`},
		{Code: `/* global var1, var2 */`},
		{Code: `/* global var1:true, var2 */`},
		{Code: `/* globals var1, var2 */`},
		{Code: `/* globals var1:true, var2 */`},
		{Code: `/* exported myVar */`},
		{Code: `#!foo`},
		{
			Code:    `#!foo`,
			Options: "[\"always\"]",
		},
		{
			Code:    `#!Foo`,
			Options: "[\"never\"]",
		},
		{Code: `#!/usr/bin/env node`},
		{
			Code:    `#!/usr/bin/env node`,
			Options: "[\"always\"]",
		},
		{
			Code:    `#!/usr/bin/env node`,
			Options: "[\"never\"]",
		},
		{
			Code:    `//Uppercase`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// Uppercase`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/*Uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* Uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*
Uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/** Uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**
Uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `//√úber`,
			Options: "[\"always\"]",
		},
		{
			Code:    `//Œ†`,
			Options: "[\"always\"]",
		},
		{
			Code: `/* Uppercase
second line need not be uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `//123`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// 123`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/*123*/`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/**123*/`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* 123 */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/** 123*/`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**
123*/`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*
123 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/*123
second line need not be uppercase */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**
 @todo: foobar
 */`,
			Options: "[\"always\"]",
		},
		{
			Code: `/**
 * @fileoverview This is a file */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// jscs: enable`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// jscs:disable`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// eslint-disable-line`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// eslint-disable-next-line`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* eslint semi:off */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* eslint-env node */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* istanbul ignore next */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* jshint asi:true */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* jscs: enable */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* global var1, var2 */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* global var1:true, var2 */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* globals var1, var2 */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* globals var1:true, var2 */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `/* exported myVar */`,
			Options: "[\"always\"]",
		},
		{
			Code:    `//lowercase`,
			Options: "[\"never\"]",
		},
		{
			Code:    `// lowercase`,
			Options: "[\"never\"]",
		},
		{
			Code:    `/*lowercase */`,
			Options: "[\"never\"]",
		},
		{
			Code:    `/* lowercase */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*
lowercase */`,
			Options: "[\"never\"]",
		},
		{
			Code:    `//√ºber`,
			Options: "[\"never\"]",
		},
		{
			Code:    `//œÄ`,
			Options: "[\"never\"]",
		},
		{
			Code: `/* lowercase
Second line need not be lowercase */`,
			Options: "[\"never\"]",
		},
		{
			Code:    `//123`,
			Options: "[\"never\"]",
		},
		{
			Code:    `// 123`,
			Options: "[\"never\"]",
		},
		{
			Code:    `/*123*/`,
			Options: "[\"never\"]",
		},
		{
			Code:    `/* 123 */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*
123 */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/*123
second line need not be uppercase */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/**
 @TODO: foobar
 */`,
			Options: "[\"never\"]",
		},
		{
			Code: `/**
 * @Fileoverview This is a file */`,
			Options: "[\"never\"]",
		},
		{
			Code:    `// matching`,
			Options: "[\"always\",{\"ignorePattern\":\"match\"}]",
		},
		{
			Code:    `// Matching`,
			Options: "[\"never\",{\"ignorePattern\":\"Match\"}]",
		},
		{
			Code:    `// bar`,
			Options: "[\"always\",{\"ignorePattern\":\"foo|bar\"}]",
		},
		{
			Code:    `// Bar`,
			Options: "[\"never\",{\"ignorePattern\":\"Foo|Bar\"}]",
		},
		{
			Code:    `foo(/* ignored */ a);`,
			Options: "[\"always\",{\"ignoreInlineComments\":true}]",
		},
		{
			Code:    `foo(/* Ignored */ a);`,
			Options: "[\"never\",{\"ignoreInlineComments\":true}]",
		},
		{
			Code: `foo(/*
ignored */ a);`,
			Options: "[\"always\",{\"ignoreInlineComments\":true}]",
		},
		{
			Code: `foo(/*
Ignored */ a);`,
			Options: "[\"never\",{\"ignoreInlineComments\":true}]",
		},
		{
			Code: `// This comment is valid since it is capitalized,
// and this one is valid since it follows a valid one,
// and same with this one.`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":true}]",
		},
		{
			Code: `/* This comment is valid since it is capitalized, */
/* and this one is valid since it follows a valid one, */
/* and same with this one. */`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":true}]",
		},
		{
			Code: `/*
 * This comment is valid since it is capitalized,
 */
/* and this one is valid since it follows a valid one, */
/*
 * and same with this one.
 */`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":true}]",
		},
		{
			Code: `// This comment is valid since it is capitalized,
// and this one is valid since it follows a valid one,
foo();
// This comment now has to be capitalized.`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":true}]",
		},
		{
			Code:    `// https://github.com`,
			Options: "[\"always\"]",
		},
		{
			Code:    `// HTTPS://GITHUB.COM`,
			Options: "[\"never\"]",
		},
		{
			Code: `// Valid capitalized line comment
/* Valid capitalized block comment */
// lineCommentIgnorePattern
/* blockCommentIgnorePattern */`,
			Options: "[\"always\",{\"line\":{\"ignorePattern\":\"lineCommentIgnorePattern\"},\"block\":{\"ignorePattern\":\"blockCommentIgnorePattern\"}}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `//lowercase`,
			Output: `//Lowercase`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `// lowercase`,
			Output: `// Lowercase`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `/*lowercase */`,
			Output: `/*Lowercase */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `/* lowercase */`,
			Output: `/* Lowercase */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `/** lowercase */`,
			Output: `/** Lowercase */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
lowercase */`,
			Output: `/*
Lowercase */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/**
lowercase */`,
			Output: `/**
Lowercase */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `//√ºber`,
			Output: `//√úber`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `//œÄ`,
			Output: `//Œ†`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/* lowercase
Second line need not be lowercase */`,
			Output: `/* Lowercase
Second line need not be lowercase */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `// ÍÆ≥ÍÆÉÍ≠π`,
			Output: `// ·è£ÍÆÉÍ≠π`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:   `/* ê≥°ê≥°ê≥° */`,
			Output: `/* ê≤°ê≥°ê≥° */`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//lowercase`,
			Output:  `//Lowercase`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `// lowercase`,
			Output:  `// Lowercase`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `/*lowercase */`,
			Output:  `/*Lowercase */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `/* lowercase */`,
			Output:  `/* Lowercase */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `/** lowercase */`,
			Output:  `/** Lowercase */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/**
lowercase */`,
			Output: `/**
Lowercase */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//√ºber`,
			Output:  `//√úber`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//œÄ`,
			Output:  `//Œ†`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/* lowercase
Second line need not be lowercase */`,
			Output: `/* Lowercase
Second line need not be lowercase */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//Uppercase`,
			Output:  `//uppercase`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `// Uppercase`,
			Output:  `// uppercase`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `/*Uppercase */`,
			Output:  `/*uppercase */`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `/* Uppercase */`,
			Output:  `/* uppercase */`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
Uppercase */`,
			Output: `/*
uppercase */`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//√úber`,
			Output:  `//√ºber`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//Œ†`,
			Output:  `//œÄ`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/* Uppercase
second line need not be uppercase */`,
			Output: `/* uppercase
second line need not be uppercase */`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `// ·≤í`,
			Output:  `// ·Éí`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `// ë¢¢`,
			Output:  `// ë£Ç`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//* jscs: enable`,
			Output:  `//* Jscs: enable`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//* jscs:disable`,
			Output:  `//* Jscs:disable`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//* eslint-disable-line`,
			Output:  `//* Eslint-disable-line`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `//* eslint-disable-next-line`,
			Output:  `//* Eslint-disable-next-line`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 * eslint semi:off */`,
			Output: `/*
 * Eslint semi:off */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 * eslint-env node */`,
			Output: `/*
 * Eslint-env node */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  istanbul ignore next */`,
			Output: `/*
 *  Istanbul ignore next */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  jshint asi:true */`,
			Output: `/*
 *  Jshint asi:true */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  jscs: enable */`,
			Output: `/*
 *  Jscs: enable */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  global var1, var2 */`,
			Output: `/*
 *  Global var1, var2 */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  global var1:true, var2 */`,
			Output: `/*
 *  Global var1:true, var2 */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  globals var1, var2 */`,
			Output: `/*
 *  Globals var1, var2 */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  globals var1:true, var2 */`,
			Output: `/*
 *  Globals var1:true, var2 */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `/*
 *  exported myVar */`,
			Output: `/*
 *  Exported myVar */`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `foo(/* invalid */a);`,
			Output:  `foo(/* Invalid */a);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code:    `foo(/* invalid */a);`,
			Output:  `foo(/* Invalid */a);`,
			Options: "[\"always\",{\"ignoreInlineComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    5,
				},
			},
		},
		{
			Code: `foo(a, // not an inline comment
b);`,
			Output: `foo(a, // Not an inline comment
b);`,
			Options: "[\"always\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `foo(a, /* not an inline comment */
b);`,
			Output: `foo(a, /* Not an inline comment */
b);`,
			Options: "[\"always\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `foo(a,
/* not an inline comment */b);`,
			Output: `foo(a,
/* Not an inline comment */b);`,
			Options: "[\"always\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `foo(a,
/* not an inline comment */
b);`,
			Output: `foo(a,
/* Not an inline comment */
b);`,
			Options: "[\"always\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `foo(a, // Not an inline comment
b);`,
			Output: `foo(a, // not an inline comment
b);`,
			Options: "[\"never\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `foo(a, /* Not an inline comment */
b);`,
			Output: `foo(a, /* not an inline comment */
b);`,
			Options: "[\"never\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    8,
				},
			},
		},
		{
			Code: `foo(a,
/* Not an inline comment */b);`,
			Output: `foo(a,
/* not an inline comment */b);`,
			Options: "[\"never\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `foo(a,
/* Not an inline comment */
b);`,
			Output: `foo(a,
/* not an inline comment */
b);`,
			Options: "[\"never\",{\"ignoreInlineComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:    `// not matching`,
			Output:  `// Not matching`,
			Options: "[\"always\",{\"ignorePattern\":\"ignored?\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `// Not matching`,
			Output:  `// not matching`,
			Options: "[\"never\",{\"ignorePattern\":\"ignored?\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `// This comment is valid since it is capitalized,
// and this one is valid since it follows a valid one,
foo();
// this comment is now invalid.`,
			Output: `// This comment is valid since it is capitalized,
// and this one is valid since it follows a valid one,
foo();
// This comment is now invalid.`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `// this comment is invalid since it is not capitalized,
// but this one is ignored since it is consecutive.`,
			Output: `// This comment is invalid since it is not capitalized,
// but this one is ignored since it is consecutive.`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `// This comment is invalid since it is not capitalized,
// But this one is ignored since it is consecutive.`,
			Output: `// this comment is invalid since it is not capitalized,
// But this one is ignored since it is consecutive.`,
			Options: "[\"never\",{\"ignoreConsecutiveComments\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code: `// This comment is valid since it is capitalized,
// but this one is invalid even if it follows a valid one.`,
			Output: `// This comment is valid since it is capitalized,
// But this one is invalid even if it follows a valid one.`,
			Options: "[\"always\",{\"ignoreConsecutiveComments\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:    `// should fail. https://github.com`,
			Output:  `// Should fail. https://github.com`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLowercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
		{
			Code:    `// Should fail. https://github.com`,
			Output:  `// should fail. https://github.com`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedUppercaseComment",
					Line:      1,
					Column:    1,
				},
			},
		},
	})
}
