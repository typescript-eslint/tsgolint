// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoConfusingArrowRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "no-confusing-arrow", []ValidTestCase{
		{Code: `a => { return 1 ? 2 : 3; }`},
		{
			Code:    `a => { return 1 ? 2 : 3; }`,
			Options: "[{\"allowParens\":false}]",
		},
		{Code: `var x = a => { return 1 ? 2 : 3; }`},
		{
			Code:    `var x = a => { return 1 ? 2 : 3; }`,
			Options: "[{\"allowParens\":false}]",
		},
		{Code: `var x = (a) => { return 1 ? 2 : 3; }`},
		{
			Code:    `var x = (a) => { return 1 ? 2 : 3; }`,
			Options: "[{\"allowParens\":false}]",
		},
		{Code: `var x = a => (1 ? 2 : 3)`},
		{
			Code:    `var x = a => (1 ? 2 : 3)`,
			Options: "[{\"allowParens\":true}]",
		},
		{Code: `var x = (a,b) => (1 ? 2 : 3)`},
		{
			Code:    `() => 1 ? 2 : 3`,
			Options: "[{\"onlyOneSimpleParam\":true}]",
		},
		{
			Code:    `(a, b) => 1 ? 2 : 3`,
			Options: "[{\"onlyOneSimpleParam\":true}]",
		},
		{
			Code:    `(a = b) => 1 ? 2 : 3`,
			Options: "[{\"onlyOneSimpleParam\":true}]",
		},
		{
			Code:    `({ a }) => 1 ? 2 : 3`,
			Options: "[{\"onlyOneSimpleParam\":true}]",
		},
		{
			Code:    `([a]) => 1 ? 2 : 3`,
			Options: "[{\"onlyOneSimpleParam\":true}]",
		},
		{
			Code:    `(...a) => 1 ? 2 : 3`,
			Options: "[{\"onlyOneSimpleParam\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `a => 1 ? 2 : 3`,
			Output: `a => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:    `a => 1 ? 2 : 3`,
			Output:  `a => (1 ? 2 : 3)`,
			Options: "[{\"allowParens\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:    `a => 1 ? 2 : 3`,
			Options: "[{\"allowParens\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = a => 1 ? 2 : 3`,
			Output: `var x = a => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:    `var x = a => 1 ? 2 : 3`,
			Output:  `var x = a => (1 ? 2 : 3)`,
			Options: "[{\"allowParens\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:    `var x = a => 1 ? 2 : 3`,
			Options: "[{\"allowParens\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = (a) => 1 ? 2 : 3`,
			Output: `var x = (a) => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = () => 1 ? 2 : 3`,
			Output: `var x = () => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:    `var x = () => 1 ? 2 : 3`,
			Output:  `var x = () => (1 ? 2 : 3)`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:    `var x = () => 1 ? 2 : 3`,
			Output:  `var x = () => (1 ? 2 : 3)`,
			Options: "[{\"onlyOneSimpleParam\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = (a, b) => 1 ? 2 : 3`,
			Output: `var x = (a, b) => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = (a = b) => 1 ? 2 : 3`,
			Output: `var x = (a = b) => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = ({ a }) => 1 ? 2 : 3`,
			Output: `var x = ({ a }) => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = ([a]) => 1 ? 2 : 3`,
			Output: `var x = ([a]) => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
		{
			Code:   `var x = (...a) => 1 ? 2 : 3`,
			Output: `var x = (...a) => (1 ? 2 : 3)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "confusing",
				},
			},
		},
	})
}
