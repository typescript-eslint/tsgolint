// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestLinesBetweenClassMembersRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":2022}}", "lines-between-class-members", []ValidTestCase{
		{Code: `class foo{}`},
		{Code: `class foo{;;}`},
		{Code: `class foo{

}`},
		{Code: `class foo{constructor(){}
}`},
		{Code: `class foo{
constructor(){}}`},
		{Code: `class foo{ bar(){}

baz(){}}`},
		{Code: `class foo{ bar(){}

/*comments*/baz(){}}`},
		{Code: `class foo{ bar(){}

//comments
baz(){}}`},
		{Code: `class foo{ bar(){}
//comments

baz(){}}`},
		{Code: `class A{ foo() {} // a comment

bar() {}}`},
		{Code: `class A{ foo() {}
/* a */ /* b */

bar() {}}`},
		{Code: `class A{ foo() {}/* a */ 

 /* b */bar() {}}`},
		{Code: `class A {
foo() {}
/* comment */;
;

bar() {}
}`},
		{Code: `class A {
foo() {}
// comment

;
;
bar() {}
}`},
		{Code: `class foo{ bar(){}

;;baz(){}}`},
		{Code: `class foo{ bar(){};

baz(){}}`},
		{Code: `class C {
aaa;

#bbb;

ccc(){}

#ddd(){}
}`},
		{
			Code: `class foo{ bar(){}
baz(){}}`,
			Options: "[\"never\"]",
		},
		{
			Code: `class foo{ bar(){}
/*comments*/baz(){}}`,
			Options: "[\"never\"]",
		},
		{
			Code: `class foo{ bar(){}
//comments
baz(){}}`,
			Options: "[\"never\"]",
		},
		{
			Code: `class foo{ bar(){}/* comments

*/baz(){}}`,
			Options: "[\"never\"]",
		},
		{
			Code: `class foo{ bar(){}/* 
comments
*/baz(){}}`,
			Options: "[\"never\"]",
		},
		{
			Code: `class foo{ bar(){}
/* 
comments
*/
baz(){}}`,
			Options: "[\"never\"]",
		},
		{
			Code: `class foo{ bar(){}

baz(){}}`,
			Options: "[\"always\"]",
		},
		{
			Code: `class foo{ bar(){}

/*comments*/baz(){}}`,
			Options: "[\"always\"]",
		},
		{
			Code: `class foo{ bar(){}

//comments
baz(){}}`,
			Options: "[\"always\"]",
		},
		{
			Code: `class foo{ bar(){}
baz(){}}`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
		},
		{
			Code: `class foo{ bar(){
}

baz(){}}`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
		},
		{
			Code: `class foo{
aaa;
#bbb;
ccc(){
}

#ddd(){
}
}`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
		},
		{
			Code: `class C { foo

;bar }`,
			Options: "[\"always\"]",
		},
		{
			Code: `class C { foo
;bar }`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
		},
		{
			Code: `class C { foo
;bar }`,
			Options: "[\"never\"]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"*\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"*\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"*\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"field\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"method\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"field\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]}]",
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]},{\"exceptAfterSingleLine\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `class foo{ bar(){}
baz(){}}`,
			Output: `class foo{ bar(){}

baz(){}}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class foo{ bar(){}

baz(){}}`,
			Output: `class foo{ bar(){}
baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){
}
baz(){}}`,
			Output: `class foo{ bar(){
}

baz(){}}`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class foo{ bar(){
}
/* comment */
baz(){}}`,
			Output: `class foo{ bar(){
}

/* comment */
baz(){}}`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class foo{ bar(){}

// comment
baz(){}}`,
			Output: `class foo{ bar(){}
// comment
baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){}

/* comment */
baz(){}}`,
			Output: `class foo{ bar(){}
/* comment */
baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){}
/* comment-1 */

/* comment-2 */
baz(){}}`,
			Output: `class foo{ bar(){}
/* comment-1 */
/* comment-2 */
baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){}

/* comment */

baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){}

// comment

baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){}
/* comment-1 */

/* comment-2 */

/* comment-3 */
baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class foo{ bar(){}
/* comment-1 */

;

/* comment-3 */
baz(){}}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class A {
foo() {}// comment
;
/* comment */
bar() {}
}`,
			Output: `class A {
foo() {}// comment

;
/* comment */
bar() {}
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class A {
foo() {}
/* comment */;
;
/* comment */
bar() {}
}`,
			Output: `class A {
foo() {}

/* comment */;
;
/* comment */
bar() {}
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class foo{ bar(){};
baz(){}}`,
			Output: `class foo{ bar(){};

baz(){}}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class foo{ bar(){} // comment 
baz(){}}`,
			Output: `class foo{ bar(){} // comment 

baz(){}}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class A {
foo() {}
/* comment */;
;
bar() {}
}`,
			Output: `class A {
foo() {}

/* comment */;
;
bar() {}
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C {
field1
field2
}`,
			Output: `class C {
field1

field2
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C {
#field1
#field2
}`,
			Output: `class C {
#field1

#field2
}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C {
field1

field2
}`,
			Output: `class C {
field1
field2
}`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class C {
field1 = () => {
}
field2
field3
}`,
			Output: `class C {
field1 = () => {
}

field2
field3
}`,
			Options: "[\"always\",{\"exceptAfterSingleLine\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C { foo;bar }`,
			Output: `class C { foo;
bar }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C { foo;
bar; }`,
			Output: `class C { foo;

bar; }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C { foo;
;bar }`,
			Output: `class C { foo;

;bar }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C { foo
;bar }`,
			Output: `class C { foo

;bar }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `class C { foo

;bar }`,
			Output: `class C { foo
;bar }`,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
				},
			},
		},
		{
			Code: `class C { foo
;;bar }`,
			Output: `class C { foo

;;bar }`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      11,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      14,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      13,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      16,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      11,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      14,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"*\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      13,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"*\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      13,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
get area() {
                    return this.method1();
                }
method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      11,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      15,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
get area() {
                    return this.method1();
                }
method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      14,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      18,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
fieldA = 'Field A';
                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      8,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      8,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
get area() {
                    return this.method1();
                }
method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"*\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      14,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      18,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';
method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      12,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
#fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      10,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
#fieldB = 'Field B';
method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"*\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      12,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';
method1() {}
get area() {
                    return this.method1();
                }
method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      12,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      14,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      18,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
fieldA = 'Field A';
#fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      10,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
fieldA = 'Field A';
#fieldB = 'Field B';
method1() {}
get area() {
                    return this.method1();
                }
method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"*\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "never",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      12,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      14,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      18,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';

                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
#fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      9,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      11,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      14,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}
get area() {
                    return this.method1();
                }
method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"field\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"method\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      11,
					Column:    17,
				},
				{
					MessageId: "never",
					Line:      15,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      13,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';

                #fieldB = 'Field B';

                method1() {}

                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"never\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"never\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"never\",\"prev\":\"field\",\"next\":\"field\"},{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      8,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      9,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      10,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      13,
					Column:    17,
				},
			},
		},
		{
			Code: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }
                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }
                method2() {}
              }
            `,
			Output: `
              class MyClass {
                constructor(height, width) {
                    this.height = height;
                    this.width = width;
                }

                fieldA = 'Field A';
                #fieldB = 'Field B';
                method1() {}
                get area() {
                    return this.method1();
                }

                method2() {}
              }
            `,
			Options: "[{\"enforce\":[{\"blankLine\":\"always\",\"prev\":\"*\",\"next\":\"method\"},{\"blankLine\":\"always\",\"prev\":\"method\",\"next\":\"*\"},{\"blankLine\":\"always\",\"prev\":\"field\",\"next\":\"field\"}]},{\"exceptAfterSingleLine\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "always",
					Line:      7,
					Column:    17,
				},
				{
					MessageId: "always",
					Line:      13,
					Column:    17,
				},
			},
		},
	})
}
