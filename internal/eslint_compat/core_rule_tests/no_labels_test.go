// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoLabelsRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-labels", []ValidTestCase{
		{Code: `var f = { label: foo ()}`},
		{Code: `while (true) {}`},
		{Code: `while (true) { break; }`},
		{Code: `while (true) { continue; }`},
		{
			Code:    `A: while (a) { break A; }`,
			Options: "[{\"allowLoop\":true}]",
		},
		{
			Code:    `A: do { if (b) { break A; } } while (a);`,
			Options: "[{\"allowLoop\":true}]",
		},
		{
			Code:    `A: for (var a in obj) { for (;;) { switch (a) { case 0: continue A; } } }`,
			Options: "[{\"allowLoop\":true}]",
		},
		{
			Code:    `A: switch (a) { case 0: break A; }`,
			Options: "[{\"allowSwitch\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code: `label: while(true) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
			},
		},
		{
			Code: `label: while (true) { break label; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code: `label: while (true) { continue label; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInContinue",
				},
			},
		},
		{
			Code: `A: var foo = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
			},
		},
		{
			Code: `A: break A;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code: `A: { if (foo()) { break A; } bar(); };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code: `A: if (a) { if (foo()) { break A; } bar(); };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code: `A: switch (a) { case 0: break A; default: break; };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code: `A: switch (a) { case 0: B: { break A; } default: break; };`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: var foo = 0;`,
			Options: "[{\"allowLoop\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
			},
		},
		{
			Code:    `A: break A;`,
			Options: "[{\"allowLoop\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: { if (foo()) { break A; } bar(); };`,
			Options: "[{\"allowLoop\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: if (a) { if (foo()) { break A; } bar(); };`,
			Options: "[{\"allowLoop\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: switch (a) { case 0: break A; default: break; };`,
			Options: "[{\"allowLoop\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: var foo = 0;`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
			},
		},
		{
			Code:    `A: break A;`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: { if (foo()) { break A; } bar(); };`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: if (a) { if (foo()) { break A; } bar(); };`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: while (a) { break A; }`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: do { if (b) { break A; } } while (a);`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
		{
			Code:    `A: for (var a in obj) { for (;;) { switch (a) { case 0: break A; } } }`,
			Options: "[{\"allowSwitch\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedLabel",
				},
				{
					MessageId: "unexpectedLabelInBreak",
				},
			},
		},
	})
}
