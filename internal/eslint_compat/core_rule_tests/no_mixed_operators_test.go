// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoMixedOperatorsRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-mixed-operators", []ValidTestCase{
		{Code: `a && b && c && d`},
		{Code: `a || b || c || d`},
		{Code: `(a || b) && c && d`},
		{Code: `a || (b && c && d)`},
		{Code: `(a || b || c) && d`},
		{Code: `a || b || (c && d)`},
		{Code: `a + b + c + d`},
		{Code: `a * b * c * d`},
		{Code: `a == 0 && b == 1`},
		{Code: `a == 0 || b == 1`},
		{
			Code:    `(a == 0) && (b == 1)`,
			Options: "[{\"groups\":[[\"&&\",\"==\"]]}]",
		},
		{
			Code:    `a + b - c * d / e`,
			Options: "[{\"groups\":[[\"&&\",\"||\"]]}]",
		},
		{Code: `a + b - c`},
		{Code: `a * b / c`},
		{
			Code:    `a + b - c`,
			Options: "[{\"allowSamePrecedence\":true}]",
		},
		{
			Code:    `a * b / c`,
			Options: "[{\"allowSamePrecedence\":true}]",
		},
		{
			Code:    `(a || b) ? c : d`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
		},
		{
			Code:    `a ? (b || c) : d`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
		},
		{
			Code:    `a ? b : (c || d)`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
		},
		{
			Code:    `a || (b ? c : d)`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
		},
		{
			Code:    `(a ? b : c) || d`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
		},
		{Code: `a || (b ? c : d)`},
		{Code: `(a || b) ? c : d`},
		{Code: `a || b ? c : d`},
		{Code: `a ? (b || c) : d`},
		{Code: `a ? b || c : d`},
		{Code: `a ? b : (c || d)`},
		{Code: `a ? b : c || d`},
	}, []InvalidTestCase{
		{
			Code: `a && b || c`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    8,
					EndColumn: 10,
				},
			},
		},
		{
			Code:    `a && b > 0 || c`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\">\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    8,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    12,
				},
			},
		},
		{
			Code:    `a && b > 0 || c`,
			Options: "[{\"groups\":[[\"&&\",\"||\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    12,
				},
			},
		},
		{
			Code:    `a && b + c - d / e || f`,
			Options: "[{\"groups\":[[\"&&\",\"||\"],[\"+\",\"-\",\"*\",\"/\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    12,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    16,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    20,
				},
			},
		},
		{
			Code:    `a && b + c - d / e || f`,
			Options: "[{\"groups\":[[\"&&\",\"||\"],[\"+\",\"-\",\"*\",\"/\"]],\"allowSamePrecedence\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    12,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    16,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    20,
				},
			},
		},
		{
			Code:    `a + b - c`,
			Options: "[{\"allowSamePrecedence\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    7,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `a * b / c`,
			Options: "[{\"allowSamePrecedence\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    7,
					EndColumn: 8,
				},
			},
		},
		{
			Code:    `a || b ? c : d`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    8,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `a && b ? 1 : 2`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 5,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    8,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `x ? a && b : 0`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    7,
					EndColumn: 9,
				},
			},
		},
		{
			Code:    `x ? 0 : a && b`,
			Options: "[{\"groups\":[[\"&&\",\"||\",\"?:\"]]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    11,
					EndColumn: 13,
				},
			},
		},
		{
			Code:            `a + b ?? c`,
			Options:         "[{\"groups\":[[\"+\",\"??\"]]}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedMixedOperator",
					Column:    3,
					EndColumn: 4,
				},
				{
					MessageId: "unexpectedMixedOperator",
					Column:    7,
					EndColumn: 9,
				},
			},
		},
	})
}
