// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoRestrictedPropertiesRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-restricted-properties", []ValidTestCase{
		{
			Code:    `someObject.someProperty`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"}]",
		},
		{
			Code:    `anotherObject.disallowedProperty`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"}]",
		},
		{
			Code:    `someObject.someProperty()`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"}]",
		},
		{
			Code:    `anotherObject.disallowedProperty()`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"}]",
		},
		{
			Code:    `anotherObject.disallowedProperty()`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\",\"message\":\"Please use someObject.allowedProperty instead.\"}]",
		},
		{
			Code:    `anotherObject['disallowedProperty']()`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"}]",
		},
		{
			Code:    `obj.toString`,
			Options: "[{\"object\":\"obj\",\"property\":\"__proto__\"}]",
		},
		{
			Code:    `toString.toString`,
			Options: "[{\"object\":\"obj\",\"property\":\"foo\"}]",
		},
		{
			Code:    `obj.toString`,
			Options: "[{\"object\":\"obj\",\"property\":\"foo\"}]",
		},
		{
			Code:    `foo.bar`,
			Options: "[{\"property\":\"baz\"}]",
		},
		{
			Code:    `foo.bar`,
			Options: "[{\"object\":\"baz\"}]",
		},
		{
			Code:    `foo()`,
			Options: "[{\"object\":\"foo\"}]",
		},
		{
			Code:    `foo;`,
			Options: "[{\"object\":\"foo\"}]",
		},
		{
			Code:            `foo[/(?<zero>0)/]`,
			Options:         "[{\"property\":\"null\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
		},
		{
			Code:            `let bar = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {baz: bar} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {unrelated} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {baz: {bar: qux}} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {bar} = foo.baz;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {baz: bar} = foo;`,
			Options:         "[{\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let baz; ({baz: bar} = foo)`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let bar;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let bar; ([bar = 5] = foo);`,
			Options:         "[{\"object\":\"foo\",\"property\":\"1\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function qux({baz: bar} = foo) {}`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let [bar, baz] = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"1\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let [, bar] = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"0\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let [, bar = 5] = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"1\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let bar; ([bar = 5] = foo);`,
			Options:         "[{\"object\":\"foo\",\"property\":\"0\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function qux([bar] = foo) {}`,
			Options:         "[{\"object\":\"foo\",\"property\":\"0\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function qux([, bar] = foo) {}`,
			Options:         "[{\"object\":\"foo\",\"property\":\"0\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `function qux([, bar] = foo) {}`,
			Options:         "[{\"object\":\"foo\",\"property\":\"1\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class C { #foo; foo() { this.#foo; } }`,
			Options:         "[{\"property\":\"#foo\"}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:    `someObject.disallowedProperty`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"someObject\"]}]",
		},
		{
			Code:    `someObject.disallowedProperty; anotherObject.disallowedProperty();`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"someObject\",\"anotherObject\"]}]",
		},
		{
			Code:    `someObject.disallowedProperty()`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"someObject\"]}]",
		},
		{
			Code:    `someObject['disallowedProperty']()`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"someObject\"]}]",
		},
		{
			Code:            `let {bar} = foo;`,
			Options:         "[{\"property\":\"bar\",\"allowObjects\":[\"foo\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `let {baz: bar} = foo;`,
			Options:         "[{\"property\":\"baz\",\"allowObjects\":[\"foo\"]}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code:    `someObject.disallowedProperty`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `someObject.disallowedProperty`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\",\"message\":\"Please use someObject.allowedProperty instead.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `someObject.disallowedProperty; anotherObject.anotherDisallowedProperty()`,
			Options: "[{\"object\":\"someObject\",\"property\":\"disallowedProperty\"},{\"object\":\"anotherObject\",\"property\":\"anotherDisallowedProperty\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `foo.__proto__`,
			Options: "[{\"property\":\"__proto__\",\"message\":\"Please use Object.getPrototypeOf instead.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `foo['__proto__']`,
			Options: "[{\"property\":\"__proto__\",\"message\":\"Please use Object.getPrototypeOf instead.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `foo.bar.baz;`,
			Options: "[{\"object\":\"foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `foo.bar();`,
			Options: "[{\"object\":\"foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `foo.bar.baz();`,
			Options: "[{\"object\":\"foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `foo.bar.baz;`,
			Options: "[{\"property\":\"bar\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `foo.bar();`,
			Options: "[{\"property\":\"bar\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `foo.bar.baz();`,
			Options: "[{\"property\":\"bar\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `foo[/(?<zero>0)/]`,
			Options:         "[{\"property\":\"/(?<zero>0)/\"}]",
			LanguageOptions: "{\"ecmaVersion\":2018}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `require.call({}, 'foo')`,
			Options: "[{\"object\":\"require\",\"message\":\"Please call require() directly.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `require['resolve']`,
			Options: "[{\"object\":\"require\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {bar} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {bar: baz} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {'bar': baz} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {bar: {baz: qux}} = foo;`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {bar} = foo;`,
			Options:         "[{\"object\":\"foo\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {bar: baz} = foo;`,
			Options:         "[{\"object\":\"foo\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let {bar} = foo;`,
			Options:         "[{\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `let bar; ({bar} = foo);`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `let bar; ({bar: baz = 1} = foo);`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `function qux({bar} = foo) {}`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `function qux({bar: baz} = foo) {}`,
			Options:         "[{\"object\":\"foo\",\"property\":\"bar\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:            `var {['foo']: qux, bar} = baz`,
			Options:         "[{\"object\":\"baz\",\"property\":\"foo\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedObjectProperty",
				},
			},
		},
		{
			Code:    `obj['#foo']`,
			Options: "[{\"property\":\"#foo\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `const { bar: { bad } = {} } = foo;`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `const { bar: { bad } } = foo;`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `const { bad } = foo();`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bad } = foo());`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bar: { bad } } = foo);`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bar: { bad } = {} } = foo);`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bad }) => {};`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bad } = {}) => {};`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bad: bar }) => {};`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `({ bar: { bad } = {} }) => {};`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `[{ bad }] = foo;`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:            `const [{ bad }] = foo;`,
			Options:         "[{\"property\":\"bad\"}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `someObject.disallowedProperty`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"anotherObject\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `someObject.disallowedProperty`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"anotherObject\"],\"message\":\"Please use someObject.allowedProperty instead.\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
			},
		},
		{
			Code:    `someObject.disallowedProperty; anotherObject.anotherDisallowedProperty()`,
			Options: "[{\"property\":\"disallowedProperty\",\"allowObjects\":[\"anotherObject\"]},{\"property\":\"anotherDisallowedProperty\",\"allowObjects\":[\"someObject\"]}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "restrictedProperty",
				},
				{
					MessageId: "restrictedProperty",
				},
			},
		},
	})
}
