// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestValidTypeofRule(t *testing.T) {
	RunRuleTester(t, "{}", "valid-typeof", []ValidTestCase{
		{Code: `typeof foo === 'string'`},
		{Code: `typeof foo === 'object'`},
		{Code: `typeof foo === 'function'`},
		{Code: `typeof foo === 'undefined'`},
		{Code: `typeof foo === 'boolean'`},
		{Code: `typeof foo === 'number'`},
		{Code: `typeof foo === 'bigint'`},
		{Code: `'string' === typeof foo`},
		{Code: `'object' === typeof foo`},
		{Code: `'function' === typeof foo`},
		{Code: `'undefined' === typeof foo`},
		{Code: `'boolean' === typeof foo`},
		{Code: `'number' === typeof foo`},
		{Code: `typeof foo === typeof bar`},
		{Code: `typeof foo === baz`},
		{Code: `typeof foo !== someType`},
		{Code: `typeof bar != someType`},
		{Code: `someType === typeof bar`},
		{Code: `someType == typeof bar`},
		{Code: `typeof foo == 'string'`},
		{Code: `typeof(foo) === 'string'`},
		{Code: `typeof(foo) !== 'string'`},
		{Code: `typeof(foo) == 'string'`},
		{Code: `typeof(foo) != 'string'`},
		{Code: `var oddUse = typeof foo + 'thing'`},
		{Code: `function f(undefined) { typeof x === undefined }`},
		{
			Code:    `typeof foo === 'number'`,
			Options: "[{\"requireStringLiterals\":true}]",
		},
		{
			Code:    `typeof foo === "number"`,
			Options: "[{\"requireStringLiterals\":true}]",
		},
		{
			Code:    `var baz = typeof foo + 'thing'`,
			Options: "[{\"requireStringLiterals\":true}]",
		},
		{
			Code:    `typeof foo === typeof bar`,
			Options: "[{\"requireStringLiterals\":true}]",
		},
		{
			Code:            "typeof foo === `string`",
			Options:         "[{\"requireStringLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "`object` === typeof foo",
			Options:         "[{\"requireStringLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            "typeof foo === `str${somethingElse}`",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
	}, []InvalidTestCase{
		{
			Code: `typeof foo === 'strnig'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `'strnig' === typeof foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `if (typeof bar === 'umdefined') {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `typeof foo !== 'strnig'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `'strnig' !== typeof foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `if (typeof bar !== 'umdefined') {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `typeof foo != 'strnig'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `'strnig' != typeof foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `if (typeof bar != 'umdefined') {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `typeof foo == 'strnig'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `'strnig' == typeof foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `if (typeof bar == 'umdefined') {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code:            "if (typeof bar === `umdefined`) {}",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code:    `typeof foo == 'invalid string'`,
			Options: "[{\"requireStringLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
				},
			},
		},
		{
			Code: `if (typeof bar !== undefined) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "invalidValue",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestString",
							Output:    `if (typeof bar !== "undefined") {}`,
						},
					},
				},
			},
		},
		{
			Code:    `typeof foo == Object`,
			Options: "[{\"requireStringLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notString",
				},
			},
		},
		{
			Code:    `typeof foo === undefined`,
			Options: "[{\"requireStringLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notString",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestString",
							Output:    `typeof foo === "undefined"`,
						},
					},
				},
			},
		},
		{
			Code:    `undefined === typeof foo`,
			Options: "[{\"requireStringLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notString",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestString",
							Output:    `"undefined" === typeof foo`,
						},
					},
				},
			},
		},
		{
			Code:    `undefined == typeof foo`,
			Options: "[{\"requireStringLiterals\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notString",
					Suggestions: []InvalidTestCaseSuggestion{
						{
							MessageId: "suggestString",
							Output:    `"undefined" == typeof foo`,
						},
					},
				},
			},
		},
		{
			Code:            "typeof foo === `undefined${foo}`",
			Options:         "[{\"requireStringLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notString",
				},
			},
		},
		{
			Code:            "typeof foo === `${string}`",
			Options:         "[{\"requireStringLiterals\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notString",
				},
			},
		},
	})
}
