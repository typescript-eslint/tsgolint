// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestFunctionParenNewlineRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6,\"sourceType\":\"script\"}}", "function-paren-newline", []ValidTestCase{
		{Code: `new new Foo();`},
		{Code: `function baz(foo, bar) {}`},
		{Code: `(function(foo, bar) {});`},
		{Code: `(function baz(foo, bar) {});`},
		{Code: `(foo, bar) => {};`},
		{Code: `foo => {};`},
		{Code: `baz(foo, bar);`},
		{Code: `function baz() {}`},
		{Code: `
            function baz(
                foo,
                bar
            ) {}
        `},
		{Code: `
            (function(
                foo,
                bar
            ) {});
        `},
		{Code: `
            (function baz(
                foo,
                bar
            ) {});
        `},
		{Code: `
            (
                foo,
                bar
            ) => {};
        `},
		{Code: `
            baz(
                foo,
                bar
            );
        `},
		{Code: `
            baz(` + "`" + `foo
                bar` + "`" + `)
        `},
		{Code: `new Foo(bar, baz)`},
		{Code: `new Foo`},
		{Code: `new (Foo)`},
		{Code: `
            (foo)
            (bar)
        `},
		{Code: `
            foo.map(value => {
              return value;
            })
        `},
		{
			Code:    `function baz(foo, bar) {}`,
			Options: "[\"multiline\"]",
		},
		{
			Code:            `async (foo, bar) => {};`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo,
                    bar
                ) => {};
            `,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async foo => {};`,
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `import(source)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `import(source
  + ext)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `function baz(foo, bar) {}`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `function baz(foo) {}`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `(function(foo, bar) {});`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `(function(foo) {});`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `(function baz(foo, bar) {});`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `(function baz(foo) {});`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `(foo, bar) => {};`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `foo => {};`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `baz(foo, bar);`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `baz(foo);`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `function baz() {}`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                function baz(
                    foo,
                    bar
                ) {}
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                function baz(
                    foo
                ) {}
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                (function(
                    foo,
                    bar
                ) {});
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                (function(
                    foo
                ) {});
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                (function baz(
                    foo,
                    bar
                ) {});
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                (function baz(
                    foo
                ) {});
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                (
                    foo,
                    bar
                ) => {};
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                (
                    foo
                ) => {};
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                baz(
                    foo,
                    bar
                );
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                baz(
                    foo
                );
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                baz(` + "`" + `foo
                    bar` + "`" + `)
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `new Foo(bar, baz)`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `new Foo(bar)`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `new Foo`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:    `new (Foo)`,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code:            `async (foo, bar) => {};`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async (foo) => {};`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo
                ) => {};
            `,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo,
                    bar
                ) => {};
            `,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async foo => {};`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `import(source)`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `import(source
  + ext)`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `
                (foo)
                (bar)
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                foo.map(value => {
                  return value;
                })
            `,
			Options: "[\"multiline-arguments\"]",
		},
		{
			Code: `
                function baz(
                    foo,
                    bar
                ) {}
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                (function(
                    foo,
                    bar
                ) {});
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                (function baz(
                    foo,
                    bar
                ) {});
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                (
                    foo,
                    bar
                ) => {};
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                baz(
                    foo,
                    bar
                );
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                function baz(
                ) {}
            `,
			Options: "[\"always\"]",
		},
		{
			Code: `
                async (
                    foo
                ) => {};
            `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo,
                    bar
                ) => {};
            `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async foo => {};`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `import(
  source
)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `function baz(foo, bar) {}`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(function(foo, bar) {});`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(function baz(foo, bar) {});`,
			Options: "[\"never\"]",
		},
		{
			Code:    `(foo, bar) => {};`,
			Options: "[\"never\"]",
		},
		{
			Code:    `baz(foo, bar);`,
			Options: "[\"never\"]",
		},
		{
			Code:    `function baz() {}`,
			Options: "[\"never\"]",
		},
		{
			Code:            `async (foo, bar) => {};`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async foo => {};`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `import(source)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `function baz(foo, bar) {}`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code: `
                function baz(
                    foo, bar, qux
                ) {}
            `,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code: `
                baz(
                    foo, bar, qux
                );
            `,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code:    `baz(foo, bar);`,
			Options: "[{\"minItems\":3}]",
		},
		{
			Code:            `async (foo, bar) => {};`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo,
                    bar,
                    baz
                ) => {};
            `,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async foo => {};`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `import(source)`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `import(
  source
)`,
			Options:         "[{\"minItems\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:    `foo(bar, baz)`,
			Options: "[\"consistent\"]",
		},
		{
			Code: `
                foo(bar,
                baz)
            `,
			Options: "[\"consistent\"]",
		},
		{
			Code: `
                foo(
                    bar, baz
                )
            `,
			Options: "[\"consistent\"]",
		},
		{
			Code: `
                foo(
                    bar,
                    baz
                )
            `,
			Options: "[\"consistent\"]",
		},
		{
			Code:            `async (foo, bar) => {};`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `async foo => {};`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (foo,
                    bar) => {};
            `,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo, bar
                ) => {};
            `,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code: `
                async (
                    foo,
                    bar
                ) => {};
            `,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
		},
		{
			Code:            `import(source)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `import(
  source
)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `const method6 = (
  abc: number,
  def: () => void,
): [
  string,
  () => void
] => [` + "`" + `a${abc}` + "`" + `, def];
method6(3, () => {});`,
			Options:         "[\"multiline\"]",
			LanguageOptions: "{\"parser\":{}}",
		},
	}, []InvalidTestCase{
		{
			Code: `
                function baz(foo,
                    bar
                ) {}
            `,
			Output: `
                function baz(
foo,
                    bar
                ) {}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code: `
                (function(
                    foo,
                    bar) {})
            `,
			Output: `
                (function(
                    foo,
                    bar
) {})
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                (function baz(foo,
                    bar) {})
            `,
			Output: `
                (function baz(
foo,
                    bar
) {})
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                baz(
                    foo, bar);
            `,
			Output: `
                baz(foo, bar);
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code: `
                (foo, bar
                ) => {};
            `,
			Output: `
                (foo, bar) => {};
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                    foo, bar
                ) {}
            `,
			Output: `
                function baz(foo, bar) {}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                    foo =
                    1
                ) {}
            `,
			Output: `
                function baz(foo =
                    1) {}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                ) {}
            `,
			Output: `
                function baz() {}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                new Foo(bar,
                    baz);
            `,
			Output: `
                new Foo(
bar,
                    baz
);
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(/* not fixed due to comment */
                foo) {}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code: `
                function baz(foo
                /* not fixed due to comment */) {}
            `,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo, bar
                ) => {};
            `,
			Output: `
                async (foo, bar) => {};
            `,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo, bar
                ) => {};
            `,
			Output: `
                async (foo, bar) => {};
            `,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo,
                    bar) => {};
            `,
			Output: `
                async (
foo,
                    bar
) => {};
            `,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar) => {};
            `,
			Output: `
                async (
                    foo,
                    bar
) => {};
            `,
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `import(
  source
)`,
			Output:          `import(source)`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(foo,
                    bar
                ) {}
            `,
			Output: `
                function baz(
foo,
                    bar
                ) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code: `
                (function(
                    foo,
                    bar) {})
            `,
			Output: `
                (function(
                    foo,
                    bar
) {})
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                (function baz(foo,
                    bar) {})
            `,
			Output: `
                (function baz(
foo,
                    bar
) {})
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                baz(
                    foo, bar);
            `,
			Output: `
                baz(foo, bar);
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code: `
                (foo, bar
                ) => {};
            `,
			Output: `
                (foo, bar) => {};
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                    foo, bar
                ) {}
            `,
			Output: `
                function baz(foo, bar) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                ) {}
            `,
			Output: `
                function baz() {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                new Foo(bar,
                    baz);
            `,
			Output: `
                new Foo(
bar,
                    baz
);
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(/* not fixed due to comment */
                foo) {}
            `,
			Output: `
                function baz(/* not fixed due to comment */
                foo
) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(foo
                /* not fixed due to comment */) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                    qwe,
                    foo, bar
                ) {}
            `,
			Output: `
                function baz(
                    qwe,
                    foo, 
bar
                ) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBetween",
				},
			},
		},
		{
			Code: `
                function baz(
                    qwe, foo,
                    bar
                ) {}
            `,
			Output: `
                function baz(
                    qwe, 
foo,
                    bar
                ) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBetween",
				},
			},
		},
		{
			Code: `
                function baz(qwe, foo,
                    bar) {}
            `,
			Output: `
                function baz(
qwe, 
foo,
                    bar
) {}
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBetween",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                baz(
                    foo);
            `,
			Output: `
                baz(
                    foo
);
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                baz(foo
                    );
            `,
			Output: `
                baz(foo);
            `,
			Options: "[\"multiline-arguments\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo, bar
                ) => {};
            `,
			Output: `
                async (foo, bar) => {};
            `,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo,
                    bar) => {};
            `,
			Output: `
                async (
foo,
                    bar
) => {};
            `,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar) => {};
            `,
			Output: `
                async (
                    foo,
                    bar
) => {};
            `,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `import(source
)`,
			Output:          `import(source)`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `import(
  source)`,
			Output: `import(
  source
)`,
			Options:         "[\"multiline-arguments\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(foo,
                    bar
                ) {}
            `,
			Output: `
                function baz(
foo,
                    bar
                ) {}
            `,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code: `
                (function(
                    foo,
                    bar) {})
            `,
			Output: `
                (function(
                    foo,
                    bar
) {})
            `,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                (function baz(foo,
                    bar) {})
            `,
			Output: `
                (function baz(
foo,
                    bar
) {})
            `,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `function baz(foo, bar) {}`,
			Output: `function baz(
foo, bar
) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `(function(foo, bar) {});`,
			Output: `(function(
foo, bar
) {});`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `(function baz(foo, bar) {});`,
			Output: `(function baz(
foo, bar
) {});`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `(foo, bar) => {};`,
			Output: `(
foo, bar
) => {};`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `baz(foo, bar);`,
			Output: `baz(
foo, bar
);`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `function baz() {}`,
			Output: `function baz(
) {}`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo, bar) => {};
            `,
			Output: `
                async (
foo, bar
) => {};
            `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo,
                    bar) => {};
            `,
			Output: `
                async (
foo,
                    bar
) => {};
            `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar) => {};
            `,
			Output: `
                async (
                    foo,
                    bar
) => {};
            `,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `import(source)`,
			Output: `import(
source
)`,
			Options:         "[\"always\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(foo,
                    bar
                ) {}
            `,
			Output: `
                function baz(foo,
                    bar) {}
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                (function(
                    foo,
                    bar) {})
            `,
			Output: `
                (function(foo,
                    bar) {})
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code: `
                new new C()(
                );
            `,
			Output: `
                new new C()();
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                    foo,
                    bar
                ) {}
            `,
			Output: `
                function baz(foo,
                    bar) {}
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                (function(
                    foo,
                    bar
                ) {});
            `,
			Output: `
                (function(foo,
                    bar) {});
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                (function baz(
                    foo,
                    bar
                ) {});
            `,
			Output: `
                (function baz(foo,
                    bar) {});
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                (
                    foo,
                    bar
                ) => {};
            `,
			Output: `
                (foo,
                    bar) => {};
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                baz(
                    foo,
                    bar
                );
            `,
			Output: `
                baz(foo,
                    bar);
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                ) {}
            `,
			Output: `
                function baz() {}
            `,
			Options: "[\"never\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar
                ) => {};
            `,
			Output: `
                async (foo,
                    bar) => {};
            `,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar) => {};
            `,
			Output: `
                async (foo,
                    bar) => {};
            `,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code: `import(
  source
)`,
			Output:          `import(source)`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `function baz(foo, bar, qux) {}`,
			Output: `function baz(
foo, bar, qux
) {}`,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                function baz(
                    foo, bar
                ) {}
            `,
			Output: `
                function baz(foo, bar) {}
            `,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `baz(foo, bar, qux);`,
			Output: `baz(
foo, bar, qux
);`,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                baz(
                    foo,
                    bar
                );
            `,
			Output: `
                baz(foo,
                    bar);
            `,
			Options: "[{\"minItems\":3}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar
                ) => {};
            `,
			Output: `
                async (foo,
                    bar) => {};
            `,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar) => {};
            `,
			Output: `
                async (foo,
                    bar) => {};
            `,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code: `
                async (foo, bar, baz) => {};
            `,
			Output: `
                async (
foo, bar, baz
) => {};
            `,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `import(
  source
)`,
			Output:          `import(source)`,
			Options:         "[{\"minItems\":3}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `import(source)`,
			Output: `import(
source
)`,
			Options:         "[{\"minItems\":1}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedAfter",
				},
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                foo(
                    bar,
                    baz)
            `,
			Output: `
                foo(
                    bar,
                    baz
)
            `,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                foo(bar,
                    baz
                )
            `,
			Output: `
                foo(bar,
                    baz)
            `,
			Options: "[\"consistent\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `
                async (
                    foo,
                    bar) => {};
            `,
			Output: `
                async (
                    foo,
                    bar
) => {};
            `,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `
                async (foo,
                    bar
                ) => {};
            `,
			Output: `
                async (foo,
                    bar) => {};
            `,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2017}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `import(source
)`,
			Output:          `import(source)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
		{
			Code: `import(
  source)`,
			Output: `import(
  source
)`,
			Options:         "[\"consistent\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
			},
		},
		{
			Code: `const method6 = (
  abc: number,
  def: () => void,
): [
  string,
  () => void
] => [` + "`" + `a${abc}` + "`" + `, def];
method6(3, () => {});`,
			Output: `const method6 = (abc: number,
  def: () => void,): [
  string,
  () => void
] => [` + "`" + `a${abc}` + "`" + `, def];
method6(3, () => {});`,
			Options:         "[\"never\"]",
			LanguageOptions: "{\"parser\":{}}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedAfter",
				},
				{
					MessageId: "unexpectedBefore",
				},
			},
		},
	})
}
