// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSwitchColonSpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "switch-colon-spacing", []ValidTestCase{
		{Code: `switch(a){}`},
		{Code: `({foo:1,bar : 2});`},
		{Code: `A:foo(); B : foo();`},
		{Code: `switch(a){case 0: break;}`},
		{Code: `switch(a){case 0:}`},
		{Code: `switch(a){case 0
:
break;}`},
		{Code: `switch(a){default: break;}`},
		{Code: `switch(a){default:}`},
		{Code: `switch(a){default
:
break;}`},
		{
			Code:    `switch(a){case 0:break;}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a){case 0:}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code: `switch(a){case 0
:
break;}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a){default:break;}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a){default:}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code: `switch(a){default
:
break;}`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `switch(a){case 0: break;}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `switch(a){case 0:}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code: `switch(a){case 0
:
break;}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `switch(a){default: break;}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `switch(a){default:}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code: `switch(a){default
:
break;}`,
			Options: "[{\"before\":false,\"after\":true}]",
		},
		{
			Code:    `switch(a){case 0 :break;}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `switch(a){case 0 :}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code: `switch(a){case 0
:
break;}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `switch(a){default :break;}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `switch(a){default :}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code: `switch(a){default
:
break;}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `switch(a){case 0 : break;}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `switch(a){case 0 :}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code: `switch(a){case 0
:
break;}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `switch(a){default : break;}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `switch(a){default :}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code: `switch(a){default
:
break;}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
	}, []InvalidTestCase{
		{
			Code:   `switch(a){case 0 :break;}`,
			Output: `switch(a){case 0: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `switch(a){default :break;}`,
			Output: `switch(a){default: break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){case 0 : break;}`,
			Output:  `switch(a){case 0:break;}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){default : break;}`,
			Output:  `switch(a){default:break;}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){case 0 :break;}`,
			Output:  `switch(a){case 0: break;}`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){default :break;}`,
			Output:  `switch(a){default: break;}`,
			Options: "[{\"before\":false,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){case 0: break;}`,
			Output:  `switch(a){case 0 :break;}`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){default: break;}`,
			Output:  `switch(a){default :break;}`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "unexpectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){case 0:break;}`,
			Output:  `switch(a){case 0 : break;}`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:    `switch(a){default:break;}`,
			Output:  `switch(a){default : break;}`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `switch(a){case 0 /**/ :break;}`,
			Output: `switch(a){case 0 /**/ : break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `switch(a){case 0 :/**/break;}`,
			Output: `switch(a){case 0:/**/break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
		{
			Code:   `switch(a){case (0) :break;}`,
			Output: `switch(a){case (0): break;}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedBefore",
				},
				{
					MessageId: "expectedAfter",
				},
			},
		},
	})
}
