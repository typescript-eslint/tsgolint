// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestVarsOnTopRule(t *testing.T) {
	RunRuleTester(t, "{}", "vars-on-top", []ValidTestCase{
		{Code: `var first = 0;
function foo() {
    first = 2;
}`},
		{Code: `function foo() {
}`},
		{Code: `function foo() {
   var first;
   if (true) {
       first = true;
   } else {
       first = 1;
   }
}`},
		{Code: `function foo() {
   var first;
   var second = 1;
   var third;
   var fourth = 1, fifth, sixth = third;
   var seventh;
   if (true) {
       third = true;
   }
   first = second;
}`},
		{Code: `function foo() {
   var i;
   for (i = 0; i < 10; i++) {
       alert(i);
   }
}`},
		{Code: `function foo() {
   var outer;
   function inner() {
       var inner = 1;
       var outer = inner;
   }
   outer = 1;
}`},
		{Code: `function foo() {
   var first;
   //Hello
   var second = 1;
   first = second;
}`},
		{Code: `function foo() {
   var first;
   /*
       Hello Clarice
   */
   var second = 1;
   first = second;
}`},
		{Code: `function foo() {
   var first;
   var second = 1;
   function bar(){
       var first;
       first = 5;
   }
   first = second;
}`},
		{Code: `function foo() {
   var first;
   var second = 1;
   function bar(){
       var third;
       third = 5;
   }
   first = second;
}`},
		{Code: `function foo() {
   var first;
   var bar = function(){
       var third;
       third = 5;
   }
   first = 5;
}`},
		{Code: `function foo() {
   var first;
   first.onclick(function(){
       var third;
       third = 5;
   });
   first = 5;
}`},
		{
			Code: `function foo() {
   var i = 0;
   for (let j = 0; j < 10; j++) {
       alert(j);
   }
   i = i + 1;
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{Code: `'use strict'; var x; f();`},
		{Code: `'use strict'; 'directive'; var x; var y; f();`},
		{Code: `function f() { 'use strict'; var x; f(); }`},
		{Code: `function f() { 'use strict'; 'directive'; var x; var y; f(); }`},
		{
			Code:            `import React from 'react'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `'use strict'; import React from 'react'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import React from 'react'; 'use strict'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import * as foo from 'mod.js'; 'use strict'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { square, diag } from 'lib'; 'use strict'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import { default as foo } from 'lib'; 'use strict'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import 'src/mylib'; 'use strict'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code:            `import theDefault, { named1, named2 } from 'src/mylib'; 'use strict'; var y; function f() { 'use strict'; var x; var y; f(); }`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `export var x;
var y;
var z;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var x;
export var y;
var z;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `var x;
var y;
export var z;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
		},
		{
			Code: `class C {
    static {
        var x;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        var x;
        foo();
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        var x;
        var y;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        var x;
        var y;
        foo();
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        let x;
        var y;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
    static {
        foo();
        let x;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `var first = 0;
function foo() {
    first = 2;
    second = 2;
}
var second = 0;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first;
   first = 1;
   first = 2;
   first = 3;
   first = 4;
   var second = 1;
   second = 2;
   first = second;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first;
   if (true) {
       var second = true;
   }
   first = second;
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   for (var i = 0; i < 10; i++) {
       alert(i);
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = 10;
   var i;
   for (i = 0; i < first; i ++) {
       var second = i;
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = 10;
   var i;
   switch (first) {
       case 10:
           var hello = 1;
           break;
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = 10;
   var i;
   try {
       var hello = 1;
   } catch (e) {
       alert('error');
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = 10;
   var i;
   try {
       asdf;
   } catch (e) {
       var hello = 1;
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = 10;
   while (first) {
       var hello = 1;
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = 10;
   do {
       var hello = 1;
   } while (first == 10);
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = [1,2,3];
   for (var item in first) {
       item++;
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function foo() {
   var first = [1,2,3];
   var item;
   for (item in first) {
       var hello = item;
   }
}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `var foo = () => {
   var first = [1,2,3];
   var item;
   for (item in first) {
       var hello = item;
   }
}`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `'use strict'; 0; var x; f();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `'use strict'; var x; 'directive'; var y; f();`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function f() { 'use strict'; 0; var x; f(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `function f() { 'use strict'; var x; 'directive';  var y; f(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `export function f() {}
var x;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `var x;
export function f() {}
var y;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `import {foo} from 'foo';
export {foo};
var test = 1;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `export {foo} from 'foo';
var test = 1;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `export * from 'foo';
var test = 1;`,
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `class C {
    static {
        foo();
        var x;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `class C {
    static {
        'use strict';
        var x;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `class C {
    static {
        var x;
        foo();
        var y;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
					Line:      5,
				},
			},
		},
		{
			Code: `class C {
    static {
        if (foo) {
            var x;
        }
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
		{
			Code: `class C {
    static {
        if (foo)
            var x;
    }
}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "top",
				},
			},
		},
	})
}
