// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSemiStyleRule(t *testing.T) {
	RunRuleTester(t, "{}", "semi-style", []ValidTestCase{
		{Code: `;`},
		{Code: `;foo;bar;baz;`},
		{Code: `foo;
bar;`},
		{Code: `for(a;b;c);`},
		{Code: `for(a;
b;
c);`},
		{Code: `for((a
);
(b
);
(c));`},
		{Code: `if(a)foo;
bar`},
		{
			Code:    `;`,
			Options: "[\"last\"]",
		},
		{
			Code:    `;foo;bar;baz;`,
			Options: "[\"last\"]",
		},
		{
			Code: `foo;
bar;`,
			Options: "[\"last\"]",
		},
		{
			Code:    `for(a;b;c);`,
			Options: "[\"last\"]",
		},
		{
			Code: `for(a;
b;
c);`,
			Options: "[\"last\"]",
		},
		{
			Code: `for((a
);
(b
);
(c));`,
			Options: "[\"last\"]",
		},
		{
			Code:            `class C { a; b; }`,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
a;
b;
}`,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `if(a)foo;
bar`,
			Options: "[\"last\"]",
		},
		{
			Code:    `;`,
			Options: "[\"first\"]",
		},
		{
			Code:    `;foo;bar;baz;`,
			Options: "[\"first\"]",
		},
		{
			Code: `foo
;bar;`,
			Options: "[\"first\"]",
		},
		{
			Code:    `for(a;b;c);`,
			Options: "[\"first\"]",
		},
		{
			Code: `for(a;
b;
c);`,
			Options: "[\"first\"]",
		},
		{
			Code: `for((a
);
(b
);
(c));`,
			Options: "[\"first\"]",
		},
		{
			Code:            `class C { a ;b }`,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C {
a
;b
}`,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                {
                    ;
                }
            `,
			Options: "[\"first\"]",
		},
		{
			Code: `
                while (a)
                    ;
                foo
            `,
			Options: "[\"first\"]",
		},
		{
			Code: `
                do
                    ;
                while (a)
            `,
			Options: "[\"first\"]",
		},
		{
			Code: `
                do
                    foo;
                while (a)
            `,
			Options: "[\"first\"]",
		},
		{
			Code: `
                if (a)
                    foo;
                else
                    bar
            `,
			Options: "[\"first\"]",
		},
		{
			Code: `
                if (a)
                    foo
                ;bar
            `,
			Options: "[\"first\"]",
		},
		{
			Code: `
                {
                    ;
                }
            `,
			Options: "[\"last\"]",
		},
		{
			Code: `
                switch (a) {
                    case 1:
                        ;foo
                }
            `,
			Options: "[\"last\"]",
		},
		{
			Code: `
                while (a)
                    ;
                foo
            `,
			Options: "[\"last\"]",
		},
		{
			Code: `
                do
                    ;
                while (a)
            `,
			Options: "[\"last\"]",
		},
		{
			Code: `
                class C {
                    static {}
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                    }
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                        bar
                    }
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        ;
                    }
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo;
                    }
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo;
                        bar;
                    }
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo;
                        bar;
                        baz;
                    }
                }
            `,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {}
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                        bar
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        ;
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        ;foo
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo;
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                        ;bar
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                        ;bar;
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                        ;bar
                        ;baz
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `
                class C {
                    static {
                        foo
                        ;bar
                        ;baz;
                    }
                }
            `,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `foo
;bar`,
			Output: `foo;
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `if(a)foo
;bar`,
			Output: `if(a)foo;
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `var foo
;bar`,
			Output: `var foo;
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo
;
bar`,
			Output: `foo;
bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `for(a
;b;c)d`,
			Output: `for(a;
b;c)d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `for(a;b
;c)d`,
			Output: `for(a;b;
c)d`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `do;while(a)
;b`,
			Output: `do;while(a);
b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo
;bar`,
			Output: `foo;
bar`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `if(a)foo
;bar`,
			Output: `if(a)foo;
bar`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `var foo
;bar`,
			Output: `var foo;
bar`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo
;
bar`,
			Output: `foo;
bar`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `for(a
;b;c)d`,
			Output: `for(a;
b;c)d`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `for(a;b
;c)d`,
			Output: `for(a;b;
c)d`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo()
;`,
			Output: `foo();
`,
			Options: "[\"last\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo;
bar`,
			Output: `foo
;bar`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `if(a)foo;
bar`,
			Output: `if(a)foo
;bar`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `var foo;
bar`,
			Output: `var foo
;bar`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo
;
bar`,
			Output: `foo
;bar`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `for(a
;b;c)d`,
			Output: `for(a;
b;c)d`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `for(a;b
;c)d`,
			Output: `for(a;b;
c)d`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo
;/**/bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo
/**/;bar`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo;
/**/bar`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `foo/**/;
bar`,
			Options: "[\"first\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `class C { foo
;bar }`,
			Output: `class C { foo;
bar }`,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `class C { foo;
bar }`,
			Output: `class C { foo
;bar }`,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `class C { static { foo
; } }`,
			Output: `class C { static { foo;
} }`,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `class C { static { foo
 ;bar } }`,
			Output: `class C { static { foo;
bar } }`,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `class C { static { foo;
bar
 ; } }`,
			Output: `class C { static { foo;
bar;
} }`,
			Options:         "[\"last\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
		{
			Code: `class C { static { foo;
bar } }`,
			Output: `class C { static { foo
;bar } }`,
			Options:         "[\"first\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedSemiColon",
				},
			},
		},
	})
}
