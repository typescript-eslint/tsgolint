// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestDefaultCaseLastRule(t *testing.T) {
	RunRuleTester(t, "{}", "default-case-last", []ValidTestCase{
		{Code: `switch (foo) {}`},
		{Code: `switch (foo) { case 1: bar(); break; }`},
		{Code: `switch (foo) { case 1: break; }`},
		{Code: `switch (foo) { case 1: }`},
		{Code: `switch (foo) { case 1: bar(); break; case 2: baz(); break; }`},
		{Code: `switch (foo) { case 1: break; case 2: break; }`},
		{Code: `switch (foo) { case 1: case 2: break; }`},
		{Code: `switch (foo) { case 1: case 2: }`},
		{Code: `switch (foo) { default: bar(); break; }`},
		{Code: `switch (foo) { default: bar(); }`},
		{Code: `switch (foo) { default: break; }`},
		{Code: `switch (foo) { default: }`},
		{Code: `switch (foo) { case 1: break; default: break; }`},
		{Code: `switch (foo) { case 1: break; default: }`},
		{Code: `switch (foo) { case 1: default: break; }`},
		{Code: `switch (foo) { case 1: default: }`},
		{Code: `switch (foo) { case 1: baz(); break; case 2: quux(); break; default: quuux(); break; }`},
		{Code: `switch (foo) { case 1: break; case 2: break; default: break; }`},
		{Code: `switch (foo) { case 1: break; case 2: break; default: }`},
		{Code: `switch (foo) { case 1: case 2: break; default: break; }`},
		{Code: `switch (foo) { case 1: break; case 2: default: break; }`},
		{Code: `switch (foo) { case 1: break; case 2: default: }`},
		{Code: `switch (foo) { case 1: case 2: default: }`},
	}, []InvalidTestCase{
		{
			Code: `switch (foo) { default: bar(); break; case 1: baz(); break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: break; case 1: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: break; case 1: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: case 1: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: case 1: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: break; case 1: break; case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: case 1: break; case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: case 1: case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { default: case 1: case 2: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    16,
				},
			},
		},
		{
			Code: `switch (foo) { case 1: break; default: break; case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    31,
				},
			},
		},
		{
			Code: `switch (foo) { case 1: default: break; case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    24,
				},
			},
		},
		{
			Code: `switch (foo) { case 1: break; default: case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    31,
				},
			},
		},
		{
			Code: `switch (foo) { case 1: default: case 2: break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    24,
				},
			},
		},
		{
			Code: `switch (foo) { case 1: default: case 2: }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "notLast",
					Column:    24,
				},
			},
		},
	})
}
