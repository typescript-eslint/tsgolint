// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestNoUselessCallRule(t *testing.T) {
	RunRuleTester(t, "{}", "no-useless-call", []ValidTestCase{
		{Code: `foo.apply(obj, 1, 2);`},
		{Code: `obj.foo.apply(null, 1, 2);`},
		{Code: `obj.foo.apply(otherObj, 1, 2);`},
		{Code: `a.b(x, y).c.foo.apply(a.b(x, z).c, 1, 2);`},
		{Code: `foo.apply(obj, [1, 2]);`},
		{Code: `obj.foo.apply(null, [1, 2]);`},
		{Code: `obj.foo.apply(otherObj, [1, 2]);`},
		{Code: `a.b(x, y).c.foo.apply(a.b(x, z).c, [1, 2]);`},
		{Code: `a.b.foo.apply(a.b.c, [1, 2]);`},
		{Code: `foo.apply(null, args);`},
		{Code: `obj.foo.apply(obj, args);`},
		{Code: `var call; foo[call](null, 1, 2);`},
		{Code: `var apply; foo[apply](null, [1, 2]);`},
		{Code: `foo.call();`},
		{Code: `obj.foo.call();`},
		{Code: `foo.apply();`},
		{Code: `obj.foo.apply();`},
		{
			Code:            `obj?.foo.bar.call(obj.foo, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `class C { #call; wrap(foo) { foo.#call(undefined, 1, 2); } }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `foo.call(undefined, 1, 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `foo.call(void 0, 1, 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `foo.call(null, 1, 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `obj.foo.call(obj, 1, 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `a.b.c.foo.call(a.b.c, 1, 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `a.b(x, y).c.foo.call(a.b(x, y).c, 1, 2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `foo.apply(undefined, [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `foo.apply(void 0, [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `foo.apply(null, [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `obj.foo.apply(obj, [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `a.b.c.foo.apply(a.b.c, [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `a.b(x, y).c.foo.apply(a.b(x, y).c, [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `[].concat.apply([ ], [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `[].concat.apply([
/*empty*/
], [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code: `abc.get("foo", 0).concat.apply(abc . get("foo",  0 ), [1, 2]);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `foo.call?.(undefined, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `foo?.call(undefined, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `(foo?.call)(undefined, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `obj.foo.call?.(obj, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `obj?.foo.call(obj, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `(obj?.foo).call(obj, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `(obj?.foo.call)(obj, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `obj?.foo.bar.call(obj?.foo, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `(obj?.foo).bar.call(obj?.foo, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
		{
			Code:            `obj.foo?.bar.call(obj.foo, 1, 2);`,
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unnecessaryCall",
				},
			},
		},
	})
}
