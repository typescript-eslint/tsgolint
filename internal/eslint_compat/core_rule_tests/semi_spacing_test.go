// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestSemiSpacingRule(t *testing.T) {
	RunRuleTester(t, "{}", "semi-spacing", []ValidTestCase{
		{Code: `var a = 'b';`},
		{Code: `var a = 'b ; c';`},
		{Code: `var a = 'b',
c = 'd';`},
		{Code: `var a = function() {};`},
		{Code: `;(function(){}());`},
		{Code: `var a = 'b'
;(function(){}())`},
		{Code: `debugger
;(function(){}())`},
		{Code: `while (true) { break; }`},
		{Code: `while (true) { continue; }`},
		{Code: `debugger;`},
		{Code: `function foo() { return; }`},
		{Code: `throw new Error('foo');`},
		{Code: `for (var i = 0; i < 10; i++) {}`},
		{Code: `for (;;) {}`},
		{
			Code:    `var a = 'b' ;`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{
			Code:    `var a = 'b';c = 'd';`,
			Options: "[{\"before\":false,\"after\":false}]",
		},
		{
			Code:    `for (var i = 0 ;i < 10 ;i++) {}`,
			Options: "[{\"before\":true,\"after\":false}]",
		},
		{
			Code:    `for (var i = 0 ; i < 10 ; i++) {}`,
			Options: "[{\"before\":true,\"after\":true}]",
		},
		{Code: `function foo(){return 2;}`},
		{Code: `for(var i = 0; i < results.length;) {}`},
		{
			Code:    `function foo() { return 2; }`,
			Options: "[{\"after\":false}]",
		},
		{
			Code:    `for ( var i = 0;i < results.length; ) {}`,
			Options: "[{\"after\":false}]",
		},
		{Code: `do {} while (true); foo`},
		{
			Code:            `class C { foo; bar; method() {} }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code:            `class C { foo }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{Code: `foo; ;;;;;;;;;`},
		{
			Code:            `class C { foo; ;;;;;;;;;; }`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code:   `var a = 'b'  ;`,
			Output: `var a = 'b';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:   `var a = 'b' ;`,
			Output: `var a = 'b';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code: `var a = 'b',
c = 'd' ;`,
			Output: `var a = 'b',
c = 'd';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      2,
					Column:    8,
				},
			},
		},
		{
			Code:   `var a = function() {} ;`,
			Output: `var a = function() {};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code: `var a = function() {
} ;`,
			Output: `var a = function() {
};`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      2,
					Column:    2,
				},
			},
		},
		{
			Code:   `/^a$/.test('b') ;`,
			Output: `/^a$/.test('b');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    16,
				},
			},
		},
		{
			Code:   `;(function(){}()) ;`,
			Output: `;(function(){}());`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code:   `while (true) { break ; }`,
			Output: `while (true) { break; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    21,
				},
			},
		},
		{
			Code:   `while (true) { continue ; }`,
			Output: `while (true) { continue; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:   `debugger ;`,
			Output: `debugger;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    9,
				},
			},
		},
		{
			Code:   `function foo() { return ; }`,
			Output: `function foo() { return; }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:   `throw new Error('foo') ;`,
			Output: `throw new Error('foo');`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    23,
				},
			},
		},
		{
			Code:   `for (var i = 0 ; i < 10 ; i++) {}`,
			Output: `for (var i = 0; i < 10; i++) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    15,
				},
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:   `var a = 'b';c = 'd';`,
			Output: `var a = 'b'; c = 'd';`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceAfter",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var a = 'b';`,
			Output:  `var a = 'b' ;`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceBefore",
					Line:      1,
					Column:    12,
					EndLine:   1,
					EndColumn: 13,
				},
			},
		},
		{
			Code:    `var a = 'b'; c = 'd';`,
			Output:  `var a = 'b';c = 'd';`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 14,
				},
			},
		},
		{
			Code:    `var a = 'b';   c = 'd';`,
			Output:  `var a = 'b';c = 'd';`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    13,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:   `for (var i = 0;i < 10;i++) {}`,
			Output: `for (var i = 0; i < 10; i++) {}`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceAfter",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "missingWhitespaceAfter",
					Line:      1,
					Column:    22,
					EndLine:   1,
					EndColumn: 23,
				},
			},
		},
		{
			Code:    `for (var i = 0; i < 10; i++) {}`,
			Output:  `for (var i = 0 ; i < 10 ; i++) {}`,
			Options: "[{\"before\":true,\"after\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceBefore",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
				{
					MessageId: "missingWhitespaceBefore",
					Line:      1,
					Column:    23,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:    `for (var i = 0; i < 10; i++) {}`,
			Output:  `for (var i = 0;i < 10;i++) {}`,
			Options: "[{\"before\":false,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    16,
				},
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    24,
				},
			},
		},
		{
			Code:            `import Foo from 'bar' ;`,
			Output:          `import Foo from 'bar';`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    22,
				},
			},
		},
		{
			Code:            `import * as foo from 'bar' ;`,
			Output:          `import * as foo from 'bar';`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    27,
				},
			},
		},
		{
			Code:            `var foo = 0; export {foo} ;`,
			Output:          `var foo = 0; export {foo};`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    26,
				},
			},
		},
		{
			Code:            `export * from 'foo' ;`,
			Output:          `export * from 'foo';`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code:            `export default foo ;`,
			Output:          `export default foo;`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6,\"sourceType\":\"module\"}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code:            `while(foo) {continue   ;}`,
			Output:          `while(foo) {continue;}`,
			Options:         "[{\"before\":false,\"after\":true}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    21,
					EndLine:   1,
					EndColumn: 24,
				},
			},
		},
		{
			Code:            `if(foo) {throw new Error()   ;  }`,
			Output:          `if(foo) {throw new Error();  }`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    27,
					EndLine:   1,
					EndColumn: 30,
				},
			},
		},
		{
			Code:            `for(a ; ; );`,
			Output:          `for(a;; );`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    8,
					EndLine:   1,
					EndColumn: 9,
				},
			},
		},
		{
			Code: `for(a ; 
 ; );`,
			Output: `for(a; 
 ; );`,
			Options:         "[{\"before\":false,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    6,
					EndLine:   1,
					EndColumn: 7,
				},
			},
		},
		{
			Code:   `do {} while (true) ;`,
			Output: `do {} while (true);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:   `do {} while (true);foo`,
			Output: `do {} while (true); foo`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceAfter",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
			},
		},
		{
			Code:    `do {} while (true);  foo`,
			Output:  `do {} while (true) ;foo`,
			Options: "[{\"before\":true,\"after\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceBefore",
					Line:      1,
					Column:    19,
					EndLine:   1,
					EndColumn: 20,
				},
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    20,
					EndLine:   1,
					EndColumn: 22,
				},
			},
		},
		{
			Code:            `class C { foo ;bar;}`,
			Output:          `class C { foo; bar;}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpectedWhitespaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "missingWhitespaceAfter",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `class C { foo; bar ; }`,
			Output:          `class C { foo ;bar ; }`,
			Options:         "[{\"before\":true,\"after\":false}]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceBefore",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
				{
					MessageId: "unexpectedWhitespaceAfter",
					Line:      1,
					Column:    15,
					EndLine:   1,
					EndColumn: 16,
				},
			},
		},
		{
			Code:            `class C { foo;static {}}`,
			Output:          `class C { foo; static {}}`,
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingWhitespaceAfter",
					Line:      1,
					Column:    14,
					EndLine:   1,
					EndColumn: 15,
				},
			},
		},
	})
}
