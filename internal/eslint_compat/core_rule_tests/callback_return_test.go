// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestCallbackReturnRule(t *testing.T) {
	RunRuleTester(t, "{}", "callback-return", []ValidTestCase{
		{Code: `function a(err) { if (err) return callback (err); }`},
		{Code: `function a(err) { if (err) return callback (err); callback(); }`},
		{Code: `function a(err) { if (err) { return callback (err); } callback(); }`},
		{Code: `function a(err) { if (err) { return /* confusing comment */ callback (err); } callback(); }`},
		{Code: `function x(err) { if (err) { callback(); return; } }`},
		{Code: `function x(err) { if (err) { 
 log();
 callback(); return; } }`},
		{Code: `function x(err) { if (err) { callback(); return; } return callback(); }`},
		{Code: `function x(err) { if (err) { return callback(); } else { return callback(); } }`},
		{Code: `function x(err) { if (err) { return callback(); } else if (x) { return callback(); } }`},
		{Code: `function x(err) { if (err) return callback(); else return callback(); }`},
		{Code: `function x(cb) { cb && cb(); }`},
		{Code: `function x(next) { typeof next !== 'undefined' && next(); }`},
		{Code: `function x(next) { if (typeof next === 'function')  { return next() } }`},
		{Code: `function x() { switch(x) { case 'a': return next(); } }`},
		{Code: `function x() { for(x = 0; x < 10; x++) { return next(); } }`},
		{Code: `function x() { while(x) { return next(); } }`},
		{Code: `function a(err) { if (err) { obj.method (err); } }`},
		{Code: `callback()`},
		{Code: `callback(); callback();`},
		{Code: `while(x) { move(); }`},
		{Code: `for (var i = 0; i < 10; i++) { move(); }`},
		{Code: `for (var i = 0; i < 10; i++) move();`},
		{Code: `if (x) callback();`},
		{Code: `if (x) { callback(); }`},
		{
			Code:            `var x = err => { if (err) { callback(); return; } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = err => callback(err)`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `var x = err => { setTimeout( () => { callback(); }); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class x { horse() { callback(); } } `,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:            `class x { horse() { if (err) { return callback(); } callback(); } } `,
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `function a(err) { if (err) { callback(err) } }`,
			Options: "[[\"cb\"]]",
		},
		{
			Code:    `function a(err) { if (err) { callback(err) } next(); }`,
			Options: "[[\"cb\",\"next\"]]",
		},
		{
			Code:    `function a(err) { if (err) { return next(err) } else { callback(); } }`,
			Options: "[[\"cb\",\"next\"]]",
		},
		{
			Code:    `function a(err) { if (err) { return obj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { return obj.prop.method(err); } }`,
			Options: "[[\"obj.prop.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { return obj.prop.method(err); } otherObj.prop.method() }`,
			Options: "[[\"obj.prop.method\",\"otherObj.prop.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { callback(err); } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { otherObj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code: `function a(err) { if (err) { //comment
return obj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { /*comment*/return obj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code: `function a(err) { if (err) { return obj.method(err); //comment
 } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { return obj.method(err); /*comment*/ } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { obj().method(err); } }`,
			Options: "[[\"obj().method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { obj.prop().method(err); } }`,
			Options: "[[\"obj.prop().method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { obj().prop.method(err); } }`,
			Options: "[[\"obj().prop.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { obj().method(err); } }`,
			Options: "[[\"obj.method\"]]",
		},
		{
			Code:    `function a(err) { if (err) { obj().method(err); } obj.method(); }`,
			Options: "[[\"obj.method\"]]",
		},
		{Code: `function x(err) { if (err) { setTimeout(callback, 0); } callback(); }`},
		{Code: `function x(err) { if (err) { process.nextTick(function(err) { callback(); }); } callback(); }`},
	}, []InvalidTestCase{
		{
			Code: `function a(err) { if (err) { callback (err); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code: `function a(callback) { if (typeof callback !== 'undefined') { callback(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    63,
				},
			},
		},
		{
			Code: `function a(callback) { if (typeof callback !== 'undefined') callback();  }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    61,
				},
			},
		},
		{
			Code: `function a(callback) { if (err) { callback(); horse && horse(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    35,
				},
			},
		},
		{
			Code:            `var x = (err) => { if (err) { callback (err); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    31,
				},
			},
		},
		{
			Code:            `var x = { x(err) { if (err) { callback (err); } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    31,
				},
			},
		},
		{
			Code: `function x(err) { if (err) {
 log();
 callback(err); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      3,
					Column:    2,
				},
			},
		},
		{
			Code:            `var x = { x(err) { if (err) { callback && callback (err); } } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    43,
				},
			},
		},
		{
			Code: `function a(err) { callback (err); callback(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code: `function a(err) { callback (err); horse(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    19,
				},
			},
		},
		{
			Code: `function a(err) { if (err) { callback (err); horse(); return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:            `var a = (err) => { callback (err); callback(); }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    20,
				},
			},
		},
		{
			Code: `function a(err) { if (err) { callback (err); } else if (x) { callback(err); return; } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code: `function x(err) { if (err) { return callback(); }
else if (abc) {
callback(); }
else {
return callback(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code:            `class x { horse() { if (err) { callback(); } callback(); } } `,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    32,
				},
			},
		},
		{
			Code: `function x(err) { if (err) { callback() } else { callback() } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    50,
				},
			},
		},
		{
			Code: `function x(err) { if (err) return callback(); else callback(); }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    52,
				},
			},
		},
		{
			Code:            `() => { if (x) { callback(); } }`,
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    18,
				},
			},
		},
		{
			Code: `function b() { switch(x) { case 'horse': callback(); } }`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    42,
				},
			},
		},
		{
			Code:    `function a() { switch(x) { case 'horse': move(); } }`,
			Options: "[[\"move\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    42,
				},
			},
		},
		{
			Code:    `var x = function() { while(x) { move(); } }`,
			Options: "[[\"move\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    33,
				},
			},
		},
		{
			Code:    `function x() { for (var i = 0; i < 10; i++) { move(); } }`,
			Options: "[[\"move\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    47,
				},
			},
		},
		{
			Code:    `var x = function() { for (var i = 0; i < 10; i++) move(); }`,
			Options: "[[\"move\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    51,
				},
			},
		},
		{
			Code:    `function a(err) { if (err) { obj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:    `function a(err) { if (err) { obj.prop.method(err); } }`,
			Options: "[[\"obj.prop.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:    `function a(err) { if (err) { obj.prop.method(err); } otherObj.prop.method() }`,
			Options: "[[\"obj.prop.method\",\"otherObj.prop.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code:    `function a(err) { if (err) { /*comment*/obj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    41,
				},
			},
		},
		{
			Code: `function a(err) { if (err) { //comment
obj.method(err); } }`,
			Options: "[[\"obj.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code:    `function a(err) { if (err) { obj.method(err); /*comment*/ } }`,
			Options: "[[\"obj.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
		{
			Code: `function a(err) { if (err) { obj.method(err); //comment
 } }`,
			Options: "[[\"obj.method\"]]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "missingReturn",
					Line:      1,
					Column:    30,
				},
			},
		},
	})
}
