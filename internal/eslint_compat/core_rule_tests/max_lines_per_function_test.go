// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestMaxLinesPerFunctionRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":6}}", "max-lines-per-function", []ValidTestCase{
		{
			Code: `var x = 5;
var x = 2;
`,
			Options: "[1]",
		},
		{
			Code:    `function name() {}`,
			Options: "[1]",
		},
		{
			Code: `function name() {
var x = 5;
var x = 2;
}`,
			Options: "[4]",
		},
		{
			Code:    `const bar = () => 2`,
			Options: "[1]",
		},
		{
			Code: `const bar = () => {
const x = 2 + 1;
return x;
}`,
			Options: "[4]",
		},
		{
			Code: `function name() {
var x = 5;
	
 

var x = 2;
}`,
			Options: "[{\"max\":7,\"skipComments\":false,\"skipBlankLines\":false}]",
		},
		{
			Code: `function name() {
var x = 5;
	
 

var x = 2;
}`,
			Options: "[{\"max\":4,\"skipComments\":false,\"skipBlankLines\":true}]",
		},
		{
			Code: `function name() {
var x = 5;
var x = 2; // end of line comment
}`,
			Options: "[{\"max\":4,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `function name() {
var x = 5;
// a comment on it's own line
var x = 2; // end of line comment
}`,
			Options: "[{\"max\":4,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `function name() {
var x = 5;
// a comment on it's own line
// and another line comment
var x = 2; // end of line comment
}`,
			Options: "[{\"max\":4,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `function name() {
var x = 5;
/* a 
 multi 
 line 
 comment 
*/

var x = 2; // end of line comment
}`,
			Options: "[{\"max\":5,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `function name() {
var x = 5;
	/* a comment with leading whitespace */
/* a comment with trailing whitespace */		
	/* a comment with trailing and leading whitespace */		
/* a 
 multi 
 line 
 comment 
*/		

var x = 2; // end of line comment
}`,
			Options: "[{\"max\":5,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `function foo(
    aaa = 1,
    bbb = 2,
    ccc = 3
) {
    return aaa + bbb + ccc
}`,
			Options: "[{\"max\":7,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `(
function
()
{
}
)
()`,
			Options: "[{\"max\":4,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":true}]",
		},
		{
			Code: `function parent() {
var x = 0;
function nested() {
    var y = 0;
    x = 2;
}
if ( x === y ) {
    x++;
}
}`,
			Options: "[{\"max\":10,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `class foo {
    method() {
        let y = 10;
        let x = 20;
        return y + x;
    }
}`,
			Options: "[{\"max\":5,\"skipComments\":true,\"skipBlankLines\":false}]",
		},
		{
			Code: `(function(){
    let x = 0;
    let y = 0;
    let z = x + y;
    let foo = {};
    return bar;
}());`,
			Options: "[{\"max\":7,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":true}]",
		},
		{
			Code: `(function(){
    let x = 0;
    let y = 0;
    let z = x + y;
    let foo = {};
    return bar;
}());`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":false}]",
		},
		{
			Code: `(() => {
    let x = 0;
    let y = 0;
    let z = x + y;
    let foo = {};
    return bar;
})();`,
			Options: "[{\"max\":7,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":true}]",
		},
		{
			Code: `(() => {
    let x = 0;
    let y = 0;
    let z = x + y;
    let foo = {};
    return bar;
})();`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":false}]",
		},
	}, []InvalidTestCase{
		{
			Code: `function name() {
}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `var func = function() {
}`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `const bar = () => {
const x = 2 + 1;
return x;
}`,
			Options: "[3]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `const bar = () =>
 2`,
			Options: "[1]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `() => {foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
}`,
			Options: "[{}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() {
var x = 5;
	
 

var x = 2;
}`,
			Options: "[{\"max\":6,\"skipComments\":false,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() {` + "\r" + `
var x = 5;` + "\r" + `
	` + "\r" + `
 ` + "\r" + `
` + "\r" + `
var x = 2;` + "\r" + `
}`,
			Options: "[{\"max\":6,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() {
var x = 5;
	
 

var x = 2;
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() {` + "\r" + `
var x = 5;` + "\r" + `
	` + "\r" + `
 ` + "\r" + `
` + "\r" + `
var x = 2;` + "\r" + `
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() { // end of line comment
var x = 5; /* mid line comment */
	// single line comment taking up whole line
	
 

var x = 2;
}`,
			Options: "[{\"max\":6,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() { // end of line comment
var x = 5; /* mid line comment */
	// single line comment taking up whole line
	
 

var x = 2;
}`,
			Options: "[{\"max\":1,\"skipComments\":true,\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function name() { // end of line comment
var x = 5; /* mid line comment */
	// single line comment taking up whole line
	
 

var x = 2;
}`,
			Options: "[{\"max\":1,\"skipComments\":false,\"skipBlankLines\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function foo(
    aaa = 1,
    bbb = 2,
    ccc = 3
) {
    return aaa + bbb + ccc
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `(
function
()
{
}
)
()`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function parent() {
var x = 0;
function nested() {
    var y = 0;
    x = 2;
}
if ( x === y ) {
    x++;
}
}`,
			Options: "[{\"max\":9,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `function parent() {
var x = 0;
function nested() {
    var y = 0;
    x = 2;
}
if ( x === y ) {
    x++;
}
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `class foo {
    method() {
        let y = 10;
        let x = 20;
        return y + x;
    }
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `class A {
    static
    foo
    (a) {
        return a
    }
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `var obj = {
    get
    foo
    () {
        return 1
    }
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `var obj = {
    set
    foo
    ( val ) {
        this._foo = val;
    }
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `class A {
    static
    [
        foo +
            bar
    ]
    (a) {
        return a
    }
}`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `(function(){
    let x = 0;
    let y = 0;
    let z = x + y;
    let foo = {};
    return bar;
}());`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
		{
			Code: `(() => {
    let x = 0;
    let y = 0;
    let z = x + y;
    let foo = {};
    return bar;
})();`,
			Options: "[{\"max\":2,\"skipComments\":true,\"skipBlankLines\":false,\"IIFEs\":true}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "exceed",
				},
			},
		},
	})
}
