// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestDotLocationRule(t *testing.T) {
	RunRuleTester(t, "{\"languageOptions\":{\"ecmaVersion\":5,\"sourceType\":\"script\"}}", "dot-location", []ValidTestCase{
		{Code: `obj.
prop`},
		{Code: `obj. 
prop`},
		{Code: `obj.
 prop`},
		{Code: `(obj).
prop`},
		{Code: `obj
['prop']`},
		{Code: `obj['prop']`},
		{
			Code: `obj.
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `obj
.prop`,
			Options: "[\"property\"]",
		},
		{
			Code: `(obj)
.prop`,
			Options: "[\"property\"]",
		},
		{
			Code:    `obj . prop`,
			Options: "[\"object\"]",
		},
		{
			Code:    `obj /* a */ . prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `obj . 
prop`,
			Options: "[\"object\"]",
		},
		{
			Code:    `obj . prop`,
			Options: "[\"property\"]",
		},
		{
			Code:    `obj . /* a */ prop`,
			Options: "[\"property\"]",
		},
		{
			Code: `obj
. prop`,
			Options: "[\"property\"]",
		},
		{
			Code: `f(a
).prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `` + "`" + `
` + "`" + `.prop`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
		},
		{
			Code:    `obj[prop]`,
			Options: "[\"object\"]",
		},
		{
			Code: `obj
[prop]`,
			Options: "[\"object\"]",
		},
		{
			Code: `obj[
prop]`,
			Options: "[\"object\"]",
		},
		{
			Code: `obj
[
prop
]`,
			Options: "[\"object\"]",
		},
		{
			Code:    `obj[prop]`,
			Options: "[\"property\"]",
		},
		{
			Code: `obj
[prop]`,
			Options: "[\"property\"]",
		},
		{
			Code: `obj[
prop]`,
			Options: "[\"property\"]",
		},
		{
			Code: `obj
[
prop
]`,
			Options: "[\"property\"]",
		},
		{
			Code:    `(obj).prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `(obj).
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `(obj
).
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `(
obj
).
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `((obj
)).
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `(f(a)
).
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `((obj
)
).
prop`,
			Options: "[\"object\"]",
		},
		{
			Code: `(
a &&
b()
).toString()`,
			Options: "[\"object\"]",
		},
		{
			Code:            `obj?.prop`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `obj?.[key]`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj?.
prop`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj
?.[key]`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj?.
[key]`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj?.[
key]`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `obj?.prop`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code:            `obj?.[key]`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj
?.prop`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj
?.[key]`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj?.
[key]`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `obj?.[
key]`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
		{
			Code: `class C { #a; foo() { this.
#a; } }`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
		{
			Code: `class C { #a; foo() { this
.#a; } }`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
		},
	}, []InvalidTestCase{
		{
			Code: `obj
.property`,
			Output: `obj.
property`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
					EndLine:   2,
					EndColumn: 2,
				},
			},
		},
		{
			Code: `obj.
property`,
			Output: `obj
.property`,
			Options: "[\"property\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotBeforeProperty",
					Line:      1,
					Column:    4,
					EndLine:   1,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `(obj).
property`,
			Output: `(obj)
.property`,
			Options: "[\"property\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotBeforeProperty",
					Line:      1,
					Column:    6,
				},
			},
		},
		{
			Code: `5
.toExponential()`,
			Output: `5 .
toExponential()`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `-5
.toExponential()`,
			Output: `-5 .
toExponential()`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `01
.toExponential()`,
			Output: `01.
toExponential()`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `08
.toExponential()`,
			Output: `08 .
toExponential()`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `0190
.toExponential()`,
			Output: `0190 .
toExponential()`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `5_000
.toExponential()`,
			Output: `5_000 .
toExponential()`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `5_000_00
.toExponential()`,
			Output: `5_000_00 .
toExponential()`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `5.000_000
.toExponential()`,
			Output: `5.000_000.
toExponential()`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `0b1010_1010
.toExponential()`,
			Output: `0b1010_1010.
toExponential()`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2021}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `foo /* a */ . /* b */ 
 /* c */ bar`,
			Output: `foo /* a */  /* b */ 
 /* c */ .bar`,
			Options: "[\"property\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotBeforeProperty",
					Line:      1,
					Column:    13,
				},
			},
		},
		{
			Code: `foo /* a */ 
 /* b */ . /* c */ bar`,
			Output: `foo. /* a */ 
 /* b */  /* c */ bar`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    10,
				},
			},
		},
		{
			Code: `f(a
)
.prop`,
			Output: `f(a
).
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `` + "`" + `
` + "`" + `
.prop`,
			Output: `` + "`" + `
` + "`" + `.
prop`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":6}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `(a
)
.prop`,
			Output: `(a
).
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `(a
)
.
prop`,
			Output: `(a
).

prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `(f(a)
)
.prop`,
			Output: `(f(a)
).
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `(f(a
)
)
.prop`,
			Output: `(f(a
)
).
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `((obj
))
.prop`,
			Output: `((obj
)).
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `((obj
)
)
.prop`,
			Output: `((obj
)
).
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `(a
) /* a */ 
.prop`,
			Output: `(a
). /* a */ 
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    1,
				},
			},
		},
		{
			Code: `(a
)
/* a */
.prop`,
			Output: `(a
).
/* a */
prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      4,
					Column:    1,
				},
			},
		},
		{
			Code: `(a
)
/* a */.prop`,
			Output: `(a
).
/* a */prop`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      3,
					Column:    8,
				},
			},
		},
		{
			Code: `(5)
.toExponential()`,
			Output: `(5).
toExponential()`,
			Options: "[\"object\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
					Line:      2,
					Column:    1,
				},
			},
		},
		{
			Code: `obj
?.prop`,
			Output: `obj?.
prop`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
				},
			},
		},
		{
			Code: `10
?.prop`,
			Output: `10?.
prop`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
				},
			},
		},
		{
			Code: `obj?.
prop`,
			Output: `obj
?.prop`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotBeforeProperty",
				},
			},
		},
		{
			Code: `class C { #a; foo() { this
.#a; } }`,
			Output: `class C { #a; foo() { this.
#a; } }`,
			Options:         "[\"object\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotAfterObject",
				},
			},
		},
		{
			Code: `class C { #a; foo() { this.
#a; } }`,
			Output: `class C { #a; foo() { this
.#a; } }`,
			Options:         "[\"property\"]",
			LanguageOptions: "{\"ecmaVersion\":2022}",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "expectedDotBeforeProperty",
				},
			},
		},
	})
}
