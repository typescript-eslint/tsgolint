// Code generated by gen-eslint-core-rule-tests.ts. DO NOT EDIT.

package core_rule_tests

import (
	"testing"
)

func TestEqeqeqRule(t *testing.T) {
	RunRuleTester(t, "{}", "eqeqeq", []ValidTestCase{
		{Code: `a === b`},
		{Code: `a !== b`},
		{
			Code:    `a === b`,
			Options: "[\"always\"]",
		},
		{
			Code:    `typeof a == 'number'`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `'string' != typeof a`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `'hello' != 'world'`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `2 == 3`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `true == true`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `null == a`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `a == null`,
			Options: "[\"smart\"]",
		},
		{
			Code:    `null == a`,
			Options: "[\"allow-null\"]",
		},
		{
			Code:    `a == null`,
			Options: "[\"allow-null\"]",
		},
		{
			Code:    `a == null`,
			Options: "[\"always\",{\"null\":\"ignore\"}]",
		},
		{
			Code:    `a != null`,
			Options: "[\"always\",{\"null\":\"ignore\"}]",
		},
		{
			Code:    `a !== null`,
			Options: "[\"always\",{\"null\":\"ignore\"}]",
		},
		{
			Code:    `a === null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
		},
		{
			Code:    `a !== null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
		},
		{
			Code:    `null === null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
		},
		{
			Code:    `null !== null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
		},
		{
			Code:    `a == null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
		},
		{
			Code:    `a != null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
		},
		{
			Code:    `null == null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
		},
		{
			Code:    `null != null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
		},
		{
			Code:            `foo === /abc/u`,
			Options:         "[\"always\",{\"null\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2015}",
		},
		{
			Code:            `foo === 1n`,
			Options:         "[\"always\",{\"null\":\"never\"}]",
			LanguageOptions: "{\"ecmaVersion\":2020}",
		},
	}, []InvalidTestCase{
		{
			Code: `a == b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a != b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `typeof a == 'number'`,
			Output: `typeof a === 'number'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `typeof a == 'number'`,
			Output:  `typeof a === 'number'`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `'string' != typeof a`,
			Output: `'string' !== typeof a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `true == true`,
			Output: `true === true`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `2 == 3`,
			Output: `2 === 3`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `2 == 3`,
			Output:  `2 === 3`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:   `'hello' != 'world'`,
			Output: `'hello' !== 'world'`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `'hello' != 'world'`,
			Output:  `'hello' !== 'world'`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a == null`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `a == null`,
			Options: "[\"always\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `null != a`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `true == 1`,
			Options: "[\"smart\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `0 != '1'`,
			Options: "[\"smart\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `'wee' == /wee/`,
			Options: "[\"smart\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `typeof a == 'number'`,
			Output:  `typeof a === 'number'`,
			Options: "[\"allow-null\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `'string' != typeof a`,
			Output:  `'string' !== typeof a`,
			Options: "[\"allow-null\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `'hello' != 'world'`,
			Output:  `'hello' !== 'world'`,
			Options: "[\"allow-null\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `2 == 3`,
			Output:  `2 === 3`,
			Options: "[\"allow-null\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `true == true`,
			Output:  `true === true`,
			Options: "[\"allow-null\"]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `true == null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `true != null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `null == null`,
			Output:  `null === null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `null != null`,
			Output:  `null !== null`,
			Options: "[\"always\",{\"null\":\"always\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `true === null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `true !== null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `null === null`,
			Output:  `null == null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code:    `null !== null`,
			Output:  `null != null`,
			Options: "[\"always\",{\"null\":\"never\"}]",
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
				},
			},
		},
		{
			Code: `a
==
b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      2,
				},
			},
		},
		{
			Code: `(a) == b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `(a) != b`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `a == (b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `a != (b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `(a) == (b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `(a) != (b)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `(a == b) == (c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `(a != b) != (c)`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Line:      1,
				},
				{
					MessageId: "unexpected",
					Line:      1,
				},
			},
		},
		{
			Code: `a == b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    3,
					EndColumn: 5,
				},
			},
		},
		{
			Code: `a!=b;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    2,
					EndColumn: 4,
				},
			},
		},
		{
			Code: `(a + b) == c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    9,
					EndColumn: 11,
				},
			},
		},
		{
			Code: `(a + b)  !=  c;`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    10,
					EndColumn: 12,
				},
			},
		},
		{
			Code:   `((1) )  ==  (2);`,
			Output: `((1) )  ===  (2);`,
			Errors: []InvalidTestCaseError{
				{
					MessageId: "unexpected",
					Column:    9,
					EndColumn: 11,
				},
			},
		},
	})
}
